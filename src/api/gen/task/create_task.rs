//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::task::TaskService;

impl<'c, IStore: Store, IClient: HttpClient> TaskService<'c, IStore, IClient> {
    /// **api 版本: 2024-04-15T10:59:39+00:00**
    ///
    /// ## 创建任务
    ///
    /// 该接口可以创建一个任务，支持填写任务的基本信息，包括任务的标题，描述及协作者等。
    ///
    /// 在此基础上，创建任务时可以设置截止时间和重复规则，将任务设置为定期执行的重复任务。通过添加协作者，则可以让其他用户协同完成该任务。
    ///
    /// 此外，接口也提供了一些支持自定义内容的字段，调用方可以实现定制化效果，如完成任务后跳转到指定结束界面。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/task-v1/task/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Ftask-v1%2Ftask%2Fcreate>
    pub async fn create_task(
        &self,
        req: CreateTaskReq,
    ) -> Result<(CreateTaskResp, CommonResponse), Error> {
        self.create_task_with_opt(req, Default::default()).await
    }

    /// 参见 [create_task](#method.create_task) 函数
    pub async fn create_task_with_opt(
        &self,
        req: CreateTaskReq,
        method_option: MethodOption,
    ) -> Result<(CreateTaskResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_task(&req) {
                tracing::info!("[lark] Task#CreateTask **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Task#CreateTask call api");

        let req = ApiRequest {
            scope: "Task",
            api: "CreateTask",
            method: http::Method::POST,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/task/v1/tasks",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateTaskRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateTaskReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 任务的标题，类型为文本字符串。
    ///
    /// 如果要在任务标题中插入 URL 或者 @某个用户，请使用rich_summary字段。
    ///
    /// 创建任务时，任务标题(summary字段)和任务富文本标题(rich_summary字段)不能同时为空，需要至少填充其中一个字段。
    ///
    /// <md-alert>
    ///
    /// 任务标题和任务富文本标题同时存在时只使用富文本标题。
    ///
    /// </md-alert>
    ///
    /// **示例值**: "完成本季度OKR编写"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[api(kind = "body", name = "summary")]
    pub summary: Option<String>,
    /// 任务的描述，类型为文本字符串。
    ///
    /// 如果要在任务描述中插入 URL 或者 @某个用户，请使用rich_description字段。
    ///
    /// <md-alert>
    ///
    /// 任务备注和任务富文本备注同时存在时只使用富文本备注。
    ///
    /// </md-alert>
    ///
    /// **示例值**: "对本次会议内容复盘总结，编写更新本季度OKR"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[api(kind = "body", name = "description")]
    pub description: Option<String>,
    /// 附属信息。
    ///
    /// 接入方可以传入base64 编码后的自定义的数据。用户如果需要对当前任务备注信息，但对外不显示，可使用该字段进行存储。
    ///
    /// 该数据会在获取任务详情时，原样返回给用户。
    ///
    /// **示例值**: "dGVzdA=="
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[api(kind = "body", name = "extra")]
    pub extra: Option<String>,
    /// 任务的截止时间设置
    #[api(kind = "body", name = "due")]
    pub due: Option<DueSubReq>,
    /// 任务关联的第三方平台来源信息
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "origin")]
    pub origin: OriginSubReq,
    /// 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false
    ///
    /// <md-alert>
    ///
    /// 已经废弃，向前兼容故仍然保留，但不推荐使用
    ///
    /// </md-alert>
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "can_edit")]
    pub can_edit: Option<bool>,
    /// 自定义完成配置。
    ///
    /// 此字段用于设置完成任务时的页面跳转，或展示提示语。详细参见：[任务字段补充说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/Supplementary-directions-of-task-fields)
    ///
    /// **示例值**: "{\"custom_complete\":{\"android\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[api(kind = "body", name = "custom")]
    pub custom: Option<String>,
    /// 创建任务时添加的执行者用户id列表。
    ///
    /// 传入的值为 user_id 或 open_id ，由user_id_type 决定。user_id和open_id的获取可见文档：[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **示例值**: "["ou_1400208f15333e20e11339d39067844b", "ou_84ed6312949945c8ae6168f10829e9e6"]"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "collaborator_ids")]
    pub collaborator_ids: Vec<Option<String>>,
    /// 创建任务时添加的关注者用户id列表。
    ///
    /// 传入的值为 user_id 或 open_id ，由user_id_type 决定。user_id和open_id的获取可见文档：[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **示例值**: "["ou_1400208f15333e20e11339d39067844b", "ou_84ed6312949945c8ae6168f10829e9e6"]"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "follower_ids")]
    pub follower_ids: Vec<Option<String>>,
    /// 重复任务的规则表达式。
    ///
    /// 语法格式参见[RRule语法规范](https://www.ietf.org/rfc/rfc2445.txt) 4.3.10小节
    ///
    /// **示例值**: "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,TU,WE,TH,FR"
    #[api(kind = "body", name = "repeat_rule")]
    pub repeat_rule: Option<String>,
    /// 富文本任务标题。语法格式参见[Markdown模块](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/markdown-module)
    ///
    /// 。创建任务时，任务标题(summary字段)和任务富文本标题(rich_summary字段)不能同时为空，需要至少填充其中一个字段。
    ///
    /// **示例值**: "完成本季度OKR编写\[飞书开放平台](https://open.feishu.cn/)"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[api(kind = "body", name = "rich_summary")]
    pub rich_summary: Option<String>,
    /// 富文本任务备注。语法格式参见[Markdown模块](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/markdown-module)
    ///
    /// **示例值**: "对本次会议内容复盘总结，编写更新本季度OKR\[飞书开放平台](https://open.feishu.cn/)"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[api(kind = "body", name = "rich_description")]
    pub rich_description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DueSubReq {
    /// 表示截止时间的Unix时间戳（单位为秒）。
    ///
    /// **示例值**: "1623124318"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: Option<String>,
    /// 截止时间对应的时区。
    ///
    /// 传入值需要符合IANA Time Zone Database标准，规范见[Time Zone Database](https://www.iana.org/time-zones)。
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "timezone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timezone: Option<String>,
    /// 标记任务是否为全天任务。
    ///
    /// 包括如下取值：
    ///
    /// - true：表示是全天任务，全天任务的截止时间为当天 UTC 时间的 0 点。
    ///
    /// - false：表示不是全天任务。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_all_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_all_day: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OriginSubReq {
    /// 任务来源的名称。
    ///
    /// 用于在任务中心详情页展示。需要提供一个字典，支持多种语言名称映射。应用在使用不同语言时，导入来源也将展示对应的内容。详细参见：[任务字段补充说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/Supplementary-directions-of-task-fields)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{\"zh_cn\": \"IT 工作台\", \"en_us\": \"IT Workspace\"}"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1024` 字符
    #[serde(
        rename = "platform_i18n_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub platform_i18n_name: String,
    /// 任务关联的来源平台详情页链接
    #[serde(
        rename = "href",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub href: Option<HrefSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct HrefSubReq {
    /// 具体链接地址。
    ///
    /// URL仅支持解析http、https。详细参见：[任务字段补充说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/Supplementary-directions-of-task-fields)
    ///
    /// **示例值**: "https://support.feishu.com/internal/foo-bar"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1024` 字符
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: Option<String>,
    /// 链接对应的标题
    ///
    /// **示例值**: "反馈一个问题，需要协助排查"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `512` 字符
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateTaskRespInner {
    #[serde(flatten)]
    data: Option<CreateTaskResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateTaskResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 返回创建好的任务
    #[serde(
        rename = "task",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task: TaskSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TaskSubResp {
    /// 任务的唯一ID，例如"83912691-2e43-47fc-94a4-d512e03984fa"
    ///
    /// **示例值**: "83912691-2e43-47fc-94a4-d512e03984fa"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 任务的标题，类型为文本字符串。
    ///
    /// 如果要在任务标题中插入 URL 或者 @某个用户，请使用rich_summary字段。
    ///
    /// 创建任务时，任务标题(summary字段)和任务富文本标题(rich_summary字段)不能同时为空，需要至少填充其中一个字段。
    ///
    /// <md-alert>
    ///
    /// 任务标题和任务富文本标题同时存在时只使用富文本标题。
    ///
    /// </md-alert>
    ///
    /// **示例值**: "完成本季度OKR编写"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[serde(
        rename = "summary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub summary: String,
    /// 任务的描述，类型为文本字符串。
    ///
    /// 如果要在任务描述中插入 URL 或者 @某个用户，请使用rich_description字段。
    ///
    /// <md-alert>
    ///
    /// 任务备注和任务富文本备注同时存在时只使用富文本备注。
    ///
    /// </md-alert>
    ///
    /// **示例值**: "对本次会议内容复盘总结，编写更新本季度OKR"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 任务的完成时间戳（单位为秒），完成时间为0则表示任务尚未完成。
    ///
    /// 不支持部分完成，只有整个任务完成，该字段才会有非0值。
    ///
    /// **示例值**: "1623499200"
    #[serde(
        rename = "complete_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub complete_time: String,
    /// 任务的创建者 ID。
    ///
    /// 其中查询字段 user_id_type 是用于控制返回体中 creator_id 的类型，不传时默认返回 open_id。
    ///
    /// 特别的，使用tenant_access_token 调用接口时，如果是user_id_type是openid，则返回代表该应用身份的openid；当user_id_type为user_id时，不返回creator_id。原因是user_id代表一个真实飞书用户的id，应用身份没有user_id。使用user_access_token调用接口正常返回创建者。
    ///
    /// **示例值**: "ou_99e1a581b36ecc4862cbfbce473f346a"
    #[serde(
        rename = "creator_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub creator_id: String,
    /// 附属信息。
    ///
    /// 接入方可以传入base64 编码后的自定义的数据。用户如果需要对当前任务备注信息，但对外不显示，可使用该字段进行存储。
    ///
    /// 该数据会在获取任务详情时，原样返回给用户。
    ///
    /// **示例值**: "dGVzdA=="
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[serde(
        rename = "extra",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub extra: String,
    /// 任务的创建时间的Unix时间戳（单位为秒）
    ///
    /// **示例值**: "1623392486"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 任务的更新时间的Unix时间戳（单位为秒）
    ///
    /// 创建任务时update_time与create_time相同
    ///
    /// **示例值**: "1623392486"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 任务的截止时间设置
    #[serde(
        rename = "due",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub due: DueSubResp,
    /// 任务关联的第三方平台来源信息
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "origin",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub origin: OriginSubResp,
    /// 自定义完成配置。
    ///
    /// 此字段用于设置完成任务时的页面跳转，或展示提示语。详细参见：[任务字段补充说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/Supplementary-directions-of-task-fields)
    ///
    /// **示例值**: "{\"custom_complete\":{\"android\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[serde(
        rename = "custom",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom: String,
    /// 任务创建的来源
    ///
    /// **示例值**: "6"
    ///
    /// **可选值**:
    ///
    /// `UNKNOWN_SOURCE_TYPE`: 未知类型
    ///
    /// `TODO`: 来源任务中心创建
    ///
    /// `MESSENGER`: 来源消息转任务
    ///
    /// `DOC`: 来源云文档
    ///
    /// `DOC_PRODUCT`: 来源文档单品
    ///
    /// `PANO`: 来源PANO
    ///
    /// `OAPI`: 来源tenant_access_token创建的任务
    ///
    /// `OAPI_USER`: 来源user_access_token创建的任务
    ///
    /// `DOCX`: 来源新版云文档
    #[serde(
        rename = "source",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub source: i64,
    /// 任务的关注者
    ///
    /// **示例值**: "ou_03c21c80caea2c816665f8056dc59027"
    #[serde(
        rename = "followers",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub followers: Vec<FollowerSubResp>,
    /// 任务的执行者
    ///
    /// **示例值**: "ou_558d4999baae26e32aa2fd9bb228660b"
    #[serde(
        rename = "collaborators",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub collaborators: Vec<CollaboratorSubResp>,
    /// 创建任务时添加的执行者用户id列表。
    ///
    /// 传入的值为 user_id 或 open_id ，由user_id_type 决定。user_id和open_id的获取可见文档：[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **示例值**: "["ou_1400208f15333e20e11339d39067844b", "ou_84ed6312949945c8ae6168f10829e9e6"]"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[serde(
        rename = "collaborator_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub collaborator_ids: Vec<String>,
    /// 创建任务时添加的关注者用户id列表。
    ///
    /// 传入的值为 user_id 或 open_id ，由user_id_type 决定。user_id和open_id的获取可见文档：[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **示例值**: "["ou_1400208f15333e20e11339d39067844b", "ou_84ed6312949945c8ae6168f10829e9e6"]"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[serde(
        rename = "follower_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub follower_ids: Vec<String>,
    /// 重复任务的规则表达式。
    ///
    /// 语法格式参见[RRule语法规范](https://www.ietf.org/rfc/rfc2445.txt) 4.3.10小节
    ///
    /// **示例值**: "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,TU,WE,TH,FR"
    #[serde(
        rename = "repeat_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub repeat_rule: String,
    /// 富文本任务标题。语法格式参见[Markdown模块](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/markdown-module)
    ///
    /// 。创建任务时，任务标题(summary字段)和任务富文本标题(rich_summary字段)不能同时为空，需要至少填充其中一个字段。
    ///
    /// **示例值**: "完成本季度OKR编写\[飞书开放平台](https://open.feishu.cn/)"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[serde(
        rename = "rich_summary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rich_summary: String,
    /// 富文本任务备注。语法格式参见[Markdown模块](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/markdown-module)
    ///
    /// **示例值**: "对本次会议内容复盘总结，编写更新本季度OKR\[飞书开放平台](https://open.feishu.cn/)"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `65536` 字符
    #[serde(
        rename = "rich_description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rich_description: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DueSubResp {
    /// 表示截止时间的Unix时间戳（单位为秒）。
    ///
    /// **示例值**: "1623124318"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 截止时间对应的时区。
    ///
    /// 传入值需要符合IANA Time Zone Database标准，规范见[Time Zone Database](https://www.iana.org/time-zones)。
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "timezone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timezone: String,
    /// 标记任务是否为全天任务。
    ///
    /// 包括如下取值：
    ///
    /// - true：表示是全天任务，全天任务的截止时间为当天 UTC 时间的 0 点。
    ///
    /// - false：表示不是全天任务。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_all_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_all_day: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OriginSubResp {
    /// 任务来源的名称。
    ///
    /// 用于在任务中心详情页展示。需要提供一个字典，支持多种语言名称映射。应用在使用不同语言时，导入来源也将展示对应的内容。详细参见：[任务字段补充说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/Supplementary-directions-of-task-fields)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{\"zh_cn\": \"IT 工作台\", \"en_us\": \"IT Workspace\"}"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1024` 字符
    #[serde(
        rename = "platform_i18n_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub platform_i18n_name: String,
    /// 任务关联的来源平台详情页链接
    #[serde(
        rename = "href",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub href: HrefSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct HrefSubResp {
    /// 具体链接地址。
    ///
    /// URL仅支持解析http、https。详细参见：[任务字段补充说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/Supplementary-directions-of-task-fields)
    ///
    /// **示例值**: "https://support.feishu.com/internal/foo-bar"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1024` 字符
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 链接对应的标题
    ///
    /// **示例值**: "反馈一个问题，需要协助排查"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `512` 字符
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FollowerSubResp {
    /// 任务关注人 ID
    ///
    /// **示例值**: "ou_99e1a581b36ecc4862cbfbce473f3123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 要删除的关注人ID列表
    #[serde(
        rename = "id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_list: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CollaboratorSubResp {
    /// 任务执行者的 ID。
    ///
    /// 传入的值为 user_id 或 open_id，由user_id_type 决定。user_id和open_id的获取可见文档[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// <md-alert>
    ///
    /// 已经废弃，为了向前兼容早期只支持单次添加一个人的情况而保留，但不再推荐使用，建议使用id_list字段
    ///
    /// </md-alert>
    ///
    /// **示例值**: "ou_99e1a581b36ecc4862cbfbce473f1234"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 执行者的用户ID列表。
    ///
    /// 传入的值为 user_id 或 open_id，由user_id_type 决定。user_id和open_id的获取可见文档[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    #[serde(
        rename = "id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_list: Vec<String>,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::task::TaskServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateTaskReq) -> Result<(CreateTaskResp, CommonResponse), Error> + Send + Sync + 'static
    {
    }
    impl<
            T: Fn(CreateTaskReq) -> Result<(CreateTaskResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> TaskServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_task<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, CreateTaskReq, CreateTaskResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_task(
            &self,
            req: &CreateTaskReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateTaskReq, CreateTaskResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::task::create_task::{CreateTaskReq, CreateTaskResp, CreateTaskRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .task()
            .mock()
            .mock_create_task(|_| Ok((CreateTaskResp::default(), CommonResponse::default())))
            .build();
        let res = lark.task().create_task(CreateTaskReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.task().create_task(CreateTaskReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "summary": "每天喝八杯水，保持身心愉悦",
    "description": "多吃水果，多运动，健康生活，快乐工作。",
    "rich_summary": "富文本标题[飞书开放平台](https://open.feishu.cn)",
    "rich_description": "富文本备注[飞书开放平台](https://open.feishu.cn)",
    "extra": "dGVzdA==",
    "due": {
        "time": "1623124318",
        "timezone": "Asia/Shanghai",
        "is_all_day": false
    },
    "origin": {
        "platform_i18n_name": "{\"zh_cn\": \"IT 工作台\", \"en_us\": \"IT Workspace\"}",
        "href": {
            "url": "https://support.feishu.com/internal/foo-bar",
            "title": "反馈一个问题，需要协助排查"
        }
    },
    "can_edit":true,
    "custom": "{\"custom_complete\":{\"android\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}",
    "follower_ids": ["ou_13585843f02bc94923ed17a007cbc9b1", "ou_219a0611de2a639aa939ee97013f37a5"],
    "collaborator_ids": ["ou_13585843f02bc94923ed17a007cbc9b1", "ou_219a0611de2a639aa939ee97013f37a5"],
    "repeat_rule": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,TU,WE,TH,FR"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateTaskReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "task": {
            "can_edit": true,
            "complete_time": "0",
            "create_time": "1630304148",
            "creator_id": "ou_05b67908bc5d12a086e909a076f7f1b6",
            "description": "多吃水果，多运动，健康生活，快乐工作。",
            "rich_description": "富文本备注飞书开放平台\n",
            "due": {
                "time": "1623124318",
                "timezone": "Asia/Shanghai"
            },
            "extra": "dGVzdA==",
            "id": "68c9b9ff-d5b5-41bf-b407-6d956f23143f",
            "origin": {
                "href": {
                    "title": "反馈一个问题，需要协助排查",
                    "url": "https://support.feishu.com/internal/foo-bar"
                },
                "platform_i18n_name": "{\"en_us\":\"IT Workspace\",\"zh_cn\":\"IT 工作台\"}"
            },
            "summary": "每天喝八杯水，保持身心愉悦",
            "rich_summary": "富文本标题飞书开放平台\n",
            "custom": "{\"custom_complete\":{\"android\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.feishu.cn/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}",
            "update_time": "1630304149",
            "source": 6,
            "collaborators": [
                {
                    "id": "ou_13585843f02bc94923ed17a007cbc9b1"
                },
                {
                    "id": "ou_219a0611de2a639aa939ee97013f37a5"
                }
            ],
            "followers": [
                {
                    "id": "ou_13585843f02bc94923ed17a007cbc9b1"
                },
                {
                    "id": "ou_219a0611de2a639aa939ee97013f37a5"
                }
            ],
            "repeat_rule": "FREQ=WEEKLY;INTERVAL=1;BYDAY=MO,TU,WE,TH,FR"
        }
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateTaskRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
