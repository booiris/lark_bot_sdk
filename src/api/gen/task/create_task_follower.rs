//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::task::TaskService;

impl<'c, IStore: Store, IClient: HttpClient> TaskService<'c, IStore, IClient> {
    /// **api 版本: 2023-07-13T02:33:26+00:00**
    ///
    /// ## 新增关注人
    ///
    /// 该接口用于新增任务关注人。可以一次性添加多位关注人。关注人ID要使用表示用户的ID。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/task-v1/task-follower/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Ftask-v1%2Ftask-follower%2Fcreate>
    pub async fn create_task_follower(
        &self,
        req: CreateTaskFollowerReq,
    ) -> Result<(CreateTaskFollowerResp, CommonResponse), Error> {
        self.create_task_follower_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_task_follower](#method.create_task_follower) 函数
    pub async fn create_task_follower_with_opt(
        &self,
        req: CreateTaskFollowerReq,
        method_option: MethodOption,
    ) -> Result<(CreateTaskFollowerResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_task_follower(&req) {
                tracing::info!("[lark] Task#CreateTaskFollower **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Task#CreateTaskFollower call api");

        let req = ApiRequest {
            scope: "Task",
            api: "CreateTaskFollower",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/task/v1/tasks/:task_id/followers",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateTaskFollowerRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateTaskFollowerReq {
    /// 任务 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "83912691-2e43-47fc-94a4-d512e03984fa"
    #[api(kind = "path", name = "task_id")]
    pub task_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 任务关注人 ID
    ///
    /// **示例值**: "ou_99e1a581b36ecc4862cbfbce473f3123"
    #[api(kind = "body", name = "id")]
    pub id: Option<String>,
    /// 要删除的关注人ID列表
    ///
    /// **示例值**: "[
    ///
    /// "ou_550cc75233d8b7b9fcbdad65f34433f4", "ou_d1e9d27cf3235b40ca9a67c67ef088b0"
    ///
    /// ]"
    #[api(kind = "body", name = "id_list")]
    pub id_list: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateTaskFollowerRespInner {
    #[serde(flatten)]
    data: Option<CreateTaskFollowerResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateTaskFollowerResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 创建后的任务关注者
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "follower",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub follower: FollowerSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FollowerSubResp {
    /// 任务关注人 ID
    ///
    /// **示例值**: "ou_99e1a581b36ecc4862cbfbce473f3123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 要删除的关注人ID列表
    ///
    /// **示例值**: "[
    ///
    /// "ou_550cc75233d8b7b9fcbdad65f34433f4", "ou_d1e9d27cf3235b40ca9a67c67ef088b0"
    ///
    /// ]"
    #[serde(
        rename = "id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_list: Vec<String>,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::task::TaskServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateTaskFollowerReq) -> Result<(CreateTaskFollowerResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(CreateTaskFollowerReq) -> Result<(CreateTaskFollowerResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> TaskServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_task_follower<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, CreateTaskFollowerReq, CreateTaskFollowerResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_task_follower(
            &self,
            req: &CreateTaskFollowerReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateTaskFollowerReq, CreateTaskFollowerResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::task::create_task_follower::{
            CreateTaskFollowerReq, CreateTaskFollowerResp, CreateTaskFollowerRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .task()
            .mock()
            .mock_create_task_follower(|_| {
                Ok((CreateTaskFollowerResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .task()
            .create_task_follower(CreateTaskFollowerReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .task()
            .create_task_follower(CreateTaskFollowerReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "id": "ou_99e1a581b36ecc4862cbfbce473f3123",
    "id_list": [
        "ou_99e1a581b36ecc4862cbfbce473f3123"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateTaskFollowerReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "follower": {
            "id": "ou_99e1a581b36ecc4862cbfbce473f3123",
            "id_list": [
                "ou_99e1a581b36ecc4862cbfbce473f3123"
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateTaskFollowerRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
