//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/okr/batch_get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::okr::OkrService;

impl<'c, IStore: Store, IClient: HttpClient> OkrService<'c, IStore, IClient> {
    /// **api 版本: 2024-01-09T02:16:18+00:00**
    ///
    /// ## 批量获取 OKR
    ///
    /// 根据 OKR id 批量获取 OKR。
    ///
    /// 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限<md-perm
    ///
    /// href="https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN">以应用身份访问OKR信息</md-perm>
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/okr/batch_get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/okr-v1/okr/batch_get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fokr-v1%2Fokr%2Fbatch_get>
    pub async fn batch_get_okr(
        &self,
        req: BatchGetOkrReq,
    ) -> Result<(BatchGetOkrResp, CommonResponse), Error> {
        self.batch_get_okr_with_opt(req, Default::default()).await
    }

    /// 参见 [batch_get_okr](#method.batch_get_okr) 函数
    pub async fn batch_get_okr_with_opt(
        &self,
        req: BatchGetOkrReq,
        method_option: MethodOption,
    ) -> Result<(BatchGetOkrResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_batch_get_okr(&req) {
                tracing::info!("[lark] Okr#BatchGetOkr **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Okr#BatchGetOkr call api");

        let req = ApiRequest {
            scope: "Okr",
            api: "BatchGetOkr",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/okr/v1/okrs/batch_get",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchGetOkrRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchGetOkrReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_admin_id`: 以people_admin_id来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// OKR ID 列表，最多10个
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7043693679567028244"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `10` 字符
    #[api(kind = "query", name = "okr_ids", v_type = "list", option = "false")]
    pub okr_ids: Vec<String>,
    /// 请求OKR的语言版本（比如@的人名），lang=en_us/zh_cn，请求 Query中
    ///
    /// **示例值**: "zh_cn"
    #[api(kind = "query", name = "lang", v_type = "var", option = "false")]
    pub lang: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchGetOkrRespInner {
    #[serde(flatten)]
    data: Option<BatchGetOkrResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchGetOkrResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// OKR 列表
    #[serde(
        rename = "okr_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub okr_list: Vec<OkrBatchSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrBatchSubResp {
    /// id
    ///
    /// **示例值**: "11123123123123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// OKR的访问权限
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `no_permission`: 此时OKR只返回id
    ///
    /// `has_permission`: 返回OKR的其他具体字段
    #[serde(
        rename = "permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub permission: i64,
    /// period_id
    ///
    /// **示例值**: "11123123123123"
    #[serde(
        rename = "period_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub period_id: String,
    /// 名称
    ///
    /// **示例值**: "My OKR"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// Objective列表
    #[serde(
        rename = "objective_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub objective_list: Vec<OkrObjectiveSubResp>,
    /// OKR确认状态
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `not_fill`: 初始状态
    ///
    /// `fill_but_not_confirm`: 待提交/未提交
    ///
    /// `wait_for_confirm`: 待处理/待确认
    ///
    /// `no_permission`: 已拒绝/已建议
    ///
    /// `has_permission`: 已通过/已确认
    #[serde(
        rename = "confirm_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub confirm_status: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrObjectiveSubResp {
    /// Objective ID
    ///
    /// **示例值**: "1231231231231"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 权限
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `no_permission`: 此时OKR只返回id
    ///
    /// `has_permission`: 返回OKR的其他具体字段
    #[serde(
        rename = "permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub permission: i64,
    /// Objective 内容
    ///
    /// **示例值**: "Objective 内容"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// Objective 备注内容
    ///
    /// **示例值**: "Objective 进度记录内容"
    #[serde(
        rename = "progress_report",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_report: String,
    /// Objective 分数（0 - 100）
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score: i64,
    /// Objective的权重（0 - 100）
    ///
    /// **示例值**: "33.33"
    #[serde(
        rename = "weight",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub weight: f64,
    /// Objective进度
    #[serde(
        rename = "progress_rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate: OkrObjectiveProgressRateSubResp,
    /// Objective KeyResult 列表
    #[serde(
        rename = "kr_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub kr_list: Vec<OkrObjectiveKrSubResp>,
    /// 对齐到该Objective的Objective列表
    #[serde(
        rename = "aligned_objective_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub aligned_objective_list: Vec<OkrObjectiveAlignedObjectiveSubResp>,
    /// 该Objective对齐到的Objective列表
    #[serde(
        rename = "aligning_objective_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub aligning_objective_list: Vec<OkrObjectiveAlignedObjectiveSubResp>,
    /// 该Objective的进度列表
    #[serde(
        rename = "progress_record_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_record_list: Vec<ProgressRecordSimplifySubResp>,
    /// 最后一次进度百分比更新时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_rate_percent_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate_percent_last_updated_time: String,
    /// 最后一次状态更新时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_rate_status_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate_status_last_updated_time: String,
    /// 最后一次在侧边栏新增或者编辑进展的时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_record_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_record_last_updated_time: String,
    /// 最后一次编辑备注的时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_report_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_report_last_updated_time: String,
    /// 最后一次打分更新时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "score_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score_last_updated_time: String,
    /// 截止时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "deadline",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub deadline: String,
    /// 该Objective提到的人员列表
    #[serde(
        rename = "mentioned_user_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mentioned_user_list: Vec<OkrObjectiveAlignedObjectiveOwnerSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrObjectiveProgressRateSubResp {
    /// Objective 进度百分比 >= 0
    ///
    /// **示例值**: "50"
    #[serde(
        rename = "percent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub percent: i64,
    /// Objective 进度状态:
    ///
    /// - "-1" 暂无
    ///
    /// - "0" 正常
    ///
    /// - "1" 风险
    ///
    /// - "2" 延期
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrObjectiveKrSubResp {
    /// Key Result ID
    ///
    /// **示例值**: "1231231223"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// KeyResult 内容
    ///
    /// **示例值**: "KeyResult 内容"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// KeyResult打分（0 - 100）
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score: i64,
    /// KeyResult权重（0 - 100）（废弃）
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "weight",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub weight: i64,
    /// KeyResult的权重（0 - 100）
    ///
    /// **示例值**: "33.33"
    #[serde(
        rename = "kr_weight",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub kr_weight: f64,
    /// KR进度
    #[serde(
        rename = "progress_rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate: OkrObjectiveProgressRateSubResp,
    /// 该KR的进度列表
    #[serde(
        rename = "progress_record_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_record_list: Vec<ProgressRecordSimplifySubResp>,
    /// 最后一次进度百分比更新时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_rate_percent_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate_percent_last_updated_time: String,
    /// 最后一次状态更新时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_rate_status_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate_status_last_updated_time: String,
    /// 最后一次在侧边栏新增或者编辑进展的时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_record_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_record_last_updated_time: String,
    /// 最后一次编辑备注的时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "progress_report_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_report_last_updated_time: String,
    /// 最后一次打分更新时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "score_last_updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score_last_updated_time: String,
    /// 截止时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "deadline",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub deadline: String,
    /// 该Objective提到的人员列表
    #[serde(
        rename = "mentioned_user_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mentioned_user_list: Vec<OkrObjectiveAlignedObjectiveOwnerSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrObjectiveAlignedObjectiveSubResp {
    /// Objective的ID
    ///
    /// **示例值**: "1231231231213"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// OKR的ID
    ///
    /// **示例值**: "12323231231213"
    #[serde(
        rename = "okr_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub okr_id: String,
    /// 该Objective的Owner
    #[serde(
        rename = "owner",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner: OkrObjectiveAlignedObjectiveOwnerSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ProgressRecordSimplifySubResp {
    /// OKR 进展记录ID
    ///
    /// **示例值**: "7041469619902693396"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrObjectiveAlignedObjectiveOwnerSubResp {
    /// 用户的 open_id
    ///
    /// **示例值**: "od-asd2dasdasd"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
    /// 用户的 user_id
    ///
    /// **示例值**: "ou-ux987dsf6x"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::okr::OkrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(BatchGetOkrReq) -> Result<(BatchGetOkrResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(BatchGetOkrReq) -> Result<(BatchGetOkrResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> OkrServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_get_okr<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, BatchGetOkrReq, BatchGetOkrResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_get_okr(
            &self,
            req: &BatchGetOkrReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, BatchGetOkrReq, BatchGetOkrResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::okr::batch_get_okr::{BatchGetOkrReq, BatchGetOkrResp, BatchGetOkrRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .okr()
            .mock()
            .mock_batch_get_okr(|_| Ok((BatchGetOkrResp::default(), CommonResponse::default())))
            .build();
        let res = lark.okr().batch_get_okr(BatchGetOkrReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.okr().batch_get_okr(BatchGetOkrReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "okr_list": [
            {
                "confirm_status": 4,
                "id": "7072252816005349396",
                "name": "2022 年 3 月",
                "objective_list": [
                    {
                        "aligned_objective_list": [],
                        "aligning_objective_list": [],
                        "content": "需求@刘三",
                        "deadline": "1648656000000",
                        "id": "7073360513731690515",
                        "kr_list": [
                            {
                                "content": "1111@张三9",
                                "deadline": "1648656000000",
                                "id": "7073360471990140948",
                                "kr_weight": 50,
                                "mentioned_user_list": [
                                    {
                                        "open_id": "ou_a79faffdb6aee3618f0da4d42b192466",
                                        "user_id": "ou_a79faffdb6aee3618f0da4d42b192466"
                                    }
                                ],
                                "progress_rate": {
                                    "percent": 60,
                                    "status": "1"
                                },
                                "progress_rate_percent_last_updated_time": "1646907176099",
                                "progress_rate_status_last_updated_time": "1646907176099",
                                "progress_record_last_updated_time": "1646907586253",
                                "progress_record_list": [
                                    {
                                        "id": "7073411057431199764"
                                    },
                                    {
                                        "id": "7073410950174392340"
                                    },
                                    {
                                        "id": "7073360480580010004"
                                    },
                                    {
                                        "id": "7073360513731805203"
                                    }
                                ],
                                "progress_report_last_updated_time": "0",
                                "score": 100,
                                "score_last_updated_time": "1646907586244",
                                "weight": 50
                            }
                        ],
                        "mentioned_user_list": [
                            {
                                "open_id": "ou_ab08720df94e64045cc8c2b7694ef2a0",
                                "user_id": "ou_ab08720df94e64045cc8c2b7694ef2a0"
                            }
                        ],
                        "permission": 1,
                        "progress_rate": {
                            "percent": 30,
                            "status": "0"
                        },
                        "progress_rate_percent_last_updated_time": "1646907261326",
                        "progress_rate_status_last_updated_time": "1646907261326",
                        "progress_record_last_updated_time": "1646907590448",
                        "progress_record_list": [
                            {
                                "id": "7073410950447120403"
                            },
                            {
                                "id": "7073410950174474260"
                            },
                            {
                                "id": "7073360502990094355"
                            },
                            {
                                "id": "7073360502990061587"
                            }
                        ],
                        "progress_report": "红豆泥",
                        "progress_report_last_updated_time": "1646907387911",
                        "score": 100,
                        "score_last_updated_time": "1646907590472",
                        "weight": 40
                    }
                ],
                "period_id": "7067724095781142548",
                "permission": 1
            }
        ]
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchGetOkrRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
