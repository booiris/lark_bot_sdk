//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::okr::OkrService;

impl<'c, IStore: Store, IClient: HttpClient> OkrService<'c, IStore, IClient> {
    /// **api 版本: 2024-01-09T02:16:19+00:00**
    ///
    /// ## 获取 OKR 进展记录
    ///
    /// 根据 ID 获取 OKR 进展记录详情。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/progress_record/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/okr-v1/progress_record/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fokr-v1%2Fprogress_record%2Fget>
    pub async fn get_okr_progress_record(
        &self,
        req: GetOkrProgressRecordReq,
    ) -> Result<(GetOkrProgressRecordResp, CommonResponse), Error> {
        self.get_okr_progress_record_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_okr_progress_record](#method.get_okr_progress_record) 函数
    pub async fn get_okr_progress_record_with_opt(
        &self,
        req: GetOkrProgressRecordReq,
        method_option: MethodOption,
    ) -> Result<(GetOkrProgressRecordResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_okr_progress_record(&req) {
                tracing::info!("[lark] Okr#GetOkrProgressRecord **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Okr#GetOkrProgressRecord call api");

        let req = ApiRequest {
            scope: "Okr",
            api: "GetOkrProgressRecord",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/okr/v1/progress_records/:progress_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetOkrProgressRecordRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetOkrProgressRecordReq {
    /// 待查询的 OKR进展记录 ID
    ///
    /// **示例值**: "7041857032248410131"
    #[api(kind = "path", name = "progress_id")]
    pub progress_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetOkrProgressRecordRespInner {
    #[serde(flatten)]
    data: Option<GetOkrProgressRecordResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetOkrProgressRecordResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: ProgressRecordSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ProgressRecordSubResp {
    /// OKR 进展ID
    ///
    /// **示例值**: "7041469619902693396"
    #[serde(
        rename = "progress_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_id: String,
    /// 进展更新时间 毫秒
    ///
    /// **示例值**: "1618500278663"
    #[serde(
        rename = "modify_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modify_time: String,
    /// 进展 对应的 Content 详细内容
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: ContentBlockSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentBlockSubResp {
    /// 文档结构是按行排列的，每行内容是一个 Block
    #[serde(
        rename = "blocks",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub blocks: Vec<ContentBlockElementSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentBlockElementSubResp {
    /// 文档元素类型
    ///
    /// **示例值**: "paragraph"
    ///
    /// **可选值**:
    ///
    /// `paragraph`: 文本段落
    ///
    /// `gallery`: 图片
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 文本段落
    #[serde(
        rename = "paragraph",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub paragraph: ContentParagraphSubResp,
    /// 图片
    #[serde(
        rename = "gallery",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gallery: ContentGallerySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentParagraphSubResp {
    /// 段落样式
    #[serde(
        rename = "style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub style: ContentParagraphStyleSubResp,
    /// 段落元素组成一个段落
    #[serde(
        rename = "elements",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub elements: Vec<ContentParagraphElementSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentGallerySubResp {
    /// 图片元素
    #[serde(
        rename = "imageList",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub image_list: Vec<ContentImageItemSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentParagraphStyleSubResp {
    /// 有序列表/无序列表/任务列表
    #[serde(
        rename = "list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub list: ContentListSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentListSubResp {
    /// 列表类型
    ///
    /// **示例值**: "number"
    ///
    /// **可选值**:
    ///
    /// `number`: 有序列表
    ///
    /// `bullet`: 无序列表
    ///
    /// `checkBox`: 任务列表
    ///
    /// `checkedBox`: 已完成的任务列表
    ///
    /// `indent`: tab缩进
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 列表的缩进级别，支持指定一行的缩进 除代码块以外的列表都支持设置缩进，支持 1-16 级缩进，取值范围：[1,16]
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "indentLevel",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub indent_level: i64,
    /// 用于指定列表的行号，仅对有序列表和代码块生效 如果为有序列表设置了缩进，行号可能会显示为字母或者罗马数字
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentParagraphElementSubResp {
    /// 元素类型
    ///
    /// **示例值**: "textRun"
    ///
    /// **可选值**:
    ///
    /// `textRun`: 文本型元素
    ///
    /// `docsLink`: 文档链接型元素
    ///
    /// `person`: 艾特用户型元素
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 文本
    #[serde(
        rename = "textRun",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_run: ContentTextRunSubResp,
    /// 飞书云文档
    #[serde(
        rename = "docsLink",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub docs_link: ContentDocsLinkSubResp,
    /// 艾特用户
    #[serde(
        rename = "person",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub person: ContentPersonSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentImageItemSubResp {
    /// 图片 token，通过上传图片接口获取
    ///
    /// **示例值**: "boxcnOj88GDkmWGm2zsTyCBqoLb"
    #[serde(
        rename = "fileToken",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: String,
    /// 图片链接
    ///
    /// **示例值**: "https://bytedance.feishu.cn/drive/home/"
    #[serde(
        rename = "src",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub src: String,
    /// 图片宽，单位px
    ///
    /// **示例值**: "458"
    #[serde(
        rename = "width",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub width: f64,
    /// 图片高，单位px
    ///
    /// **示例值**: "372"
    #[serde(
        rename = "height",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub height: f64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentTextRunSubResp {
    /// 具体的文本内容
    ///
    /// **示例值**: "周报内容"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
    /// 文本内容的样式，支持 BIUS、颜色等
    #[serde(
        rename = "style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub style: ContentTextStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentDocsLinkSubResp {
    /// 飞书云文档链接地址
    ///
    /// **示例值**: "open.feishu.cn"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 飞书云文档标题
    ///
    /// **示例值**: "百度"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentPersonSubResp {
    /// 员工的OpenID
    ///
    /// **示例值**: "ou_3bbe8a09c20e89cce9bff989ed840674"
    #[serde(
        rename = "openId",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentTextStyleSubResp {
    /// 是否加粗
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "bold",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bold: bool,
    /// 是否删除
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "strikeThrough",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub strike_through: bool,
    /// 背景颜色
    #[serde(
        rename = "backColor",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub back_color: ContentColorSubResp,
    /// 字体颜色
    #[serde(
        rename = "textColor",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_color: ContentColorSubResp,
    /// 链接地址
    #[serde(
        rename = "link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub link: ContentLinkSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentColorSubResp {
    /// 红 取值范围[0,255]
    ///
    /// **示例值**: "216"
    #[serde(
        rename = "red",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub red: i64,
    /// 绿 取值范围[0,255]
    ///
    /// **示例值**: "191"
    #[serde(
        rename = "green",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub green: i64,
    /// 蓝 取值范围[0,255]
    ///
    /// **示例值**: "188"
    #[serde(
        rename = "blue",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub blue: i64,
    /// 透明度 取值范围[0,1]
    ///
    /// **示例值**: "0.1"
    #[serde(
        rename = "alpha",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub alpha: f64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContentLinkSubResp {
    /// 链接地址
    ///
    /// **示例值**: "open.feishu.cn"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::okr::OkrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetOkrProgressRecordReq) -> Result<(GetOkrProgressRecordResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetOkrProgressRecordReq,
                ) -> Result<(GetOkrProgressRecordResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> OkrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_okr_progress_record<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetOkrProgressRecordReq,
            GetOkrProgressRecordResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_okr_progress_record(
            &self,
            req: &GetOkrProgressRecordReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetOkrProgressRecordReq, GetOkrProgressRecordResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::okr::get_okr_progress_record::{
            GetOkrProgressRecordReq, GetOkrProgressRecordResp, GetOkrProgressRecordRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .okr()
            .mock()
            .mock_get_okr_progress_record(|_| {
                Ok((
                    GetOkrProgressRecordResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .okr()
            .get_okr_progress_record(GetOkrProgressRecordReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .okr()
            .get_okr_progress_record(GetOkrProgressRecordReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "content": {
            "blocks": [
                {
                    "paragraph": {
                        "elements": [
                            {
                                "textRun": {
                                    "style": {},
                                    "text": " "
                                },
                                "type": "textRun"
                            },
                            {
                                "person": {
                                    "openId": "ou_b1ba99a5340289d7af30839fd95ce1ee",
                                    "userId": "7012194140645721644"
                                },
                                "type": "person"
                            }
                        ]
                    },
                    "type": "paragraph"
                }
            ]
        },
        "modify_time": "1640677213095",
        "progress_id": "7046518160811425812"
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetOkrProgressRecordRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
