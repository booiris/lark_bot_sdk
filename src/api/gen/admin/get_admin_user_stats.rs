//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_user_stat/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::admin::AdminService;

impl<'c, IStore: Store, IClient: HttpClient> AdminService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-09T06:31:04+00:00**
    ///
    /// ## 获取用户维度的用户活跃和功能使用数据
    ///
    /// 用于获取用户维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议、邮箱功能的使用数据。
    ///
    /// - 只有企业自建应用才有权限调用此接口
    ///
    /// - 当天的数据会在第二天的早上九点半产出（UTC+8）
    ///
    /// - 数据权限范围配置：目前只支持给每个应用配置部门级别数据权限范围，默认包含子部门
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_user_stat/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/admin-v1/data-report-management/list-2>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fadmin-v1%2Fdata-report-management%2Flist-2>
    pub async fn get_admin_user_stats(
        &self,
        req: GetAdminUserStatsReq,
    ) -> Result<(GetAdminUserStatsResp, CommonResponse), Error> {
        self.get_admin_user_stats_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_admin_user_stats](#method.get_admin_user_stats) 函数
    pub async fn get_admin_user_stats_with_opt(
        &self,
        req: GetAdminUserStatsReq,
        method_option: MethodOption,
    ) -> Result<(GetAdminUserStatsResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_admin_user_stats(&req) {
                tracing::info!("[lark] Admin#GetAdminUserStats **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Admin#GetAdminUserStats call api");

        let req = ApiRequest {
            scope: "Admin",
            api: "GetAdminUserStats",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/admin/v1/admin_user_stats",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAdminUserStatsRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAdminUserStatsReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 部门ID类型
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `department_id`: 部门的 ID
    ///
    /// `open_department_id`: 部门的 Open ID
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 起始日期（包含），格式是YYYY-mm-dd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2020-02-15"
    #[api(kind = "query", name = "start_date", v_type = "var", option = "false")]
    pub start_date: String,
    /// 终止日期（包含），格式是YYYY-mm-dd。起止日期之间相差不能超过31天（包含31天）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2020-02-15"
    #[api(kind = "query", name = "end_date", v_type = "var", option = "false")]
    pub end_date: String,
    /// 部门的 ID，取决于department_id_type
    ///
    /// **示例值**: "od-382e2793cfc9471f892e8a672987654c"
    #[api(
        kind = "query",
        name = "department_id",
        v_type = "var",
        option = "false"
    )]
    pub department_id: String,
    /// 用户的open_id，user_id或者union_id，取决于user_id_type
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "query", name = "user_id", v_type = "var", option = "false")]
    pub user_id: String,
    /// 分页大小
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "2"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 需跨域访问的Geo数据，每个Geo仅包含本Geo数据，不传默认查本地数据，调用前需要先开通FG（cn、us、sg、jp），每次只能查一个Geo数据
    ///
    /// **示例值**: "cn"
    #[api(kind = "query", name = "target_geo", v_type = "var", option = "false")]
    pub target_geo: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAdminUserStatsRespInner {
    #[serde(flatten)]
    data: Option<GetAdminUserStatsResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAdminUserStatsResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 数据报表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<AdminUserStatSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AdminUserStatSubResp {
    /// 日期
    ///
    /// **示例值**: "2020-02-15"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: String,
    /// 用户ID
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 用户名
    ///
    /// **示例值**: "Zhang San"
    #[serde(
        rename = "user_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_name: String,
    /// 部门名
    ///
    /// **示例值**: "testcqlbfaaasdasdasd"
    #[serde(
        rename = "department_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_name: String,
    /// 部门路径
    ///
    /// **示例值**: "testkkk/testcqlbfaaasdasdasd"
    #[serde(
        rename = "department_path",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_path: String,
    /// 账号创建时间
    ///
    /// **示例值**: "2020-09-04 11:17:55"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 用户激活状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `inactive`: 未激活
    ///
    /// `active`: 已激活
    #[serde(
        rename = "user_active_flag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_active_flag: i64,
    /// 激活时间
    ///
    /// **示例值**: "2020-09-04 11:18:32"
    #[serde(
        rename = "register_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub register_time: String,
    /// 用户活跃状态，用户在飞书套件任意应用登陆，即为活跃。包括飞书即时消息，文档，日历，会议，开放平台等
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `inactive`: 无活跃
    ///
    /// `active`: 活跃
    #[serde(
        rename = "suite_active_flag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub suite_active_flag: i64,
    /// 最近活跃时间
    ///
    /// **示例值**: "2020-12-21 22:21:28"
    #[serde(
        rename = "last_active_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_active_time: String,
    /// 用户消息活跃状态，发生过如下事件，则认为该用户消息活跃：
    ///
    /// 发送消息、回复消息、reaction、转发消息、阅读消息、查看会话、发送表情消息等
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `inactive`: 无活跃
    ///
    /// `active`: 活跃
    #[serde(
        rename = "im_active_flag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub im_active_flag: i64,
    /// 发送消息数
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "send_messenger_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub send_messenger_num: i64,
    /// 用户云文档活跃状态，"发生过如下事件，则认为该用户云文档活跃：
    ///
    /// 事件1：文档/文件打开
    ///
    /// 事件2：进入docs相关页面：如文档详情页，space的各个页面"
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `inactive`: 无活跃
    ///
    /// `active`: 活跃
    #[serde(
        rename = "docs_active_flag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub docs_active_flag: i64,
    /// 创建文件数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "create_docs_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_docs_num: i64,
    /// 用户日历活跃状态，发生过如下事件，则认为用户日历活跃，包含进入日历、创建日程、收到日程邀请等
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `inactive`: 无活跃
    ///
    /// `active`: 活跃
    #[serde(
        rename = "cal_active_flag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cal_active_flag: i64,
    /// 创建日程数
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "create_cal_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_cal_num: i64,
    /// 用户音视频会议活跃状态，用户进入会中状态（不包含妙记和直播）即为活跃
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `inactive`: 无活跃
    ///
    /// `active`: 活跃
    #[serde(
        rename = "vc_active_flag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vc_active_flag: i64,
    /// 会议时长（分钟，不包含会议室的时长）
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "vc_duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vc_duration: i64,
    /// 活跃设备
    ///
    /// **示例值**: "'ios 14.2,-','ios 14.2,feishu 3.40.0-alpha'"
    #[serde(
        rename = "active_os",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active_os: String,
    /// 创建任务数
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "create_task_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_task_num: i64,
    /// 会议数
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "vc_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vc_num: i64,
    /// 飞书的应用类型名称
    ///
    /// **示例值**: "Feishu，Lark"
    #[serde(
        rename = "app_package_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app_package_type: String,
    /// 操作系统名称
    ///
    /// **示例值**: "iOS,Andorid,Windows"
    #[serde(
        rename = "os_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub os_name: String,
    /// 邮件总发件量
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "email_send_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_send_count: String,
    /// 邮件总收件量
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "email_receive_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_receive_count: String,
    /// 对外发件数
    ///
    /// **示例值**: "4"
    #[serde(
        rename = "email_send_ext_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_send_ext_count: String,
    /// 来自外部收件数
    ///
    /// **示例值**: "5"
    #[serde(
        rename = "email_receive_ext_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_receive_ext_count: String,
    /// 对内发件数
    ///
    /// **示例值**: "6"
    #[serde(
        rename = "email_send_in_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_send_in_count: String,
    /// 来自内部收件数
    ///
    /// **示例值**: "7"
    #[serde(
        rename = "email_receive_in_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_receive_in_count: String,
    /// 是否使用了大搜（0：未使用，1：有使用）
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "search_active_flag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub search_active_flag: i64,
    /// 总搜索次数（在飞书主端搜索框发起过搜索请求的会话数）
    ///
    /// **示例值**: "7"
    #[serde(
        rename = "total_search_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub total_search_count: String,
    /// 综搜次数（在飞书主端搜索框的综合搜索发起过搜索请求的会话数）
    ///
    /// **示例值**: "7"
    #[serde(
        rename = "quick_search_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub quick_search_count: String,
    /// 垂搜次数（在飞书主端搜索框的垂类搜索tab（例如消息tab、云文档tab）发起过搜索请求的会话数）
    ///
    /// **示例值**: "7"
    #[serde(
        rename = "tab_search_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tab_search_count: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::admin::AdminServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetAdminUserStatsReq) -> Result<(GetAdminUserStatsResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetAdminUserStatsReq) -> Result<(GetAdminUserStatsResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AdminServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_admin_user_stats<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetAdminUserStatsReq, GetAdminUserStatsResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_admin_user_stats(
            &self,
            req: &GetAdminUserStatsReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetAdminUserStatsReq, GetAdminUserStatsResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::admin::get_admin_user_stats::{
            GetAdminUserStatsReq, GetAdminUserStatsResp, GetAdminUserStatsRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .admin()
            .mock()
            .mock_get_admin_user_stats(|_| {
                Ok((GetAdminUserStatsResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .admin()
            .get_admin_user_stats(GetAdminUserStatsReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .admin()
            .get_admin_user_stats(GetAdminUserStatsReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "has_more": true,
        "page_token": "3",
        "items": [
            {
                "date": "2020-02-15",
                "user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
                "user_name": "Zhang San",
                "department_name": "testcqlbfaaasdasdasd",
                "department_path": "testkkk/testcqlbfaaasdasdasd",
                "create_time": "2020-09-04 11:17:55",
                "user_active_flag": 1,
                "register_time": "2020-09-04 11:18:32",
                "suite_active_flag": 1,
                "last_active_time": "2020-12-21 22:21:28",
                "im_active_flag": 1,
                "send_messenger_num": 0,
                "docs_active_flag": 1,
                "create_docs_num": 1,
                "cal_active_flag": 1,
                "create_cal_num": 0,
                "vc_active_flag": 1,
                "vc_duration": 0,
                "active_os": "'ios 14.2,-','ios 14.2,feishu 3.40.0-alpha'",
                "create_task_num": 0,
                "vc_num": 0,
                "app_package_type": "Feishu，Lark",
                "os_name": "iOS,Andorid,Windows",
                "email_send_count": "2",
                "email_receive_count": "3",
                "email_send_ext_count": "4",
                "email_receive_ext_count": "5",
                "email_send_in_count": "6",
                "email_receive_in_count": "7",
                "search_active_flag": 1,
                "total_search_count": "7",
                "quick_search_count": "7",
                "tab_search_count": "7"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetAdminUserStatsRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
