//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/batch_delete>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::calendar::CalendarService;

impl<'c, IStore: Store, IClient: HttpClient> CalendarService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T06:30:28+00:00**
    ///
    /// ## 删除日程参与人
    ///
    /// 调用该接口以当前身份（应用或用户）删除指定日程的一个或多个参与人。
    ///
    /// - 当前身份由 Header Authorization 的 Token 类型决定。tenant_access_token 指应用身份，user_access_token 指用户身份。
    ///
    /// - 如果使用应用身份调用该接口，则需要确保应用开启了[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。
    ///
    /// - 当前身份需要有日历的 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。你可以调用[查询日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，获取日历类型以及当前身份对该日历的访问权限。
    ///
    /// - 当前身份需要是日程的组织者。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/batch_delete>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event-attendee/batch_delete>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcalendar-v4%2Fcalendar-event-attendee%2Fbatch_delete>
    pub async fn delete_calendar_event_attendee(
        &self,
        req: DeleteCalendarEventAttendeeReq,
    ) -> Result<(DeleteCalendarEventAttendeeResp, CommonResponse), Error> {
        self.delete_calendar_event_attendee_with_opt(req, Default::default())
            .await
    }

    /// 参见 [delete_calendar_event_attendee](#method.delete_calendar_event_attendee) 函数
    pub async fn delete_calendar_event_attendee_with_opt(
        &self,
        req: DeleteCalendarEventAttendeeReq,
        method_option: MethodOption,
    ) -> Result<(DeleteCalendarEventAttendeeResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_delete_calendar_event_attendee(&req) {
                tracing::info!("[lark] Calendar#DeleteCalendarEventAttendee **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Calendar#DeleteCalendarEventAttendee call api");

        let req = ApiRequest {
            scope: "Calendar",
            api: "DeleteCalendarEventAttendee",
            method: http::Method::POST,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/batch_delete",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (DeleteCalendarEventAttendeeRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DeleteCalendarEventAttendeeReq {
    /// 日程对应的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
    #[api(kind = "path", name = "calendar_id")]
    pub calendar_id: String,
    /// 日程 ID。
    ///
    /// 创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。
    ///
    /// - [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)
    ///
    /// - [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "xxxxxxxxx_0"
    #[api(kind = "path", name = "event_id")]
    pub event_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 需要删除的参与人 ID 列表。
    ///
    /// 添加日程参与人时，会返回参与人 ID（attendee_id），你也可以调用[获取日程参与人列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list)接口，查询指定日程的参与人 ID。
    ///
    /// - 一次最多删除500个参与人（与delete_ids一起计算）
    ///
    /// **示例值**: "["user_xxxxx", "chat_xxxxx", "resource_xxxxx", "third_party_xxxxx"]"
    #[api(kind = "body", name = "attendee_ids")]
    pub attendee_ids: Vec<Option<String>>,
    /// 参与人类型对应的 ID，该 ID 是 attendee_ids 字段的补充字段。
    ///
    /// - 一次最多删除500个参与人（与attendee_ids一起计算）
    #[api(kind = "body", name = "delete_ids")]
    pub delete_ids: Vec<Option<CalendarEventAttendeeIdSubReq>>,
    /// 删除日程参与人时，是否向参与人发送 Bot 通知。
    ///
    /// **可选值有**：
    ///
    /// - true（默认值）：发送
    ///
    /// - false：不发送
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "need_notification")]
    pub need_notification: Option<bool>,
    /// 使用管理员身份访问时，要修改的实例（仅用于重复日程修改其中的一个实例，非重复日程无需填此字段）。
    ///
    /// **示例值**: "1647320400"
    #[api(kind = "body", name = "instance_start_time_admin")]
    pub instance_start_time_admin: Option<String>,
    /// 是否启用会议室管理员身份（需先在管理后台设置某人为会议室管理员）。
    ///
    /// **可选值有**：
    ///
    /// - true：启用
    ///
    /// - false（默认值）：不启用
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "is_enable_admin")]
    pub is_enable_admin: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CalendarEventAttendeeIdSubReq {
    /// 参与人类型。
    ///
    /// **示例值**: "user"
    ///
    /// **可选值**:
    ///
    /// `User`: 用户
    ///
    /// `Chat`: 群组
    ///
    /// `Resource`: 会议室
    ///
    /// `ThirdParty`: 外部邮箱
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: Option<String>,
    /// 用户 ID。当选择用户类型参与人（type 取值为 user）时，需要传入该参数。传入的用户 ID 类型需要和 user_id_type 的值保持一致。
    ///
    /// **示例值**: "ou_xxxxxxxx"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: Option<String>,
    /// 群组 ID。当选择群组类型参与人（type 取值为 chat）时，需要传入该参数。
    ///
    /// **示例值**: "oc_xxxxxxxxx"
    #[serde(
        rename = "chat_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_id: Option<String>,
    /// 会议室 ID。当选择会议室类型参与人（type 取值为 resource）时，需要传入该参数。
    ///
    /// **示例值**: "omm_xxxxxxxx"
    #[serde(
        rename = "room_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_id: Option<String>,
    /// 邮箱地址。当选择外部邮箱类型参与人（type 取值为 third_party）时，需要传入该参数。
    ///
    /// **示例值**: "wangwu@email.com"
    #[serde(
        rename = "third_party_email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub third_party_email: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct DeleteCalendarEventAttendeeRespInner {
    #[serde(flatten)]
    data: Option<DeleteCalendarEventAttendeeResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct DeleteCalendarEventAttendeeResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::calendar::CalendarServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            DeleteCalendarEventAttendeeReq,
        ) -> Result<(DeleteCalendarEventAttendeeResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    DeleteCalendarEventAttendeeReq,
                )
                    -> Result<(DeleteCalendarEventAttendeeResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CalendarServiceMocker<'c, IStore, IClient> {
        pub fn mock_delete_calendar_event_attendee<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DeleteCalendarEventAttendeeReq,
            DeleteCalendarEventAttendeeResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_delete_calendar_event_attendee(
            &self,
            req: &DeleteCalendarEventAttendeeReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                DeleteCalendarEventAttendeeReq,
                DeleteCalendarEventAttendeeResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::calendar::delete_calendar_event_attendee::{
            DeleteCalendarEventAttendeeReq, DeleteCalendarEventAttendeeResp,
            DeleteCalendarEventAttendeeRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .calendar()
            .mock()
            .mock_delete_calendar_event_attendee(|_| {
                Ok((
                    DeleteCalendarEventAttendeeResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .calendar()
            .delete_calendar_event_attendee(DeleteCalendarEventAttendeeReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .calendar()
            .delete_calendar_event_attendee(DeleteCalendarEventAttendeeReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "attendee_ids": [
        "user_xxxxx"
    ],
    "delete_ids": [
        {
            "type": "user",
            "user_id": "ou_xxxxxxxx",
            "chat_id": "oc_xxxxxxxxx",
            "room_id": "omm_xxxxxxxx",
            "third_party_email": "wangwu@email.com"
        }
    ],
    "need_notification": false,
    "instance_start_time_admin": "1647320400",
    "is_enable_admin": false
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::DeleteCalendarEventAttendeeReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<DeleteCalendarEventAttendeeRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
