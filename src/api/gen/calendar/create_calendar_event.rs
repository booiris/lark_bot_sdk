//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::calendar::CalendarService;

impl<'c, IStore: Store, IClient: HttpClient> CalendarService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T06:26:39+00:00**
    ///
    /// ## 创建日程
    ///
    /// 调用该接口以当前身份（应用或用户）在指定日历上创建一个日程。
    ///
    /// - 当前身份由 Header Authorization 的 Token 类型决定。tenant_access_token 指应用身份，user_access_token 指用户身份。
    ///
    /// - 如果使用应用身份调用该接口，则需要确保应用开启了[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。
    ///
    /// - 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。你可以调用[查询日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，获取日历类型以及当前身份对该日历的访问权限。
    ///
    /// - 该接口仅用于创建日程，如需为日程添加参与人或预约会议室，则需调用[添加日程参与人](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/create)接口。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcalendar-v4%2Fcalendar-event%2Fcreate>
    pub async fn create_calendar_event(
        &self,
        req: CreateCalendarEventReq,
    ) -> Result<(CreateCalendarEventResp, CommonResponse), Error> {
        self.create_calendar_event_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_calendar_event](#method.create_calendar_event) 函数
    pub async fn create_calendar_event_with_opt(
        &self,
        req: CreateCalendarEventReq,
        method_option: MethodOption,
    ) -> Result<(CreateCalendarEventResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_calendar_event(&req) {
                tracing::info!("[lark] Calendar#CreateCalendarEvent **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Calendar#CreateCalendarEvent call api");

        let req = ApiRequest {
            scope: "Calendar",
            api: "CreateCalendarEvent",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/calendar/v4/calendars/:calendar_id/events",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateCalendarEventRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateCalendarEventReq {
    /// 日历 ID。
    ///
    /// 创建共享日历时会返回日历 ID。你也可以调用以下接口获取某一日历的 ID。
    ///
    /// - [查询主日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary)
    ///
    /// - [查询日历列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list)
    ///
    /// - [搜索日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
    #[api(kind = "path", name = "calendar_id")]
    pub calendar_id: String,
    /// 创建日程的幂等 key，该 key 在应用和日历维度下唯一，用于避免重复创建资源。建议按照示例值的格式进行取值。
    ///
    /// **示例值**: "25fdf41b-8c80-2ce1-e94c-de8b5e7aa7e6"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `32` 字符- `128` 字符
    #[api(
        kind = "query",
        name = "idempotency_key",
        v_type = "var",
        option = "false"
    )]
    pub idempotency_key: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 日程标题。
    ///
    /// **示例值**: "日程标题"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `1000` 字符
    #[api(kind = "body", name = "summary")]
    pub summary: Option<String>,
    /// 日程描述。支持解析Html标签。
    ///
    /// **注意**：可以通过Html标签来实现部分富文本格式，但是客户端生成的富文本格式并不是通过Html标签实现，如果通过客户端生成富文本描述后，再通过API更新描述，会导致客户端原来的富文本格式丢失。
    ///
    /// **示例值**: "日程描述"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `40960` 字符
    #[api(kind = "body", name = "description")]
    pub description: Option<String>,
    /// 更新日程时，是否给日程参与人发送 Bot 通知。
    ///
    /// **可选值有**：
    ///
    /// - true：发送通知
    ///
    /// - false：不发送通知
    ///
    /// **默认值**：true
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "need_notification")]
    pub need_notification: Option<bool>,
    /// 日程开始时间。
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "start_time")]
    pub start_time: TimeInfoSubReq,
    /// 日程结束时间。
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "end_time")]
    pub end_time: TimeInfoSubReq,
    /// 视频会议信息。
    #[api(kind = "body", name = "vchat")]
    pub vchat: Option<VchatSubReq>,
    /// 日程公开范围，新建日程默认为 `default`。
    ///
    /// **注意**：该参数仅在新建日程时，对所有参与人生效。如果后续更新日程修改了该参数值，则仅对当前身份生效。
    ///
    /// **示例值**: "default"
    ///
    /// **可选值**:
    ///
    /// `Default`: 默认权限，即跟随日历权限，默认仅向他人显示是否忙碌
    ///
    /// `Public`: 公开，显示日程详情
    ///
    /// `Private`: 私密，仅自己可见详情
    #[api(kind = "body", name = "visibility")]
    pub visibility: Option<String>,
    /// 参与人权限。
    ///
    /// **默认值**：none
    ///
    /// **示例值**: "can_see_others"
    ///
    /// **可选值**:
    ///
    /// `None`: 无法编辑日程、无法邀请其他参与人、无法查看参与人列表
    ///
    /// `CanSeeOthers`: 无法编辑日程、无法邀请其他参与人、可以查看参与人列表
    ///
    /// `CanInviteOthers`: 无法编辑日程、可以邀请其他参与人、可以查看参与人列表
    ///
    /// `CanModifyEvent`: 可以编辑日程、可以邀请其他参与人、可以查看参与人列表
    #[api(kind = "body", name = "attendee_ability")]
    pub attendee_ability: Option<String>,
    /// 日程占用的忙闲状态，新建日程默认为 `busy`。
    ///
    /// **注意**：该参数仅在新建日程时，对所有参与人生效。如果后续更新日程时修改了该参数值，则仅对当前身份生效。
    ///
    /// **示例值**: "busy"
    ///
    /// **可选值**:
    ///
    /// `Busy`: 忙碌
    ///
    /// `Free`: 空闲
    #[api(kind = "body", name = "free_busy_status")]
    pub free_busy_status: Option<String>,
    /// 日程地点，不传值则默认为空。
    #[api(kind = "body", name = "location")]
    pub location: Option<EventLocationSubReq>,
    /// 日程颜色，取值通过颜色 RGB 值的 int32 表示。
    ///
    /// **注意**：
    ///
    /// - 该参数仅对当前身份生效。
    ///
    /// - 客户端展示时会映射到色板上最接近的一种颜色。
    ///
    /// - 取值为 0 或 -1 时，默认跟随日历颜色。
    ///
    /// **示例值**: "-1"
    #[api(kind = "body", name = "color")]
    pub color: Option<i64>,
    /// 日程提醒列表。不传值则默认为空。
    #[api(kind = "body", name = "reminders")]
    pub reminders: Vec<Option<ReminderSubReq>>,
    /// 重复日程的重复性规则，规则设置方式参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)。
    ///
    /// **默认值**：空，表示当前日程不是重复日程。
    ///
    /// **注意**：
    ///
    /// - COUNT 和
    ///
    /// UNTIL 不支持同时出现。
    ///
    /// - 预定会议室重复日程长度不得超过两年。
    ///
    /// **示例值**: "FREQ=DAILY;INTERVAL=1"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `2000` 字符
    #[api(kind = "body", name = "recurrence")]
    pub recurrence: Option<String>,
    /// 日程自定义信息，控制日程详情页的 UI 展示。不传值则默认为空。
    #[api(kind = "body", name = "schemas")]
    pub schemas: Vec<Option<SchemaSubReq>>,
    /// 日程附件。
    #[api(kind = "body", name = "attachments")]
    pub attachments: Vec<Option<AttachmentSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TimeInfoSubReq {
    /// 开始时间，仅全天日程使用该字段，[RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) 格式，例如，2018-09-01。
    ///
    /// **注意**：该参数不能与 `timestamp` 同时指定。
    ///
    /// **示例值**: "2018-09-01"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: Option<String>,
    /// 秒级时间戳，用于设置具体的开始时间。例如，1602504000 表示 2020/10/12 20:00:00（UTC +8 时区）。
    ///
    /// **注意**：该参数不能与 `date` 同时指定。
    ///
    /// **示例值**: "1602504000"
    #[serde(
        rename = "timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timestamp: Option<String>,
    /// 时区。使用 IANA Time Zone Database 标准，例如 Asia/Shanghai。
    ///
    /// - 全天日程时区固定为UTC +0
    ///
    /// - 非全天日程时区默认为 Asia/Shanghai
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "timezone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timezone: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct VchatSubReq {
    /// 视频会议类型。如果无需视频会议，则必须传入 `no_meeting`。
    ///
    /// **默认值**：空，表示在首次添加日程参与人时，会自动生成飞书视频会议 URL。
    ///
    /// **示例值**: "third_party"
    ///
    /// **可选值**:
    ///
    /// `VC`: 飞书视频会议。取该类型时，vchat 内的其他字段均无效。
    ///
    /// `ThirdParty`: 第三方链接视频会议。取该类型时，仅生效 vchat 内的 icon_type、description、meeting_url 字段。
    ///
    /// `NoMeeting`: 无视频会议。取该类型时，vchat 内的其他字段均无效。
    ///
    /// `LarkLive`: 飞书直播。该值用于客户端，不支持通过 API 调用，只读。
    ///
    /// `Unknown`: 未知类型。该值用于客户端做兼容使用，不支持通过 API 调用，只读。
    #[serde(
        rename = "vc_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vc_type: Option<String>,
    /// 第三方视频会议的 icon 类型。
    ///
    /// **默认值**：default
    ///
    /// **示例值**: "vc"
    ///
    /// **可选值**:
    ///
    /// `VC`: 飞书视频会议 icon。
    ///
    /// `Live`: 直播视频会议 icon。
    ///
    /// `Default`: 默认 icon。
    #[serde(
        rename = "icon_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub icon_type: Option<String>,
    /// 第三方视频会议文案。
    ///
    /// **默认值**：空，为空展示默认文案。
    ///
    /// **示例值**: "发起视频会议"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `500` 字符
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: Option<String>,
    /// 视频会议 URL。
    ///
    /// **示例值**: "https://example.com"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `2000` 字符
    #[serde(
        rename = "meeting_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_url: Option<String>,
    /// 飞书视频会议（VC）的会前设置，需满足以下全部条件：
    ///
    /// - 当 `vc_type` 为 `vc` 时生效。
    ///
    /// - 需要有日程的编辑权限。
    #[serde(
        rename = "meeting_settings",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_settings: Option<MeetingSettingsSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EventLocationSubReq {
    /// 地点名称。
    ///
    /// **示例值**: "地点名称"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `512` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Option<String>,
    /// 地点地址。
    ///
    /// **示例值**: "地点地址"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `255` 字符
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: Option<String>,
    /// 地点坐标纬度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准。
    ///
    /// - 对于海外的地点，采用 WGS84 标准。
    ///
    /// **示例值**: "1.100000023841858"
    #[serde(
        rename = "latitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latitude: Option<f64>,
    /// 地点坐标经度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准。
    ///
    /// - 对于海外的地点，采用 WGS84 标准。
    ///
    /// **示例值**: "2.200000047683716"
    #[serde(
        rename = "longitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub longitude: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MeetingSettingsSubReq {
    /// 设置会议 owner 的用户 ID，ID 类型需和 user_id
    ///
    /// _type 保持一致。
    ///
    /// 该参数需满足以下全部条件才会生效：
    ///
    /// -  应用身份（tenant_access_token）请求，且在应用日历上操作日程。
    ///
    /// - 首次将日程设置为 VC 会议时，才能设置owner。
    ///
    /// - owner 不能为非用户身份。
    ///
    /// - owner 不能为外部租户用户身份。
    ///
    /// **示例值**: "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: Option<String>,
    /// 设置入会范围。
    ///
    /// **默认值**：anyone_can_join
    ///
    /// **示例值**: "only_organization_employees"
    ///
    /// **可选值**:
    ///
    /// `AnyOne`: 所有人可以加入会议
    ///
    /// `OnlySameOrganization`: 仅企业内的用户可以加入会议
    ///
    /// `OnlyEventAttendees`: 仅日程参与者可以加入会议
    #[serde(
        rename = "join_meeting_permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub join_meeting_permission: Option<String>,
    /// 通过用户 ID 指定主持人，ID 类型需和 user_id
    ///
    /// _type 保持一致。
    ///
    /// **注意**：
    ///
    /// - 仅日程组织者可以指定主持人。
    ///
    /// - 主持人不能是非用户身份。
    ///
    /// - 主持人不能是外部租户用户身份。
    ///
    /// - 在应用日历上操作日程时，不允许指定主持人。
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `10` 字符
    #[serde(
        rename = "assign_hosts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assign_hosts: Vec<Option<String>>,
    /// 是否开启自动录制。
    ///
    /// **可选值有**：
    ///
    /// - true：开启
    ///
    /// - false（默认值）：不开启
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "auto_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_record: Option<bool>,
    /// 是否开启等候室。
    ///
    /// **可选值有**：
    ///
    /// - true（默认值）：开启
    ///
    /// - false：不开启
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "open_lobby",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_lobby: Option<bool>,
    /// 是否允许日程参与者发起会议。
    ///
    /// **可选值有**：
    ///
    /// - true（默认值）：允许
    ///
    /// - false：不允许
    ///
    /// **注意**：应用日历上操作日程时，该字段必须为 true，否则没有人能发起会议。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_attendees_start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_attendees_start: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReminderSubReq {
    /// 日程提醒时间的偏移量。
    ///
    /// - 正数时表示在日程开始前 X 分钟提醒。
    ///
    /// - 负数时表示在日程开始后 X 分钟提醒。
    ///
    /// **注意**：新建或更新日程时传入该字段，仅对当前身份生效，不会对日程的其他参与人生效。
    ///
    /// **示例值**: "5"
    #[serde(
        rename = "minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub minutes: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SchemaSubReq {
    /// UI 名称。
    ///
    /// **可选值有**：
    ///
    /// - ForwardIcon：日程转发按钮
    ///
    /// - MeetingChatIcon：会议群聊按钮
    ///
    /// - MeetingMinutesIcon：会议纪要按钮
    ///
    /// - MeetingVideo：视频会议区域
    ///
    /// - RSVP：接受、拒绝、待定区域
    ///
    /// - Attendee：参与者区域
    ///
    /// - OrganizerOrCreator：组织者或创建者区域
    ///
    /// **示例值**: "ForwardIcon"
    #[serde(
        rename = "ui_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ui_name: Option<String>,
    /// UI 项的状态。目前只支持选择 `hide`。
    ///
    /// **示例值**: "hide"
    ///
    /// **可选值**:
    ///
    /// `Hide`: 隐藏显示
    ///
    /// `Readonly`: 只读
    ///
    /// `Editable`: 可编辑
    ///
    /// `Unknown`: 未知 UI 项自定义状态。该参数仅用于读取时兼容，不支持作为请求参数值传入
    #[serde(
        rename = "ui_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ui_status: Option<String>,
    /// 按钮点击后跳转的链接。
    ///
    /// **注意**：兼容性参数，只读，因此暂不支持传入该请求参数。
    ///
    /// **示例值**: "https://applink.feishu.cn/client/calendar/event/detail?calendarId=xxxxxx&key=xxxxxx&originalTime=xxxxxx&startTime=xxxxxx"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `2000` 字符
    #[serde(
        rename = "app_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app_link: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AttachmentSubReq {
    /// 附件 Token。调用[上传素材](https://open.larkoffice.com/document/server-docs/docs/drive-v1/media/upload_all)接口，获取附件的 file_token。在调用上传素材接口时需要注意：
    ///
    /// - `parent_type` 需传入固定值 `calender`。
    ///
    /// - `parent_node` 需传入与当前接口一致的日历 ID。
    ///
    /// **附件校验规则**：附件总大小不超过 25 MB。
    ///
    /// **示例值**: "xAAAAA"
    #[serde(
        rename = "file_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateCalendarEventRespInner {
    #[serde(flatten)]
    data: Option<CreateCalendarEventResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateCalendarEventResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 新创建的日程实体信息。
    #[serde(
        rename = "event",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event: CalendarEventSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CalendarEventSubResp {
    /// 日程 ID。后续可通过该 ID 查询、更新或删除日程信息。更多信息参见[日程 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "00592a0e-7edf-4678-bc9d-1b77383ef08e_0"
    #[serde(
        rename = "event_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_id: String,
    /// 该日程组织者的日历 ID。关于日历 ID 的说明可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
    ///
    /// **示例值**: "feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
    #[serde(
        rename = "organizer_calendar_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub organizer_calendar_id: String,
    /// 日程标题。
    ///
    /// **示例值**: "日程标题"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `1000` 字符
    #[serde(
        rename = "summary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub summary: String,
    /// 日程描述。
    ///
    /// **示例值**: "日程描述"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `40960` 字符
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 更新日程是否给日程参与人发送 Bot 通知。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "need_notification",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub need_notification: bool,
    /// 日程开始时间。
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: TimeInfoSubResp,
    /// 日程结束时间。
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: TimeInfoSubResp,
    /// 视频会议信息。
    #[serde(
        rename = "vchat",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vchat: VchatSubResp,
    /// 日程公开范围。新建的日程默认为 `default`，且仅在新建日程时，对所有参与人生效。如果后续更新日程时修改该参数值，则仅对当前身份生效。
    ///
    /// **示例值**: "default"
    ///
    /// **可选值**:
    ///
    /// `Default`: 默认权限，跟随日历权限，即默认仅向他人显示是否忙碌
    ///
    /// `Public`: 公开，显示日程详情
    ///
    /// `Private`: 私密，仅自己可见详情
    #[serde(
        rename = "visibility",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visibility: String,
    /// 参与人权限。
    ///
    /// **示例值**: "can_see_others"
    ///
    /// **可选值**:
    ///
    /// `None`: 无法编辑日程、无法邀请其他参与人、无法查看参与人列表
    ///
    /// `CanSeeOthers`: 无法编辑日程、无法邀请其他参与人、可以查看参与人列表
    ///
    /// `CanInviteOthers`: 无法编辑日程、可以邀请其他参与人、可以查看参与人列表
    ///
    /// `CanModifyEvent`: 可以编辑日程、可以邀请其他参与人、可以查看参与人列表
    #[serde(
        rename = "attendee_ability",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attendee_ability: String,
    /// 日程占用的忙闲状态。新建日程默认为 `busy`，且仅新建日程时，对所有参与人生效。如果后续更新日程时修改了该参数值，则仅对当前身份生效。
    ///
    /// **示例值**: "busy"
    ///
    /// **可选值**:
    ///
    /// `Busy`: 忙碌
    ///
    /// `Free`: 空闲
    #[serde(
        rename = "free_busy_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub free_busy_status: String,
    /// 日程地点。
    #[serde(
        rename = "location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location: EventLocationSubResp,
    /// 日程颜色，由颜色 RGB 值的 int32 表示。
    ///
    /// **说明**：
    ///
    /// - 仅对当前身份生效。
    ///
    /// - 取值为 0 或 -1 时，表示默认跟随日历颜色。
    ///
    /// - 客户端展示时会映射到色板上最接近的一种颜色。
    ///
    /// **示例值**: "-1"
    #[serde(
        rename = "color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub color: i64,
    /// 日程提醒列表。
    #[serde(
        rename = "reminders",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reminders: Vec<ReminderSubResp>,
    /// 重复日程的重复性规则，规则格式可参见 [rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)。
    ///
    /// **示例值**: "FREQ=DAILY;INTERVAL=1"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `2000` 字符
    #[serde(
        rename = "recurrence",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub recurrence: String,
    /// 日程状态。
    ///
    /// **示例值**: "confirmed"
    ///
    /// **可选值**:
    ///
    /// `Tentative`: 未回应
    ///
    /// `Confirmed`: 已确认
    ///
    /// `Cancelled`: 日程已取消
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 日程是否是一个重复日程的例外日程。了解例外日程，可参见[例外日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction#71c5ec78)。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_exception",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_exception: bool,
    /// 例外日程对应的原重复日程的 event_id。
    ///
    /// **示例值**: "1cd45aaa-fa70-4195-80b7-c93b2e208f45"
    #[serde(
        rename = "recurring_event_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub recurring_event_id: String,
    /// 日程的创建时间（秒级时间戳）。
    ///
    /// **示例值**: "1602504000"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 日程自定义信息，控制日程详情页的 UI 展示。
    #[serde(
        rename = "schemas",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub schemas: Vec<SchemaSubResp>,
    /// 日程组织者信息。
    #[serde(
        rename = "event_organizer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_organizer: EventOrganizerSubResp,
    /// 日程的 app_link，用于跳转到具体的某个日程。
    ///
    /// **示例值**: "https://applink.larkoffice.com/client/calendar/event/detail?calendarId=7039673579105026066&key=aeac9c56-aeb1-4179-a21b-02f278f59048&originalTime=0&startTime=1700496000"
    #[serde(
        rename = "app_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app_link: String,
    /// 日程附件
    #[serde(
        rename = "attachments",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attachments: Vec<AttachmentSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TimeInfoSubResp {
    /// 开始时间，仅全天日程使用该字段，[RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) 格式，例如，2018-09-01。
    ///
    /// **示例值**: "2018-09-01"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: String,
    /// 秒级时间戳，指日程具体的开始时间。例如，1602504000 表示 2020/10/12 20:00:00（UTC +8 时区）。
    ///
    /// **示例值**: "1602504000"
    #[serde(
        rename = "timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timestamp: String,
    /// 时区。使用 IANA Time Zone Database 标准。
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "timezone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timezone: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct VchatSubResp {
    /// 视频会议类型，可以为空，表示在首次添加日程参与人时，会自动生成飞书视频会议 URL。
    ///
    /// **示例值**: "third_party"
    ///
    /// **可选值**:
    ///
    /// `VC`: 飞书视频会议。
    ///
    /// `ThirdParty`: 第三方链接视频会议。
    ///
    /// `NoMeeting`: 无视频会议。
    ///
    /// `LarkLive`: 飞书直播，只读参数。
    ///
    /// `Unknown`: 未知类型，用于兼容的只读参数。
    #[serde(
        rename = "vc_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vc_type: String,
    /// 第三方视频会议 icon 类型，可以为空，表示展示默认 icon。
    ///
    /// **示例值**: "vc"
    ///
    /// **可选值**:
    ///
    /// `VC`: 飞书视频会议 icon。
    ///
    /// `Live`: 直播视频会议 icon。
    ///
    /// `Default`: 默认 icon。
    #[serde(
        rename = "icon_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub icon_type: String,
    /// 第三方视频会议文案。
    ///
    /// **示例值**: "发起视频会议"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `500` 字符
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 视频会议 URL。
    ///
    /// **示例值**: "https://example.com"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `2000` 字符
    #[serde(
        rename = "meeting_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_url: String,
    /// 飞书视频会议（VC）的会前设置。
    #[serde(
        rename = "meeting_settings",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_settings: MeetingSettingsSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EventLocationSubResp {
    /// 地点名称。
    ///
    /// **示例值**: "地点名称"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `512` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 地点地址。
    ///
    /// **示例值**: "地点地址"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `255` 字符
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: String,
    /// 地点坐标纬度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准
    ///
    /// - 对于海外的地点，采用 WGS84 标准
    ///
    /// **示例值**: "1.100000023841858"
    #[serde(
        rename = "latitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latitude: f64,
    /// 地点坐标经度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准
    ///
    /// - 对于海外的地点，采用 WGS84 标准
    ///
    /// **示例值**: "2.200000047683716"
    #[serde(
        rename = "longitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub longitude: f64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EventOrganizerSubResp {
    /// 日程组织者 user ID。
    ///
    /// **示例值**: "ou_xxxxxx"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 日程组织者姓名。
    ///
    /// **示例值**: "李健"
    #[serde(
        rename = "display_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MeetingSettingsSubResp {
    /// 会议 owner 的用户 ID 信息。
    ///
    /// **示例值**: "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: String,
    /// 设置入会范围。
    ///
    /// **示例值**: "only_organization_employees"
    ///
    /// **可选值**:
    ///
    /// `AnyOne`: 所有人可以加入会议
    ///
    /// `OnlySameOrganization`: 仅企业内的用户可以加入会议
    ///
    /// `OnlyEventAttendees`: 仅日程参与者可以加入会议
    #[serde(
        rename = "join_meeting_permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub join_meeting_permission: String,
    /// 设置会议密码，仅支持 4-9 位数字
    ///
    /// **示例值**: "971024"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `9` 字符
    #[serde(
        rename = "password",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub password: String,
    /// 主持人的用户 ID 信息。
    #[serde(
        rename = "assign_hosts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assign_hosts: Vec<String>,
    /// 是否开启自动录制。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "auto_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_record: bool,
    /// 是否开启等候室。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "open_lobby",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_lobby: bool,
    /// 是否允许日程参与者发起会议。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_attendees_start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_attendees_start: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReminderSubResp {
    /// 日程提醒时间的偏移量。该参数仅对当前身份生效。
    ///
    /// - 正数时表示在日程开始前 X 分钟提醒。
    ///
    /// - 负数时表示在日程开始后 X 分钟提醒。
    ///
    /// **示例值**: "5"
    #[serde(
        rename = "minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SchemaSubResp {
    /// UI 名称。可能值：
    ///
    /// - ForwardIcon：日程转发按钮
    ///
    /// - MeetingChatIcon：会议群聊按钮
    ///
    /// - MeetingMinutesIcon：会议纪要按钮
    ///
    /// - MeetingVideo：视频会议区域
    ///
    /// - RSVP：接受、拒绝、待定区域
    ///
    /// - Attendee: 参与者区域
    ///
    /// - OrganizerOrCreator：组织者或创建者区域
    ///
    /// **示例值**: "ForwardIcon"
    #[serde(
        rename = "ui_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ui_name: String,
    /// UI项自定义状态。
    ///
    /// **示例值**: "hide"
    ///
    /// **可选值**:
    ///
    /// `Hide`: 隐藏显示
    ///
    /// `Readonly`: 只读
    ///
    /// `Editable`: 可编辑
    ///
    /// `Unknown`: 未知 UI 项自定义状态，仅用于读取时兼容
    #[serde(
        rename = "ui_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ui_status: String,
    /// 按钮点击后跳转的链接。
    ///
    /// **示例值**: "https://applink.feishu.cn/client/calendar/event/detail?calendarId=xxxxxx&key=xxxxxx&originalTime=xxxxxx&startTime=xxxxxx"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `2000` 字符
    #[serde(
        rename = "app_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app_link: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AttachmentSubResp {
    /// 附件token
    ///
    /// **示例值**: "xAAAAA"
    #[serde(
        rename = "file_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: String,
    /// 附件大小
    ///
    /// **示例值**: "2345"
    #[serde(
        rename = "file_size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_size: String,
    /// 是否删除附件
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_deleted",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_deleted: bool,
    /// 附件名称
    ///
    /// **示例值**: "附件.jpeg"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::calendar::CalendarServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateCalendarEventReq) -> Result<(CreateCalendarEventResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateCalendarEventReq,
                ) -> Result<(CreateCalendarEventResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CalendarServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_calendar_event<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, CreateCalendarEventReq, CreateCalendarEventResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_calendar_event(
            &self,
            req: &CreateCalendarEventReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateCalendarEventReq, CreateCalendarEventResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::calendar::create_calendar_event::{
            CreateCalendarEventReq, CreateCalendarEventResp, CreateCalendarEventRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .calendar()
            .mock()
            .mock_create_calendar_event(|_| {
                Ok((
                    CreateCalendarEventResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .calendar()
            .create_calendar_event(CreateCalendarEventReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .calendar()
            .create_calendar_event(CreateCalendarEventReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "summary": "日程标题",
    "description": "日程描述",
    "need_notification": false,
    "start_time": {
        "date": "2018-09-01",
        "timestamp": "1602504000",
        "timezone": "Asia/Shanghai"
    },
    "end_time": {
        "date": "2018-09-01",
        "timestamp": "1602504000",
        "timezone": "Asia/Shanghai"
    },
    "vchat": {
        "vc_type": "third_party",
        "icon_type": "vc",
        "description": "发起视频会议",
        "meeting_url": "https://example.com",
        "meeting_settings": {
            "owner_id": "ou_7d8a6e6df7621556ce0d21922b676706ccs",
            "join_meeting_permission": "only_organization_employees",
            "assign_hosts": [
                "ou_7d8a6e6df7621556ce0d21922b676706ccs"
            ],
            "auto_record": false,
            "open_lobby": true,
            "allow_attendees_start": true
        }
    },
    "visibility": "default",
    "attendee_ability": "can_see_others",
    "free_busy_status": "busy",
    "location": {
        "name": "地点名称",
        "address": "地点地址",
        "latitude": 1.100000023841858,
        "longitude": 2.200000047683716
    },
    "color": -1,
    "reminders": [
        {
            "minutes": 5
        }
    ],
    "recurrence": "FREQ=DAILY;INTERVAL=1",
    "schemas": [
        {
            "ui_name": "ForwardIcon",
            "ui_status": "hide",
            "app_link": "https://applink.feishu.cn/client/calendar/event/detail?calendarId=xxxxxx&key=xxxxxx&originalTime=xxxxxx&startTime=xxxxxx"
        }
    ],
    "attachments": [
        {
            "file_token": "xAAAAA"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateCalendarEventReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "event": {
            "event_id": "00592a0e-7edf-4678-bc9d-1b77383ef08e_0",
            "organizer_calendar_id": "feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn",
            "summary": "日程标题",
            "description": "日程描述",
            "need_notification": false,
            "start_time": {
                "date": "2018-09-01",
                "timestamp": "1602504000",
                "timezone": "Asia/Shanghai"
            },
            "end_time": {
                "date": "2018-09-01",
                "timestamp": "1602504000",
                "timezone": "Asia/Shanghai"
            },
            "vchat": {
                "vc_type": "third_party",
                "icon_type": "vc",
                "description": "发起视频会议",
                "meeting_url": "https://example.com",
                "meeting_settings": {
                    "owner_id": "ou_7d8a6e6df7621556ce0d21922b676706ccs",
                    "join_meeting_permission": "only_organization_employees",
                    "password": "971024",
                    "assign_hosts": [
                        "ou_7d8a6e6df7621556ce0d21922b676706ccs"
                    ],
                    "auto_record": false,
                    "open_lobby": true,
                    "allow_attendees_start": true
                }
            },
            "visibility": "default",
            "attendee_ability": "can_see_others",
            "free_busy_status": "busy",
            "location": {
                "name": "地点名称",
                "address": "地点地址",
                "latitude": 1.100000023841858,
                "longitude": 2.200000047683716
            },
            "color": -1,
            "reminders": [
                {
                    "minutes": 5
                }
            ],
            "recurrence": "FREQ=DAILY;INTERVAL=1",
            "status": "confirmed",
            "is_exception": false,
            "recurring_event_id": "1cd45aaa-fa70-4195-80b7-c93b2e208f45",
            "create_time": "1602504000",
            "schemas": [
                {
                    "ui_name": "ForwardIcon",
                    "ui_status": "hide",
                    "app_link": "https://applink.feishu.cn/client/calendar/event/detail?calendarId=xxxxxx&key=xxxxxx&originalTime=xxxxxx&startTime=xxxxxx"
                }
            ],
            "event_organizer": {
                "user_id": "ou_xxxxxx",
                "display_name": "李健"
            },
            "app_link": "https://applink.larkoffice.com/client/calendar/event/detail?calendarId=7039673579105026066&key=aeac9c56-aeb1-4179-a21b-02f278f59048&originalTime=0&startTime=1700496000",
            "attachments": [
                {
                    "file_token": "xAAAAA",
                    "file_size": "2345",
                    "is_deleted": false,
                    "name": "附件.jpeg"
                }
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateCalendarEventRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
