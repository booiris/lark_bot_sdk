//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/setting/generate_caldav_conf>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::calendar::CalendarService;

impl<'c, IStore: Store, IClient: HttpClient> CalendarService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-10T03:34:22+00:00**
    ///
    /// ## 生成 CalDAV 配置
    ///
    /// 调用该接口为当前用户生成一个 CalDAV 账号密码，用于将飞书日历信息同步到本地设备日历。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/setting/generate_caldav_conf>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/calendar-v4/setting/generate_caldav_conf>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcalendar-v4%2Fsetting%2Fgenerate_caldav_conf>
    pub async fn generate_caldav_conf(
        &self,
        req: GenerateCaldavConfReq,
    ) -> Result<(GenerateCaldavConfResp, CommonResponse), Error> {
        self.generate_caldav_conf_with_opt(req, Default::default())
            .await
    }

    /// 参见 [generate_caldav_conf](#method.generate_caldav_conf) 函数
    pub async fn generate_caldav_conf_with_opt(
        &self,
        req: GenerateCaldavConfReq,
        method_option: MethodOption,
    ) -> Result<(GenerateCaldavConfResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_generate_caldav_conf(&req) {
                tracing::info!("[lark] Calendar#GenerateCaldavConf **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Calendar#GenerateCaldavConf call api");

        let req = ApiRequest {
            scope: "Calendar",
            api: "GenerateCaldavConf",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/calendar/v4/settings/generate_caldav_conf",
            param_data: req.gen_param(),
            method_option,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GenerateCaldavConfRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GenerateCaldavConfReq {
    /// 需要同步日历的设备名，在日历中用来展示。
    ///
    /// **默认值**：空
    ///
    /// **示例值**: "iPhone"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "device_name")]
    pub device_name: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GenerateCaldavConfRespInner {
    #[serde(flatten)]
    data: Option<GenerateCaldavConfResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GenerateCaldavConfResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// CalDAV 密码。
    ///
    /// **示例值**: "A67h23sd8"
    #[serde(
        rename = "password",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub password: String,
    /// CalDAV 用户名。
    ///
    /// **示例值**: "ZhangSan"
    #[serde(
        rename = "user_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_name: String,
    /// 服务器地址
    ///
    /// **示例值**: "caldav.domain.com"
    #[serde(
        rename = "server_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub server_address: String,
    /// 设备名。与你发送请求时传入的设备名一致。
    ///
    /// **示例值**: "iPhone"
    #[serde(
        rename = "device_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub device_name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::calendar::CalendarServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GenerateCaldavConfReq) -> Result<(GenerateCaldavConfResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GenerateCaldavConfReq) -> Result<(GenerateCaldavConfResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CalendarServiceMocker<'c, IStore, IClient> {
        pub fn mock_generate_caldav_conf<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GenerateCaldavConfReq, GenerateCaldavConfResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_generate_caldav_conf(
            &self,
            req: &GenerateCaldavConfReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GenerateCaldavConfReq, GenerateCaldavConfResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::calendar::generate_caldav_conf::{
            GenerateCaldavConfReq, GenerateCaldavConfResp, GenerateCaldavConfRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .calendar()
            .mock()
            .mock_generate_caldav_conf(|_| {
                Ok((GenerateCaldavConfResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .calendar()
            .generate_caldav_conf(GenerateCaldavConfReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .calendar()
            .generate_caldav_conf(GenerateCaldavConfReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "device_name": "iPhone"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GenerateCaldavConfReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "password": "A67h23sd8",
        "user_name": "ZhangSan",
        "server_address": "caldav.domain.com",
        "device_name": "iPhone"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GenerateCaldavConfRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
