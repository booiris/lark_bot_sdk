//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::calendar::CalendarService;

impl<'c, IStore: Store, IClient: HttpClient> CalendarService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T06:30:29+00:00**
    ///
    /// ## 获取日程参与群成员列表
    ///
    /// 调用该接口以当前身份（应用或用户）获取日程的群组类型参与人的群成员列表。
    ///
    /// - 当前身份由 Header Authorization 的 Token 类型决定。tenant_access_token 指应用身份，user_access_token 指用户身份。
    ///
    /// - 如果使用应用身份调用该接口，则需要确保应用开启了[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)。
    ///
    /// - 当前身份必须有权限查看日程的参与人列表，即当前身份需要是日程的组织者，或者是日程参与人且日程设置了**参与人可查看参与人列表**权限。你可以调用[获取日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/get)接口，获取日程的参与人权限（attendee_ability）。
    ///
    /// - 当前身份必须在群成员列表中。如果不在群成员列表中，会调用失败并返回错误信息。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/calendar-v4/calendar-event-attendee/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcalendar-v4%2Fcalendar-event-attendee%2Flist>
    pub async fn get_calendar_event_attendee_chat_member_list(
        &self,
        req: GetCalendarEventAttendeeChatMemberListReq,
    ) -> Result<(GetCalendarEventAttendeeChatMemberListResp, CommonResponse), Error> {
        self.get_calendar_event_attendee_chat_member_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_calendar_event_attendee_chat_member_list](#method.get_calendar_event_attendee_chat_member_list) 函数
    pub async fn get_calendar_event_attendee_chat_member_list_with_opt(
        &self,
        req: GetCalendarEventAttendeeChatMemberListReq,
        method_option: MethodOption,
    ) -> Result<(GetCalendarEventAttendeeChatMemberListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_calendar_event_attendee_chat_member_list(&req)
            {
                tracing::info!(
                    "[lark] Calendar#GetCalendarEventAttendeeChatMemberList **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] Calendar#GetCalendarEventAttendeeChatMemberList call api");

        let req = ApiRequest {
            scope: "Calendar",
            api: "GetCalendarEventAttendeeChatMemberList",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCalendarEventAttendeeChatMemberListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCalendarEventAttendeeChatMemberListReq {
    /// 日程所在的日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
    #[api(kind = "path", name = "calendar_id")]
    pub calendar_id: String,
    /// 日程 ID。
    ///
    /// 创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。
    ///
    /// - [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)
    ///
    /// - [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "xxxxxxxxx_0"
    #[api(kind = "path", name = "event_id")]
    pub event_id: String,
    /// 群组类型参与人 ID。
    ///
    /// 添加日程参与人时，会返回参与人 ID（attendee_id），你也可以调用[获取日程参与人列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list)接口，查询指定日程的参与人 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "chat_xxxxxx"
    #[api(kind = "path", name = "attendee_id")]
    pub attendee_id: String,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "23jhysaxxxxsysy"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 一次请求返回的最大群成员数量。
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCalendarEventAttendeeChatMemberListRespInner {
    #[serde(flatten)]
    data: Option<GetCalendarEventAttendeeChatMemberListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCalendarEventAttendeeChatMemberListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 群组类型参与人的群成员列表。
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<CalendarEventAttendeeChatMemberSubResp>,
    /// 是否还有更多项
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "73TyueXXXXX"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CalendarEventAttendeeChatMemberSubResp {
    /// 参与人 RSVP 状态，即日程回复状态。
    ///
    /// **示例值**: "needs_action"
    ///
    /// **可选值**:
    ///
    /// `NeedsAction`: 参与人尚未回复状态，或表示会议室预约中
    ///
    /// `Accept`: 参与人回复接受，或表示会议室预约成功
    ///
    /// `Tentative`: 参与人回复待定
    ///
    /// `Decline`: 参与人回复拒绝，或表示会议室预约失败
    ///
    /// `Removed`: 参与人或会议室已经从日程中被移除
    #[serde(
        rename = "rsvp_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rsvp_status: String,
    /// 参与人是否为可选参加。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_optional",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_optional: bool,
    /// 参与人名称。
    ///
    /// **示例值**: "Zhang San"
    #[serde(
        rename = "display_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name: String,
    /// 参与人的 open_id。关于用户 ID 可参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。
    ///
    /// **示例值**: "ou_143669c5a53647f00f6c80a0253aa68b"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
    /// 参与人是否为日程组织者。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_organizer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_organizer: bool,
    /// 参与人是否为外部参与人。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_external",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_external: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::calendar::CalendarServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCalendarEventAttendeeChatMemberListReq,
        ) -> Result<(GetCalendarEventAttendeeChatMemberListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCalendarEventAttendeeChatMemberListReq,
                )
                    -> Result<(GetCalendarEventAttendeeChatMemberListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CalendarServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_calendar_event_attendee_chat_member_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCalendarEventAttendeeChatMemberListReq,
            GetCalendarEventAttendeeChatMemberListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_calendar_event_attendee_chat_member_list(
            &self,
            req: &GetCalendarEventAttendeeChatMemberListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCalendarEventAttendeeChatMemberListReq,
                GetCalendarEventAttendeeChatMemberListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::calendar::get_calendar_event_attendee_chat_member_list::{
            GetCalendarEventAttendeeChatMemberListReq, GetCalendarEventAttendeeChatMemberListResp,
            GetCalendarEventAttendeeChatMemberListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .calendar()
            .mock()
            .mock_get_calendar_event_attendee_chat_member_list(|_| {
                Ok((
                    GetCalendarEventAttendeeChatMemberListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .calendar()
            .get_calendar_event_attendee_chat_member_list(
                GetCalendarEventAttendeeChatMemberListReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .calendar()
            .get_calendar_event_attendee_chat_member_list(
                GetCalendarEventAttendeeChatMemberListReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "rsvp_status": "needs_action",
                "is_optional": true,
                "display_name": "Zhang San",
                "open_id": "ou_143669c5a53647f00f6c80a0253aa68b",
                "is_organizer": true,
                "is_external": false
            }
        ],
        "has_more": false,
        "page_token": "73TyueXXXXX"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCalendarEventAttendeeChatMemberListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
