//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/instance_view>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::calendar::CalendarService;

impl<'c, IStore: Store, IClient: HttpClient> CalendarService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T06:27:17+00:00**
    ///
    /// ## 查询日程视图
    ///
    /// 调用该接口以用户身份查询指定日历下的日程视图。与[获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)不同的是，当前接口会按照重复日程的重复性规则展开成多个日程实例（instance），并根据查询的时间区间返回相应的日程实例信息。
    ///
    /// - 当前身份由 Header Authorization 的 Token 类型决定。tenant_access_token 指应用身份，user_access_token 指用户身份。
    ///
    /// - 当前身份必须对日历有 reader、writer 或 owner 权限，且仅支持获取 primary、shared 类型的日历的日程列表，暂不支持 google、exchange 类型的日历。你可以调用[查询日历信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，获取当前身份对该日历的访问权限以及日历类型信息。
    ///
    /// - 查询日程视图所获取到的日程实例数量上限小于 1000。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/instance_view>
    ///
    /// new doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/instance_view>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fcalendar-v4%2Fcalendar-event%2Finstance_view>
    pub async fn get_calendar_event_instance_view_list(
        &self,
        req: GetCalendarEventInstanceViewListReq,
    ) -> Result<(GetCalendarEventInstanceViewListResp, CommonResponse), Error> {
        self.get_calendar_event_instance_view_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_calendar_event_instance_view_list](#method.get_calendar_event_instance_view_list) 函数
    pub async fn get_calendar_event_instance_view_list_with_opt(
        &self,
        req: GetCalendarEventInstanceViewListReq,
        method_option: MethodOption,
    ) -> Result<(GetCalendarEventInstanceViewListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_calendar_event_instance_view_list(&req)
            {
                tracing::info!("[lark] Calendar#GetCalendarEventInstanceViewList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Calendar#GetCalendarEventInstanceViewList call api");

        let req = ApiRequest {
            scope: "Calendar",
            api: "GetCalendarEventInstanceViewList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/calendar/v4/calendars/:calendar_id/events/instance_view",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCalendarEventInstanceViewListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCalendarEventInstanceViewListReq {
    /// 日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn"
    #[api(kind = "path", name = "calendar_id")]
    pub calendar_id: String,
    /// 开始时间，Unix 时间戳，单位为秒。该参数与 end_time 用于设置查询的时间范围。
    ///
    /// **注意**：start_time 与 end_time 之间的时间区间需要小于 40 天。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1631777271"
    #[api(kind = "query", name = "start_time", v_type = "var", option = "false")]
    pub start_time: String,
    /// 结束时间，Unix 时间戳，单位为秒。该参数与 start_time 用于设置查询的时间范围。
    ///
    /// **注意**：start_time 与 end_time 之间的时间区间需要小于 40 天。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1631777271"
    #[api(kind = "query", name = "end_time", v_type = "var", option = "false")]
    pub end_time: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCalendarEventInstanceViewListRespInner {
    #[serde(flatten)]
    data: Option<GetCalendarEventInstanceViewListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCalendarEventInstanceViewListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 日程 instance 列表。
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<InstanceSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct InstanceSubResp {
    /// 日程 instance ID。后续可通过该 ID 查询、更新或删除日程实例信息。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "75d28f9b-e35c-4230-8a83-4a661497db54_1602504000"
    #[serde(
        rename = "event_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_id: String,
    /// 日程主题。
    ///
    /// **示例值**: "日程主题"
    #[serde(
        rename = "summary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub summary: String,
    /// 日程描述。
    ///
    /// **示例值**: "desc"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 日程开始时间。
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: TimeInfoSubResp,
    /// 日程结束时间。
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: TimeInfoSubResp,
    /// 日程状态。
    ///
    /// **示例值**: "confirmed"
    ///
    /// **可选值**:
    ///
    /// `Tentative`: 未回应
    ///
    /// `Confirmed`: 已确认
    ///
    /// `Cancelled`: 日程已取消
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 日程是否是重复日程的例外日程。了解例外日程，可参见[例外日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction#71c5ec78)。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_exception",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_exception: bool,
    /// 日程的 app_link，用于跳转到具体的某个日程。
    ///
    /// **示例值**: "https://applink.larkoffice.com/client/calendar/event/detail?calendarId=7039673579105026066&key=aeac9c56-aeb1-4179-a21b-02f278f59048&originalTime=0&startTime=1700496000"
    #[serde(
        rename = "app_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app_link: String,
    /// 日程组织者的日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
    ///
    /// **示例值**: "feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn"
    #[serde(
        rename = "organizer_calendar_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub organizer_calendar_id: String,
    /// 视频会议信息。仅当日程至少有一位参与人时生效。
    #[serde(
        rename = "vchat",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vchat: VchatSubResp,
    /// 日程公开范围。仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效。
    ///
    /// **示例值**: "default"
    ///
    /// **可选值**:
    ///
    /// `Default`: 默认权限，仅向他人显示是否忙碌
    ///
    /// `Public`: 公开，显示日程详情
    ///
    /// `Private`: 私密，仅自己可见
    #[serde(
        rename = "visibility",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visibility: String,
    /// 参与人权限。
    ///
    /// **示例值**: "none"
    ///
    /// **可选值**:
    ///
    /// `None`: 无法编辑日程、无法邀请其它参与人、无法查看参与人列表
    ///
    /// `CanSeeOthers`: 无法编辑日程、无法邀请其它参与人、可以查看参与人列表
    ///
    /// `CanInviteOthers`: 无法编辑日程、可以邀请其它参与人、可以查看参与人列表
    ///
    /// `CanModifyEvent`: 可以编辑日程、可以邀请其它参与人、可以查看参与人列表
    #[serde(
        rename = "attendee_ability",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attendee_ability: String,
    /// 日程占用的忙闲状态。仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效。
    ///
    /// **示例值**: "busy"
    ///
    /// **可选值**:
    ///
    /// `Busy`: 忙碌
    ///
    /// `Free`: 空闲
    #[serde(
        rename = "free_busy_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub free_busy_status: String,
    /// 日程地点。
    #[serde(
        rename = "location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location: EventLocationSubResp,
    /// 日程颜色，由颜色 RGB 值的 int32 表示。
    ///
    /// **说明**：
    ///
    /// - 仅对当前身份生效。
    ///
    /// - 取值为 0 或 -1 时，表示默认跟随日历颜色。
    ///
    /// - 客户端展示时会映射到色板上最接近的一种颜色。
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub color: i64,
    /// 例外日程对应的原重复日程的 event_id。
    ///
    /// **示例值**: "75d28f9b-e35c-4230-8a83-4a661497db54_0"
    #[serde(
        rename = "recurring_event_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub recurring_event_id: String,
    /// 日程组织者信息。
    #[serde(
        rename = "event_organizer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_organizer: EventOrganizerSubResp,
    /// 日程参与人信息，当前只返回会议室，需要其他类型参与人信息请使用[获取日程参与人列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list)接口。
    #[serde(
        rename = "attendees",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attendees: Vec<CalendarEventAttendeeSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TimeInfoSubResp {
    /// 开始时间，仅全天日程使用该字段，[RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) 格式，例如，2018-09-01。
    ///
    /// **示例值**: "2018-09-01"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: String,
    /// 秒级时间戳，指日程具体的开始时间。例如，1602504000 表示 2020/10/12 20:00:00（UTC +8 时区）。
    ///
    /// **示例值**: "1602504000"
    #[serde(
        rename = "timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timestamp: String,
    /// 时区。使用 IANA Time Zone Database 标准。
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "timezone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timezone: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct VchatSubResp {
    /// 视频会议类型。
    ///
    /// **示例值**: "vc"
    ///
    /// **可选值**:
    ///
    /// `VC`: 飞书视频会议
    ///
    /// `ThirdParty`: 第三方链接视频会议
    ///
    /// `NoMeeting`: 无视频会议
    ///
    /// `LarkLive`: 飞书直播
    ///
    /// `Unknown`: 未知类型
    #[serde(
        rename = "vc_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vc_type: String,
    /// 第三方视频会议 icon 类型。
    ///
    /// **示例值**: "vc"
    ///
    /// **可选值**:
    ///
    /// `VC`: 飞书视频会议 icon
    ///
    /// `Live`: 直播视频会议 icon
    ///
    /// `Default`: 默认 icon
    #[serde(
        rename = "icon_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub icon_type: String,
    /// 第三方视频会议文案。
    ///
    /// **示例值**: "发起视频会议"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `500` 字符
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 视频会议 URL。
    ///
    /// **示例值**: "vc.feishu.cn/j/152568231"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `2000` 字符
    #[serde(
        rename = "meeting_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_url: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EventLocationSubResp {
    /// 地点名称。
    ///
    /// **示例值**: "地点名称"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `512` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 地点地址。
    ///
    /// **示例值**: "地点地址"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `255` 字符
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: String,
    /// 地点坐标纬度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准
    ///
    /// - 对于海外的地点，采用 WGS84 标准
    ///
    /// **示例值**: "1.100000023841858"
    #[serde(
        rename = "latitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latitude: f64,
    /// 地点坐标经度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准
    ///
    /// - 对于海外的地点，采用 WGS84 标准
    ///
    /// **示例值**: "2.200000047683716"
    #[serde(
        rename = "longitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub longitude: f64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EventOrganizerSubResp {
    /// 日程组织者 user ID。
    ///
    /// **示例值**: "ou_xxxxxx"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 日程组织者姓名。
    ///
    /// **示例值**: "孙二二"
    #[serde(
        rename = "display_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CalendarEventAttendeeSubResp {
    /// 参与人类型。
    ///
    /// **示例值**: "user"
    ///
    /// **可选值**:
    ///
    /// `User`: 用户
    ///
    /// `Chat`: 群组
    ///
    /// `Resource`: 会议室
    ///
    /// `ThirdParty`: 邮箱
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 参与人 ID。日程参与人在当前日程内的唯一标识。
    ///
    /// **示例值**: "user_xxxxxx"
    #[serde(
        rename = "attendee_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attendee_id: String,
    /// 参与人 RSVP 状态，即日程回复状态。
    ///
    /// **示例值**: "accept"
    ///
    /// **可选值**:
    ///
    /// `NeedsAction`: 参与人尚未回复状态，或表示会议室预约中
    ///
    /// `Accept`: 参与人回复接受，或表示会议室预约成功
    ///
    /// `Tentative`: 参与人回复待定
    ///
    /// `Decline`: 参与人回复拒绝，或表示会议室预约失败
    ///
    /// `Removed`: 参与人或会议室已经从日程中被移除
    #[serde(
        rename = "rsvp_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rsvp_status: String,
    /// 参与人是否为可选参加，该参数值对群组的群成员不生效。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_optional",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_optional: bool,
    /// 参与人是否为日程组织者。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_organizer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_organizer: bool,
    /// 参与人是否为外部参与人。外部参与人不支持编辑。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_external",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_external: bool,
    /// 参与人名称。
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "display_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name: String,
    /// 群中的群成员，当参与人类型（type）为 chat 时有效。群成员不支持编辑。
    #[serde(
        rename = "chat_members",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_members: Vec<AttendeeChatMemberSubResp>,
    /// 用户类型参与人的用户 ID，ID 类型与 user_id_type 的值保持一致。关于用户 ID 可参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。
    ///
    /// **注意**：当 is_external 返回为 true 时，此字段只会返回 open_id 或者 union_id。
    ///
    /// **示例值**: "ou_xxxxxxxx"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 群组类型参与人的群组 ID。关于群组 ID 可参见[群 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)。
    ///
    /// **示例值**: "oc_a0553eda9014c201e6969b478895c230"
    #[serde(
        rename = "chat_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_id: String,
    /// 会议室类型参与人的会议室 ID。
    ///
    /// **示例值**: "omm_83d09ad4f6896e02029a6a075f71c9d1"
    #[serde(
        rename = "room_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_id: String,
    /// 外部邮箱类型参与人的邮箱地址。
    ///
    /// **示例值**: "test@example.com"
    #[serde(
        rename = "third_party_email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub third_party_email: String,
    /// 如果日程是使用应用身份创建的，在添加会议室时，指定的会议室联系人 ID。ID 类型与 user_id_type 的值保持一致。
    ///
    /// **示例值**: "4d7a3c6g"
    #[serde(
        rename = "operate_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operate_id: String,
    /// 会议室的个性化配置。
    #[serde(
        rename = "resource_customization",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resource_customization: Vec<CalendarAttendeeResourceCustomizationSubResp>,
    /// 会议室的审批原因。
    ///
    /// **示例值**: "申请审批原因"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `200` 字符
    #[serde(
        rename = "approval_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_reason: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AttendeeChatMemberSubResp {
    /// 参与人 RSVP 状态，即日程回复状态。
    ///
    /// **示例值**: "accept"
    ///
    /// **可选值**:
    ///
    /// `NeedsAction`: 参与人尚未回复状态，或表示会议室预约中
    ///
    /// `Accept`: 参与人回复接受，或表示会议室预约成功
    ///
    /// `Tentative`: 参与人回复待定
    ///
    /// `Decline`: 参与人回复拒绝，或表示会议室预约失败
    ///
    /// `Removed`: 参与人或会议室已经从日程中被移除
    #[serde(
        rename = "rsvp_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rsvp_status: String,
    /// 参与人是否为可选参加。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_optional",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_optional: bool,
    /// 参与人名称。
    ///
    /// **示例值**: "zhangsan"
    #[serde(
        rename = "display_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name: String,
    /// 参与人是否为日程组织者。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_organizer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_organizer: bool,
    /// 参与人是否为外部参与人。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_external",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_external: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CalendarAttendeeResourceCustomizationSubResp {
    /// 每个配置的唯一 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "16281481596100"
    #[serde(
        rename = "index_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub index_key: String,
    /// 填空类型的取值。
    ///
    /// **示例值**: "xxx"
    #[serde(
        rename = "input_content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub input_content: String,
    /// 每个配置的选项。
    ///
    /// **示例值**: "无"
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<CustomizationOptionSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomizationOptionSubResp {
    /// 每个选项的唯一 ID。
    ///
    /// **示例值**: "16281481596185"
    #[serde(
        rename = "option_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_key: String,
    /// 其他选项类型的取值。
    ///
    /// **示例值**: "xxxx"
    #[serde(
        rename = "others_content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub others_content: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::calendar::CalendarServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCalendarEventInstanceViewListReq,
        ) -> Result<(GetCalendarEventInstanceViewListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCalendarEventInstanceViewListReq,
                )
                    -> Result<(GetCalendarEventInstanceViewListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CalendarServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_calendar_event_instance_view_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCalendarEventInstanceViewListReq,
            GetCalendarEventInstanceViewListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_calendar_event_instance_view_list(
            &self,
            req: &GetCalendarEventInstanceViewListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCalendarEventInstanceViewListReq,
                GetCalendarEventInstanceViewListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::calendar::get_calendar_event_instance_view_list::{
            GetCalendarEventInstanceViewListReq, GetCalendarEventInstanceViewListResp,
            GetCalendarEventInstanceViewListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .calendar()
            .mock()
            .mock_get_calendar_event_instance_view_list(|_| {
                Ok((
                    GetCalendarEventInstanceViewListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .calendar()
            .get_calendar_event_instance_view_list(GetCalendarEventInstanceViewListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .calendar()
            .get_calendar_event_instance_view_list(GetCalendarEventInstanceViewListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "event_id": "75d28f9b-e35c-4230-8a83-4a661497db54_1602504000",
                "summary": "日程主题",
                "description": "desc",
                "start_time": {
                    "date": "2018-09-01",
                    "timestamp": "1602504000",
                    "timezone": "Asia/Shanghai"
                },
                "end_time": {
                    "date": "2018-09-01",
                    "timestamp": "1602504400",
                    "timezone": "Asia/Shanghai"
                },
                "status": "confirmed",
                "is_exception": false,
                "app_link": "https://applink.larkoffice.com/client/calendar/event/detail?calendarId=7039673579105026066&key=aeac9c56-aeb1-4179-a21b-02f278f59048&originalTime=0&startTime=1700496000",
                "organizer_calendar_id": "feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn",
                "vchat": {
                    "vc_type": "vc",
                    "icon_type": "vc",
                    "description": "发起视频会议",
                    "meeting_url": "vc.feishu.cn/j/152568231"
                },
                "visibility": "default",
                "attendee_ability": "none",
                "free_busy_status": "busy",
                "location": {
                    "name": "地点名称",
                    "address": "地点地址",
                    "latitude": 1.100000023841858,
                    "longitude": 2.200000047683716
                },
                "color": 0,
                "recurring_event_id": "75d28f9b-e35c-4230-8a83-4a661497db54_0",
                "event_organizer": {
                    "user_id": "ou_xxxxxx",
                    "display_name": "孙二二"
                },
                "attendees": [
                    {
                        "type": "user",
                        "attendee_id": "user_xxxxxx",
                        "rsvp_status": "accept",
                        "is_optional": false,
                        "is_organizer": true,
                        "is_external": false,
                        "display_name": "张三",
                        "chat_members": [
                            {
                                "rsvp_status": "accept",
                                "is_optional": true,
                                "display_name": "zhangsan",
                                "is_organizer": true,
                                "is_external": false
                            }
                        ],
                        "user_id": "ou_xxxxxxxx",
                        "chat_id": "oc_a0553eda9014c201e6969b478895c230",
                        "room_id": "omm_83d09ad4f6896e02029a6a075f71c9d1",
                        "third_party_email": "test@example.com",
                        "operate_id": "4d7a3c6g",
                        "resource_customization": [
                            {
                                "index_key": "16281481596100",
                                "input_content": "xxx",
                                "options": [
                                    {
                                        "option_key": "16281481596185",
                                        "others_content": "xxxx"
                                    }
                                ]
                            }
                        ],
                        "approval_reason": "申请审批原因"
                    }
                ]
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCalendarEventInstanceViewListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
