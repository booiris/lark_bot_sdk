//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/reply>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::calendar::CalendarService;

impl<'c, IStore: Store, IClient: HttpClient> CalendarService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T06:26:52+00:00**
    ///
    /// ## 回复日程
    ///
    /// 调用该接口以当前身份（应用或用户）回复日程。
    ///
    /// 当前身份由 Header Authorization 的 Token 类型决定。tenant_access_token 指应用身份，user_access_token 指用户身份。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/reply>
    ///
    /// new doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/reply>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fcalendar-v4%2Fcalendar-event%2Freply>
    pub async fn reply_calendar_event(
        &self,
        req: ReplyCalendarEventReq,
    ) -> Result<(ReplyCalendarEventResp, CommonResponse), Error> {
        self.reply_calendar_event_with_opt(req, Default::default())
            .await
    }

    /// 参见 [reply_calendar_event](#method.reply_calendar_event) 函数
    pub async fn reply_calendar_event_with_opt(
        &self,
        req: ReplyCalendarEventReq,
        method_option: MethodOption,
    ) -> Result<(ReplyCalendarEventResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_reply_calendar_event(&req) {
                tracing::info!("[lark] Calendar#ReplyCalendarEvent **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Calendar#ReplyCalendarEvent call api");

        let req = ApiRequest {
            scope: "Calendar",
            api: "ReplyCalendarEvent",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/reply",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (ReplyCalendarEventRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct ReplyCalendarEventReq {
    /// 日程所在的日历 ID。了解更多，参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn"
    #[api(kind = "path", name = "calendar_id")]
    pub calendar_id: String,
    /// 日程 ID。
    ///
    /// 创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。
    ///
    /// - [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)
    ///
    /// - [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "75d28f9b-e35c-4230-8a83-4a661497db54_0"
    #[api(kind = "path", name = "event_id")]
    pub event_id: String,

    /// 日程参与人 RSVP 状态，即日程回复状态。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "accept"
    ///
    /// **可选值**:
    ///
    /// `Accept`: 接受
    ///
    /// `Decline`: 拒绝
    ///
    /// `Tentative`: 待定
    #[api(kind = "body", name = "rsvp_status")]
    pub rsvp_status: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct ReplyCalendarEventRespInner {
    #[serde(flatten)]
    data: Option<ReplyCalendarEventResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct ReplyCalendarEventResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::calendar::CalendarServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(ReplyCalendarEventReq) -> Result<(ReplyCalendarEventResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(ReplyCalendarEventReq) -> Result<(ReplyCalendarEventResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CalendarServiceMocker<'c, IStore, IClient> {
        pub fn mock_reply_calendar_event<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, ReplyCalendarEventReq, ReplyCalendarEventResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_reply_calendar_event(
            &self,
            req: &ReplyCalendarEventReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, ReplyCalendarEventReq, ReplyCalendarEventResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::calendar::reply_calendar_event::{
            ReplyCalendarEventReq, ReplyCalendarEventResp, ReplyCalendarEventRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .calendar()
            .mock()
            .mock_reply_calendar_event(|_| {
                Ok((ReplyCalendarEventResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .calendar()
            .reply_calendar_event(ReplyCalendarEventReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .calendar()
            .reply_calendar_event(ReplyCalendarEventReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "rsvp_status": "accept"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::ReplyCalendarEventReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<ReplyCalendarEventRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
