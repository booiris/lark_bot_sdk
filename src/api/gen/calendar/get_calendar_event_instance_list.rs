//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/instances>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::calendar::CalendarService;

impl<'c, IStore: Store, IClient: HttpClient> CalendarService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T06:27:05+00:00**
    ///
    /// ## 获取重复日程实例
    ///
    /// 调用该接口以当前身份（应用或用户）获取指定日历中的某一重复日程信息。
    ///
    /// 当前身份由 Header Authorization 的 Token 类型决定。tenant_access_token 指应用身份，user_access_token 指用户身份。
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/instances>
    ///
    /// new doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/instances>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fcalendar-v4%2Fcalendar-event%2Finstances>
    pub async fn get_calendar_event_instance_list(
        &self,
        req: GetCalendarEventInstanceListReq,
    ) -> Result<(GetCalendarEventInstanceListResp, CommonResponse), Error> {
        self.get_calendar_event_instance_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_calendar_event_instance_list](#method.get_calendar_event_instance_list) 函数
    pub async fn get_calendar_event_instance_list_with_opt(
        &self,
        req: GetCalendarEventInstanceListReq,
        method_option: MethodOption,
    ) -> Result<(GetCalendarEventInstanceListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_calendar_event_instance_list(&req) {
                tracing::info!("[lark] Calendar#GetCalendarEventInstanceList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Calendar#GetCalendarEventInstanceList call api");

        let req = ApiRequest {
            scope: "Calendar",
            api: "GetCalendarEventInstanceList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/instances",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCalendarEventInstanceListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCalendarEventInstanceListReq {
    /// 日历 ID。关于日历 ID 可参见[日历 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "feishu.cn_HF9U2MbibE8PPpjro6xjqa@group.calendar.feishu.cn"
    #[api(kind = "path", name = "calendar_id")]
    pub calendar_id: String,
    /// 日程 ID。
    ///
    /// 创建日程时会返回日程 ID。你也可以调用以下接口获取某一日历的 ID。
    ///
    /// - [获取日程列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list)
    ///
    /// - [搜索日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "75d28f9b-e35c-4230-8a83-4a661497db54_0"
    #[api(kind = "path", name = "event_id")]
    pub event_id: String,
    /// 开始时间，Unix 时间戳，单位为秒。该参数与 end_time 用于设置时间范围，即重复日程的查询区间为 （start_time, end_time）
    ///
    /// **注意**：start_time 与 end_time 之间的时间区间不能超过 2年。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1631777271"
    #[api(kind = "query", name = "start_time", v_type = "var", option = "false")]
    pub start_time: String,
    /// 结束时间，Unix 时间戳，单位为秒。该参数与 start_time 用于设置时间范围，即重复日程的查询区间为 （start_time, end_time）
    ///
    /// **注意**：start_time 与 end_time 之间的时间区间不能超过 2年。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1631777271"
    #[api(kind = "query", name = "end_time", v_type = "var", option = "false")]
    pub end_time: String,
    /// 一次调用返回的日程数量上限。
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCalendarEventInstanceListRespInner {
    #[serde(flatten)]
    data: Option<GetCalendarEventInstanceListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCalendarEventInstanceListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 重复日程的日程 instance 列表。
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<InstanceSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct InstanceSubResp {
    /// 日程实例 ID。
    ///
    /// **注意**：重复日程实例的 ID 与其他日程 ID 不同，其 ID 包含了实例原始时间（Original time），数据格式为秒级时间戳。例如：`2cf525f0-1e67-4b04-ad4d-30b7f003903c_1713168000`，其中 `1713168000` 即为实例原始时间。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "75d28f9b-e35c-4230-8a83-4a661497db54_1602504000"
    #[serde(
        rename = "event_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_id: String,
    /// 日程主题。
    ///
    /// **示例值**: "日程主题"
    #[serde(
        rename = "summary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub summary: String,
    /// 日程描述。
    ///
    /// **示例值**: "desc"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 日程开始时间。
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: TimeInfoSubResp,
    /// 日程结束时间。
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: TimeInfoSubResp,
    /// 日程状态。
    ///
    /// **示例值**: "confirmed"
    ///
    /// **可选值**:
    ///
    /// `Tentative`: 未回应
    ///
    /// `Confirmed`: 已确认
    ///
    /// `Cancelled`: 日程已取消
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 日程是否是重复日程的例外日程。了解例外日程，可参见[例外日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction#71c5ec78)。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_exception",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_exception: bool,
    /// 日程的 app_link，用于跳转到具体的某个日程。
    ///
    /// **示例值**: "https://applink.larkoffice.com/client/calendar/event/detail?calendarId=7039673579105026066&key=aeac9c56-aeb1-4179-a21b-02f278f59048&originalTime=0&startTime=1700496000"
    #[serde(
        rename = "app_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app_link: String,
    /// 日程地点。
    #[serde(
        rename = "location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location: EventLocationSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TimeInfoSubResp {
    /// 开始时间，仅全天日程使用该字段，[RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) 格式，例如，2018-09-01。
    ///
    /// **示例值**: "2018-09-01"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: String,
    /// 秒级时间戳，指日程具体的开始时间。例如，1602504000 表示 2020/10/12 20:00:00（UTC +8 时区）。
    ///
    /// **示例值**: "1602504000"
    #[serde(
        rename = "timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timestamp: String,
    /// 时区。使用 IANA Time Zone Database 标准。
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "timezone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timezone: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EventLocationSubResp {
    /// 地点名称。
    ///
    /// **示例值**: "上海"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `512` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 地点地址。
    ///
    /// **示例值**: "徐汇区"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `255` 字符
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: String,
    /// 地点坐标纬度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准
    ///
    /// - 对于海外的地点，采用 WGS84 标准
    ///
    /// **示例值**: "23.4444"
    #[serde(
        rename = "latitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latitude: f64,
    /// 地点坐标经度信息。
    ///
    /// - 对于国内的地点，采用 GCJ-02 标准
    ///
    /// - 对于海外的地点，采用 WGS84 标准
    ///
    /// **示例值**: "23.4444"
    #[serde(
        rename = "longitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub longitude: f64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::calendar::CalendarServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCalendarEventInstanceListReq,
        ) -> Result<(GetCalendarEventInstanceListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCalendarEventInstanceListReq,
                )
                    -> Result<(GetCalendarEventInstanceListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CalendarServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_calendar_event_instance_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCalendarEventInstanceListReq,
            GetCalendarEventInstanceListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_calendar_event_instance_list(
            &self,
            req: &GetCalendarEventInstanceListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCalendarEventInstanceListReq,
                GetCalendarEventInstanceListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::calendar::get_calendar_event_instance_list::{
            GetCalendarEventInstanceListReq, GetCalendarEventInstanceListResp,
            GetCalendarEventInstanceListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .calendar()
            .mock()
            .mock_get_calendar_event_instance_list(|_| {
                Ok((
                    GetCalendarEventInstanceListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .calendar()
            .get_calendar_event_instance_list(GetCalendarEventInstanceListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .calendar()
            .get_calendar_event_instance_list(GetCalendarEventInstanceListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "event_id": "75d28f9b-e35c-4230-8a83-4a661497db54_1602504000",
                "summary": "日程主题",
                "description": "desc",
                "start_time": {
                    "date": "2018-09-01",
                    "timestamp": "1602504000",
                    "timezone": "Asia/Shanghai"
                },
                "end_time": {
                    "date": "2018-09-01",
                    "timestamp": "1602504400",
                    "timezone": "Asia/Shanghai"
                },
                "status": "confirmed",
                "is_exception": false,
                "app_link": "https://applink.larkoffice.com/client/calendar/event/detail?calendarId=7039673579105026066&key=aeac9c56-aeb1-4179-a21b-02f278f59048&originalTime=0&startTime=1700496000",
                "location": {
                    "name": "上海",
                    "address": "徐汇区",
                    "latitude": 23.4444,
                    "longitude": 23.4444
                }
            }
        ],
        "page_token": "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCalendarEventInstanceListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
