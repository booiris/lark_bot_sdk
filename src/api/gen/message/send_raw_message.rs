//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::message::MessageService;

impl<'c, IStore: Store, IClient: HttpClient> MessageService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-21T09:04:22+00:00**
    ///
    /// ## 发送消息
    ///
    /// 给指定用户或者会话发送消息，支持文本、富文本、可交互的[消息卡片](https://open.feishu.cn/document/ukTMukTMukTM/uczM3QjL3MzN04yNzcDN)、群名片、个人名片、图片、视频、音频、文件、表情包。
    ///
    /// 注意事项:
    ///
    /// - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 给用户发送消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)
    ///
    /// - 给群组发送消息，需要机器人在群组中
    ///
    /// - 为避免对用户造成打扰，向同一用户发送消息的限频为 ==5 QPS==，向同一群组发送消息的限频为群内机器人共享 ==5 QPS==
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/im-v1/message/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fim-v1%2Fmessage%2Fcreate>
    pub async fn send_raw_message(
        &self,
        req: SendRawMessageReq,
    ) -> Result<(SendRawMessageResp, CommonResponse), Error> {
        self.send_raw_message_with_opt(req, Default::default())
            .await
    }

    /// 参见 [send_raw_message](#method.send_raw_message) 函数
    pub async fn send_raw_message_with_opt(
        &self,
        req: SendRawMessageReq,
        method_option: MethodOption,
    ) -> Result<(SendRawMessageResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_send_raw_message(&req) {
                tracing::info!("[lark] Message#SendRawMessage **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Message#SendRawMessage call api");

        let req = ApiRequest {
            scope: "Message",
            api: "SendRawMessage",
            method: http::Method::POST,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/im/v1/messages",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SendRawMessageRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SendRawMessageReq {
    /// 消息接收者id类型 open_id/user_id/union_id/email/chat_id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)。
    ///
    /// `email`: 以用户的真实邮箱来标识用户。
    ///
    /// `chat_id`: 以群ID来标识群聊。[了解更多：如何获取群ID ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
    #[api(
        kind = "query",
        name = "receive_id_type",
        v_type = "var",
        option = "false"
    )]
    pub receive_id_type: String,
    /// 消息接收者的ID，ID类型应与查询参数==receive_id_type== 对应；推荐使用 OpenID，获取方式可参考文档[如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    #[api(kind = "body", name = "receive_id")]
    pub receive_id: String,
    /// 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[发送消息内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "text"
    #[api(kind = "body", name = "msg_type")]
    pub msg_type: String,
    /// 消息内容，JSON结构序列化后的字符串。不同msg_type对应不同内容，具体格式说明参考：[发送消息内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)
    ///
    /// **注意：**
    ///
    /// - JSON字符串需进行转义，如换行符转义后为`\\n`
    ///
    /// - 文本消息请求体最大不能超过150KB
    ///
    /// - 卡片及富文本消息请求体最大不能超过30KB
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "`{\"text\":\"test content\"}`"
    #[api(kind = "body", name = "content")]
    pub content: String,
    /// 由开发者生成的唯一字符串序列，用于发送消息请求去重；持有相同uuid的请求1小时内至多成功发送一条消息
    ///
    /// **示例值**: "选填，每次调用前请更换，如a0d69e20-1dd1-458b-k525-dfeca4015204"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `50` 字符
    #[api(kind = "body", name = "uuid")]
    pub uuid: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SendRawMessageRespInner {
    #[serde(flatten)]
    data: Option<SendRawMessageResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SendRawMessageResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: MessageSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MessageSubResp {
    /// 消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    ///
    /// **示例值**: "om_dc13264520392913993dd051dba21dcf"
    #[serde(
        rename = "message_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub message_id: String,
    /// 根消息id，用于回复消息场景，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    ///
    /// **示例值**: "om_40eb06e7b84dc71c03e009ad3c754195"
    #[serde(
        rename = "root_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub root_id: String,
    /// 父消息的id，用于回复消息场景，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    ///
    /// **示例值**: "om_d4be107c616aed9c1da8ed8068570a9f"
    #[serde(
        rename = "parent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_id: String,
    /// 消息所属的话题 ID
    ///
    /// **示例值**: "omt_d4be107c616a"
    #[serde(
        rename = "thread_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub thread_id: String,
    /// 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[接收消息内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/events/message_content)
    ///
    /// **示例值**: "card"
    #[serde(
        rename = "msg_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub msg_type: String,
    /// 消息生成的时间戳（毫秒）
    ///
    /// **示例值**: "1615380573411"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 消息更新的时间戳（毫秒）
    ///
    /// **示例值**: "1615380573411"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 消息是否被撤回
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "deleted",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub deleted: bool,
    /// 消息是否被更新
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "updated",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub updated: bool,
    /// 所属的群
    ///
    /// **示例值**: "oc_5ad11d72b830411d72b836c20"
    #[serde(
        rename = "chat_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_id: String,
    /// 发送者，可以是用户或应用
    ///
    /// **示例值**: "object"
    #[serde(
        rename = "sender",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sender: SenderSubResp,
    /// 消息内容
    ///
    /// **示例值**: "json结构"
    #[serde(
        rename = "body",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body: MessageBodySubResp,
    /// 被@的用户或机器人的id列表
    #[serde(
        rename = "mentions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mentions: Vec<MentionSubResp>,
    /// 合并转发消息中，上一层级的消息id message_id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    ///
    /// **示例值**: "om_40eb06e7b84dc71c03e009ad3c754195"
    #[serde(
        rename = "upper_message_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub upper_message_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SenderSubResp {
    /// 该字段标识发送者的id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "cli_9f427eec54ae901b"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 该字段标识发送者的id类型
    ///
    /// **可选值有：**
    ///
    /// - `open_id`
    ///
    /// - `app_id`
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "app_id"
    #[serde(
        rename = "id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_type: String,
    /// 该字段标识发送者的类型
    ///
    /// **可选值有：**
    ///
    /// - `user`: 用户
    ///
    /// - `app`: 应用
    ///
    /// - `anonymous`: 匿名
    ///
    /// - `unknown`: 未知
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "app"
    #[serde(
        rename = "sender_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sender_type: String,
    /// 为租户在飞书上的唯一标识，用来换取对应的tenant_access_token，也可以用作租户在应用里面的唯一标识
    ///
    /// **示例值**: "736588c9260f175e"
    #[serde(
        rename = "tenant_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tenant_key: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MessageBodySubResp {
    /// 消息内容，json结构序列化后的字符串。不同msg_type对应不同内容。消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考：[接收消息内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/events/message_content)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{\"text\":\"@_user_1 test content\"}"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MentionSubResp {
    /// 被@的用户或机器人的序号。例如，第3个被@到的成员，值为“@_user_3”
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "@_user_1"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 被@的用户或者机器人的open_id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_155184d1e73cbfb8973e5a9e698e74f2"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 被@的用户或机器人 id 类型，目前仅支持 `open_id` ([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id))
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "open_id"
    #[serde(
        rename = "id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_type: String,
    /// 被@的用户或机器人的姓名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "Tom"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 为租户在飞书上的唯一标识，用来换取对应的tenant_access_token，也可以用作租户在应用里面的唯一标识
    ///
    /// **示例值**: "736588c9260f175e"
    #[serde(
        rename = "tenant_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tenant_key: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::message::MessageServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(SendRawMessageReq) -> Result<(SendRawMessageResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(SendRawMessageReq) -> Result<(SendRawMessageResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> MessageServiceMocker<'c, IStore, IClient> {
        pub fn mock_send_raw_message<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, SendRawMessageReq, SendRawMessageResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_send_raw_message(
            &self,
            req: &SendRawMessageReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, SendRawMessageReq, SendRawMessageResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::message::send_raw_message::{
            SendRawMessageReq, SendRawMessageResp, SendRawMessageRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .message()
            .mock()
            .mock_send_raw_message(|_| {
                Ok((SendRawMessageResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .message()
            .send_raw_message(SendRawMessageReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .message()
            .send_raw_message(SendRawMessageReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "receive_id": "ou_7d8a6e6df7621556ce0d21922b676706ccs",
    "msg_type": "text",
    "content": "{\"text\":\"test content\"}",
    "uuid": "选填，每次调用前请更换，如a0d69e20-1dd1-458b-k525-dfeca4015204"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::SendRawMessageReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "message_id": "om_dc13264520392913993dd051dba21dcf",
        "root_id": "om_40eb06e7b84dc71c03e009ad3c754195",
        "parent_id": "om_d4be107c616aed9c1da8ed8068570a9f",
        "thread_id": "omt_d4be107c616a",
        "msg_type": "card",
        "create_time": "1615380573411",
        "update_time": "1615380573411",
        "deleted": false,
        "updated": false,
        "chat_id": "oc_5ad11d72b830411d72b836c20",
        "sender": {
            "id": "cli_9f427eec54ae901b",
            "id_type": "app_id",
            "sender_type": "app",
            "tenant_key": "736588c9260f175e"
        },
        "body": {
            "content": "{\"text\":\"@_user_1 test content\"}"
        },
        "mentions": [
            {
                "key": "@_user_1",
                "id": "ou_155184d1e73cbfb8973e5a9e698e74f2",
                "id_type": "open_id",
                "name": "Tom",
                "tenant_key": "736588c9260f175e"
            }
        ],
        "upper_message_id": "om_40eb06e7b84dc71c03e009ad3c754195"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SendRawMessageRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
