//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get>
// Code generated by gen_api. DO NOT EDIT.

use crate::api::DownloadResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};
use serde::{Deserialize, Serialize};

use crate::api::gen::message::MessageService;

impl<'c, IStore: Store, IClient: HttpClient> MessageService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:25+00:00**
    ///
    /// ## 获取消息中的资源文件
    ///
    /// 获取消息中的资源文件，包括音频，视频，图片和文件，**暂不支持表情包资源下载**。当前仅支持 100M 以内的资源文件的下载。
    ///
    /// 文件类型可通过 response header 中`Content-Type`字段获取
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/im-v1/message/get-2>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fim-v1%2Fmessage%2Fget-2>
    pub async fn get_message_file(
        &self,
        req: GetMessageFileReq,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        self.get_message_file_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_message_file](#method.get_message_file) 函数
    pub async fn get_message_file_with_opt(
        &self,
        req: GetMessageFileReq,
        method_option: MethodOption,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_message_file(&req) {
                tracing::info!("[lark] Message#GetMessageFile **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Message#GetMessageFile call api");

        let req = ApiRequest {
            scope: "Message",
            api: "GetMessageFile",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/im/v1/messages/:message_id/resources/:file_key",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (bin_data, bin_name, common_resp) = self.cli.do_download_req(req).await?;
        let resp = DownloadResp {
            data: bin_data,
            name: bin_name,
        };

        Ok((resp, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetMessageFileReq {
    /// 待查询资源对应的消息ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "om_dc13264520392913993dd051dba21dcf"
    #[api(kind = "path", name = "message_id")]
    pub message_id: String,
    /// 待查询资源的key。可以调用[获取指定消息的内容](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/get)接口，通过消息ID查询消息内容中的资源Key。
    ///
    /// **注意**：请求的 file_key 和 message_id 需要匹配
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "file_456a92d6-c6ea-4de4-ac3f-7afcf44ac78g"
    #[api(kind = "path", name = "file_key")]
    pub file_key: String,
    /// 资源类型
    ///
    /// **可选值有：**
    ///
    /// - `image`: 对应消息中的图片或富文本消息中的图片。
    ///
    /// - `file`: 对应消息中的 文件、音频、视频（表情包除外）。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "image"
    #[api(kind = "query", name = "type", v_type = "var", option = "false")]
    pub query_type: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::message::MessageServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<IClient: HttpClient>:
        Fn(GetMessageFileReq) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            IClient: HttpClient,
            T: Fn(GetMessageFileReq) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<IClient> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> MessageServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_message_file<F: MockFunc<IClient>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetMessageFileReq,
            DownloadResp<IClient>,
            Arc<dyn MockFunc<IClient>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_message_file(
            &self,
            req: &GetMessageFileReq,
        ) -> Option<Arc<dyn MockFunc<IClient>>> {
            do_mock::<Mocker, GetMessageFileReq, DownloadResp<IClient>, Arc<dyn MockFunc<IClient>>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}
