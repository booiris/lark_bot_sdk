//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_interview_assessment/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-03T06:49:01+00:00**
    ///
    /// ## 创建外部面评
    ///
    /// 导入来自其他系统的面评信息，创建为外部面评。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_interview_assessment/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/hire-v1/get-candidates/import-external-system-information/create-4>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fget-candidates%2Fimport-external-system-information%2Fcreate-4>
    pub async fn create_hire_external_interview_assessment(
        &self,
        req: CreateHireExternalInterviewAssessmentReq,
    ) -> Result<(CreateHireExternalInterviewAssessmentResp, CommonResponse), Error> {
        self.create_hire_external_interview_assessment_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_hire_external_interview_assessment](#method.create_hire_external_interview_assessment) 函数
    pub async fn create_hire_external_interview_assessment_with_opt(
        &self,
        req: CreateHireExternalInterviewAssessmentReq,
        method_option: MethodOption,
    ) -> Result<(CreateHireExternalInterviewAssessmentResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_create_hire_external_interview_assessment(&req)
            {
                tracing::info!("[lark] Hire#CreateHireExternalInterviewAssessment **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#CreateHireExternalInterviewAssessment call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "CreateHireExternalInterviewAssessment",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/external_interview_assessments",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateHireExternalInterviewAssessmentRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateHireExternalInterviewAssessmentReq {
    /// 外部系统面评主键（仅用于幂等）
    ///
    /// **示例值**: "123"
    #[api(kind = "body", name = "external_id")]
    pub external_id: Option<String>,
    /// 面试官姓名
    ///
    /// **示例值**: "shaojiale"
    #[api(kind = "body", name = "username")]
    pub username: Option<String>,
    /// 面试结果
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `不通过`: 不通过
    ///
    /// `通过`: 通过
    ///
    /// `待定`: 待定
    #[api(kind = "body", name = "conclusion")]
    pub conclusion: Option<i64>,
    /// 评价维度列表
    #[api(kind = "body", name = "assessment_dimension_list")]
    pub assessment_dimension_list: Vec<Option<ExternalInterviewAssessmentDimensionSubReq>>,
    /// 综合记录
    ///
    /// **示例值**: "hello world"
    #[api(kind = "body", name = "content")]
    pub content: Option<String>,
    /// 外部面试 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6986199832494934316"
    #[api(kind = "body", name = "external_interview_id")]
    pub external_interview_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInterviewAssessmentDimensionSubReq {
    /// 打分题分数（当题目类型为「打分题」时使用）
    ///
    /// **示例值**: "99"
    #[serde(
        rename = "score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score: Option<i64>,
    /// 单选选项（当题目类型为「单选题」时使用）
    ///
    /// **示例值**: "opt"
    #[serde(
        rename = "option",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option: Option<String>,
    /// 多选选项（当题目类型为「多选题」时使用）
    ///
    /// **示例值**: "6989181065243969836"
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<Option<String>>,
    /// 描述内容（当题目类型为「描述题」时使用）
    ///
    /// **示例值**: "content"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: Option<String>,
    /// 题目类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `打分题`: 打分题
    ///
    /// `单选题`: 单选题
    ///
    /// `描述题`: 描述题
    ///
    /// `多选题`: 多选题
    #[serde(
        rename = "assessment_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_type: Option<i64>,
    /// 题目标题
    ///
    /// **示例值**: "title"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: Option<String>,
    /// 题目描述
    ///
    /// **示例值**: "desc"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateHireExternalInterviewAssessmentRespInner {
    #[serde(flatten)]
    data: Option<CreateHireExternalInterviewAssessmentResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateHireExternalInterviewAssessmentResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 外部面评信息
    #[serde(
        rename = "external_interview_assessment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_interview_assessment: ExternalInterviewAssessmentSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInterviewAssessmentSubResp {
    /// 外部面评 ID
    ///
    /// **示例值**: "6989181065243969836"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 面试官姓名
    ///
    /// **示例值**: "shaojiale"
    #[serde(
        rename = "username",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub username: String,
    /// 面试结果
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `不通过`: 不通过
    ///
    /// `通过`: 通过
    ///
    /// `待定`: 待定
    #[serde(
        rename = "conclusion",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conclusion: i64,
    /// 评价维度列表
    #[serde(
        rename = "assessment_dimension_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_dimension_list: Vec<ExternalInterviewAssessmentDimensionSubResp>,
    /// 综合记录
    ///
    /// **示例值**: "hello world"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 外部面试 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6986199832494934316"
    #[serde(
        rename = "external_interview_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_interview_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInterviewAssessmentDimensionSubResp {
    /// 打分题分数（当题目类型为「打分题」时使用）
    ///
    /// **示例值**: "99"
    #[serde(
        rename = "score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score: i64,
    /// 单选选项（当题目类型为「单选题」时使用）
    ///
    /// **示例值**: "opt"
    #[serde(
        rename = "option",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option: String,
    /// 多选选项（当题目类型为「多选题」时使用）
    ///
    /// **示例值**: "6989181065243969836"
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<String>,
    /// 描述内容（当题目类型为「描述题」时使用）
    ///
    /// **示例值**: "content"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 题目类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `打分题`: 打分题
    ///
    /// `单选题`: 单选题
    ///
    /// `描述题`: 描述题
    ///
    /// `多选题`: 多选题
    #[serde(
        rename = "assessment_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_type: i64,
    /// 题目标题
    ///
    /// **示例值**: "title"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 题目描述
    ///
    /// **示例值**: "desc"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateHireExternalInterviewAssessmentReq,
        ) -> Result<(CreateHireExternalInterviewAssessmentResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateHireExternalInterviewAssessmentReq,
                )
                    -> Result<(CreateHireExternalInterviewAssessmentResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_hire_external_interview_assessment<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateHireExternalInterviewAssessmentReq,
            CreateHireExternalInterviewAssessmentResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_hire_external_interview_assessment(
            &self,
            req: &CreateHireExternalInterviewAssessmentReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateHireExternalInterviewAssessmentReq,
                CreateHireExternalInterviewAssessmentResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::create_hire_external_interview_assessment::{
            CreateHireExternalInterviewAssessmentReq, CreateHireExternalInterviewAssessmentResp,
            CreateHireExternalInterviewAssessmentRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_create_hire_external_interview_assessment(|_| {
                Ok((
                    CreateHireExternalInterviewAssessmentResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .create_hire_external_interview_assessment(
                CreateHireExternalInterviewAssessmentReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .create_hire_external_interview_assessment(
                CreateHireExternalInterviewAssessmentReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "external_id": "123",
    "username": "shaojiale",
    "conclusion": 1,
    "assessment_dimension_list": [
        {
            "score": 99,
            "option": "opt",
            "options": [
                "opt"
            ],
            "content": "content",
            "assessment_type": 1,
            "title": "title",
            "description": "desc"
        }
    ],
    "content": "hello world",
    "external_interview_id": "6986199832494934316"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::CreateHireExternalInterviewAssessmentReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "external_interview_assessment": {
            "id": "6989181065243969836",
            "username": "shaojiale",
            "conclusion": 1,
            "assessment_dimension_list": [
                {
                    "score": 99,
                    "option": "opt",
                    "options": [
                        "opt"
                    ],
                    "content": "content",
                    "assessment_type": 1,
                    "title": "title",
                    "description": "desc"
                }
            ],
            "content": "hello world",
            "external_interview_id": "6986199832494934316"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateHireExternalInterviewAssessmentRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
