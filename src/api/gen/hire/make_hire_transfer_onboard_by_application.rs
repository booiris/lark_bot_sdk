//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/transfer_onboard>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-10T14:33:08+00:00**
    ///
    /// ## 操作候选人入职
    ///
    /// 根据投递 ID 操作候选人入职并创建员工。投递须处于「待入职」阶段，可通过「转移阶段」接口变更投递状态。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/transfer_onboard>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/candidate-management/delivery-process-management/onboard/transfer_onboard>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Fonboard%2Ftransfer_onboard>
    pub async fn make_hire_transfer_onboard_by_application(
        &self,
        req: MakeHireTransferOnboardByApplicationReq,
    ) -> Result<(MakeHireTransferOnboardByApplicationResp, CommonResponse), Error> {
        self.make_hire_transfer_onboard_by_application_with_opt(req, Default::default())
            .await
    }

    /// 参见 [make_hire_transfer_onboard_by_application](#method.make_hire_transfer_onboard_by_application) 函数
    pub async fn make_hire_transfer_onboard_by_application_with_opt(
        &self,
        req: MakeHireTransferOnboardByApplicationReq,
        method_option: MethodOption,
    ) -> Result<(MakeHireTransferOnboardByApplicationResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_make_hire_transfer_onboard_by_application(&req)
            {
                tracing::info!("[lark] Hire#MakeHireTransferOnboardByApplication **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#MakeHireTransferOnboardByApplication call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "MakeHireTransferOnboardByApplication",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/applications/:application_id/transfer_onboard",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (MakeHireTransferOnboardByApplicationRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct MakeHireTransferOnboardByApplicationReq {
    /// 投递ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7073372582620416300"
    #[api(kind = "path", name = "application_id")]
    pub application_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的部门 ID 的类型
    ///
    /// **示例值**: "department_id"
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 以 open_department_id 来标识部门
    ///
    /// `department_id`: 以 department_id 来标识部门
    ///
    /// `people_admin_department_id`: 以 people_admin_department_id 来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 此次调用中使用的「职级 ID」的类型
    ///
    /// **示例值**: "6942778198054125570"
    ///
    /// **可选值**:
    ///
    /// `people_admin_job_level_id`: 「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `job_level_id`: 「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取
    #[api(
        kind = "query",
        name = "job_level_id_type",
        v_type = "var",
        option = "false"
    )]
    pub job_level_id_type: String,
    /// 此次调用中使用的「序列 ID」的类型
    ///
    /// **示例值**: "6942778198054125571"
    ///
    /// **可选值**:
    ///
    /// `people_admin_job_category_id`: 「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `job_family_id`: 「飞书管理后台」适用的序列 ID，通过[「获取租户序列列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_family/list)接口获取
    #[api(
        kind = "query",
        name = "job_family_id_type",
        v_type = "var",
        option = "false"
    )]
    pub job_family_id_type: String,
    /// 此次调用中使用的「人员类型 ID」的类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `people_admin_employee_type_id`: 「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `employee_type_enum_id`: 「飞书管理后台」适用的人员类型 ID，通过[「查询人员类型」](https://open.feishu.cn/document/server-docs/contact-v3/employee_type_enum/list)接口获取
    #[api(
        kind = "query",
        name = "employee_type_id_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type_id_type: String,
    /// 实际入职时间
    ///
    /// **示例值**: "1616428800000"
    #[api(kind = "body", name = "actual_onboard_time")]
    pub actual_onboard_time: Option<i64>,
    /// 预期转正时间
    ///
    /// **示例值**: "1616428800000"
    #[api(kind = "body", name = "expected_conversion_time")]
    pub expected_conversion_time: Option<i64>,
    /// 招聘需求 ID
    ///
    /// **示例值**: "6960663240925956402"
    #[api(kind = "body", name = "job_requirement_id")]
    pub job_requirement_id: Option<String>,
    /// 操作人 UserID
    ///
    /// **示例值**: "ou-xxx"
    #[api(kind = "body", name = "operator_id")]
    pub operator_id: Option<String>,
    /// 候选人办公地点 ID ，枚举可通过接口「获取地址列表」获取，将用于候选人内推奖规则判断
    ///
    /// **示例值**: "CT_2"
    #[api(kind = "body", name = "onboard_city_code")]
    pub onboard_city_code: Option<String>,
    /// 候选人入职部门 ID ，枚举可通过接口「获取部门信息列表」获取，将用于候选人内推奖规则判断
    ///
    /// **示例值**: "6966123381141866028"
    #[api(kind = "body", name = "department")]
    pub department: Option<String>,
    /// 候选人直属上级 UserID ，将用于候选人内推奖规则判断
    ///
    /// **示例值**: "ou-xxx"
    #[api(kind = "body", name = "leader")]
    pub leader: Option<String>,
    /// 候选人序列 ID ，枚举可通过接口「获取职务分类列表」获取，将用于候选人内推奖规则判断
    ///
    /// **示例值**: "7006234385490345986"
    #[api(kind = "body", name = "sequence")]
    pub sequence: Option<String>,
    /// 候选人职级 ID ，枚举可通过接口「获取职级列表」获取，将用于候选人内推奖规则判断
    ///
    /// **示例值**: "6937934036379650311"
    #[api(kind = "body", name = "level")]
    pub level: Option<String>,
    /// 候选人入职人员类型 ID，可通过接口人力资源管理平台「获取员工类型列表」获取，将用于候选人内推奖规则判断
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "employee_type")]
    pub employee_type: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct MakeHireTransferOnboardByApplicationRespInner {
    #[serde(flatten)]
    data: Option<MakeHireTransferOnboardByApplicationResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct MakeHireTransferOnboardByApplicationResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// employee
    #[serde(
        rename = "employee",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee: EmployeeSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmployeeSubResp {
    /// 员工ID
    ///
    /// **示例值**: "7095600054216542508"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 投递ID
    ///
    /// **示例值**: "7073372582620416300"
    #[serde(
        rename = "application_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application_id: String,
    /// 入职状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Onboarded`: 已入职
    ///
    /// `Overboarded`: 已离职
    #[serde(
        rename = "onboard_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboard_status: i64,
    /// 转正状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Unconvert`: 未转正
    ///
    /// `Converted`: 已转正
    #[serde(
        rename = "conversion_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conversion_status: i64,
    /// 实际入职时间
    ///
    /// **示例值**: "1637596800000"
    #[serde(
        rename = "onboard_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboard_time: i64,
    /// 预期转正时间
    ///
    /// **示例值**: "1637596800000"
    #[serde(
        rename = "expected_conversion_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expected_conversion_time: i64,
    /// 实际转正时间
    ///
    /// **示例值**: "1637596800000"
    #[serde(
        rename = "actual_conversion_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub actual_conversion_time: i64,
    /// 离职时间
    ///
    /// **示例值**: "1637596800000"
    #[serde(
        rename = "overboard_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overboard_time: i64,
    /// 离职原因
    ///
    /// **示例值**: "职业发展考虑"
    #[serde(
        rename = "overboard_note",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overboard_note: String,
    /// 办公地点
    ///
    /// **示例值**: "CT_2"
    #[serde(
        rename = "onboard_city_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboard_city_code: String,
    /// 入职部门
    ///
    /// **示例值**: "6966123381141866028"
    #[serde(
        rename = "department",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department: String,
    /// 直属上级
    ///
    /// **示例值**: "ou-xxx"
    #[serde(
        rename = "leader",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leader: String,
    /// 序列
    ///
    /// **示例值**: "6937934036379650311"
    #[serde(
        rename = "sequence",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sequence: String,
    /// 职级
    ///
    /// **示例值**: "7006234385490345986"
    #[serde(
        rename = "level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub level: String,
    /// 员工类型
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "employee_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type: String,
    /// 招聘需求ID
    ///
    /// **示例值**: "123123123213"
    #[serde(
        rename = "job_requirement_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_requirement_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            MakeHireTransferOnboardByApplicationReq,
        ) -> Result<(MakeHireTransferOnboardByApplicationResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    MakeHireTransferOnboardByApplicationReq,
                )
                    -> Result<(MakeHireTransferOnboardByApplicationResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_make_hire_transfer_onboard_by_application<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            MakeHireTransferOnboardByApplicationReq,
            MakeHireTransferOnboardByApplicationResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_make_hire_transfer_onboard_by_application(
            &self,
            req: &MakeHireTransferOnboardByApplicationReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                MakeHireTransferOnboardByApplicationReq,
                MakeHireTransferOnboardByApplicationResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::make_hire_transfer_onboard_by_application::{
            MakeHireTransferOnboardByApplicationReq, MakeHireTransferOnboardByApplicationResp,
            MakeHireTransferOnboardByApplicationRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_make_hire_transfer_onboard_by_application(|_| {
                Ok((
                    MakeHireTransferOnboardByApplicationResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .make_hire_transfer_onboard_by_application(
                MakeHireTransferOnboardByApplicationReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .make_hire_transfer_onboard_by_application(
                MakeHireTransferOnboardByApplicationReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "actual_onboard_time": 1616428800000,
    "expected_conversion_time": 1616428800000,
    "job_requirement_id": "6960663240925956402",
    "operator_id": "ou-xxx",
    "onboard_city_code": "CT_2",
    "department": "6966123381141866028",
    "leader": "ou-xxx",
    "sequence": "7006234385490345986",
    "level": "6937934036379650311",
    "employee_type": "1"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::MakeHireTransferOnboardByApplicationReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "employee": {
            "id": "7095600054216542508",
            "application_id": "7073372582620416300",
            "onboard_status": 1,
            "conversion_status": 1,
            "onboard_time": 1637596800000,
            "expected_conversion_time": 1637596800000,
            "actual_conversion_time": 1637596800000,
            "overboard_time": 1637596800000,
            "overboard_note": "职业发展考虑",
            "onboard_city_code": "CT_2",
            "department": "6966123381141866028",
            "leader": "ou-xxx",
            "sequence": "6937934036379650311",
            "level": "7006234385490345986",
            "employee_type": "1",
            "job_requirement_id": "123123123213"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<MakeHireTransferOnboardByApplicationRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
