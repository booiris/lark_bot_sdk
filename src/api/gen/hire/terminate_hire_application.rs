//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/terminate>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-10T14:31:11+00:00**
    ///
    /// ## 终止投递
    ///
    /// 根据投递 ID 修改投递状态为「已终止」。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/terminate>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/terminate>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Fapplication%2Fterminate>
    pub async fn terminate_hire_application(
        &self,
        req: TerminateHireApplicationReq,
    ) -> Result<(TerminateHireApplicationResp, CommonResponse), Error> {
        self.terminate_hire_application_with_opt(req, Default::default())
            .await
    }

    /// 参见 [terminate_hire_application](#method.terminate_hire_application) 函数
    pub async fn terminate_hire_application_with_opt(
        &self,
        req: TerminateHireApplicationReq,
        method_option: MethodOption,
    ) -> Result<(TerminateHireApplicationResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_terminate_hire_application(&req) {
                tracing::info!("[lark] Hire#TerminateHireApplication **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#TerminateHireApplication call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "TerminateHireApplication",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/applications/:application_id/terminate",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (TerminateHireApplicationRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct TerminateHireApplicationReq {
    /// 投递ID，可通过[获取投递列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list)接口获取
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "12312312312"
    #[api(kind = "path", name = "application_id")]
    pub application_id: String,

    /// 终止原因的类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `我们拒绝了候选人`: 我们拒绝了候选人
    ///
    /// `候选人拒绝了我们`: 候选人拒绝了我们
    ///
    /// `其他`: 其他
    #[api(kind = "body", name = "termination_type")]
    pub termination_type: i64,
    /// 终止的具体原因的id列表，可通过[获取终止投递原因](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/termination_reason/list)接口获取
    ///
    /// **示例值**: "["6891560630172518670"]"
    #[api(kind = "body", name = "termination_reason_list")]
    pub termination_reason_list: Vec<Option<String>>,
    /// 终止备注
    ///
    /// **示例值**: "不符合期望"
    #[api(kind = "body", name = "termination_reason_note")]
    pub termination_reason_note: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct TerminateHireApplicationRespInner {
    #[serde(flatten)]
    data: Option<TerminateHireApplicationResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct TerminateHireApplicationResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            TerminateHireApplicationReq,
        ) -> Result<(TerminateHireApplicationResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    TerminateHireApplicationReq,
                ) -> Result<(TerminateHireApplicationResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_terminate_hire_application<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            TerminateHireApplicationReq,
            TerminateHireApplicationResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_terminate_hire_application(
            &self,
            req: &TerminateHireApplicationReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                TerminateHireApplicationReq,
                TerminateHireApplicationResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::terminate_hire_application::{
            TerminateHireApplicationReq, TerminateHireApplicationResp,
            TerminateHireApplicationRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_terminate_hire_application(|_| {
                Ok((
                    TerminateHireApplicationResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .terminate_hire_application(TerminateHireApplicationReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .terminate_hire_application(TerminateHireApplicationReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "termination_type": 1,
    "termination_reason_list": [
        "7230753910687080000"
    ],
    "termination_reason_note": "不符合期望"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::TerminateHireApplicationReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<TerminateHireApplicationRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
