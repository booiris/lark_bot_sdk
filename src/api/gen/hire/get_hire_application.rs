//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-26T12:52:38+00:00**
    ///
    /// ## 获取投递信息
    ///
    /// 根据投递 ID 获取单个投递信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Fapplication%2Fget>
    pub async fn get_hire_application(
        &self,
        req: GetHireApplicationReq,
    ) -> Result<(GetHireApplicationResp, CommonResponse), Error> {
        self.get_hire_application_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_hire_application](#method.get_hire_application) 函数
    pub async fn get_hire_application_with_opt(
        &self,
        req: GetHireApplicationReq,
        method_option: MethodOption,
    ) -> Result<(GetHireApplicationResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_hire_application(&req) {
                tracing::info!("[lark] Hire#GetHireApplication **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireApplication call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireApplication",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/applications/:application_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireApplicationRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireApplicationReq {
    /// 投递 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6949805467799537964"
    #[api(kind = "path", name = "application_id")]
    pub application_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 请求控制参数，用于控制接口响应逻辑。如需一次查询多个用户ID，可通过将同一参数名多次传递，并且每次传递不同的参数值。例如：https://{url}?options={option1}&options={option2}。
    #[api(kind = "query", name = "options", v_type = "list", option = "false")]
    pub options: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireApplicationRespInner {
    #[serde(flatten)]
    data: Option<GetHireApplicationResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireApplicationResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 投递数据
    #[serde(
        rename = "application",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application: ApplicationSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationSubResp {
    /// 投递id
    ///
    /// **示例值**: "6949805467799537964"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 投递的职位 ID
    ///
    /// **示例值**: "6843547872837273223"
    #[serde(
        rename = "job_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_id: String,
    /// 候选人 ID
    ///
    /// **示例值**: "6843547872837273223"
    #[serde(
        rename = "talent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub talent_id: String,
    /// 简历来源 ID
    ///
    /// **示例值**: "6583482347283472832"
    #[serde(
        rename = "resume_source_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resume_source_id: String,
    /// 投递处于的阶段
    #[serde(
        rename = "stage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage: ApplicationStageInfoSubResp,
    /// 活跃状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `活跃`: 活跃
    ///
    /// `非活跃`: 非活跃，即为「已终止」
    #[serde(
        rename = "active_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active_status: i64,
    /// 投递方式，详细枚举请参考[「枚举常量介绍」](https://open.larkoffice.com/document/server-docs/hire-v1/enum) - 投递方式枚举定义
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `HR寻访`: HR寻访
    ///
    /// `候选人主动投递`: 候选人主动投递
    #[serde(
        rename = "delivery_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub delivery_type: i64,
    /// 投递来源信息
    #[serde(
        rename = "resume_source_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resume_source_info: ApplicationResumeSourceSubResp,
    /// 官网投递来源
    #[serde(
        rename = "website_resume_source",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub website_resume_source: ApplicationWebsiteResumeSourceSubResp,
    /// 简历附件 ID
    ///
    /// **示例值**: "6960663240925956415"
    #[serde(
        rename = "talent_attachment_resume_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub talent_attachment_resume_id: String,
    /// 创建时间
    ///
    /// **示例值**: "1632990774278"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 修改时间
    ///
    /// **示例值**: "1634801678103"
    #[serde(
        rename = "modify_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modify_time: String,
    /// 阶段变更时间列表
    #[serde(
        rename = "stage_time_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage_time_list: Vec<ApplicationStageTimeSubResp>,
    /// 终止原因的类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `我们拒绝了候选人`: 我们拒绝了候选人
    ///
    /// `候选人拒绝了我们`: 候选人拒绝了我们
    ///
    /// `其他`: 其他
    #[serde(
        rename = "termination_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub termination_type: i64,
    /// 终止的具体原因的id列表，详细信息请参考[获取终止投递原因](https://open.larkoffice.com/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/list-2)
    #[serde(
        rename = "termination_reason_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub termination_reason_list: Vec<String>,
    /// 终止备注
    ///
    /// **示例值**: "其他投递已入职"
    #[serde(
        rename = "termination_reason_note",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub termination_reason_note: String,
    /// 意向投递城市列表
    #[serde(
        rename = "application_preferred_city_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application_preferred_city_list: Vec<CodeNameObjectSubResp>,
    /// 投递创建人 ID，仅当投递创建人为企业内部员工时可获取（如员工手动上传简历 / 加入职位 / 内推），其余情况返回为空（如候选人主动投递）
    ///
    /// **示例值**: "ou_ce613028fe74745421f5dc320bb9c709"
    #[serde(
        rename = "creator_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub creator_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationStageInfoSubResp {
    /// 阶段 ID
    ///
    /// **示例值**: "614218419274131"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 阶段中文名字
    ///
    /// **示例值**: "面试"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 英文名
    ///
    /// **示例值**: "Interview"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 阶段类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `筛选型`: 筛选型
    ///
    /// `评估型`: 评估型
    ///
    /// `笔试型`: 笔试型
    ///
    /// `面试型`: 面试型
    ///
    /// `Offer型`: Offer型
    ///
    /// `待入职`: 待入职
    ///
    /// `已入职`: 已入职
    ///
    /// `其它类型`: 其它类型
    ///
    /// `系统默认`: 系统默认
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationResumeSourceSubResp {
    /// 投递来源 ID
    ///
    /// **示例值**: "614218419274131"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 投递来源名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
    /// 投递来源类型
    ///
    /// **示例值**: "10002"
    ///
    /// **可选值**:
    ///
    /// `内推`: 内推
    ///
    /// `猎头`: 猎头
    ///
    /// `内部来源`: 内部来源
    ///
    /// `第三方招聘网站`: 第三方招聘网站
    ///
    /// `社交媒体`: 社交媒体
    ///
    /// `线下来源`: 线下来源
    ///
    /// `其他`: 其他
    ///
    /// `外部推荐`: 外部推荐
    ///
    /// `员工转岗`: 员工转岗
    ///
    /// `实习生转正`: 实习生转正
    #[serde(
        rename = "resume_source_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resume_source_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationWebsiteResumeSourceSubResp {
    /// 官网站点 ID
    ///
    /// **示例值**: "614218419274131"
    #[serde(
        rename = "website_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub website_id: String,
    /// 官网站点名称
    #[serde(
        rename = "website_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub website_name: I18nSubResp,
    /// 推广渠道来源
    #[serde(
        rename = "channel",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub channel: ApplicationWebsiteChannelSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 中文
    ///
    /// **示例值**: "测试"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文
    ///
    /// **示例值**: "test"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationWebsiteChannelSubResp {
    /// 官网推广渠道 ID
    ///
    /// **示例值**: "777218419274131"
    #[serde(
        rename = "channel_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub channel_id: String,
    /// 官网推广渠道名称
    #[serde(
        rename = "channel_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub channel_name: I18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationStageTimeSubResp {
    /// 阶段 ID
    ///
    /// **示例值**: "614218419274131"
    #[serde(
        rename = "stage_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage_id: String,
    /// 最近一次进入该阶段的时间
    ///
    /// **示例值**: "1632991542615"
    #[serde(
        rename = "enter_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enter_time: String,
    /// 最后一次离开时间，如当前在该阶段，则为空
    ///
    /// **示例值**: "1631509574398"
    #[serde(
        rename = "exit_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub exit_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CodeNameObjectSubResp {
    /// 编码
    ///
    /// **示例值**: "1111"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetHireApplicationReq) -> Result<(GetHireApplicationResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetHireApplicationReq) -> Result<(GetHireApplicationResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_application<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetHireApplicationReq, GetHireApplicationResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_application(
            &self,
            req: &GetHireApplicationReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetHireApplicationReq, GetHireApplicationResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_application::{
            GetHireApplicationReq, GetHireApplicationResp, GetHireApplicationRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_application(|_| {
                Ok((GetHireApplicationResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .hire()
            .get_hire_application(GetHireApplicationReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .get_hire_application(GetHireApplicationReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "application": {
            "id": "6949805467799537964",
            "job_id": "6843547872837273223",
            "talent_id": "6843547872837273223",
            "resume_source_id": "6583482347283472832",
            "stage": {
                "id": "614218419274131",
                "zh_name": "面试",
                "en_name": "Interview",
                "type": 1
            },
            "active_status": 1,
            "delivery_type": 1,
            "resume_source_info": {
                "id": "614218419274131",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                },
                "resume_source_type": 10002
            },
            "website_resume_source": {
                "website_id": "614218419274131",
                "website_name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                },
                "channel": {
                    "channel_id": "777218419274131",
                    "channel_name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                }
            },
            "talent_attachment_resume_id": "6960663240925956415",
            "create_time": "1632990774278",
            "modify_time": "1634801678103",
            "stage_time_list": [
                {
                    "stage_id": "614218419274131",
                    "enter_time": "1632991542615",
                    "exit_time": "1631509574398"
                }
            ],
            "termination_type": 1,
            "termination_reason_list": [
                "6942778198054125570"
            ],
            "termination_reason_note": "其他投递已入职",
            "application_preferred_city_list": [
                {
                    "code": "1111",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                }
            ],
            "creator_id": "ou_ce613028fe74745421f5dc320bb9c709"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireApplicationRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
