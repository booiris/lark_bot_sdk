//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T02:13:44+00:00**
    ///
    /// ## 获取投递列表
    ///
    /// 获取投递列表信息。可根据「招聘流程 ID」、「招聘阶段 ID」、「人才 ID」、「职位 ID」、「投递活跃状态」以及「投递更新时间」进行条件筛选。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/application/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Fapplication%2Flist>
    pub async fn get_hire_application_list(
        &self,
        req: GetHireApplicationListReq,
    ) -> Result<(GetHireApplicationListResp, CommonResponse), Error> {
        self.get_hire_application_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_hire_application_list](#method.get_hire_application_list) 函数
    pub async fn get_hire_application_list_with_opt(
        &self,
        req: GetHireApplicationListReq,
        method_option: MethodOption,
    ) -> Result<(GetHireApplicationListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_hire_application_list(&req) {
                tracing::info!("[lark] Hire#GetHireApplicationList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireApplicationList call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireApplicationList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/applications",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireApplicationListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireApplicationListReq {
    /// 招聘流程 ID，可通过[获取招聘流程信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list)接口中的「流程 ID」获取
    ///
    /// **示例值**: "6960663240925956554"
    #[api(kind = "query", name = "process_id", v_type = "var", option = "false")]
    pub process_id: String,
    /// 招聘阶段 ID，可通过[获取招聘流程信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list)接口每个流程下的「阶段列表」获取
    ///
    /// **示例值**: "614218419274131"
    #[api(kind = "query", name = "stage_id", v_type = "var", option = "false")]
    pub stage_id: String,
    /// 人才 ID，可通过[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)接口获取
    ///
    /// **示例值**: "6891560630172518670"
    #[api(kind = "query", name = "talent_id", v_type = "var", option = "false")]
    pub talent_id: String,
    /// 投递活跃状态
    ///
    /// <br>
    ///
    /// **可选值有**：
    ///
    /// - `1`：活跃投递
    ///
    /// - `2`：非活跃投递
    ///
    /// - `3`：全部
    ///
    /// **示例值**: "1"
    #[api(
        kind = "query",
        name = "active_status",
        v_type = "var",
        option = "false"
    )]
    pub active_status: String,
    /// 职位 ID，可通过[获取职位列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/list)接口获取
    ///
    /// **示例值**: "7334134355464633"
    #[api(kind = "query", name = "job_id", v_type = "var", option = "false")]
    pub job_id: String,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小
    ///
    /// <br>
    ///
    /// **最大值**：200
    ///
    /// **示例值**: "100"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 最早更新时间，毫秒时间戳
    ///
    /// **示例值**: "1618500278663"
    #[api(
        kind = "query",
        name = "update_start_time",
        v_type = "var",
        option = "false"
    )]
    pub update_start_time: String,
    /// 最晚更新时间，毫秒时间戳
    ///
    /// **示例值**: "1618500278663"
    #[api(
        kind = "query",
        name = "update_end_time",
        v_type = "var",
        option = "false"
    )]
    pub update_end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireApplicationListRespInner {
    #[serde(flatten)]
    data: Option<GetHireApplicationListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireApplicationListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 投递 ID 列表，详情请参考：[获取投递信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get)
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<String>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "1721899407885_7395497752245422387"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetHireApplicationListReq) -> Result<(GetHireApplicationListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetHireApplicationListReq,
                ) -> Result<(GetHireApplicationListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_application_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetHireApplicationListReq,
            GetHireApplicationListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_application_list(
            &self,
            req: &GetHireApplicationListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetHireApplicationListReq,
                GetHireApplicationListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_application_list::{
            GetHireApplicationListReq, GetHireApplicationListResp, GetHireApplicationListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_application_list(|_| {
                Ok((
                    GetHireApplicationListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .get_hire_application_list(GetHireApplicationListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .get_hire_application_list(GetHireApplicationListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "ok",
    "data": {
        "items": [
            "7395810933768997130"
        ],
        "page_token": "1721899407885_7395497752245422387",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireApplicationListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
