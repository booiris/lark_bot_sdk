//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/offer_status>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-18T06:35:45+00:00**
    ///
    /// ## 更新 Offer 状态
    ///
    /// 通过 Offer ID 更新候选人 Offer 的「Offer 审批状态」或 「Offer 发送和接受状态」。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/offer_status>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/offer_status>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Foffer%2Foffer_status>
    pub async fn update_hire_offer_status(
        &self,
        req: UpdateHireOfferStatusReq,
    ) -> Result<(UpdateHireOfferStatusResp, CommonResponse), Error> {
        self.update_hire_offer_status_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_hire_offer_status](#method.update_hire_offer_status) 函数
    pub async fn update_hire_offer_status_with_opt(
        &self,
        req: UpdateHireOfferStatusReq,
        method_option: MethodOption,
    ) -> Result<(UpdateHireOfferStatusResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_hire_offer_status(&req) {
                tracing::info!("[lark] Hire#UpdateHireOfferStatus **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#UpdateHireOfferStatus call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "UpdateHireOfferStatus",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/offers/:offer_id/offer_status",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateHireOfferStatusRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateHireOfferStatusReq {
    /// Offer ID，如何获取请参考[获取 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list)
    ///
    /// **示例值**: "6930815272790114324"
    #[api(kind = "path", name = "offer_id")]
    pub offer_id: String,

    /// Offer 状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6"
    ///
    /// **可选值**:
    ///
    /// `Approving`: Offer 审批中
    ///
    /// `Withdrawn`: Offer 审批已撤回
    ///
    /// `Approved`: Offer 审批通过
    ///
    /// `Rejected`: Offer 审批不通过
    ///
    /// `OfferLetterSent`: Offer 已发送
    ///
    /// `OfferAccepted`: Offer 被候选人接受
    ///
    /// `OfferRejected`: Offer 被候选人拒绝
    ///
    /// `Obsolete`: Offer 已失效
    ///
    /// `NoApproval`: Offer 已创建
    #[api(kind = "body", name = "offer_status")]
    pub offer_status: i64,
    /// Offer 失效时间
    ///
    /// <br>
    ///
    /// **注意**：当请求参数 offer_status 为「Offer 已发送」时必填
    ///
    /// <br>
    ///
    /// **值格式**："YYYY-MM-DD"
    ///
    /// **示例值**: "2023-01-01"
    #[api(kind = "body", name = "expiration_date")]
    pub expiration_date: Option<String>,
    /// 终止原因 ID 列表，可通过[获取终止投递原因](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/termination_reason/list)接口获取
    ///
    /// <br>
    ///
    /// **最大长度**：
    ///
    /// 50
    ///
    /// <br>
    ///
    /// **注意**：当请求参数 offer_status 为「Offer 被候选人拒绝」时必填
    #[api(kind = "body", name = "termination_reason_id_list")]
    pub termination_reason_id_list: Vec<Option<String>>,
    /// Offer 终止备注信息
    ///
    /// **示例值**: "不符合期望"
    #[api(kind = "body", name = "termination_reason_note")]
    pub termination_reason_note: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateHireOfferStatusRespInner {
    #[serde(flatten)]
    data: Option<UpdateHireOfferStatusResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateHireOfferStatusResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateHireOfferStatusReq) -> Result<(UpdateHireOfferStatusResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateHireOfferStatusReq,
                ) -> Result<(UpdateHireOfferStatusResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_hire_offer_status<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdateHireOfferStatusReq,
            UpdateHireOfferStatusResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_hire_offer_status(
            &self,
            req: &UpdateHireOfferStatusReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateHireOfferStatusReq, UpdateHireOfferStatusResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::update_hire_offer_status::{
            UpdateHireOfferStatusReq, UpdateHireOfferStatusResp, UpdateHireOfferStatusRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_update_hire_offer_status(|_| {
                Ok((
                    UpdateHireOfferStatusResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .update_hire_offer_status(UpdateHireOfferStatusReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .update_hire_offer_status(UpdateHireOfferStatusReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "offer_status": 6,
    "expiration_date": "2023-01-01",
    "termination_reason_id_list": [
        "6891560630172518670"
    ],
    "termination_reason_note": "不符合期望"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateHireOfferStatusReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateHireOfferStatusRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
