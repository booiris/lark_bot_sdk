//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/questionnaire/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-24T13:39:45+00:00**
    ///
    /// ## 获取面试满意度问卷列表
    ///
    /// 获取面试满意度问卷列表。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/questionnaire/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/interview/list-2>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Finterview%2Flist-2>
    pub async fn get_hire_questionnaire_list(
        &self,
        req: GetHireQuestionnaireListReq,
    ) -> Result<(GetHireQuestionnaireListResp, CommonResponse), Error> {
        self.get_hire_questionnaire_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_hire_questionnaire_list](#method.get_hire_questionnaire_list) 函数
    pub async fn get_hire_questionnaire_list_with_opt(
        &self,
        req: GetHireQuestionnaireListReq,
        method_option: MethodOption,
    ) -> Result<(GetHireQuestionnaireListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_hire_questionnaire_list(&req) {
                tracing::info!("[lark] Hire#GetHireQuestionnaireList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireQuestionnaireList call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireQuestionnaireList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/questionnaires",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireQuestionnaireListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireQuestionnaireListReq {
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "1231231987"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小
    ///
    /// **示例值**: "100"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 投递 ID，当飞书招聘-设置-面试满意度问卷设置中，问卷发送时机为「面试流程结束后」，仅支持通过application_id进行查询
    ///
    /// **示例值**: "6985833807195212076"
    #[api(
        kind = "query",
        name = "application_id",
        v_type = "var",
        option = "false"
    )]
    pub application_id: String,
    /// 面试 ID，当飞书招聘-设置-面试满意度问卷设置中，问卷发送时机为「每次面试结束后」或「第一次面试结束后」，仅支持通过interview_id进行查询
    ///
    /// **示例值**: "7038435261598763308"
    #[api(
        kind = "query",
        name = "interview_id",
        v_type = "var",
        option = "false"
    )]
    pub interview_id: String,
    /// 最早更新时间
    ///
    /// **示例值**: "1638848468868"
    #[api(
        kind = "query",
        name = "update_start_time",
        v_type = "var",
        option = "false"
    )]
    pub update_start_time: String,
    /// 最晚更新时间
    ///
    /// **示例值**: "1638848468869"
    #[api(
        kind = "query",
        name = "update_end_time",
        v_type = "var",
        option = "false"
    )]
    pub update_end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireQuestionnaireListRespInner {
    #[serde(flatten)]
    data: Option<GetHireQuestionnaireListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireQuestionnaireListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "1234452132"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 满意度评价列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<QuestionnaireSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct QuestionnaireSubResp {
    /// 问卷 ID
    ///
    /// **示例值**: "7037986982531778860"
    #[serde(
        rename = "questionnaire_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub questionnaire_id: String,
    /// 投递 ID；当「面试满意度问卷发送时间」选项选择「面试流程结束后」，将返回 投递 ID
    ///
    /// **示例值**: "6985833807195212076"
    #[serde(
        rename = "application_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application_id: String,
    /// 面试 ID；当「面试满意度问卷发送时间」选项选择「第一次面试后」、「每次面试后」将返回 面试 ID
    ///
    /// **示例值**: "7038435261598763308"
    #[serde(
        rename = "interview_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub interview_id: String,
    /// 问卷版本
    ///
    /// **示例值**: "59"
    #[serde(
        rename = "version",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub version: i64,
    /// 题目列表
    #[serde(
        rename = "questions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub questions: Vec<QuestionSubResp>,
    /// 是否完成作答
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_answers",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_answers: bool,
    /// 更新时间
    ///
    /// **示例值**: "1644412504000"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct QuestionSubResp {
    /// 题目 ID
    ///
    /// **示例值**: "6950930570311829804"
    #[serde(
        rename = "question_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question_id: String,
    /// 题目中文名称
    ///
    /// **示例值**: "你的总体评价如何？"
    #[serde(
        rename = "question_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question_name: String,
    /// 题目英文名称
    ///
    /// **示例值**: "How would you describe your overall experience?"
    #[serde(
        rename = "question_en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question_en_name: String,
    /// 题目中文描述
    ///
    /// **示例值**: "测试描述内容"
    #[serde(
        rename = "question_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question_desc: String,
    /// 题目英文描述
    ///
    /// **示例值**: "Test Text"
    #[serde(
        rename = "question_en_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question_en_desc: String,
    /// 题目类型
    ///
    /// **示例值**: "4"
    ///
    /// **可选值**:
    ///
    /// `SingleChoice`: 单选题
    ///
    /// `MultiChoice`: 多选题
    ///
    /// `Text`: 描述题
    ///
    /// `Score`: 评分题
    #[serde(
        rename = "question_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question_type: i64,
    /// 是否必填
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_required",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_required: bool,
    /// 选项题回答列表（单选题及多选题）
    #[serde(
        rename = "select_option_result_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub select_option_result_list: Vec<SelectOptionResultSubResp>,
    /// 评分题回答
    #[serde(
        rename = "five_start_scoring_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub five_start_scoring_result: FiveStartScoringResultSubResp,
    /// 描述题回答
    ///
    /// **示例值**: "测试描述内容"
    #[serde(
        rename = "description_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description_result: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FiveStartScoringResultSubResp {
    /// 最高分中文描述
    ///
    /// **示例值**: "非常好"
    #[serde(
        rename = "highest_score_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub highest_score_desc: String,
    /// 最高分英文描述
    ///
    /// **示例值**: "Very Good"
    #[serde(
        rename = "highest_score_en_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub highest_score_en_desc: String,
    /// 最低分中文描述
    ///
    /// **示例值**: "非常差"
    #[serde(
        rename = "lowest_score_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lowest_score_desc: String,
    /// 最低分英文描述
    ///
    /// **示例值**: "Very Bad"
    #[serde(
        rename = "lowest_score_en_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lowest_score_en_desc: String,
    /// 评分分数
    ///
    /// **示例值**: "4"
    #[serde(
        rename = "score_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score_result: f64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SelectOptionResultSubResp {
    /// 选项 ID
    ///
    /// **示例值**: "6950930570311993644"
    #[serde(
        rename = "option_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_id: String,
    /// 选项中文名称
    ///
    /// **示例值**: "选项一"
    #[serde(
        rename = "option_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_name: String,
    /// 选项英文名称
    ///
    /// **示例值**: "Option 1"
    #[serde(
        rename = "option_en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_en_name: String,
    /// 选项中文描述
    ///
    /// **示例值**: "测试选项描述"
    #[serde(
        rename = "option_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_desc: String,
    /// 选项英文描述
    ///
    /// **示例值**: "Test Option Desc"
    #[serde(
        rename = "option_en_desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_en_desc: String,
    /// 是否选择
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_selected",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_selected: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetHireQuestionnaireListReq,
        ) -> Result<(GetHireQuestionnaireListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetHireQuestionnaireListReq,
                ) -> Result<(GetHireQuestionnaireListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_questionnaire_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetHireQuestionnaireListReq,
            GetHireQuestionnaireListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_questionnaire_list(
            &self,
            req: &GetHireQuestionnaireListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetHireQuestionnaireListReq,
                GetHireQuestionnaireListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_questionnaire_list::{
            GetHireQuestionnaireListReq, GetHireQuestionnaireListResp,
            GetHireQuestionnaireListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_questionnaire_list(|_| {
                Ok((
                    GetHireQuestionnaireListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .get_hire_questionnaire_list(GetHireQuestionnaireListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .get_hire_questionnaire_list(GetHireQuestionnaireListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "has_more": true,
        "page_token": "1234452132",
        "items": [
            {
                "questionnaire_id": "7037986982531778860",
                "application_id": "6985833807195212076",
                "interview_id": "7038435261598763308",
                "version": 59,
                "questions": [
                    {
                        "question_id": "6950930570311829804",
                        "question_name": "你的总体评价如何？",
                        "question_en_name": "How would you describe your overall experience?",
                        "question_desc": "测试描述内容",
                        "question_en_desc": "Test Text",
                        "question_type": 4,
                        "is_required": true,
                        "select_option_result_list": [
                            {
                                "option_id": "6950930570311993644",
                                "option_name": "选项一",
                                "option_en_name": "Option 1",
                                "option_desc": "测试选项描述",
                                "option_en_desc": "Test Option Desc",
                                "is_selected": true
                            }
                        ],
                        "five_start_scoring_result": {
                            "highest_score_desc": "非常好",
                            "highest_score_en_desc": "Very Good",
                            "lowest_score_desc": "非常差",
                            "lowest_score_en_desc": "Very Bad",
                            "score_result": 4
                        },
                        "description_result": "测试描述内容"
                    }
                ],
                "has_answers": true,
                "update_time": "1644412504000"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireQuestionnaireListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
