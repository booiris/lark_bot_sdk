//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-01-22T08:33:48+00:00**
    ///
    /// ## 获取职位信息
    ///
    /// 根据职位 ID 获取职位信息。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/recruitment-related-configuration/job/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Frecruitment-related-configuration%2Fjob%2Fget>
    pub async fn get_hire_job(
        &self,
        req: GetHireJobReq,
    ) -> Result<(GetHireJobResp, CommonResponse), Error> {
        self.get_hire_job_with_opt(req, Default::default()).await
    }

    /// 参见 [get_hire_job](#method.get_hire_job) 函数
    pub async fn get_hire_job_with_opt(
        &self,
        req: GetHireJobReq,
        method_option: MethodOption,
    ) -> Result<(GetHireJobResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_hire_job(&req) {
                tracing::info!("[lark] Hire#GetHireJob **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireJob call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireJob",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/jobs/:job_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireJobRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireJobReq {
    /// 职位 ID，请求Path中
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6001"
    #[api(kind = "path", name = "job_id")]
    pub job_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_admin_id`: 以people_admin_id来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 部门ID类型
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 开放平台部门ID
    ///
    /// `department_id`: 内部部门ID
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 此次调用中使用的「职级 ID」的类型
    ///
    /// **示例值**: "6942778198054125570"
    ///
    /// **可选值**:
    ///
    /// `people_admin_job_level_id`: 「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `job_level_id`: 「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取
    #[api(
        kind = "query",
        name = "job_level_id_type",
        v_type = "var",
        option = "false"
    )]
    pub job_level_id_type: String,
    /// 此次调用中使用的「序列 ID」的类型
    ///
    /// **示例值**: "6942778198054125571"
    ///
    /// **可选值**:
    ///
    /// `people_admin_job_category_id`: 「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `job_family_id`: 「飞书管理后台」适用的序列 ID，通过[「获取租户序列列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_family/list)接口获取
    #[api(
        kind = "query",
        name = "job_family_id_type",
        v_type = "var",
        option = "false"
    )]
    pub job_family_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireJobRespInner {
    #[serde(flatten)]
    data: Option<GetHireJobResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireJobResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 职位数据
    #[serde(
        rename = "job",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job: JobSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobSubResp {
    /// 职位 ID
    ///
    /// **示例值**: "6001"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 职位名称
    ///
    /// **示例值**: "测试职位"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 职位描述
    ///
    /// **示例值**: "职位描述文本"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 职位编号
    ///
    /// **示例值**: "R18"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 职位要求
    ///
    /// **示例值**: "职位要求文本"
    #[serde(
        rename = "requirement",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub requirement: String,
    /// 雇佣类型
    #[serde(
        rename = "recruitment_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub recruitment_type: JobRecruitmentTypeSubResp,
    /// 部门
    #[serde(
        rename = "department",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department: JobDepartmentSubResp,
    /// 工作地点
    #[serde(
        rename = "city",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city: JobCitySubResp,
    /// 最低职级
    #[serde(
        rename = "min_job_level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min_job_level: JobLevelSubResp,
    /// 最高职级
    #[serde(
        rename = "max_job_level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max_job_level: JobLevelSubResp,
    /// 职位亮点
    #[serde(
        rename = "highlight_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub highlight_list: Vec<JobHighlightSubResp>,
    /// 职位序列
    #[serde(
        rename = "job_category",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_category: JobCategorySubResp,
    /// 职位类别
    #[serde(
        rename = "job_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_type: JobTypeSubResp,
    /// 启用状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Active`: 启用
    ///
    /// `Closed`: 未启用
    #[serde(
        rename = "active_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active_status: i64,
    /// 创建人ID，若为空则为系统或其他对接系统创建
    ///
    /// **示例值**: "ou-xxx"
    #[serde(
        rename = "create_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_user_id: String,
    /// 创建时间 请使用create_timestamp
    ///
    /// **示例值**: "1617170925462"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: i64,
    /// 更新时间 请使用update_timestamp
    ///
    /// **示例值**: "1617170925462"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: i64,
    /// 招聘流程类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `SocialProcess`: 社招流程
    ///
    /// `CampusProcess`: 校招流程
    #[serde(
        rename = "process_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub process_type: i64,
    /// 招聘流程 ID
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub process_id: String,
    /// 招聘流程中文名称
    ///
    /// **示例值**: "流程中文名"
    #[serde(
        rename = "process_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub process_name: String,
    /// 招聘流程英文名称
    ///
    /// **示例值**: "流程英文名"
    #[serde(
        rename = "process_en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub process_en_name: String,
    /// 自定义字段列表
    #[serde(
        rename = "customized_data_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub customized_data_list: Vec<JobCustomizedDataSubResp>,
    /// 职能分类
    #[serde(
        rename = "job_function",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_function: IdNameObjectSubResp,
    /// 职位项目
    #[serde(
        rename = "subject",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub subject: IdNameObjectSubResp,
    /// 招聘数量
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "head_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub head_count: i64,
    /// 工作年限
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `NoLimit`: 不限
    ///
    /// `Graduate`: 应届毕业生
    ///
    /// `UnderOneYear`: 1年以下
    ///
    /// `OneToThreeYear`: 1-3年
    ///
    /// `ThreeToFiveYear`: 3-5年
    ///
    /// `FiveToSevenYear`: 5-7年
    ///
    /// `SevenToTenYear`: 7-10年
    ///
    /// `OverTenYear`: 10年以上
    #[serde(
        rename = "experience",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub experience: i64,
    /// 到期日期 请使用expiry_timestamp
    ///
    /// **示例值**: "1622484739955"
    #[serde(
        rename = "expiry_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiry_time: i64,
    /// 最低薪资，单位:k
    ///
    /// **示例值**: "10"
    #[serde(
        rename = "min_salary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min_salary: i64,
    /// 最高薪资，单位:k
    ///
    /// **示例值**: "20"
    #[serde(
        rename = "max_salary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max_salary: i64,
    /// 学历要求
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `PrimaryEducation`: JuniorMiddleSchoolEducation
    ///
    /// `JuniorMiddleSchoolEducation`: 初中及以上
    ///
    /// `Secondary`: 专职及以上
    ///
    /// `SeniorSchoolGraduates`: 高中及以上
    ///
    /// `Associate`: 大专及以上
    ///
    /// `Bachelor`: 本科及以上
    ///
    /// `Master`: 硕士及以上
    ///
    /// `Phd`: 博士及以上
    ///
    /// `NoLimit`: 不限
    #[serde(
        rename = "required_degree",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub required_degree: i64,
    /// 工作地点列表
    #[serde(
        rename = "city_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city_list: Vec<CodeNameObjectSubResp>,
    /// 职位属性，1是实体职位，2是虚拟职位
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Concrete`: 实体职位
    ///
    /// `Virtual`: 虚拟职位
    #[serde(
        rename = "job_attribute",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_attribute: i64,
    /// 创建时间戳
    ///
    /// **示例值**: "1617170925462"
    #[serde(
        rename = "create_timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_timestamp: String,
    /// 更新时间戳
    ///
    /// **示例值**: "1617170925462"
    #[serde(
        rename = "update_timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_timestamp: String,
    /// 到期时间戳
    ///
    /// **示例值**: "1622484739955"
    #[serde(
        rename = "expiry_timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiry_timestamp: String,
    /// 目标专业ID，「0」 为不限专业，其他情况可通过[「根据主数据编码批量获取专业」](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/mdm-v3/batch_major/get)获取专业详情
    #[serde(
        rename = "target_major_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub target_major_list: Vec<TargetMajorInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobRecruitmentTypeSubResp {
    /// 雇佣类型 ID
    ///
    /// **示例值**: "6001"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 雇佣类型中文名称
    ///
    /// **示例值**: "全职"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 雇佣类型英文名称
    ///
    /// **示例值**: "FullTime"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 雇佣类型启用状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `active`: 启用
    ///
    /// `inactive`: 未启用
    #[serde(
        rename = "active_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active_status: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobDepartmentSubResp {
    /// 部门 ID
    ///
    /// **示例值**: "od-xxxx"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 部门中文名称
    ///
    /// **示例值**: "字节跳动"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 部门英文名称
    ///
    /// **示例值**: "Bytedance"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobCitySubResp {
    /// 工作地点城市代码
    ///
    /// **示例值**: "C20"
    #[serde(
        rename = "city_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city_code: String,
    /// 工作地点中文名称
    ///
    /// **示例值**: "成都"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 工作地点英文名称
    ///
    /// **示例值**: "Chengdu"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobLevelSubResp {
    /// 职级 ID
    ///
    /// **示例值**: "6301"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 职级中文名称
    ///
    /// **示例值**: "级别-2"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 职级英文名称
    ///
    /// **示例值**: "level-2"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 职级启用状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `active`: 启用
    ///
    /// `inactive`: 未启用
    #[serde(
        rename = "active_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active_status: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobCategorySubResp {
    /// 职位序列 ID
    ///
    /// **示例值**: "6301"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 职位序列中文名称
    ///
    /// **示例值**: "序列-A"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 职位序列英文名称
    ///
    /// **示例值**: "category-A"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 职位序列启用状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `active`: 启用
    ///
    /// `inactive`: 未启用
    #[serde(
        rename = "active_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active_status: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobTypeSubResp {
    /// 职位类别 ID
    ///
    /// **示例值**: "6890840777044265230"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 职位类别中文名称
    ///
    /// **示例值**: "金融"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 职位类别英文名称
    ///
    /// **示例值**: "Finance"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct IdNameObjectSubResp {
    /// ID
    ///
    /// **示例值**: "1213213123123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobHighlightSubResp {
    /// 职位亮点 ID
    ///
    /// **示例值**: "6301"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 职位亮点中文名称
    ///
    /// **示例值**: "团队氛围好"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 职位亮点英文名称
    ///
    /// **示例值**: "Positive team atmosphere"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobCustomizedDataSubResp {
    /// 自定义字段 ID
    ///
    /// **示例值**: "xxxx"
    #[serde(
        rename = "object_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_id: String,
    /// 字段名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
    /// 字段类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Text`: 单行文本
    ///
    /// `LongText`: 多行文本
    ///
    /// `Select`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateSelect`: 日期
    ///
    /// `MonthSelect`: 月份选择
    ///
    /// `YearSelect`: 年份选择
    ///
    /// `DateRange`: 时间段
    ///
    /// `Number`: 数字
    ///
    /// `Default`: 默认字段
    ///
    /// `Group`: 模块
    #[serde(
        rename = "object_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_type: i64,
    /// 自定义字段值
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: JobCustomizedValueSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 中文
    ///
    /// **示例值**: "测试"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文
    ///
    /// **示例值**: "test"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CodeNameObjectSubResp {
    /// 编码
    ///
    /// **示例值**: "1111"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TargetMajorInfoSubResp {
    /// 目标专业ID
    ///
    /// **示例值**: "6930815272790114324"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 目标专业中文名称
    ///
    /// **示例值**: "考古"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 目标专业英文名称
    ///
    /// **示例值**: "archeology"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobCustomizedValueSubResp {
    /// 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
    ///
    /// **示例值**: "text"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 当字段类型为单选时，从此字段取值
    #[serde(
        rename = "option",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option: JobCustomizedOptionSubResp,
    /// 当字段类型为多选时，从此字段取值
    #[serde(
        rename = "option_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_list: Vec<JobCustomizedOptionSubResp>,
    /// 当字段类型为时间段时，从此字段取值
    #[serde(
        rename = "time_range",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_range: JobCustomizedTimeRangeSubResp,
    /// 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
    ///
    /// **示例值**: "1625456721000"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 当字段类型为数字时，从此字段取值
    ///
    /// **示例值**: "111"
    #[serde(
        rename = "number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobCustomizedOptionSubResp {
    /// 选项 ID
    ///
    /// **示例值**: "AA"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 选项名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobCustomizedTimeRangeSubResp {
    /// 开始时间
    ///
    /// **示例值**: "AA"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间
    ///
    /// **示例值**: "AA"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetHireJobReq) -> Result<(GetHireJobResp, CommonResponse), Error> + Send + Sync + 'static
    {
    }
    impl<
            T: Fn(GetHireJobReq) -> Result<(GetHireJobResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_job<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetHireJobReq, GetHireJobResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_job(
            &self,
            req: &GetHireJobReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetHireJobReq, GetHireJobResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_job::{GetHireJobReq, GetHireJobResp, GetHireJobRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_job(|_| Ok((GetHireJobResp::default(), CommonResponse::default())))
            .build();
        let res = lark.hire().get_hire_job(GetHireJobReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.hire().get_hire_job(GetHireJobReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "job": {
            "id": "6001",
            "title": "测试职位",
            "description": "职位描述文本",
            "code": "R18",
            "requirement": "职位要求文本",
            "recruitment_type": {
                "id": "6001",
                "zh_name": "全职",
                "en_name": "FullTime",
                "active_status": 1
            },
            "department": {
                "id": "od-xxxx",
                "zh_name": "字节跳动",
                "en_name": "Bytedance"
            },
            "city": {
                "city_code": "C20",
                "zh_name": "成都",
                "en_name": "Chengdu"
            },
            "min_job_level": {
                "id": "6301",
                "zh_name": "级别-2",
                "en_name": "level-2",
                "active_status": 1
            },
            "max_job_level": {
                "id": "6301",
                "zh_name": "级别-2",
                "en_name": "level-2",
                "active_status": 1
            },
            "highlight_list": [
                {
                    "id": "6301",
                    "zh_name": "团队氛围好",
                    "en_name": "Positive team atmosphere"
                }
            ],
            "job_category": {
                "id": "6301",
                "zh_name": "序列-A",
                "en_name": "category-A",
                "active_status": 1
            },
            "job_type": {
                "id": "6890840777044265230",
                "zh_name": "金融",
                "en_name": "Finance"
            },
            "active_status": 1,
            "create_user_id": "ou-xxx",
            "create_time": 1617170925462,
            "update_time": 1617170925462,
            "process_type": 1,
            "process_id": "1",
            "process_name": "流程中文名",
            "process_en_name": "流程英文名",
            "customized_data_list": [
                {
                    "object_id": "xxxx",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    },
                    "object_type": 1,
                    "value": {
                        "content": "text",
                        "option": {
                            "key": "AA",
                            "name": {
                                "zh_cn": "测试",
                                "en_us": "test"
                            }
                        },
                        "option_list": [
                            {
                                "key": "AA",
                                "name": {
                                    "zh_cn": "测试",
                                    "en_us": "test"
                                }
                            }
                        ],
                        "time_range": {
                            "start_time": "AA",
                            "end_time": "AA"
                        },
                        "time": "1625456721000",
                        "number": "111"
                    }
                }
            ],
            "job_function": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "subject": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "head_count": 100,
            "experience": 1,
            "expiry_time": 1622484739955,
            "min_salary": 10,
            "max_salary": 20,
            "required_degree": 1,
            "city_list": [
                {
                    "code": "1111",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                }
            ],
            "job_attribute": 1,
            "create_timestamp": "1617170925462",
            "update_timestamp": "1617170925462",
            "expiry_timestamp": "1622484739955",
            "target_major_list": [
                {
                    "id": "6930815272790114324",
                    "zh_name": "考古",
                    "en_name": "archeology"
                }
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireJobRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
