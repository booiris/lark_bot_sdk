//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-11T13:42:37+00:00**
    ///
    /// ## 获取 Offer 详情
    ///
    /// 根据 Offer ID 获取 Offer 详细信息。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Foffer%2Fget>
    pub async fn get_hire_offer(
        &self,
        req: GetHireOfferReq,
    ) -> Result<(GetHireOfferResp, CommonResponse), Error> {
        self.get_hire_offer_with_opt(req, Default::default()).await
    }

    /// 参见 [get_hire_offer](#method.get_hire_offer) 函数
    pub async fn get_hire_offer_with_opt(
        &self,
        req: GetHireOfferReq,
        method_option: MethodOption,
    ) -> Result<(GetHireOfferResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_hire_offer(&req) {
                tracing::info!("[lark] Hire#GetHireOffer **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireOffer call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireOffer",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/offers/:offer_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireOfferRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireOfferReq {
    /// Offer ID，可通过[获取 Offer 列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list)获取
    ///
    /// **示例值**: "6791698585114741000"
    #[api(kind = "path", name = "offer_id")]
    pub offer_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_admin_id`: 以 people_admin_id 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的部门 ID 类型。
    ///
    /// **示例值**: ""department_id""
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 【飞书】用来在具体某个应用中标识一个部门，同一个department_id 在不同应用中的 open_department_id 相同
    ///
    /// `department_id`: 【飞书】用来标识租户内一个唯一的部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 此次调用中使用的「职级 ID」的类型
    ///
    /// **示例值**: ""job_level_id""
    ///
    /// **可选值**:
    ///
    /// `people_admin_job_level_id`: 「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `job_level_id`: 「飞书管理后台」适用的职级 ID，通过[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口获取
    #[api(
        kind = "query",
        name = "job_level_id_type",
        v_type = "var",
        option = "false"
    )]
    pub job_level_id_type: String,
    /// 此次调用中使用的「序列 ID」的类型
    ///
    /// **示例值**: ""people_admin_job_category_id""
    ///
    /// **可选值**:
    ///
    /// `people_admin_job_category_id`: 「人力系统管理后台」适用的序列 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `job_family_id`: 「飞书管理后台」适用的序列 ID，通过[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口获取
    #[api(
        kind = "query",
        name = "job_family_id_type",
        v_type = "var",
        option = "false"
    )]
    pub job_family_id_type: String,
    /// 此次调用中使用的「人员类型 ID」的类型
    ///
    /// **示例值**: ""people_admin_employee_type_id""
    ///
    /// **可选值**:
    ///
    /// `people_admin_employee_type_id`: 「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `employee_type_enum_id`: 「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取
    #[api(
        kind = "query",
        name = "employee_type_id_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireOfferRespInner {
    #[serde(flatten)]
    data: Option<GetHireOfferResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireOfferResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// Offer 详情
    #[serde(
        rename = "offer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offer: OfferSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OfferSubResp {
    /// Offer ID
    ///
    /// **示例值**: "1231231231231231"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 投递 ID，详情请查看：[获取投递信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get)
    ///
    /// **示例值**: "1231231232312312"
    #[serde(
        rename = "application_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application_id: String,
    /// 基础信息
    #[serde(
        rename = "basic_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub basic_info: ApplicationOfferBasicInfoSubResp,
    /// 薪酬计划
    #[serde(
        rename = "salary_plan",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub salary_plan: ApplicationOfferSalaryPlanSubResp,
    /// 当前 Offer 使用的 Schema
    ///
    /// **示例值**: "6963562624677398823"
    #[serde(
        rename = "schema_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub schema_id: String,
    /// Offer 状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `NotApplied`: 未申请
    ///
    /// `UnderReview`: 审批中
    ///
    /// `Withdraw`: 审批已撤回
    ///
    /// `Approved`: 审批通过
    ///
    /// `Fail`: 审批不通过
    ///
    /// `Sended`: Offer 已发出
    ///
    /// `Accept`: 候选人已接受
    ///
    /// `Reject`: 候选人已拒绝
    ///
    /// `OfferInvalid`: Offer 已失效
    ///
    /// `NotApproved`: 未审批
    ///
    /// `InternshipPending `: 实习待入职（仅实习 Offer 具有）
    ///
    /// `InternshipOnboard`: 实习已入职（仅实习 Offer 具有）
    ///
    /// `InternshipOverboard`: 实习已离职（仅实习 Offer 具有）
    #[serde(
        rename = "offer_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offer_status: i64,
    /// Offer 类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `正式 Offer`: 正式 Offer
    ///
    /// `实习 Offer`: 实习 Offer
    #[serde(
        rename = "offer_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offer_type: i64,
    /// 职位信息
    #[serde(
        rename = "job_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_info: OfferJobInfoSubResp,
    /// Offer 自定义模块列表
    #[serde(
        rename = "customized_module_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub customized_module_list: Vec<ApplicationOfferCustomModuleSubResp>,
    /// 招聘需求ID，详情请查看：[获取招聘需求信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_requirement/list_by_id)
    ///
    /// **示例值**: "1231231232312312"
    #[serde(
        rename = "job_requirement_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_requirement_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationOfferBasicInfoSubResp {
    /// Offer 类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Social`: 社招 Offer
    ///
    /// `Campus`: 校招 Offer
    ///
    /// `Intern`: 实习 Offer
    ///
    /// `InternTransfer`: 实习生转正 Offer
    #[serde(
        rename = "offer_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offer_type: i64,
    /// 备注
    ///
    /// **示例值**: "10"
    #[serde(
        rename = "remark",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remark: String,
    /// Offer 过期时间，毫秒级时间戳
    ///
    /// **示例值**: "1653383498000"
    #[serde(
        rename = "expire_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expire_time: i64,
    /// Offer 负责人 ID，与入参`user_id_type`类型一致
    ///
    /// **示例值**: "ou_99be8e24ad1ad390b6cd3b8916940df1"
    #[serde(
        rename = "owner_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_user_id: String,
    /// Offer 创建人 ID，与入参`user_id_type`类型一致
    ///
    /// **示例值**: "ou_99be8e24ad1ad390b6cd3b8916940df1"
    #[serde(
        rename = "creator_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub creator_user_id: String,
    /// Offer 人员类型
    #[serde(
        rename = "employee_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type: BaseBilingualWithIdSubResp,
    /// 创建时间，毫秒级时间戳
    ///
    /// **示例值**: "1628512038000"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 直属上级 ID，与入参`user_id_type`类型一致
    ///
    /// **示例值**: "ou_99be8e24ad1ad390b6cd3b8916940df1"
    #[serde(
        rename = "leader_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leader_user_id: String,
    /// 入职日期，毫秒级时间戳
    ///
    /// **示例值**: "2021-05-20"
    #[serde(
        rename = "onboard_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboard_date: String,
    /// 入职部门，与入参中的`department_id_type`类型一致
    ///
    /// **示例值**: "od-6b394871807047c7023ebfc1ff37cd3a"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 试用期, 比如试用期6个月
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "probation_month",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_month: i64,
    /// 合同期（年），推荐使用「contract_period」
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "contract_year",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_year: i64,
    /// 合同期（年/月）
    #[serde(
        rename = "contract_period",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_period: ContractPeriodInfoSubResp,
    /// 雇员类型
    #[serde(
        rename = "recruitment_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub recruitment_type: BaseBilingualWithIdSubResp,
    /// 序列
    #[serde(
        rename = "sequence",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sequence: BaseBilingualWithIdSubResp,
    /// 级别
    #[serde(
        rename = "level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub level: BaseBilingualWithIdSubResp,
    /// 入职地点
    #[serde(
        rename = "onboard_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboard_address: BaseAddressSubResp,
    /// 工作地点
    #[serde(
        rename = "work_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_address: BaseAddressSubResp,
    /// 自定义字段信息
    #[serde(
        rename = "customize_info_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub customize_info_list: Vec<ApplicationOfferCustomValueSubResp>,
    /// 人事侧的办公地点与地址（目前仅字节可用)
    #[serde(
        rename = "work_location_address_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_location_address_info: MasterLocationAddressInfoSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationOfferSalaryPlanSubResp {
    /// 币种
    ///
    /// **示例值**: "CNY"
    #[serde(
        rename = "currency",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency: String,
    /// 基本薪资，为JSON 格式，amount 代表基本薪资的金额，peroid 代表基本薪资的周期单位，如：`"{\"amount\":\"10000\",\"period\":2}"`
    ///
    /// **示例值**: "{\"amount\":\"10000\",\"period\":2}"
    #[serde(
        rename = "basic_salary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub basic_salary: String,
    /// 试用期百分比
    ///
    /// **示例值**: "10%"
    #[serde(
        rename = "probation_salary_percentage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_salary_percentage: String,
    /// 年终奖月数
    ///
    /// **示例值**: "12"
    #[serde(
        rename = "award_salary_multiple",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub award_salary_multiple: String,
    /// 期权股数
    ///
    /// **示例值**: "11"
    #[serde(
        rename = "option_shares",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_shares: String,
    /// 季度奖金额，单位元、支持小数点后两位
    ///
    /// **示例值**: "11111"
    #[serde(
        rename = "quarterly_bonus",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub quarterly_bonus: String,
    /// 半年奖金额，单位元、支持小数点后两位
    ///
    /// **示例值**: "11111"
    #[serde(
        rename = "half_year_bonus",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub half_year_bonus: String,
    /// 年度现金总额(数量，非公式)，单位元、支持小数点后两位
    ///
    /// **示例值**: "11111"
    #[serde(
        rename = "total_annual_cash",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub total_annual_cash: String,
    /// 自定义字段的 value 信息
    #[serde(
        rename = "customize_info_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub customize_info_list: Vec<ApplicationOfferCustomValueSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OfferJobInfoSubResp {
    /// Offer 职位 ID
    ///
    /// **示例值**: "7080891505426925854"
    #[serde(
        rename = "job_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_id: String,
    /// Offer 职位名称
    ///
    /// **示例值**: "xx"
    #[serde(
        rename = "job_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BaseBilingualWithIdSubResp {
    /// 人员类型 ID，与入参`employee_type_id_type` 类型一致
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 人员类型中文名称
    ///
    /// **示例值**: "正式"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 人员类型英文名称
    ///
    /// **示例值**: "Regular"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContractPeriodInfoSubResp {
    /// 合同周期类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `month`: 月
    ///
    /// `year`: 年
    #[serde(
        rename = "period_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub period_type: i64,
    /// 合同时长
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "period",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub period: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BaseAddressSubResp {
    /// 入职地点 ID，详情请参考：[获取地址列表](https://open.larkoffice.com/document/server-docs/hire-v1/recruitment-related-configuration/location/list)
    ///
    /// **示例值**: "6932753007915206919"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 入职地点中文名称
    ///
    /// **示例值**: "名字"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 入职地点英文名称
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 区域信息
    #[serde(
        rename = "district",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub district: BaseDistrictSubResp,
    /// 城市信息
    #[serde(
        rename = "city",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city: BaseCitySubResp,
    /// 省信息
    #[serde(
        rename = "state",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub state: BaseCitySubResp,
    /// 国家信息
    #[serde(
        rename = "country",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country: BaseCountrySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MasterLocationAddressInfoSubResp {
    /// 办公地点
    #[serde(
        rename = "location_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_info: MasterLocationInfoSubResp,
    /// 办公地址
    #[serde(
        rename = "address_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_info: MasterLocationInfoSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationOfferCustomModuleSubResp {
    /// 自定义模块 ID
    ///
    /// **示例值**: "6930815272790114324"
    #[serde(
        rename = "ID",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 自定义模块下字段的值
    #[serde(
        rename = "object_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_list: Vec<ApplicationOfferCustomValueSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BaseDistrictSubResp {
    /// 区域中文名称
    ///
    /// **示例值**: "伦敦"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 区域英文名称
    ///
    /// **示例值**: "London"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 区域编码
    ///
    /// **示例值**: "400700"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 地址类型，值固定为`4`：DISTRICT（区/县）
    ///
    /// **示例值**: "4"
    #[serde(
        rename = "location_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BaseCitySubResp {
    /// 城市中文名称
    ///
    /// **示例值**: "中文"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 城市英文名称
    ///
    /// **示例值**: "eng"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 城市编码
    ///
    /// **示例值**: "400700"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 地址类型，值固定为`3`：CITY（市）
    ///
    /// **示例值**: "3"
    ///
    /// **可选值**:
    ///
    /// `COUNTRY`: COUNTRY（国家）
    ///
    /// `STATE`: STATE（省份/州）
    ///
    /// `CITY`: CITY（市）
    ///
    /// `DISTRICT`: DISTRICT（区/县）
    ///
    /// `ADDRESS`: ADDRESS（地址）
    #[serde(
        rename = "location_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BaseCountrySubResp {
    /// 国家中文名称
    ///
    /// **示例值**: "中文"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 国家英文名称
    ///
    /// **示例值**: "eng"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 国家编码
    ///
    /// **示例值**: "400700"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 地址类型，值固定为`1`：COUNTRY（国家）
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `COUNTRY`: COUNTRY（国家）
    ///
    /// `STATE`: STATE（省份/州）
    ///
    /// `CITY`: CITY（市）
    ///
    /// `DISTRICT`: DISTRICT（区/县）
    ///
    /// `ADDRESS`: ADDRESS（地址）
    #[serde(
        rename = "location_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationOfferCustomValueSubResp {
    /// 自定义字段 ID，详情请参考：[获取 Offer 申请表模版信息](https://open.larkoffice.com/document/server-docs/hire-v1/recruitment-related-configuration/offer-settings/offer_application_form/get)
    ///
    /// **示例值**: "key"
    #[serde(
        rename = "object_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_id: String,
    /// 自定义字段 value
    ///
    /// **示例值**: "value"
    #[serde(
        rename = "customize_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub customize_value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MasterLocationInfoSubResp {
    /// 地点 ID
    ///
    /// **示例值**: "6930815272790114324"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 地点中文名称
    ///
    /// **示例值**: "北京"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 地点英文名称
    ///
    /// **示例值**: "Beijing"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetHireOfferReq) -> Result<(GetHireOfferResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetHireOfferReq) -> Result<(GetHireOfferResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_offer<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetHireOfferReq, GetHireOfferResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_offer(
            &self,
            req: &GetHireOfferReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetHireOfferReq, GetHireOfferResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_offer::{
            GetHireOfferReq, GetHireOfferResp, GetHireOfferRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_offer(|_| Ok((GetHireOfferResp::default(), CommonResponse::default())))
            .build();
        let res = lark.hire().get_hire_offer(GetHireOfferReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.hire().get_hire_offer(GetHireOfferReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "offer": {
            "id": "1231231231231231",
            "application_id": "1231231232312312",
            "basic_info": {
                "offer_type": 1,
                "remark": "10",
                "expire_time": 1653383498000,
                "owner_user_id": "ou_99be8e24ad1ad390b6cd3b8916940df1",
                "creator_user_id": "ou_99be8e24ad1ad390b6cd3b8916940df1",
                "employee_type": {
                    "id": "1",
                    "zh_name": "正式",
                    "en_name": "Regular"
                },
                "create_time": "1628512038000",
                "leader_user_id": "ou_99be8e24ad1ad390b6cd3b8916940df1",
                "onboard_date": "2021-05-20",
                "department_id": "od-6b394871807047c7023ebfc1ff37cd3a",
                "probation_month": 1,
                "contract_year": 3,
                "contract_period": {
                    "period_type": 1,
                    "period": 3
                },
                "recruitment_type": {
                    "id": "1",
                    "zh_name": "正式",
                    "en_name": "Regular"
                },
                "sequence": {
                    "id": "1",
                    "zh_name": "正式",
                    "en_name": "Regular"
                },
                "level": {
                    "id": "1",
                    "zh_name": "正式",
                    "en_name": "Regular"
                },
                "onboard_address": {
                    "id": "6932753007915206919",
                    "zh_name": "名字",
                    "en_name": "name",
                    "district": {
                        "zh_name": "伦敦",
                        "en_name": "London",
                        "code": "400700",
                        "location_type": 4
                    },
                    "city": {
                        "zh_name": "中文",
                        "en_name": "eng",
                        "code": "400700",
                        "location_type": 3
                    },
                    "state": {
                        "zh_name": "中文",
                        "en_name": "eng",
                        "code": "400700",
                        "location_type": 2
                    },
                    "country": {
                        "zh_name": "中文",
                        "en_name": "eng",
                        "code": "400700",
                        "location_type": 1
                    }
                },
                "work_address": {
                    "id": "6932753007915206919",
                    "zh_name": "名字",
                    "en_name": "name",
                    "district": {
                        "zh_name": "伦敦",
                        "en_name": "London",
                        "code": "400700",
                        "location_type": 4
                    },
                    "city": {
                        "zh_name": "中文",
                        "en_name": "eng",
                        "code": "400700",
                        "location_type": 3
                    },
                    "state": {
                        "zh_name": "中文",
                        "en_name": "eng",
                        "code": "400700",
                        "location_type": 2
                    },
                    "country": {
                        "zh_name": "中文",
                        "en_name": "eng",
                        "code": "400700",
                        "location_type": 1
                    }
                },
                "customize_info_list": [
                    {
                        "object_id": "key",
                        "customize_value": "value"
                    }
                ],
                "work_location_address_info": {
                    "location_info": {
                        "id": "6930815272790114324",
                        "zh_name": "北京",
                        "en_name": "Beijing"
                    },
                    "address_info": {
                        "id": "6930815272790114324",
                        "zh_name": "北京",
                        "en_name": "Beijing"
                    }
                }
            },
            "salary_plan": {
                "currency": "CNY",
                "basic_salary": "{\"amount\":\"10000\",\"period\":2}",
                "probation_salary_percentage": "10%",
                "award_salary_multiple": "12",
                "option_shares": "11",
                "quarterly_bonus": "11111",
                "half_year_bonus": "11111",
                "total_annual_cash": "11111",
                "customize_info_list": [
                    {
                        "object_id": "key",
                        "customize_value": "value"
                    }
                ]
            },
            "schema_id": "6963562624677398823",
            "offer_status": 1,
            "offer_type": 1,
            "job_info": {
                "job_id": "7080891505426925854",
                "job_name": "xx"
            },
            "customized_module_list": [
                {
                    "ID": "6930815272790114324",
                    "object_list": [
                        {
                            "object_id": "6930815272790114324",
                            "customize_value": "value"
                        }
                    ]
                }
            ],
            "job_requirement_id": "1231231232312312"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireOfferRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
