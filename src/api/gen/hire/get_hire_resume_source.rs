//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/resume_source/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-19T03:00:49+00:00**
    ///
    /// ## 获取简历来源列表
    ///
    /// 获取简历来源列表。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/resume_source/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/candidate-management/resume_source/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fresume_source%2Flist>
    pub async fn get_hire_resume_source(
        &self,
        req: GetHireResumeSourceReq,
    ) -> Result<(GetHireResumeSourceResp, CommonResponse), Error> {
        self.get_hire_resume_source_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_hire_resume_source](#method.get_hire_resume_source) 函数
    pub async fn get_hire_resume_source_with_opt(
        &self,
        req: GetHireResumeSourceReq,
        method_option: MethodOption,
    ) -> Result<(GetHireResumeSourceResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_hire_resume_source(&req) {
                tracing::info!("[lark] Hire#GetHireResumeSource **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireResumeSource call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireResumeSource",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/resume_sources",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireResumeSourceRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireResumeSourceReq {
    /// 分页大小
    ///
    /// <br>
    ///
    /// **默认值**：1000
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: ""6794694704606185741""
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireResumeSourceRespInner {
    #[serde(flatten)]
    data: Option<GetHireResumeSourceResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireResumeSourceResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 数据
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<ResumeSourceSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeSourceSubResp {
    /// 简历来源 ID
    ///
    /// **示例值**: "10000"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 简历来源中文名称
    ///
    /// **示例值**: "内推"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// 简历来源英文名称
    ///
    /// **示例值**: "referral"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 启用状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `active`: 已启用
    ///
    /// `inactive`: 已禁用
    #[serde(
        rename = "active_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active_status: i64,
    /// 来源类型
    ///
    /// **可选值有**：
    ///
    /// <md-enum>
    ///
    /// <md-enum-item key="10000" >内推</md-enum-item>
    ///
    /// <md-enum-item key="10001" >猎头</md-enum-item>
    ///
    /// <md-enum-item key="10002" >内部来源</md-enum-item>
    ///
    /// <md-enum-item key="10003" >第三方招聘网站</md-enum-item>
    ///
    /// <md-enum-item key="10004" >社交媒体</md-enum-item>
    ///
    /// <md-enum-item key="10005" >线下来源</md-enum-item>
    ///
    /// <md-enum-item key="10006" >其他</md-enum-item>
    ///
    /// <md-enum-item key="10007" >外部推荐</md-enum-item>
    ///
    /// <md-enum-item key="10008" >员工转岗</md-enum-item>
    ///
    /// <md-enum-item key="10009" >实习生转正</md-enum-item>
    ///
    /// </md-enum>
    ///
    /// **示例值**: "10001"
    #[serde(
        rename = "resume_source_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resume_source_type: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetHireResumeSourceReq) -> Result<(GetHireResumeSourceResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetHireResumeSourceReq,
                ) -> Result<(GetHireResumeSourceResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_resume_source<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetHireResumeSourceReq, GetHireResumeSourceResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_resume_source(
            &self,
            req: &GetHireResumeSourceReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetHireResumeSourceReq, GetHireResumeSourceResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_resume_source::{
            GetHireResumeSourceReq, GetHireResumeSourceResp, GetHireResumeSourceRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_resume_source(|_| {
                Ok((
                    GetHireResumeSourceResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .get_hire_resume_source(GetHireResumeSourceReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .get_hire_resume_source(GetHireResumeSourceReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "id": "10000",
                "zh_name": "内推",
                "en_name": "referral",
                "active_status": 1,
                "resume_source_type": "10001"
            }
        ],
        "page_token": "1",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireResumeSourceRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
