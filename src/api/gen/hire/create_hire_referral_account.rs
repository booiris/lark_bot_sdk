//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-26T08:50:50+00:00**
    ///
    /// ## 注册内推账户
    ///
    /// 通过内推人的手机号或邮箱注册「内推奖励账号」。注册后，可获取对应内推人的账号 ID、积分。并查询、操作对应内推人的奖励余额，配合接口：[「内推账户余额变更事件」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/events/assets_update)、[「全额提取内推账号余额」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/withdraw)。如需停用账户，可调用[「停用内推账户」](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/deactivate)。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/create>
    ///
    /// new doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_account/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FukTMukTMukTM%2FuMzM1YjLzMTN24yMzUjN%2Fhire-v1%2Freferral_account%2Fcreate>
    pub async fn create_hire_referral_account(
        &self,
        req: CreateHireReferralAccountReq,
    ) -> Result<(CreateHireReferralAccountResp, CommonResponse), Error> {
        self.create_hire_referral_account_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_hire_referral_account](#method.create_hire_referral_account) 函数
    pub async fn create_hire_referral_account_with_opt(
        &self,
        req: CreateHireReferralAccountReq,
        method_option: MethodOption,
    ) -> Result<(CreateHireReferralAccountResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_hire_referral_account(&req) {
                tracing::info!("[lark] Hire#CreateHireReferralAccount **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#CreateHireReferralAccount call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "CreateHireReferralAccount",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/referral_account",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateHireReferralAccountRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateHireReferralAccountReq {
    /// 电话，该参数与 email 参数必传一个
    #[api(kind = "body", name = "mobile")]
    pub mobile: Option<MobileSubReq>,
    /// 邮箱，该参数与 mobile 参数必传一个
    ///
    /// **示例值**: "hire@open.com"
    #[api(kind = "body", name = "email")]
    pub email: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MobileSubReq {
    /// 电话国际区号，遵守国际统一标准，请参考[百度百科-国际长途电话区号](https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E9%95%BF%E9%80%94%E7%94%B5%E8%AF%9D%E5%8C%BA%E5%8F%B7%E8%A1%A8/12803495?fr=ge_ala)
    ///
    /// **示例值**: "86"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: Option<String>,
    /// 手机号码，在传 mobile 参数的情况下必传
    ///
    /// **示例值**: "18900001111"
    #[serde(
        rename = "number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateHireReferralAccountRespInner {
    #[serde(flatten)]
    data: Option<CreateHireReferralAccountResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateHireReferralAccountResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 账号信息
    #[serde(
        rename = "account",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub account: AccountSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AccountSubResp {
    /// 账户 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6942778198054125570"
    #[serde(
        rename = "account_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub account_id: String,
    /// 账户资产
    #[serde(
        rename = "assets",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assets: AssetsSubResp,
    /// 账号状态，注册后默认是可用状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `active`: 可用
    ///
    /// `disable`: 停用
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AssetsSubResp {
    /// 已确认的奖励
    #[serde(
        rename = "confirmed_bonus",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub confirmed_bonus: BonusAmountSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BonusAmountSubResp {
    /// 积分奖励
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "point_bonus",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub point_bonus: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateHireReferralAccountReq,
        ) -> Result<(CreateHireReferralAccountResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateHireReferralAccountReq,
                )
                    -> Result<(CreateHireReferralAccountResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_hire_referral_account<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateHireReferralAccountReq,
            CreateHireReferralAccountResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_hire_referral_account(
            &self,
            req: &CreateHireReferralAccountReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateHireReferralAccountReq,
                CreateHireReferralAccountResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::create_hire_referral_account::{
            CreateHireReferralAccountReq, CreateHireReferralAccountResp,
            CreateHireReferralAccountRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_create_hire_referral_account(|_| {
                Ok((
                    CreateHireReferralAccountResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .create_hire_referral_account(CreateHireReferralAccountReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .create_hire_referral_account(CreateHireReferralAccountReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "mobile": {
        "code": "86",
        "number": "18900001111"
    },
    "email": "hire@open.com"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateHireReferralAccountReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "account": {
            "account_id": "6942778198054125570",
            "assets": {
                "confirmed_bonus": {
                    "point_bonus": 100
                }
            },
            "status": 1
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateHireReferralAccountRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
