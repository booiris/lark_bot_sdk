//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/delete>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-03T06:49:00+00:00**
    ///
    /// ## 删除外部投递
    ///
    /// 将外部投递删除
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_application/delete>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/get-candidates/import-external-system-information/delete>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fget-candidates%2Fimport-external-system-information%2Fdelete>
    pub async fn delete_hire_external_application(
        &self,
        req: DeleteHireExternalApplicationReq,
    ) -> Result<(DeleteHireExternalApplicationResp, CommonResponse), Error> {
        self.delete_hire_external_application_with_opt(req, Default::default())
            .await
    }

    /// 参见 [delete_hire_external_application](#method.delete_hire_external_application) 函数
    pub async fn delete_hire_external_application_with_opt(
        &self,
        req: DeleteHireExternalApplicationReq,
        method_option: MethodOption,
    ) -> Result<(DeleteHireExternalApplicationResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_delete_hire_external_application(&req) {
                tracing::info!("[lark] Hire#DeleteHireExternalApplication **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#DeleteHireExternalApplication call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "DeleteHireExternalApplication",
            method: http::Method::DELETE,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/external_applications/:external_application_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (DeleteHireExternalApplicationRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DeleteHireExternalApplicationReq {
    /// 外部投递 id
    ///
    /// **示例值**: "6960663240925956660"
    #[api(kind = "path", name = "external_application_id")]
    pub external_application_id: String,
    /// 人才ID
    ///
    /// **示例值**: "6960663240925956660"
    #[api(kind = "query", name = "talent_id", v_type = "var", option = "false")]
    pub talent_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct DeleteHireExternalApplicationRespInner {
    #[serde(flatten)]
    data: Option<DeleteHireExternalApplicationResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct DeleteHireExternalApplicationResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// \-
    #[serde(
        rename = "external_application",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_application: ExternalApplicationSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalApplicationSubResp {
    /// 外部投递 ID
    ///
    /// **示例值**: "6989202908470446380"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 职位招聘类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `social_recruitment`: 社招
    ///
    /// `campus_recruitment`: 校招
    #[serde(
        rename = "job_recruitment_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_recruitment_type: i64,
    /// 职位名称
    ///
    /// **示例值**: "高级Java"
    #[serde(
        rename = "job_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_title: String,
    /// 简历来源
    ///
    /// **示例值**: "lagou"
    #[serde(
        rename = "resume_source",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resume_source: String,
    /// 阶段
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "stage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage: String,
    /// 人才 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6960663240925956459"
    #[serde(
        rename = "talent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub talent_id: String,
    /// 终止原因
    ///
    /// **示例值**: "不合适"
    #[serde(
        rename = "termination_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub termination_reason: String,
    /// 投递类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `HR_visit`: HR 寻访
    ///
    /// `candidate_delivery`: 候选人主动投递
    ///
    /// `talent_recommend`: 人才推荐
    ///
    /// `others`: 其他
    #[serde(
        rename = "delivery_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub delivery_type: i64,
    /// 更新时间
    ///
    /// **示例值**: "1618500278645"
    #[serde(
        rename = "modify_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modify_time: i64,
    /// 终止类型
    ///
    /// **示例值**: "health"
    #[serde(
        rename = "termination_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub termination_type: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            DeleteHireExternalApplicationReq,
        ) -> Result<(DeleteHireExternalApplicationResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    DeleteHireExternalApplicationReq,
                )
                    -> Result<(DeleteHireExternalApplicationResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_delete_hire_external_application<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DeleteHireExternalApplicationReq,
            DeleteHireExternalApplicationResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_delete_hire_external_application(
            &self,
            req: &DeleteHireExternalApplicationReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                DeleteHireExternalApplicationReq,
                DeleteHireExternalApplicationResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::delete_hire_external_application::{
            DeleteHireExternalApplicationReq, DeleteHireExternalApplicationResp,
            DeleteHireExternalApplicationRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_delete_hire_external_application(|_| {
                Ok((
                    DeleteHireExternalApplicationResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .delete_hire_external_application(DeleteHireExternalApplicationReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .delete_hire_external_application(DeleteHireExternalApplicationReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "external_application": {
            "id": "6989202908470446380",
            "job_recruitment_type": 1,
            "job_title": "高级Java",
            "resume_source": "lagou",
            "stage": "1",
            "talent_id": "6960663240925956459",
            "termination_reason": "不合适",
            "delivery_type": 1,
            "modify_time": 1618500278645,
            "termination_type": "health"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<DeleteHireExternalApplicationRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
