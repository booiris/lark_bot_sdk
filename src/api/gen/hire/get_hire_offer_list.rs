//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-11T06:27:12+00:00**
    ///
    /// ## 获取 Offer 列表
    ///
    /// 根据人才 ID 获取 Offer 列表。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/delivery-process-management/offer/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Fdelivery-process-management%2Foffer%2Flist>
    pub async fn get_hire_offer_list(
        &self,
        req: GetHireOfferListReq,
    ) -> Result<(GetHireOfferListResp, CommonResponse), Error> {
        self.get_hire_offer_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_hire_offer_list](#method.get_hire_offer_list) 函数
    pub async fn get_hire_offer_list_with_opt(
        &self,
        req: GetHireOfferListReq,
        method_option: MethodOption,
    ) -> Result<(GetHireOfferListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_hire_offer_list(&req) {
                tracing::info!("[lark] Hire#GetHireOfferList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireOfferList call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireOfferList",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/hire/v1/offers",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireOfferListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireOfferListReq {
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "1231231987"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小，最大为 200
    ///
    /// **示例值**: "100"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 人才 ID，如何获取人才 ID 请参考[获取人才列表](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/list)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7096320678581242123"
    #[api(kind = "query", name = "talent_id", v_type = "var", option = "false")]
    pub talent_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_admin_id`: 以people_admin_id来识别用户，即将下线字段，不建议使用
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的「人员类型 ID」的类型
    ///
    /// **示例值**: "`employee_type_enum_id`"
    ///
    /// **可选值**:
    ///
    /// `people_admin_employee_type_id`: 「人力系统管理后台」适用的人员类型 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `employee_type_enum_id`: 「飞书管理后台」适用的人员类型 ID，通过[查询人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)
    ///
    /// 接口获取
    #[api(
        kind = "query",
        name = "employee_type_id_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireOfferListRespInner {
    #[serde(flatten)]
    data: Option<GetHireOfferListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireOfferListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "1234452132"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// Offer 列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<OfferListInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OfferListInfoSubResp {
    /// Offer ID
    ///
    /// **示例值**: "7096320678581242123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// Offer 职位
    #[serde(
        rename = "job_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_info: OfferJobInfoSubResp,
    /// 创建时间戳（单位：毫秒）
    ///
    /// **示例值**: "1628512038000"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// Offer 状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `未申请`: 未申请
    ///
    /// `审批中`: 审批中
    ///
    /// `审批已撤回`: 审批已撤回
    ///
    /// `审批通过`: 审批通过
    ///
    /// `审批不通过`: 审批不通过
    ///
    /// `Offer 已发出`: Offer 已发出
    ///
    /// `候选人已接受`: 候选人已接受
    ///
    /// `候选人已拒绝`: 候选人已拒绝
    ///
    /// `Offer 已失效`: Offer 已失效
    ///
    /// `未审批`: 未审批
    ///
    /// `实习待入职（仅实习 Offer 具有）`: 实习待入职（仅实习 Offer 具有）
    ///
    /// `实习已入职（仅实习 Offer 具有）`: 实习已入职（仅实习 Offer 具有）
    ///
    /// `实习已离职（仅实习 Offer 具有）`: 实习已离职（仅实习 Offer 具有）
    #[serde(
        rename = "offer_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offer_status: i64,
    /// Offer 类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `正式 Offer`: 正式 Offer
    ///
    /// `实习 Offer`: 实习 Offer
    #[serde(
        rename = "offer_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offer_type: i64,
    /// Offer 人员类型
    #[serde(
        rename = "employee_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type: BaseBilingualWithIdSubResp,
    /// Offer 投递 ID，获取投递信息请参考[获取投递信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get)
    ///
    /// **示例值**: "7096358713330272526"
    #[serde(
        rename = "application_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OfferJobInfoSubResp {
    /// Offer 职位 ID，获取职位详情请参考[获取职位信息](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get)
    ///
    /// **示例值**: "7080891505426925854"
    #[serde(
        rename = "job_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_id: String,
    /// Offer 职位名称
    ///
    /// **示例值**: "xx"
    #[serde(
        rename = "job_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BaseBilingualWithIdSubResp {
    /// Offer 人员类型 ID，与入参 `employee_type_id_type` 类型一致
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// Offer 人员类型中文名称
    ///
    /// **示例值**: "正式"
    #[serde(
        rename = "zh_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_name: String,
    /// Offer 人员类型英文名称
    ///
    /// **示例值**: "Regular"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetHireOfferListReq) -> Result<(GetHireOfferListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetHireOfferListReq) -> Result<(GetHireOfferListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_offer_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetHireOfferListReq, GetHireOfferListResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_offer_list(
            &self,
            req: &GetHireOfferListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetHireOfferListReq, GetHireOfferListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_offer_list::{
            GetHireOfferListReq, GetHireOfferListResp, GetHireOfferListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_offer_list(|_| {
                Ok((GetHireOfferListResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .hire()
            .get_hire_offer_list(GetHireOfferListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .get_hire_offer_list(GetHireOfferListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "has_more": true,
        "page_token": "1234452132",
        "items": [
            {
                "id": "7096320678581242123",
                "job_info": {
                    "job_id": "7080891505426925854",
                    "job_name": "xx"
                },
                "create_time": "1628512038000",
                "offer_status": 1,
                "offer_type": 1,
                "employee_type": {
                    "id": "1",
                    "zh_name": "正式",
                    "en_name": "Regular"
                },
                "application_id": "7096358713330272526"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireOfferListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
