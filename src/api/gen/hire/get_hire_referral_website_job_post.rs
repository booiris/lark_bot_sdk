//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_website-job_post/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-18T12:55:16+00:00**
    ///
    /// ## 获取内推官网下职位广告详情
    ///
    /// 根据广告 ID 获取内推官网下的职位广告详情。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral_website-job_post/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/get-candidates/referral/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fget-candidates%2Freferral%2Fget>
    pub async fn get_hire_referral_website_job_post(
        &self,
        req: GetHireReferralWebsiteJobPostReq,
    ) -> Result<(GetHireReferralWebsiteJobPostResp, CommonResponse), Error> {
        self.get_hire_referral_website_job_post_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_hire_referral_website_job_post](#method.get_hire_referral_website_job_post) 函数
    pub async fn get_hire_referral_website_job_post_with_opt(
        &self,
        req: GetHireReferralWebsiteJobPostReq,
        method_option: MethodOption,
    ) -> Result<(GetHireReferralWebsiteJobPostResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_hire_referral_website_job_post(&req)
            {
                tracing::info!("[lark] Hire#GetHireReferralWebsiteJobPost **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#GetHireReferralWebsiteJobPost call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "GetHireReferralWebsiteJobPost",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/referral_websites/job_posts/:job_post_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHireReferralWebsiteJobPostRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHireReferralWebsiteJobPostReq {
    /// 职位广告 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6701528341100366094"
    #[api(kind = "path", name = "job_post_id")]
    pub job_post_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的部门 ID 的类型
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 以 open_department_id 来标识部门
    ///
    /// `department_id`: 以 department_id 来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 此次调用中使用的「职级 ID」的类型
    ///
    /// **示例值**: "6942778198054125570"
    ///
    /// **可选值**:
    ///
    /// `people_admin_job_level_id`: 「人力系统管理后台」适用的职级 ID。人力系统管理后台逐步下线中，建议不继续使用此 ID。
    ///
    /// `job_level_id`: 「飞书管理后台」适用的职级 ID，通过[「获取租户职级列表」](https://open.feishu.cn/document/server-docs/contact-v3/job_level/list)接口获取
    #[api(
        kind = "query",
        name = "job_level_id_type",
        v_type = "var",
        option = "false"
    )]
    pub job_level_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHireReferralWebsiteJobPostRespInner {
    #[serde(flatten)]
    data: Option<GetHireReferralWebsiteJobPostResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHireReferralWebsiteJobPostResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 职位广告信息
    #[serde(
        rename = "job_post",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_post: PortalJobPostSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PortalJobPostSubResp {
    /// 职位广告 ID
    ///
    /// **示例值**: "1213213123123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 标题
    ///
    /// **示例值**: "测试"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 职位 ID
    ///
    /// **示例值**: "xxx"
    #[serde(
        rename = "job_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_id: String,
    /// 职位编码
    ///
    /// **示例值**: "007"
    #[serde(
        rename = "job_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_code: String,
    /// 职位过期时间，「null」代表「长期有效」
    ///
    /// **示例值**: "1111"
    #[serde(
        rename = "job_expire_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_expire_time: String,
    /// 职位状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Active`: 启用态
    ///
    /// `InActive`: 禁用态
    #[serde(
        rename = "job_active_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_active_status: i64,
    /// 职位流程类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `SocialProcess`: 社招
    ///
    /// `CampusProcess`: 校招
    #[serde(
        rename = "job_process_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_process_type: i64,
    /// 职位雇佣类型
    #[serde(
        rename = "job_recruitment_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_recruitment_type: IdNameObjectSubResp,
    /// 职位部门
    #[serde(
        rename = "job_department",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_department: IdNameObjectSubResp,
    /// 职位类型
    #[serde(
        rename = "job_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_type: IdNameObjectSubResp,
    /// 最低职级
    #[serde(
        rename = "min_job_level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min_job_level: IdNameObjectSubResp,
    /// 最高职级
    #[serde(
        rename = "max_job_level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max_job_level: IdNameObjectSubResp,
    /// 职位地址
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: CommonAddressSubResp,
    /// 月薪范围-最低薪资
    ///
    /// **示例值**: "5000"
    #[serde(
        rename = "min_salary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min_salary: String,
    /// 月薪范围-最高薪资
    ///
    /// **示例值**: "10000"
    #[serde(
        rename = "max_salary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max_salary: String,
    /// 学历要求
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `PrimaryEducation`: 小学及以上
    ///
    /// `JuniorMiddleSchoolEducation`: 初中及以上
    ///
    /// `Secondary`: 专职及以上
    ///
    /// `SeniorSchoolGraduates`: 高中及以上
    ///
    /// `Associate`: 大专及以上
    ///
    /// `Bachelor`: 本科及以上
    ///
    /// `Master`: 硕士及以上
    ///
    /// `Phd`: 博士及以上
    ///
    /// `NoLimit`: 不限
    #[serde(
        rename = "required_degree",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub required_degree: i64,
    /// 经验
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `NoLimit`: 不限
    ///
    /// `Graduate`: 应届毕业生
    ///
    /// `UnderOneYear`: 1年以下
    ///
    /// `OneToThreeYear`: 1-3年
    ///
    /// `ThreeToFiveYear`: 3-5年
    ///
    /// `FiveToSevenYear`: 5-7年
    ///
    /// `SevenToTenYear`: 7-10年
    ///
    /// `OverTenYear`: 10年以上
    #[serde(
        rename = "experience",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub experience: i64,
    /// 数量
    ///
    /// **示例值**: "12"
    #[serde(
        rename = "headcount",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub headcount: i64,
    /// 职位亮点
    #[serde(
        rename = "high_light_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub high_light_list: Vec<IdNameObjectSubResp>,
    /// 职位描述
    ///
    /// **示例值**: "负责软件开发"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 职位要求
    ///
    /// **示例值**: "大专"
    #[serde(
        rename = "requirement",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub requirement: String,
    /// 创建人
    #[serde(
        rename = "creator",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub creator: IdNameObjectSubResp,
    /// 创建时间
    ///
    /// **示例值**: "1111"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 修改时间
    ///
    /// **示例值**: "222"
    #[serde(
        rename = "modify_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modify_time: String,
    /// 自定义字段
    #[serde(
        rename = "customized_data_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub customized_data_list: Vec<WebsiteJobPostCustomizedDataSubResp>,
    /// 职能分类
    #[serde(
        rename = "job_function",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_function: IdNameObjectSubResp,
    /// 职位项目
    #[serde(
        rename = "subject",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub subject: IdNameObjectSubResp,
    /// 职位广告地址列表
    #[serde(
        rename = "address_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_list: Vec<CommonAddressSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct IdNameObjectSubResp {
    /// ID
    ///
    /// **示例值**: "1213213123123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CommonAddressSubResp {
    /// ID
    ///
    /// **示例值**: "6583482347283472832"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
    /// 区域信息
    #[serde(
        rename = "district",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub district: CodeNameObjectSubResp,
    /// 城市信息
    #[serde(
        rename = "city",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city: CodeNameObjectSubResp,
    /// 省信息
    #[serde(
        rename = "state",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub state: CodeNameObjectSubResp,
    /// 国家信息
    #[serde(
        rename = "country",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country: CodeNameObjectSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 中文
    ///
    /// **示例值**: "测试"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文
    ///
    /// **示例值**: "test"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CodeNameObjectSubResp {
    /// 编码
    ///
    /// **示例值**: "1111"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct WebsiteJobPostCustomizedDataSubResp {
    /// 自定义字段 ID
    ///
    /// **示例值**: "xxxx"
    #[serde(
        rename = "object_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_id: String,
    /// 字段名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
    /// 字段类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Text`: 单行文本
    ///
    /// `LongText`: 多行文本
    ///
    /// `Select`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateSelect`: 日期
    ///
    /// `MonthSelect`: 月份选择
    ///
    /// `YearSelect`: 年份选择
    ///
    /// `DateRange`: 时间段
    ///
    /// `Number`: 数字
    ///
    /// `Default`: 默认字段
    #[serde(
        rename = "object_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_type: i64,
    /// 自定义字段值
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: WebsiteJobPostCustomizedValueSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct WebsiteJobPostCustomizedValueSubResp {
    /// 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
    ///
    /// **示例值**: "text"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 当字段类型为单选时，从此字段取值
    #[serde(
        rename = "option",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option: WebsiteJobPostCustomizedOptionSubResp,
    /// 当字段类型为多选时，从此字段取值
    #[serde(
        rename = "option_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_list: Vec<WebsiteJobPostCustomizedOptionSubResp>,
    /// 当字段类型为时间段时，从此字段取值
    #[serde(
        rename = "time_range",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_range: WebsiteJobPostCustomizedTimeRangeSubResp,
    /// 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
    ///
    /// **示例值**: "1625456721000"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 当字段类型为数字时，从此字段取值
    ///
    /// **示例值**: "111"
    #[serde(
        rename = "number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct WebsiteJobPostCustomizedOptionSubResp {
    /// 选项 ID
    ///
    /// **示例值**: "AA"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 选项名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct WebsiteJobPostCustomizedTimeRangeSubResp {
    /// 开始时间
    ///
    /// **示例值**: "AA"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间
    ///
    /// **示例值**: "AA"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetHireReferralWebsiteJobPostReq,
        ) -> Result<(GetHireReferralWebsiteJobPostResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetHireReferralWebsiteJobPostReq,
                )
                    -> Result<(GetHireReferralWebsiteJobPostResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_hire_referral_website_job_post<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetHireReferralWebsiteJobPostReq,
            GetHireReferralWebsiteJobPostResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_hire_referral_website_job_post(
            &self,
            req: &GetHireReferralWebsiteJobPostReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetHireReferralWebsiteJobPostReq,
                GetHireReferralWebsiteJobPostResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::get_hire_referral_website_job_post::{
            GetHireReferralWebsiteJobPostReq, GetHireReferralWebsiteJobPostResp,
            GetHireReferralWebsiteJobPostRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_get_hire_referral_website_job_post(|_| {
                Ok((
                    GetHireReferralWebsiteJobPostResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .get_hire_referral_website_job_post(GetHireReferralWebsiteJobPostReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .get_hire_referral_website_job_post(GetHireReferralWebsiteJobPostReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "job_post": {
            "id": "1213213123123",
            "title": "测试",
            "job_id": "xxx",
            "job_code": "007",
            "job_expire_time": "1111",
            "job_active_status": 1,
            "job_process_type": 1,
            "job_recruitment_type": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "job_department": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "job_type": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "min_job_level": {
                "id": "6890840777044265230",
                "name": {
                    "zh_cn": "级别-2",
                    "en_us": "level-2"
                }
            },
            "max_job_level": {
                "id": "6890840777044265230",
                "name": {
                    "zh_cn": "级别-2",
                    "en_us": "level-2"
                }
            },
            "address": {
                "id": "6583482347283472832",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                },
                "district": {
                    "code": "1111",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                },
                "city": {
                    "code": "1111",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                },
                "state": {
                    "code": "1111",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                },
                "country": {
                    "code": "1111",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                }
            },
            "min_salary": "5000",
            "max_salary": "10000",
            "required_degree": 1,
            "experience": 1,
            "headcount": 12,
            "high_light_list": [
                {
                    "id": "1213213123123",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    }
                }
            ],
            "description": "负责软件开发",
            "requirement": "大专",
            "creator": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "create_time": "1111",
            "modify_time": "222",
            "customized_data_list": [
                {
                    "object_id": "xxxx",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    },
                    "object_type": 1,
                    "value": {
                        "content": "text",
                        "option": {
                            "key": "AA",
                            "name": {
                                "zh_cn": "测试",
                                "en_us": "test"
                            }
                        },
                        "option_list": [
                            {
                                "key": "AA",
                                "name": {
                                    "zh_cn": "测试",
                                    "en_us": "test"
                                }
                            }
                        ],
                        "time_range": {
                            "start_time": "AA",
                            "end_time": "AA"
                        },
                        "time": "1625456721000",
                        "number": "111"
                    }
                }
            ],
            "job_function": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "subject": {
                "id": "1213213123123",
                "name": {
                    "zh_cn": "测试",
                    "en_us": "test"
                }
            },
            "address_list": [
                {
                    "id": "6583482347283472832",
                    "name": {
                        "zh_cn": "测试",
                        "en_us": "test"
                    },
                    "district": {
                        "code": "1111",
                        "name": {
                            "zh_cn": "测试",
                            "en_us": "test"
                        }
                    },
                    "city": {
                        "code": "1111",
                        "name": {
                            "zh_cn": "测试",
                            "en_us": "test"
                        }
                    },
                    "state": {
                        "code": "1111",
                        "name": {
                            "zh_cn": "测试",
                            "en_us": "test"
                        }
                    },
                    "country": {
                        "code": "1111",
                        "name": {
                            "zh_cn": "测试",
                            "en_us": "test"
                        }
                    }
                }
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHireReferralWebsiteJobPostRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
