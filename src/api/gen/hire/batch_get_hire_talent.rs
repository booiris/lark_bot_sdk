//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/batch_get_id>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-03-05T06:27:06+00:00**
    ///
    /// ## 通过手机号或邮箱获取人才 ID
    ///
    /// 通过手机号或邮箱获取人才 ID。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/batch_get_id>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/hire-v1/candidate-management/talent/batch_get_id>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fcandidate-management%2Ftalent%2Fbatch_get_id>
    pub async fn batch_get_hire_talent(
        &self,
        req: BatchGetHireTalentReq,
    ) -> Result<(BatchGetHireTalentResp, CommonResponse), Error> {
        self.batch_get_hire_talent_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_get_hire_talent](#method.batch_get_hire_talent) 函数
    pub async fn batch_get_hire_talent_with_opt(
        &self,
        req: BatchGetHireTalentReq,
        method_option: MethodOption,
    ) -> Result<(BatchGetHireTalentResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_batch_get_hire_talent(&req) {
                tracing::info!("[lark] Hire#BatchGetHireTalent **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#BatchGetHireTalent call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "BatchGetHireTalent",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/talents/batch_get_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchGetHireTalentRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchGetHireTalentReq {
    /// 手机国家区号，默认值：86，即中国大陆地区
    ///
    /// **示例值**: "86"
    #[api(kind = "body", name = "mobile_code")]
    pub mobile_code: Option<String>,
    /// 手机号，区号均采用 mobile_code 参数的值，最多 100 个
    ///
    /// **示例值**: "182900291190"
    #[api(kind = "body", name = "mobile_number_list")]
    pub mobile_number_list: Vec<Option<String>>,
    /// 邮箱信息列表，最多 100 个
    ///
    /// **示例值**: "foo@bytedance.com"
    #[api(kind = "body", name = "email_list")]
    pub email_list: Vec<Option<String>>,
    /// 证件类型，可参考招聘枚举常量文档下的 IdentificationType 枚举定义
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "identification_type")]
    pub identification_type: Option<i64>,
    /// 证件号
    ///
    /// **示例值**: "130xxxxxxx"
    #[api(kind = "body", name = "identification_number_list")]
    pub identification_number_list: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchGetHireTalentRespInner {
    #[serde(flatten)]
    data: Option<BatchGetHireTalentResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchGetHireTalentResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 人才信息列表
    #[serde(
        rename = "talent_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub talent_list: Vec<TalentBatchInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TalentBatchInfoSubResp {
    /// 人才 ID
    ///
    /// **示例值**: "6891560630172518670"
    #[serde(
        rename = "talent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub talent_id: String,
    /// 手机国家区号
    ///
    /// **示例值**: "86"
    #[serde(
        rename = "mobile_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile_code: String,
    /// 手机号
    ///
    /// **示例值**: "182900291190"
    #[serde(
        rename = "mobile_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile_number: String,
    /// 邮箱
    ///
    /// **示例值**: "foo@bytedance.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 证件类型，可参考招聘枚举常量 IdentificationType 枚举定义
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "identification_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub identification_type: i64,
    /// 证件号
    ///
    /// **示例值**: "130xxxxxxxxx"
    #[serde(
        rename = "identification_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub identification_number: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(BatchGetHireTalentReq) -> Result<(BatchGetHireTalentResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(BatchGetHireTalentReq) -> Result<(BatchGetHireTalentResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_get_hire_talent<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, BatchGetHireTalentReq, BatchGetHireTalentResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_get_hire_talent(
            &self,
            req: &BatchGetHireTalentReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, BatchGetHireTalentReq, BatchGetHireTalentResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::batch_get_hire_talent::{
            BatchGetHireTalentReq, BatchGetHireTalentResp, BatchGetHireTalentRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_batch_get_hire_talent(|_| {
                Ok((BatchGetHireTalentResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .hire()
            .batch_get_hire_talent(BatchGetHireTalentReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .batch_get_hire_talent(BatchGetHireTalentReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "mobile_code": "86",
    "mobile_number_list": [
        "182900291190"
    ],
    "email_list": [
        "foo@bytedance.com"
    ],
    "identification_type": 1,
    "identification_number_list": [
        "130xxxxxxx"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::BatchGetHireTalentReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "talent_list": [
            {
                "talent_id": "6891560630172518670",
                "mobile_code": "86",
                "mobile_number": "182900291190",
                "email": "foo@bytedance.com",
                "identification_type": 1,
                "identification_number": "130xxxxxxxxx"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchGetHireTalentRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
