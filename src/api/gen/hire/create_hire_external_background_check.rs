//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_background_check/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::hire::HireService;

impl<'c, IStore: Store, IClient: HttpClient> HireService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-03T06:49:23+00:00**
    ///
    /// ## 创建外部背调
    ///
    /// 导入来自其他系统的背调信息，创建为外部背调。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/external_background_check/create>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/hire-v1/get-candidates/import-external-system-information/create-2>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhire-v1%2Fget-candidates%2Fimport-external-system-information%2Fcreate-2>
    pub async fn create_hire_external_background_check(
        &self,
        req: CreateHireExternalBackgroundCheckReq,
    ) -> Result<(CreateHireExternalBackgroundCheckResp, CommonResponse), Error> {
        self.create_hire_external_background_check_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_hire_external_background_check](#method.create_hire_external_background_check) 函数
    pub async fn create_hire_external_background_check_with_opt(
        &self,
        req: CreateHireExternalBackgroundCheckReq,
        method_option: MethodOption,
    ) -> Result<(CreateHireExternalBackgroundCheckResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_create_hire_external_background_check(&req)
            {
                tracing::info!("[lark] Hire#CreateHireExternalBackgroundCheck **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Hire#CreateHireExternalBackgroundCheck call api");

        let req = ApiRequest {
            scope: "Hire",
            api: "CreateHireExternalBackgroundCheck",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/hire/v1/external_background_checks",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateHireExternalBackgroundCheckRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateHireExternalBackgroundCheckReq {
    /// 外部系统背调主键 （仅用于幂等）
    ///
    /// **示例值**: "123"
    #[api(kind = "body", name = "external_id")]
    pub external_id: Option<String>,
    /// 外部投递 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1234111"
    #[api(kind = "body", name = "external_application_id")]
    pub external_application_id: String,
    /// 背调日期
    ///
    /// **示例值**: "1626602069393"
    #[api(kind = "body", name = "date")]
    pub date: Option<i64>,
    /// 背调名字
    ///
    /// **示例值**: "测试.pdf"
    #[api(kind = "body", name = "name")]
    pub name: Option<String>,
    /// 背调结果
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "result")]
    pub result: Option<String>,
    /// 背调附件ID列表
    ///
    /// **示例值**: "6989181065243969836"
    #[api(kind = "body", name = "attachment_id_list")]
    pub attachment_id_list: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateHireExternalBackgroundCheckRespInner {
    #[serde(flatten)]
    data: Option<CreateHireExternalBackgroundCheckResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateHireExternalBackgroundCheckResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 外部背调信息
    #[serde(
        rename = "external_background_check",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_background_check: ExternalBackgroundCheckSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalBackgroundCheckSubResp {
    /// 外部背调 ID
    ///
    /// **示例值**: "6989202908470446380"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 外部投递 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1234111"
    #[serde(
        rename = "external_application_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_application_id: String,
    /// 背调日期
    ///
    /// **示例值**: "1626602069393"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: i64,
    /// 背调名字
    ///
    /// **示例值**: "测试.pdf"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 背调结果
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub result: String,
    /// 背调附件ID列表 (已弃用）
    ///
    /// **示例值**: "6989181065243969836"
    #[serde(
        rename = "attachment_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attachment_id_list: Vec<String>,
    /// 背调附件
    #[serde(
        rename = "attachment_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attachment_list: Vec<ExternalBackgroundCheckAttachmentSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalBackgroundCheckAttachmentSubResp {
    /// 附件 ID
    ///
    /// **示例值**: "6987954043925432620"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 附件名字
    ///
    /// **示例值**: "test_resume.pdf"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 附件大小
    ///
    /// **示例值**: "126371"
    #[serde(
        rename = "size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub size: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::hire::HireServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateHireExternalBackgroundCheckReq,
        ) -> Result<(CreateHireExternalBackgroundCheckResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateHireExternalBackgroundCheckReq,
                )
                    -> Result<(CreateHireExternalBackgroundCheckResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HireServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_hire_external_background_check<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateHireExternalBackgroundCheckReq,
            CreateHireExternalBackgroundCheckResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_hire_external_background_check(
            &self,
            req: &CreateHireExternalBackgroundCheckReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateHireExternalBackgroundCheckReq,
                CreateHireExternalBackgroundCheckResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::hire::create_hire_external_background_check::{
            CreateHireExternalBackgroundCheckReq, CreateHireExternalBackgroundCheckResp,
            CreateHireExternalBackgroundCheckRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .hire()
            .mock()
            .mock_create_hire_external_background_check(|_| {
                Ok((
                    CreateHireExternalBackgroundCheckResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .hire()
            .create_hire_external_background_check(CreateHireExternalBackgroundCheckReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .hire()
            .create_hire_external_background_check(CreateHireExternalBackgroundCheckReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "external_id": "123",
    "external_application_id": "1234111",
    "date": 1626602069393,
    "name": "测试.pdf",
    "result": "1",
    "attachment_id_list": [
        "7249929009008494908"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateHireExternalBackgroundCheckReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "external_background_check": {
            "id": "6989202908470446380",
            "external_application_id": "1234111",
            "date": 1626602069393,
            "name": "测试.pdf",
            "result": "1",
            "attachment_id_list": [
                "7249929009008494908"
            ],
            "attachment_list": [
                {
                    "id": "6987954043925432620",
                    "name": "test_resume.pdf",
                    "size": 126371
                }
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateHireExternalBackgroundCheckRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
