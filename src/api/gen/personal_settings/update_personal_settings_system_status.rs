//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::personal_settings::PersonalSettingsService;

impl<'c, IStore: Store, IClient: HttpClient> PersonalSettingsService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-06T08:43:28+00:00**
    ///
    /// ## 修改系统状态
    ///
    /// 修改租户维度系统状态。
    ///
    /// 注意事项：
    ///
    /// - 修改系统状态对已经开启过该系统状态的用户无效。
    ///
    /// - 操作的数据为租户维度数据，请小心操作。
    ///
    /// - 修改系统状态后，并不影响正在使用的用户。该用户的系统状态可用时间到期后，再次被开启可用的时候，用户客户端才会同步到更新后的系统状态。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/patch>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fpersonal_settings-v1%2Fsystem_status%2Fpatch>
    pub async fn update_personal_settings_system_status(
        &self,
        req: UpdatePersonalSettingsSystemStatusReq,
    ) -> Result<(UpdatePersonalSettingsSystemStatusResp, CommonResponse), Error> {
        self.update_personal_settings_system_status_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_personal_settings_system_status](#method.update_personal_settings_system_status) 函数
    pub async fn update_personal_settings_system_status_with_opt(
        &self,
        req: UpdatePersonalSettingsSystemStatusReq,
        method_option: MethodOption,
    ) -> Result<(UpdatePersonalSettingsSystemStatusResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_update_personal_settings_system_status(&req)
            {
                tracing::info!(
                    "[lark] PersonalSettings#UpdatePersonalSettingsSystemStatus **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] PersonalSettings#UpdatePersonalSettingsSystemStatus call api");

        let req = ApiRequest {
            scope: "PersonalSettings",
            api: "UpdatePersonalSettingsSystemStatus",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/personal_settings/v1/system_statuses/:system_status_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdatePersonalSettingsSystemStatusRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdatePersonalSettingsSystemStatusReq {
    /// 系统状态ID
    ///
    /// [获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list)
    ///
    /// **示例值**: "7101214603622940633"
    #[api(kind = "path", name = "system_status_id")]
    pub system_status_id: String,

    /// 系统状态
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "system_status")]
    pub system_status: SystemStatusSubReq,
    /// 需要更新的字段
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "['TITLE']"
    ///
    /// **数据校验规则**：
    ///
    /// - **最小长度**: `1` 字符
    #[api(kind = "body", name = "update_fields")]
    pub update_fields: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSubReq {
    /// 系统状态名称，名称字符数要在1到20范围内。不同系统状态的title不能重复。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "出差"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 系统状态国际化名称，名称字符数要在1到20范围内。不同系统状态之间i18n_title中任何一种title都不能重复。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    #[serde(
        rename = "i18n_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_title: Option<SystemStatusI18nNameSubReq>,
    /// 图标
    ///
    /// [**了解icon_key可选值**](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/overview)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "GeneralBusinessTrip"
    ///
    /// **可选值**:
    ///
    /// `GeneralDoNotDisturb`: GeneralDoNotDisturb
    ///
    /// `GeneralInMeetingBusy`: GeneralInMeetingBusy
    ///
    /// `Coffee`: Coffee
    ///
    /// `GeneralBusinessTrip`: GeneralBusinessTrip
    ///
    /// `GeneralWorkFromHome`: GeneralWorkFromHome
    ///
    /// `StatusEnjoyLife`: StatusEnjoyLife
    ///
    /// `GeneralTravellingCar`: GeneralTravellingCar
    ///
    /// `StatusBus`: StatusBus
    ///
    /// `StatusInFlight`: StatusInFlight
    ///
    /// `Typing`: Typing
    ///
    /// `EatingFood`: EatingFood
    ///
    /// `SICK`: SICK
    ///
    /// `GeneralSun`: GeneralSun
    ///
    /// `GeneralMoonRest`: GeneralMoonRest
    ///
    /// `StatusReading`: StatusReading
    ///
    /// `Status_PrivateMessage`: Status_PrivateMessage
    ///
    /// `StatusFlashOfInspiration`: StatusFlashOfInspiration
    ///
    /// `GeneralVacation`: GeneralVacation
    #[serde(
        rename = "icon_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub icon_key: String,
    /// 颜色
    ///
    /// **示例值**: "BLUE"
    ///
    /// **可选值**:
    ///
    /// `BLUE`: 蓝色
    ///
    /// `GRAY`: 灰色
    ///
    /// `INDIGO`: 靛青色
    ///
    /// `WATHET`: 浅蓝色
    ///
    /// `GREEN`: 绿色
    ///
    /// `TURQUOISE`: 绿松石色
    ///
    /// `YELLOW`: 黄色
    ///
    /// `LIME`: 酸橙色
    ///
    /// `RED`: 红色
    ///
    /// `ORANGE`: 橙色
    ///
    /// `PURPLE`: 紫色
    ///
    /// `VIOLET`: 紫罗兰色
    ///
    /// `CARMINE`: 胭脂红色
    #[serde(
        rename = "color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub color: Option<String>,
    /// 优先级，数值越小，客户端展示的优先级越高。不同系统状态的优先级不能一样。
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "priority",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub priority: Option<i64>,
    /// 同步设置
    #[serde(
        rename = "sync_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sync_setting: Option<SystemStatusSyncSettingSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusI18nNameSubReq {
    /// 中文名
    ///
    /// **示例值**: "出差"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: Option<String>,
    /// 英文名
    ///
    /// **示例值**: "On business trip"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: Option<String>,
    /// 日文名
    ///
    /// **示例值**: "出張中"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSyncSettingSubReq {
    /// 是否默认开启
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_open_by_default",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_open_by_default: Option<bool>,
    /// 同步设置名称，名称字符数要在1到30范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    ///
    /// **示例值**: "出差期间自动开启"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: Option<String>,
    /// 同步设置国际化名称，名称字符数要在1到30范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    #[serde(
        rename = "i18n_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_title: Option<SystemStatusSyncI18nNameSubReq>,
    /// 同步设置解释文案，解释字符数要在1到60范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    ///
    /// **示例值**: "出差审批通过后，将自动开启并优先展示该状态。"
    #[serde(
        rename = "explain",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub explain: Option<String>,
    /// 同步设置国际化解释文案，解释字符数要在1到60范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    #[serde(
        rename = "i18n_explain",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_explain: Option<SystemStatusSyncI18nExplainSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSyncI18nNameSubReq {
    /// 中文名
    ///
    /// **示例值**: "出差期间自动开启"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: Option<String>,
    /// 英文名
    ///
    /// **示例值**: "Auto display Business Trip"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: Option<String>,
    /// 日文名
    ///
    /// **示例值**: "出張中に自動的にオンにする"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSyncI18nExplainSubReq {
    /// 中文名
    ///
    /// **示例值**: "出差审批通过后，该状态将自动开启并优先展示"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: Option<String>,
    /// 英文名
    ///
    /// **示例值**: "Auto-display after travel request is approved."
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: Option<String>,
    /// 日文名
    ///
    /// **示例值**: "申請が承認されると、このステータスが優先的に表示されます"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdatePersonalSettingsSystemStatusRespInner {
    #[serde(flatten)]
    data: Option<UpdatePersonalSettingsSystemStatusResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdatePersonalSettingsSystemStatusResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 系统状态
    #[serde(
        rename = "system_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub system_status: SystemStatusSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSubResp {
    /// 系统状态ID
    ///
    /// **示例值**: "7101214603622940633"
    #[serde(
        rename = "system_status_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub system_status_id: String,
    /// 系统状态名称，名称字符数要在1到20范围内。不同系统状态的title不能重复。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "出差"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 系统状态国际化名称，名称字符数要在1到20范围内。不同系统状态之间i18n_title中任何一种title都不能重复。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    #[serde(
        rename = "i18n_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_title: SystemStatusI18nNameSubResp,
    /// 图标
    ///
    /// [**了解icon_key可选值**](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/overview)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "GeneralBusinessTrip"
    ///
    /// **可选值**:
    ///
    /// `GeneralDoNotDisturb`: GeneralDoNotDisturb
    ///
    /// `GeneralInMeetingBusy`: GeneralInMeetingBusy
    ///
    /// `Coffee`: Coffee
    ///
    /// `GeneralBusinessTrip`: GeneralBusinessTrip
    ///
    /// `GeneralWorkFromHome`: GeneralWorkFromHome
    ///
    /// `StatusEnjoyLife`: StatusEnjoyLife
    ///
    /// `GeneralTravellingCar`: GeneralTravellingCar
    ///
    /// `StatusBus`: StatusBus
    ///
    /// `StatusInFlight`: StatusInFlight
    ///
    /// `Typing`: Typing
    ///
    /// `EatingFood`: EatingFood
    ///
    /// `SICK`: SICK
    ///
    /// `GeneralSun`: GeneralSun
    ///
    /// `GeneralMoonRest`: GeneralMoonRest
    ///
    /// `StatusReading`: StatusReading
    ///
    /// `Status_PrivateMessage`: Status_PrivateMessage
    ///
    /// `StatusFlashOfInspiration`: StatusFlashOfInspiration
    ///
    /// `GeneralVacation`: GeneralVacation
    #[serde(
        rename = "icon_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub icon_key: String,
    /// 颜色
    ///
    /// **示例值**: "BLUE"
    ///
    /// **可选值**:
    ///
    /// `BLUE`: 蓝色
    ///
    /// `GRAY`: 灰色
    ///
    /// `INDIGO`: 靛青色
    ///
    /// `WATHET`: 浅蓝色
    ///
    /// `GREEN`: 绿色
    ///
    /// `TURQUOISE`: 绿松石色
    ///
    /// `YELLOW`: 黄色
    ///
    /// `LIME`: 酸橙色
    ///
    /// `RED`: 红色
    ///
    /// `ORANGE`: 橙色
    ///
    /// `PURPLE`: 紫色
    ///
    /// `VIOLET`: 紫罗兰色
    ///
    /// `CARMINE`: 胭脂红色
    #[serde(
        rename = "color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub color: String,
    /// 优先级，数值越小，客户端展示的优先级越高。不同系统状态的优先级不能一样。
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "priority",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub priority: i64,
    /// 同步设置
    #[serde(
        rename = "sync_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sync_setting: SystemStatusSyncSettingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusI18nNameSubResp {
    /// 中文名
    ///
    /// **示例值**: "出差"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文名
    ///
    /// **示例值**: "On business trip"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
    /// 日文名
    ///
    /// **示例值**: "出張中"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSyncSettingSubResp {
    /// 是否默认开启
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_open_by_default",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_open_by_default: bool,
    /// 同步设置名称，名称字符数要在1到30范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    ///
    /// **示例值**: "出差期间自动开启"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 同步设置国际化名称，名称字符数要在1到30范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    #[serde(
        rename = "i18n_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_title: SystemStatusSyncI18nNameSubResp,
    /// 同步设置解释文案，解释字符数要在1到60范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    ///
    /// **示例值**: "出差审批通过后，将自动开启并优先展示该状态。"
    #[serde(
        rename = "explain",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub explain: String,
    /// 同步设置国际化解释文案，解释字符数要在1到60范围内。
    ///
    /// **注意：**
    ///
    /// - 1中文=2英文=2其他语言字符=2字符
    #[serde(
        rename = "i18n_explain",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_explain: SystemStatusSyncI18nExplainSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSyncI18nNameSubResp {
    /// 中文名
    ///
    /// **示例值**: "出差期间自动开启"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文名
    ///
    /// **示例值**: "Auto display Business Trip"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
    /// 日文名
    ///
    /// **示例值**: "出張中に自動的にオンにする"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusSyncI18nExplainSubResp {
    /// 中文名
    ///
    /// **示例值**: "出差审批通过后，该状态将自动开启并优先展示"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文名
    ///
    /// **示例值**: "Auto-display after travel request is approved."
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
    /// 日文名
    ///
    /// **示例值**: "申請が承認されると、このステータスが優先的に表示されます"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::personal_settings::PersonalSettingsServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            UpdatePersonalSettingsSystemStatusReq,
        ) -> Result<(UpdatePersonalSettingsSystemStatusResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdatePersonalSettingsSystemStatusReq,
                )
                    -> Result<(UpdatePersonalSettingsSystemStatusResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> PersonalSettingsServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_personal_settings_system_status<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdatePersonalSettingsSystemStatusReq,
            UpdatePersonalSettingsSystemStatusResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_personal_settings_system_status(
            &self,
            req: &UpdatePersonalSettingsSystemStatusReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                UpdatePersonalSettingsSystemStatusReq,
                UpdatePersonalSettingsSystemStatusResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::personal_settings::update_personal_settings_system_status::{
            UpdatePersonalSettingsSystemStatusReq, UpdatePersonalSettingsSystemStatusResp,
            UpdatePersonalSettingsSystemStatusRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .personal_settings()
            .mock()
            .mock_update_personal_settings_system_status(|_| {
                Ok((
                    UpdatePersonalSettingsSystemStatusResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res =
            lark.personal_settings()
                .update_personal_settings_system_status(
                    UpdatePersonalSettingsSystemStatusReq::default(),
                )
                .await;
        assert!(res.is_ok());
        mocker.clear();
        let res =
            lark.personal_settings()
                .update_personal_settings_system_status(
                    UpdatePersonalSettingsSystemStatusReq::default(),
                )
                .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "system_status": {
        "title": "出差",
        "i18n_title": {
            "zh_cn": "出差",
            "en_us": "On business trip",
            "ja_jp": "出張中"
        },
        "icon_key": "GeneralBusinessTrip",
        "color": "BLUE",
        "priority": 1,
        "sync_setting": {
            "is_open_by_default": true,
            "title": "出差期间自动开启",
            "i18n_title": {
                "zh_cn": "出差期间自动开启",
                "en_us": "Auto display Business Trip",
                "ja_jp": "出張中に自動的にオンにする"
            },
            "explain": "出差审批通过后，将自动开启并优先展示该状态。",
            "i18n_explain": {
                "zh_cn": "出差审批通过后，该状态将自动开启并优先展示",
                "en_us": "Auto-display after travel request is approved.",
                "ja_jp": "申請が承認されると、このステータスが優先的に表示されます"
            }
        }
    },
    "update_fields": [
        "ICON"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::UpdatePersonalSettingsSystemStatusReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "system_status": {
            "system_status_id": "7101214603622940633",
            "title": "出差",
            "i18n_title": {
                "zh_cn": "出差",
                "en_us": "On business trip",
                "ja_jp": "出張中"
            },
            "icon_key": "GeneralBusinessTrip",
            "color": "BLUE",
            "priority": 1,
            "sync_setting": {
                "is_open_by_default": true,
                "title": "出差期间自动开启",
                "i18n_title": {
                    "zh_cn": "出差期间自动开启",
                    "en_us": "Auto display Business Trip",
                    "ja_jp": "出張中に自動的にオンにする"
                },
                "explain": "出差审批通过后，将自动开启并优先展示该状态。",
                "i18n_explain": {
                    "zh_cn": "出差审批通过后，该状态将自动开启并优先展示",
                    "en_us": "Auto-display after travel request is approved.",
                    "ja_jp": "申請が承認されると、このステータスが優先的に表示されます"
                }
            }
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdatePersonalSettingsSystemStatusRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
