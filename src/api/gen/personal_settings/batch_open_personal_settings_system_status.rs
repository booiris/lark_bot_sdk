//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/batch_open>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::personal_settings::PersonalSettingsService;

impl<'c, IStore: Store, IClient: HttpClient> PersonalSettingsService<'c, IStore, IClient> {
    /// **api 版本: 2023-07-12T03:57:29+00:00**
    ///
    /// ## 批量开启系统状态
    ///
    /// 批量开启用户系统状态可用。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/batch_open>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/personal_settings-v1/system_status/batch_open>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fpersonal_settings-v1%2Fsystem_status%2Fbatch_open>
    pub async fn batch_open_personal_settings_system_status(
        &self,
        req: BatchOpenPersonalSettingsSystemStatusReq,
    ) -> Result<(BatchOpenPersonalSettingsSystemStatusResp, CommonResponse), Error> {
        self.batch_open_personal_settings_system_status_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_open_personal_settings_system_status](#method.batch_open_personal_settings_system_status) 函数
    pub async fn batch_open_personal_settings_system_status_with_opt(
        &self,
        req: BatchOpenPersonalSettingsSystemStatusReq,
        method_option: MethodOption,
    ) -> Result<(BatchOpenPersonalSettingsSystemStatusResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_batch_open_personal_settings_system_status(&req)
            {
                tracing::info!(
                    "[lark] PersonalSettings#BatchOpenPersonalSettingsSystemStatus **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] PersonalSettings#BatchOpenPersonalSettingsSystemStatus call api");

        let req = ApiRequest {
            scope: "PersonalSettings",
            api: "BatchOpenPersonalSettingsSystemStatus",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/personal_settings/v1/system_statuses/:system_status_id/batch_open",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchOpenPersonalSettingsSystemStatusRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchOpenPersonalSettingsSystemStatusReq {
    /// 系统状态ID
    ///
    /// [获取系统状态ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/personal_settings-v1/system_status/list)
    ///
    /// **示例值**: "7101214603622940672"
    #[api(kind = "path", name = "system_status_id")]
    pub system_status_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 开启列表
    ///
    /// **是否必填**: 是
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `50` 字符
    #[api(kind = "body", name = "user_list")]
    pub user_list: Vec<Option<SystemStatusUserOpenParamSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusUserOpenParamSubReq {
    /// 用户ID，传入的ID类型由user_id_type决定，推荐使用 OpenID，获取方式可参考文档[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_53edd3282dbc2fdbe5c593cfa5ce82ab"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 结束时间，传入的应为秒单位的时间戳，距当前的时间跨度不能超过365天。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1665990378"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchOpenPersonalSettingsSystemStatusRespInner {
    #[serde(flatten)]
    data: Option<BatchOpenPersonalSettingsSystemStatusResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchOpenPersonalSettingsSystemStatusResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 开启结果
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "result_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub result_list: Vec<SystemStatusUserOpenResultEntitySubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemStatusUserOpenResultEntitySubResp {
    /// 用户ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_53edd3282dbc2fdbe5c593cfa5ce82ab"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 结束时间，传入的应为秒单位的时间戳，距当前的时间跨度不能超过365天。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1665990378"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 开启结果
    ///
    /// **示例值**: "success_show"
    ///
    /// **可选值**:
    ///
    /// `success_show`: 成功且在客户端展示
    ///
    /// `success_user_close_syn`: 成功但是用户设置了默认不开启
    ///
    /// `success_user_in_higher_priority_system_status`: 成功但是用户存在更高优先级的系统状态
    ///
    /// `fail`: 失败
    ///
    /// `invisible_user_id`: 用户ID不可见
    ///
    /// `invalid_user_id`: 用户ID无效
    ///
    /// `resign_user_id`: 用户离职
    #[serde(
        rename = "result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub result: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::personal_settings::PersonalSettingsServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            BatchOpenPersonalSettingsSystemStatusReq,
        ) -> Result<(BatchOpenPersonalSettingsSystemStatusResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    BatchOpenPersonalSettingsSystemStatusReq,
                )
                    -> Result<(BatchOpenPersonalSettingsSystemStatusResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> PersonalSettingsServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_open_personal_settings_system_status<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            BatchOpenPersonalSettingsSystemStatusReq,
            BatchOpenPersonalSettingsSystemStatusResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_open_personal_settings_system_status(
            &self,
            req: &BatchOpenPersonalSettingsSystemStatusReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                BatchOpenPersonalSettingsSystemStatusReq,
                BatchOpenPersonalSettingsSystemStatusResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::personal_settings::batch_open_personal_settings_system_status::{
            BatchOpenPersonalSettingsSystemStatusReq, BatchOpenPersonalSettingsSystemStatusResp,
            BatchOpenPersonalSettingsSystemStatusRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .personal_settings()
            .mock()
            .mock_batch_open_personal_settings_system_status(|_| {
                Ok((
                    BatchOpenPersonalSettingsSystemStatusResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .personal_settings()
            .batch_open_personal_settings_system_status(
                BatchOpenPersonalSettingsSystemStatusReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .personal_settings()
            .batch_open_personal_settings_system_status(
                BatchOpenPersonalSettingsSystemStatusReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "user_list": [
        {
            "user_id": "ou_53edd3282dbc2fdbe5c593cfa5ce82ab",
            "end_time": "1665990378"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::BatchOpenPersonalSettingsSystemStatusReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "result_list": [
            {
                "user_id": "ou_53edd3282dbc2fdbe5c593cfa5ce82ab",
                "end_time": "1665990378",
                "result": "success_show"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchOpenPersonalSettingsSystemStatusRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
