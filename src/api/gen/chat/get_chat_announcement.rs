//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::chat::ChatService;

impl<'c, IStore: Store, IClient: HttpClient> ChatService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-21T09:04:28+00:00**
    ///
    /// ## 获取群公告信息
    ///
    /// 获取会话中的群公告信息，公告信息格式与[旧版云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
    ///
    /// 注意事项：
    ///
    /// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 机器人或授权用户必须在群里
    ///
    /// - 获取内部群信息时，操作者须与群组在同一租户下
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/group/chat-announcement/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fgroup%2Fchat-announcement%2Fget>
    pub async fn get_chat_announcement(
        &self,
        req: GetChatAnnouncementReq,
    ) -> Result<(GetChatAnnouncementResp, CommonResponse), Error> {
        self.get_chat_announcement_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_chat_announcement](#method.get_chat_announcement) 函数
    pub async fn get_chat_announcement_with_opt(
        &self,
        req: GetChatAnnouncementReq,
        method_option: MethodOption,
    ) -> Result<(GetChatAnnouncementResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_chat_announcement(&req) {
                tracing::info!("[lark] Chat#GetChatAnnouncement **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Chat#GetChatAnnouncement call api");

        let req = ApiRequest {
            scope: "Chat",
            api: "GetChatAnnouncement",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/im/v1/chats/:chat_id/announcement",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetChatAnnouncementRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetChatAnnouncementReq {
    /// 待获取公告的群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
    ///
    /// **注意**：不支持P2P单聊
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "oc_5ad11d72b830411d72b836c20"
    #[api(kind = "path", name = "chat_id")]
    pub chat_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetChatAnnouncementRespInner {
    #[serde(flatten)]
    data: Option<GetChatAnnouncementResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetChatAnnouncementResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 云文档序列化信息
    ///
    /// **示例值**: "xxx"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 文档当前版本号 纯数字
    ///
    /// **示例值**: "12"
    #[serde(
        rename = "revision",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub revision: String,
    /// 文档生成的时间戳（秒）
    ///
    /// **示例值**: "1609296809"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 文档更新的时间戳（秒）
    ///
    /// **示例值**: "1609296809"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 文档所有者的 ID 类型
    ///
    /// - 如果所有者是用户，则与查询参数中的user_id_type 相同；取值为`open_id` `user_id` `union_id` 其中之一，不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// - 如果所有者是机器人，为机器人应用的 `app_id`，详情参见  [获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g)
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `user_id`: 以 user_id 来识别用户
    ///
    /// `union_id`: 以 union_id 来识别用户
    ///
    /// `open_id`: 以 open_id 来识别用户
    ///
    /// `app_id`: 以 app_id 来识别机器人应用
    #[serde(
        rename = "owner_id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id_type: String,
    /// 文档所有者 ID，ID 值与owner_id_type 中的ID类型对应
    ///
    /// **示例值**: "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: String,
    /// 文档最新修改者 id 类型
    ///
    /// - 如果修改者是用户，则与查询参数中的user_id_type 相同；取值为`open_id` `user_id` `union_id` 其中之一，不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// - 如果修改者是机器人，为机器人应用的 `app_id`，详情参见  [获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g)
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `user_id`: 以 user_id 来识别用户
    ///
    /// `union_id`: 以 union_id 来识别用户
    ///
    /// `open_id`: 以 open_id 来识别用户
    ///
    /// `app_id`: 以 app_id 来识别应用
    #[serde(
        rename = "modifier_id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modifier_id_type: String,
    /// 文档最新修改者 ID，ID 值与modifier_id_type 中的ID类型对应
    ///
    /// **示例值**: "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    #[serde(
        rename = "modifier_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modifier_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::chat::ChatServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetChatAnnouncementReq) -> Result<(GetChatAnnouncementResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetChatAnnouncementReq,
                ) -> Result<(GetChatAnnouncementResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ChatServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_chat_announcement<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetChatAnnouncementReq, GetChatAnnouncementResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_chat_announcement(
            &self,
            req: &GetChatAnnouncementReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetChatAnnouncementReq, GetChatAnnouncementResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::chat::get_chat_announcement::{
            GetChatAnnouncementReq, GetChatAnnouncementResp, GetChatAnnouncementRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .chat()
            .mock()
            .mock_get_chat_announcement(|_| {
                Ok((
                    GetChatAnnouncementResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .chat()
            .get_chat_announcement(GetChatAnnouncementReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .chat()
            .get_chat_announcement(GetChatAnnouncementReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "content": "xxx",
        "revision": "12",
        "create_time": "1609296809",
        "update_time": "1609296809",
        "owner_id_type": "open_id",
        "owner_id": "ou_7d8a6e6df7621556ce0d21922b676706ccs",
        "modifier_id_type": "open_id",
        "modifier_id": "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetChatAnnouncementRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
