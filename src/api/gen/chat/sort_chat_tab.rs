//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/sort_tabs>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::chat::ChatService;

impl<'c, IStore: Store, IClient: HttpClient> ChatService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-15T08:05:45+00:00**
    ///
    /// ## 会话标签页排序
    ///
    /// 会话标签页排序。
    ///
    /// 注意事项：
    ///
    /// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 机器人或授权用户必须在群里
    ///
    /// - 消息标签页强制固定为第一顺位，不参与排序，但是请求体中必须包含该标签页的Tab ID
    ///
    /// - 操作内部群时，操作者须与群组在同一租户下
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/sort_tabs>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/group/chat-tab/sort_tabs>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fgroup%2Fchat-tab%2Fsort_tabs>
    pub async fn sort_chat_tab(
        &self,
        req: SortChatTabReq,
    ) -> Result<(SortChatTabResp, CommonResponse), Error> {
        self.sort_chat_tab_with_opt(req, Default::default()).await
    }

    /// 参见 [sort_chat_tab](#method.sort_chat_tab) 函数
    pub async fn sort_chat_tab_with_opt(
        &self,
        req: SortChatTabReq,
        method_option: MethodOption,
    ) -> Result<(SortChatTabResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_sort_chat_tab(&req) {
                tracing::info!("[lark] Chat#SortChatTab **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Chat#SortChatTab call api");

        let req = ApiRequest {
            scope: "Chat",
            api: "SortChatTab",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/im/v1/chats/:chat_id/chat_tabs/sort_tabs",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SortChatTabRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SortChatTabReq {
    /// 群ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
    ///
    /// **注意**：支持群模式为`p2p`与`group`的群ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "oc_a0553eda9014c201e6969b478895c230"
    #[api(kind = "path", name = "chat_id")]
    pub chat_id: String,

    /// 会话标签页ID列表，Tab ID可以在[添加会话标签页](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/create)与[拉取会话标签页](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-tab/list_tabs)的返回值中获取
    ///
    /// **注意**：必须包含该会话中全部的Tab ID
    ///
    /// **示例值**: "["7101214603622940671", "7101214603622940672"]"
    #[api(kind = "body", name = "tab_ids")]
    pub tab_ids: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SortChatTabRespInner {
    #[serde(flatten)]
    data: Option<SortChatTabResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SortChatTabResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 会话标签页
    #[serde(
        rename = "chat_tabs",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_tabs: Vec<ChatTabSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChatTabSubResp {
    /// Tab ID
    ///
    /// **示例值**: "7101214603622940671"
    #[serde(
        rename = "tab_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tab_id: String,
    /// Tab名称
    ///
    /// **注意**：会话标签页的名称不能超过30个字符
    ///
    /// **示例值**: "文档"
    #[serde(
        rename = "tab_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tab_name: String,
    /// Tab类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    ///
    /// **可选值**:
    ///
    /// `Message`: 消息类型
    ///
    /// `DocList`: 云文档列表
    ///
    /// `Doc`: 文档
    ///
    /// `Pin`: Pin
    ///
    /// `MeetingMinute`: 会议纪要
    ///
    /// `ChatAnnouncement`: 群公告
    ///
    /// `URL`: URL
    ///
    /// `File`: 文件
    ///
    /// `Files_Resources`: 合并类型, 包含文件、Doc文档、URL链接
    ///
    /// `Images_Videos`: 合并类型，包含图片、视频
    #[serde(
        rename = "tab_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tab_type: String,
    /// Tab内容
    #[serde(
        rename = "tab_content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tab_content: ChatTabContentSubResp,
    /// Tab的配置
    #[serde(
        rename = "tab_config",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tab_config: ChatTabConfigSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChatTabContentSubResp {
    /// URL类型
    ///
    /// **示例值**: "https://www.feishu.cn"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// Doc链接
    ///
    /// **示例值**: "https://example.feishu.cn/wiki/wikcnPIcqWjJQwkwDzrB9t40123xz"
    #[serde(
        rename = "doc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub doc: String,
    /// 会议纪要
    ///
    /// **示例值**: "https://example.feishu.cn/docs/doccnvIXbV22i6hSD3utar4123dx"
    #[serde(
        rename = "meeting_minute",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_minute: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChatTabConfigSubResp {
    /// 群Tab图标
    ///
    /// **示例值**: "img_v2_b99741-7628-4abd-aad0-b881e4db83ig"
    #[serde(
        rename = "icon_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub icon_key: String,
    /// 群tab是否App内嵌打开
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_built_in",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_built_in: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::chat::ChatServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(SortChatTabReq) -> Result<(SortChatTabResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(SortChatTabReq) -> Result<(SortChatTabResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ChatServiceMocker<'c, IStore, IClient> {
        pub fn mock_sort_chat_tab<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, SortChatTabReq, SortChatTabResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_sort_chat_tab(
            &self,
            req: &SortChatTabReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, SortChatTabReq, SortChatTabResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::chat::sort_chat_tab::{SortChatTabReq, SortChatTabResp, SortChatTabRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .chat()
            .mock()
            .mock_sort_chat_tab(|_| Ok((SortChatTabResp::default(), CommonResponse::default())))
            .build();
        let res = lark.chat().sort_chat_tab(SortChatTabReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.chat().sort_chat_tab(SortChatTabReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "tab_ids": [
        "6936075528890826780"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::SortChatTabReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "ok",
    "data": {
        "chat_tabs": [
            {
                "tab_content": {},
                "tab_id": "7104164142520467475",
                "tab_type": "message"
            },
            {
                "tab_content": {},
                "tab_id": "7104164246245605395",
                "tab_type": "pin"
            },
            {
                "tab_content": {
                    "url": "https://www.feishu.cn/"
                },
                "tab_id": "7104168465417633811",
                "tab_name": "url2",
                "tab_type": "url"
            },
            {
                "tab_content": {
                    "doc": "https://example.feishu.cn/docx/doxbcjoYDoEtuwC0k0hryQBkSV1"
                },
                "tab_id": "7104168465379885076",
                "tab_name": "doc2",
                "tab_type": "doc"
            },
            {
                "tab_content": {
                    "url": "https://www.feishu.cn/"
                },
                "tab_id": "7104168141097287699",
                "tab_name": "url1",
                "tab_type": "url"
            },
            {
                "tab_content": {
                    "doc": "https://example.feishu.cn/docx/doxbcjoYDoEtuwC0k0hryQBkSV1"
                },
                "tab_id": "7104168141063716884",
                "tab_name": "doc1",
                "tab_type": "doc"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SortChatTabRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
