//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/is_in_chat>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::chat::ChatService;

impl<'c, IStore: Store, IClient: HttpClient> ChatService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-05T03:20:05+00:00**
    ///
    /// ## 判断用户或机器人是否在群里
    ///
    /// 根据使用的access_token判断对应的用户或者机器人是否在群里。
    ///
    /// 注意事项：
    ///
    /// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 获取内部群信息时，操作者须与群组在同一租户下
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/is_in_chat>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/group/chat-member/is_in_chat>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fgroup%2Fchat-member%2Fis_in_chat>
    pub async fn is_in_chat(
        &self,
        req: IsInChatReq,
    ) -> Result<(IsInChatResp, CommonResponse), Error> {
        self.is_in_chat_with_opt(req, Default::default()).await
    }

    /// 参见 [is_in_chat](#method.is_in_chat) 函数
    pub async fn is_in_chat_with_opt(
        &self,
        req: IsInChatReq,
        method_option: MethodOption,
    ) -> Result<(IsInChatResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_is_in_chat(&req) {
                tracing::info!("[lark] Chat#IsInChat **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Chat#IsInChat call api");

        let req = ApiRequest {
            scope: "Chat",
            api: "IsInChat",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/im/v1/chats/:chat_id/members/is_in_chat",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (IsInChatRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct IsInChatReq {
    /// 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "oc_a0553eda9014c201e6969b478895c230"
    #[api(kind = "path", name = "chat_id")]
    pub chat_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct IsInChatRespInner {
    #[serde(flatten)]
    data: Option<IsInChatResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct IsInChatResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 用户或者机器人是否在群中
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_in_chat",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_in_chat: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::chat::ChatServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(IsInChatReq) -> Result<(IsInChatResp, CommonResponse), Error> + Send + Sync + 'static
    {
    }
    impl<
            T: Fn(IsInChatReq) -> Result<(IsInChatResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ChatServiceMocker<'c, IStore, IClient> {
        pub fn mock_is_in_chat<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, IsInChatReq, IsInChatResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_is_in_chat(&self, req: &IsInChatReq) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, IsInChatReq, IsInChatResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::chat::is_in_chat::{IsInChatReq, IsInChatResp, IsInChatRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .chat()
            .mock()
            .mock_is_in_chat(|_| Ok((IsInChatResp::default(), CommonResponse::default())))
            .build();
        let res = lark.chat().is_in_chat(IsInChatReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.chat().is_in_chat(IsInChatReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "is_in_chat": false
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<IsInChatRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
