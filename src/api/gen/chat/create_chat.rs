//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::chat::ChatService;

impl<'c, IStore: Store, IClient: HttpClient> ChatService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-05T03:20:02+00:00**
    ///
    /// ## 创建群
    ///
    /// 创建群并设置群头像、群名、群描述等。
    ///
    /// 注意事项：
    ///
    /// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 本接口支持在创建群的同时拉用户或机器人进群；如果仅需要拉用户或者机器人入群参考 [将用户或机器人拉入群聊](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create)接口
    ///
    /// - 商店应用无法使用 user_id。因此使用商店应用调用本接口时用户 ID 类型请选择 open_id 或者 union_id。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/group/chat/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fgroup%2Fchat%2Fcreate>
    pub async fn create_chat(
        &self,
        req: CreateChatReq,
    ) -> Result<(CreateChatResp, CommonResponse), Error> {
        self.create_chat_with_opt(req, Default::default()).await
    }

    /// 参见 [create_chat](#method.create_chat) 函数
    pub async fn create_chat_with_opt(
        &self,
        req: CreateChatReq,
        method_option: MethodOption,
    ) -> Result<(CreateChatResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_chat(&req) {
                tracing::info!("[lark] Chat#CreateChat **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Chat#CreateChat call api");

        let req = ApiRequest {
            scope: "Chat",
            api: "CreateChat",
            method: http::Method::POST,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/im/v1/chats",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateChatRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateChatReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 如果在请求体的 ==owner_id== 字段指定了某个用户为群主，可以选择是否同时设置创建此群的机器人为管理员，此标志位用于标记是否设置创建群的机器人为管理员
    ///
    /// **示例值**: "false"
    #[api(
        kind = "query",
        name = "set_bot_manager",
        v_type = "var",
        option = "false"
    )]
    pub set_bot_manager: bool,
    /// 由开发者生成的唯一字符串序列，用于创建群组请求去重；持有相同uuid + owner_id（若有） 的请求10小时内只可成功创建1个群聊
    ///
    /// **示例值**: "b13g2t38-1jd2-458b-8djf-dtbca5104204"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `50` 字符
    #[api(kind = "query", name = "uuid", v_type = "var", option = "false")]
    pub uuid: String,
    /// 群头像对应的 Image Key，可通过[上传图片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)获取（注意：上传图片的 ==image_type== 需要指定为 ==avatar==）
    ///
    /// **示例值**: "default-avatar_44ae0ca3-e140-494b-956f-78091e348435"
    #[api(kind = "body", name = "avatar")]
    pub avatar: Option<String>,
    /// 群名称
    ///
    /// **注意：**
    ///
    /// - 公开群名称的长度不得少于2个字符
    ///
    /// - 私有群若未填写群名称，群名称默认设置为 ”`(无主题)`“
    ///
    /// **示例值**: "测试群名称"
    #[api(kind = "body", name = "name")]
    pub name: Option<String>,
    /// 群描述
    ///
    /// **示例值**: "测试群描述"
    #[api(kind = "body", name = "description")]
    pub description: Option<String>,
    /// 群国际化名称
    #[api(kind = "body", name = "i18n_names")]
    pub i18n_names: Option<I18nNamesSubReq>,
    /// 创建群时指定的群主，不填时指定建群的机器人为群主。群主 ID值应与查询参数中的 ==user_id_type== 对应；推荐使用 OpenID，获取方式可参考文档[如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// **示例值**: "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    #[api(kind = "body", name = "owner_id")]
    pub owner_id: Option<String>,
    /// 创建群时邀请的群成员，ID 类型在查询参数 ==user_id_type== 中指定；推荐使用 OpenID，获取方式可参考文档[如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// **注意**：
    ///
    /// - 最多同时邀请 50 个用户
    ///
    /// - 为便于在客户端查看效果，建议调试接口时加入开发者自身ID
    ///
    /// **示例值**: "["ou_7d8a6e6df7621556ce0d21922b676706ccs"]"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `50` 字符
    #[api(kind = "body", name = "user_id_list")]
    pub user_id_list: Vec<Option<String>>,
    /// 创建群时邀请的群机器人；可参考[如何获取应用的 App ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-app-id)来获取应用的App ID
    ///
    /// **注意：**
    ///
    /// - 操作此接口的机器人会自动入群，无需重复填写
    ///
    /// - 拉机器人入群请使用`app_id`
    ///
    /// - 最多同时邀请5个机器人，且邀请后群组中机器人数量不能超过 15 个
    ///
    /// **示例值**: "["cli_a10fbf7e94b8d01d"]"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `5` 字符
    #[api(kind = "body", name = "bot_id_list")]
    pub bot_id_list: Vec<Option<String>>,
    /// 群消息形式
    ///
    /// **示例值**: "chat"
    ///
    /// **可选值**:
    ///
    /// `chat`: 对话消息
    ///
    /// `thread`: 话题消息
    #[api(kind = "body", name = "group_message_type")]
    pub group_message_type: Option<String>,
    /// 群模式
    ///
    /// **可选值有**：
    ///
    /// - `group`：群组
    ///
    /// **示例值**: "group"
    #[api(kind = "body", name = "chat_mode")]
    pub chat_mode: Option<String>,
    /// 群类型
    ///
    /// **可选值有**：
    ///
    /// - `private`：私有群
    ///
    /// - `public`：公开群
    ///
    /// **示例值**: "private"
    #[api(kind = "body", name = "chat_type")]
    pub chat_type: Option<String>,
    /// 入群消息可见性
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员可见
    ///
    /// - `all_members`：所有成员可见
    ///
    /// - `not_anyone`：任何人均不可见
    ///
    /// **示例值**: "all_members"
    #[api(kind = "body", name = "join_message_visibility")]
    pub join_message_visibility: Option<String>,
    /// 退群消息可见性
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员可见
    ///
    /// - `all_members`：所有成员可见
    ///
    /// - `not_anyone`：任何人均不可见
    ///
    /// **示例值**: "all_members"
    #[api(kind = "body", name = "leave_message_visibility")]
    pub leave_message_visibility: Option<String>,
    /// 加群审批
    ///
    /// **可选值有**：
    ///
    /// - `no_approval_required`：无需审批
    ///
    /// - `approval_required`：需要审批
    ///
    /// **示例值**: "no_approval_required"
    #[api(kind = "body", name = "membership_approval")]
    pub membership_approval: Option<String>,
    /// 保密模式设置
    #[api(kind = "body", name = "restricted_mode_setting")]
    pub restricted_mode_setting: Option<RestrictedModeSettingSubReq>,
    /// 谁可以加急
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `only_owner`: 仅群主和管理员
    ///
    /// `all_members`: 所有成员
    #[api(kind = "body", name = "urgent_setting")]
    pub urgent_setting: Option<String>,
    /// 谁可以发起视频会议
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `only_owner`: 仅群主和管理员
    ///
    /// `all_members`: 所有成员
    #[api(kind = "body", name = "video_conference_setting")]
    pub video_conference_setting: Option<String>,
    /// 谁可以编辑群信息
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `only_owner`: 仅群主和管理员
    ///
    /// `all_members`: 所有成员
    #[api(kind = "body", name = "edit_permission")]
    pub edit_permission: Option<String>,
    /// 隐藏群成员人数设置
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `all_members`: 所有群成员可见
    ///
    /// `only_owner`: 仅群主群管理员可见
    #[api(kind = "body", name = "hide_member_count_setting")]
    pub hide_member_count_setting: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nNamesSubReq {
    /// 中文名
    ///
    /// **示例值**: "群聊"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: Option<String>,
    /// 英文名
    ///
    /// **示例值**: "group chat"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: Option<String>,
    /// 日文名
    ///
    /// **示例值**: "グループチャット"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RestrictedModeSettingSubReq {
    /// 保密模式是否开启
    ///
    /// **注意**：
    ///
    /// - status为true时，screenshot_has_permission_setting、download_has_permission_setting、message_has_permission_setting不能全为all_members。
    ///
    /// - status为false时，screenshot_has_permission_setting、download_has_permission_setting、message_has_permission_setting不能存在not_anyone。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: Option<bool>,
    /// 允许截屏录屏
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `AllMembers`: 所有成员允许截屏录屏
    ///
    /// `NotAnyone`: 所有成员禁止截屏录屏
    #[serde(
        rename = "screenshot_has_permission_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub screenshot_has_permission_setting: Option<String>,
    /// 允许下载消息中图片、视频和文件
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `AllMembers`: 所有成员允许下载资源
    ///
    /// `NotAnyone`: 所有成员禁止下载资源
    #[serde(
        rename = "download_has_permission_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub download_has_permission_setting: Option<String>,
    /// 允许复制和转发消息
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `AllMembers`: 所有成员允许复制和转发消息
    ///
    /// `NotAnyone`: 所有成员禁止复制和转发消息
    #[serde(
        rename = "message_has_permission_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub message_has_permission_setting: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateChatRespInner {
    #[serde(flatten)]
    data: Option<CreateChatResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateChatResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 群 ID，详情参见：[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
    ///
    /// **示例值**: "oc_a0553eda9014c201e6969b478895c230"
    #[serde(
        rename = "chat_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_id: String,
    /// 群头像 URL
    ///
    /// **示例值**: "https://p3-lark-file.byteimg.com/img/lark-avatar-staging/default-avatar_44ae0ca3-e140-494b-956f-78091e348435~100x100.jpg"
    #[serde(
        rename = "avatar",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar: String,
    /// 群名称
    ///
    /// **示例值**: "测试群名称"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 群描述
    ///
    /// **示例值**: "测试群描述"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 群国际化名称
    #[serde(
        rename = "i18n_names",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_names: I18nNamesSubResp,
    /// 群主 ID，ID值与查询参数中的 ==user_id_type== 对应；不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// **注意**：当群主是机器人时，该字段不返回
    ///
    /// **示例值**: "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: String,
    /// 群主 ID 对应的ID类型，与查询参数中的 ==user_id_type== 相同。取值为：`open_id`、`user_id`、`union_id`其中之一
    ///
    /// **注意**：当群主是机器人时，该字段不返回
    ///
    /// **示例值**: "open_id"
    #[serde(
        rename = "owner_id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id_type: String,
    /// 谁可以加急
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `only_owner`: 仅群主和管理员
    ///
    /// `all_members`: 所有成员
    #[serde(
        rename = "urgent_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub urgent_setting: String,
    /// 谁可以发起视频会议
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `only_owner`: 仅群主和管理员
    ///
    /// `all_members`: 所有成员
    #[serde(
        rename = "video_conference_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub video_conference_setting: String,
    /// 拉 用户或机器人 入群权限
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员
    ///
    /// - `all_members`：所有成员
    ///
    /// **示例值**: "all members"
    #[serde(
        rename = "add_member_permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub add_member_permission: String,
    /// 群分享权限
    ///
    /// **可选值有**：
    ///
    /// - `allowed`：允许
    ///
    /// - `not_allowed`：不允许
    ///
    /// **示例值**: "allowed"
    #[serde(
        rename = "share_card_permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub share_card_permission: String,
    /// at 所有人权限
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员
    ///
    /// - `all_members`：所有成员
    ///
    /// **示例值**: "all members"
    #[serde(
        rename = "at_all_permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub at_all_permission: String,
    /// 群编辑权限
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员
    ///
    /// - `all_members`：所有成员
    ///
    /// **示例值**: "all members"
    #[serde(
        rename = "edit_permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub edit_permission: String,
    /// 群消息形式
    ///
    /// **可选值有**：
    ///
    /// - `chat`：对话消息
    ///
    /// - `thread`：话题消息
    ///
    /// **示例值**: "chat"
    #[serde(
        rename = "group_message_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_message_type: String,
    /// 群模式
    ///
    /// **可选值有**：
    ///
    /// - `group`：群组
    ///
    /// **示例值**: "group"
    #[serde(
        rename = "chat_mode",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_mode: String,
    /// 群类型
    ///
    /// **可选值有**：
    ///
    /// - `private`：私有群
    ///
    /// - `public`：公开群
    ///
    /// **示例值**: "private"
    #[serde(
        rename = "chat_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_type: String,
    /// 群标签，如有多个，则按照下列顺序返回第一个
    ///
    /// **可选值有**：
    ///
    /// - `inner`：内部群
    ///
    /// - `tenant`：公司群
    ///
    /// - `department`：部门群
    ///
    /// - `edu`：教育群
    ///
    /// - `meeting`：会议群
    ///
    /// - `customer_service`：客服群
    ///
    /// **示例值**: "inner"
    #[serde(
        rename = "chat_tag",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_tag: String,
    /// 是否是外部群
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "external",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external: bool,
    /// 租户在飞书上的唯一标识，用来换取对应的tenant_access_token，也可以用作租户在应用里面的唯一标识
    ///
    /// **示例值**: "736588c9260f175e"
    #[serde(
        rename = "tenant_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tenant_key: String,
    /// 入群消息可见性
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员可见
    ///
    /// - `all_members`：所有成员可见
    ///
    /// - `not_anyone`：任何人均不可见
    ///
    /// **示例值**: "all_members"
    #[serde(
        rename = "join_message_visibility",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub join_message_visibility: String,
    /// 出群消息可见性
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员可见
    ///
    /// - `all_members`：所有成员可见
    ///
    /// - `not_anyone`：任何人均不可见
    ///
    /// **示例值**: "all_members"
    #[serde(
        rename = "leave_message_visibility",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_message_visibility: String,
    /// 加群审批
    ///
    /// **可选值有**：
    ///
    /// - `no_approval_required`：无需审批
    ///
    /// - `approval_required`：需要审批
    ///
    /// **示例值**: "no_approval_required"
    #[serde(
        rename = "membership_approval",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub membership_approval: String,
    /// 发言权限
    ///
    /// **可选值有**：
    ///
    /// - `only_owner`：仅群主和管理员
    ///
    /// - `all_members`：所有成员
    ///
    /// - `moderator_list`：指定群成员
    ///
    /// **示例值**: "all_members"
    #[serde(
        rename = "moderation_permission",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub moderation_permission: String,
    /// 保密模式设置
    #[serde(
        rename = "restricted_mode_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub restricted_mode_setting: RestrictedModeSettingSubResp,
    /// 隐藏群成员人数设置
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `all_members`: 所有群成员可见
    ///
    /// `only_owner`: 仅群主群管理员可见
    #[serde(
        rename = "hide_member_count_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hide_member_count_setting: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nNamesSubResp {
    /// 中文名
    ///
    /// **示例值**: "群聊"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文名
    ///
    /// **示例值**: "group chat"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
    /// 日文名
    ///
    /// **示例值**: "グループチャット"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RestrictedModeSettingSubResp {
    /// 保密模式是否开启
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: bool,
    /// 允许截屏录屏
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `AllMembers`: 所有成员允许截屏录屏
    ///
    /// `NotAnyone`: 所有成员禁止截屏录屏
    #[serde(
        rename = "screenshot_has_permission_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub screenshot_has_permission_setting: String,
    /// 允许下载消息中图片、视频和文件
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `AllMembers`: 所有成员允许下载资源
    ///
    /// `NotAnyone`: 所有成员禁止下载资源
    #[serde(
        rename = "download_has_permission_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub download_has_permission_setting: String,
    /// 允许复制和转发消息
    ///
    /// **示例值**: "all_members"
    ///
    /// **可选值**:
    ///
    /// `AllMembers`: 所有成员允许复制和转发消息
    ///
    /// `NotAnyone`: 所有成员禁止复制和转发消息
    #[serde(
        rename = "message_has_permission_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub message_has_permission_setting: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::chat::ChatServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateChatReq) -> Result<(CreateChatResp, CommonResponse), Error> + Send + Sync + 'static
    {
    }
    impl<
            T: Fn(CreateChatReq) -> Result<(CreateChatResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ChatServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_chat<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, CreateChatReq, CreateChatResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_chat(
            &self,
            req: &CreateChatReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateChatReq, CreateChatResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::chat::create_chat::{CreateChatReq, CreateChatResp, CreateChatRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .chat()
            .mock()
            .mock_create_chat(|_| Ok((CreateChatResp::default(), CommonResponse::default())))
            .build();
        let res = lark.chat().create_chat(CreateChatReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.chat().create_chat(CreateChatReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "avatar": "default-avatar_44ae0ca3-e140-494b-956f-78091e348435",
    "name": "测试群名称",
    "description": "测试群描述",
    "i18n_names": {
        "zh_cn": "群聊",
        "en_us": "group chat",
        "ja_jp": "グループチャット"
    },
    "owner_id": "ou_7d8a6e6df7621556ce0d21922b676706ccs",
    "user_id_list": [
        "ou_7d8a6e6df7621556ce0d21922b676706ccs"
    ],
    "bot_id_list": [
        "cli_a10fbf7e94b8d01d"
    ],
    "group_message_type": "chat",
    "chat_mode": "group",
    "chat_type": "private",
    "join_message_visibility": "all_members",
    "leave_message_visibility": "all_members",
    "membership_approval": "no_approval_required",
    "restricted_mode_setting": {
        "status": false,
        "screenshot_has_permission_setting": "all_members",
        "download_has_permission_setting": "all_members",
        "message_has_permission_setting": "all_members"
    },
    "urgent_setting": "all_members",
    "video_conference_setting": "all_members",
    "edit_permission": "all_members",
    "hide_member_count_setting": "all_members"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateChatReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "chat_id": "oc_a0553eda9014c201e6969b478895c230",
        "avatar": "https://p3-lark-file.byteimg.com/img/lark-avatar-staging/default-avatar_44ae0ca3-e140-494b-956f-78091e348435~100x100.jpg",
        "name": "测试群名称",
        "description": "测试群描述",
        "i18n_names": {
            "zh_cn": "群聊",
            "en_us": "group chat",
            "ja_jp": "グループチャット"
        },
        "owner_id": "ou_7d8a6e6df7621556ce0d21922b676706ccs",
        "owner_id_type": "open_id",
        "urgent_setting": "all_members",
        "video_conference_setting": "all_members",
        "add_member_permission": "all members",
        "share_card_permission": "allowed",
        "at_all_permission": "all members",
        "edit_permission": "all members",
        "group_message_type": "chat",
        "chat_mode": "group",
        "chat_type": "private",
        "chat_tag": "inner",
        "external": false,
        "tenant_key": "736588c9260f175e",
        "join_message_visibility": "all_members",
        "leave_message_visibility": "all_members",
        "membership_approval": "no_approval_required",
        "moderation_permission": "all_members",
        "restricted_mode_setting": {
            "status": false,
            "screenshot_has_permission_setting": "all_members",
            "download_has_permission_setting": "all_members",
            "message_has_permission_setting": "all_members"
        },
        "hide_member_count_setting": "all_members"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateChatRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
