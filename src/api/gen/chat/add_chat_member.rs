//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::chat::ChatService;

impl<'c, IStore: Store, IClient: HttpClient> ChatService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-21T09:04:28+00:00**
    ///
    /// ## 将用户或机器人拉入群聊
    ///
    /// 将用户或机器人拉入群聊。
    ///
    /// 注意事项：
    ///
    /// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 如需拉用户进群，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)
    ///
    /// - 如需拉机器人进群，需要被拉的机器人开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 机器人或授权用户必须在群组中
    ///
    /// - 外部租户不能被加入到内部群中
    ///
    /// - 操作内部群时，操作者须与群组在同一租户下
    ///
    /// - 在开启 ==仅群主和群管理员可添加群成员== 的设置时，仅有群主/管理员 或 创建群组且具备 ==更新应用所创建群的群信息== 权限的机器人，可以拉用户或者机器人进群
    ///
    /// - 在未开启 ==仅群主和群管理员可添加群成员== 的设置时，所有群成员都可以拉用户或机器人进群
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/group/chat-member/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fgroup%2Fchat-member%2Fcreate>
    pub async fn add_chat_member(
        &self,
        req: AddChatMemberReq,
    ) -> Result<(AddChatMemberResp, CommonResponse), Error> {
        self.add_chat_member_with_opt(req, Default::default()).await
    }

    /// 参见 [add_chat_member](#method.add_chat_member) 函数
    pub async fn add_chat_member_with_opt(
        &self,
        req: AddChatMemberReq,
        method_option: MethodOption,
    ) -> Result<(AddChatMemberResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_add_chat_member(&req) {
                tracing::info!("[lark] Chat#AddChatMember **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Chat#AddChatMember call api");

        let req = ApiRequest {
            scope: "Chat",
            api: "AddChatMember",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/im/v1/chats/:chat_id/members",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (AddChatMemberRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct AddChatMemberReq {
    /// 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
    ///
    /// **注意**：仅支持群模式为`group`、`topic`的群组ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "oc_a0553eda9014c201e6969b478895c230"
    #[api(kind = "path", name = "chat_id")]
    pub chat_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `app_id`: 飞书开放平台应用的唯一标识。在创建应用时，由系统自动生成，用户不能自行修改。[了解更多：如何获取应用的 App ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-app-id)
    #[api(
        kind = "query",
        name = "member_id_type",
        v_type = "var",
        option = "false"
    )]
    pub member_id_type: String,
    /// 出现不可用ID后的处理方式 0/1/2
    ///
    /// **默认值**：`0`
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `0`: 兼容之前的策略，不存在/不可见的 ID 会拉群失败，并返回错误响应。存在已离职 ID 时，会将其他可用 ID 拉入群聊，返回拉群成功的响应。
    ///
    /// `1`: 将参数中可用的 ID 全部拉入群聊，返回拉群成功的响应，并展示剩余不可用的 ID 及原因。
    ///
    /// `2`: 参数中只要存在任一不可用的 ID ，就会拉群失败，返回错误响应，并展示出不可用的 ID。
    #[api(
        kind = "query",
        name = "succeed_type",
        v_type = "var",
        option = "false"
    )]
    pub succeed_type: i64,
    /// 成员ID列表。邀请用户进群时推荐使用 OpenID，获取方式可参考文档[如何获取 Open ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)；邀请机器人进群时需填写应用的App ID，请参考[如何获取应用的 App ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-app-id)
    ///
    /// **注意**：
    ///
    /// - 成员列表不可为空
    ///
    /// - 列表中填写的成员ID类型应与 ==member_id_type== 参数中选择的类型相对应
    ///
    /// - 每次请求最多拉50个用户且不超过群人数上限。对于已认证企业的飞书的群人数默认上限：普通群5000人，会议群3000人，话题群5000人。若租户管理员配置了群人数上限，则群人数上限为该人数上限
    ///
    /// - 最多同时邀请5个机器人，且邀请后群组中机器人数量不能超过 15 个
    ///
    /// **示例值**: "["ou_9204a37300b3700d61effaa439f34295"]"
    #[api(kind = "body", name = "id_list")]
    pub id_list: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct AddChatMemberRespInner {
    #[serde(flatten)]
    data: Option<AddChatMemberResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct AddChatMemberResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 无效成员列表
    ///
    /// **注意**：
    ///
    /// - 当`success_type=0`时，`invalid_id_list`只包含已离职的用户ID
    ///
    /// - 当`success_type=1`时，`invalid_id_list`中包含已离职的、不可见的、应用未激活的ID
    #[serde(
        rename = "invalid_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub invalid_id_list: Vec<String>,
    /// ID不存在的成员列表
    #[serde(
        rename = "not_existed_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub not_existed_id_list: Vec<String>,
    /// 等待群主或管理员审批的成员ID列表
    #[serde(
        rename = "pending_approval_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pending_approval_id_list: Vec<String>,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::chat::ChatServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(AddChatMemberReq) -> Result<(AddChatMemberResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(AddChatMemberReq) -> Result<(AddChatMemberResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ChatServiceMocker<'c, IStore, IClient> {
        pub fn mock_add_chat_member<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, AddChatMemberReq, AddChatMemberResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_add_chat_member(
            &self,
            req: &AddChatMemberReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, AddChatMemberReq, AddChatMemberResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::chat::add_chat_member::{
            AddChatMemberReq, AddChatMemberResp, AddChatMemberRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .chat()
            .mock()
            .mock_add_chat_member(|_| Ok((AddChatMemberResp::default(), CommonResponse::default())))
            .build();
        let res = lark
            .chat()
            .add_chat_member(AddChatMemberReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .chat()
            .add_chat_member(AddChatMemberReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "id_list": [
        "4d7a3c6g"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::AddChatMemberReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "invalid_id_list": [
            "4d7a3c6g"
        ],
        "not_existed_id_list": [
            "4d7a3c6g"
        ],
        "pending_approval_id_list": [
            "4d7a3c6g"
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<AddChatMemberRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
