//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/put_top_notice>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::chat::ChatService;

impl<'c, IStore: Store, IClient: HttpClient> ChatService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-21T09:04:27+00:00**
    ///
    /// ## 更新群置顶
    ///
    /// 更新会话中的群置顶信息，可以将群中的某一条消息，或者群公告置顶显示。
    ///
    /// 注意事项：
    ///
    /// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 机器人或授权用户必须在群组中
    ///
    /// - 更新内部群置顶时，操作者须与群组在同一租户下
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/put_top_notice>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/group/chat/put_top_notice>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fgroup%2Fchat%2Fput_top_notice>
    pub async fn update_chat_top_notice(
        &self,
        req: UpdateChatTopNoticeReq,
    ) -> Result<(UpdateChatTopNoticeResp, CommonResponse), Error> {
        self.update_chat_top_notice_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_chat_top_notice](#method.update_chat_top_notice) 函数
    pub async fn update_chat_top_notice_with_opt(
        &self,
        req: UpdateChatTopNoticeReq,
        method_option: MethodOption,
    ) -> Result<(UpdateChatTopNoticeResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_chat_top_notice(&req) {
                tracing::info!("[lark] Chat#UpdateChatTopNotice **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Chat#UpdateChatTopNotice call api");

        let req = ApiRequest {
            scope: "Chat",
            api: "UpdateChatTopNotice",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateChatTopNoticeRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateChatTopNoticeReq {
    /// 待修改置顶的群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "oc_5ad11d72b830411d72b836c20"
    #[api(kind = "path", name = "chat_id")]
    pub chat_id: String,

    /// 要进行发布的群置顶
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "chat_top_notice")]
    pub chat_top_notice: Vec<Option<ChatTopNoticeSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChatTopNoticeSubReq {
    /// 置顶的类型
    ///
    /// **注意**：
    ///
    /// - 选择 ==消息类型== 时必须填写`message_id`字段
    ///
    /// - 选择 ==群公告类型== 时，不填写 `message_id`
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `Message`: 消息类型
    ///
    /// `Annoucement`: 群公告类型
    #[serde(
        rename = "action_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_type: Option<String>,
    /// 消息ID，详情参见[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    ///
    /// **示例值**: "om_dc13264520392913993dd051dba21dcf"
    #[serde(
        rename = "message_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub message_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateChatTopNoticeRespInner {
    #[serde(flatten)]
    data: Option<UpdateChatTopNoticeResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateChatTopNoticeResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::chat::ChatServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateChatTopNoticeReq) -> Result<(UpdateChatTopNoticeResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateChatTopNoticeReq,
                ) -> Result<(UpdateChatTopNoticeResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ChatServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_chat_top_notice<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateChatTopNoticeReq, UpdateChatTopNoticeResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_chat_top_notice(
            &self,
            req: &UpdateChatTopNoticeReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateChatTopNoticeReq, UpdateChatTopNoticeResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::chat::update_chat_top_notice::{
            UpdateChatTopNoticeReq, UpdateChatTopNoticeResp, UpdateChatTopNoticeRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .chat()
            .mock()
            .mock_update_chat_top_notice(|_| {
                Ok((
                    UpdateChatTopNoticeResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .chat()
            .update_chat_top_notice(UpdateChatTopNoticeReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .chat()
            .update_chat_top_notice(UpdateChatTopNoticeReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "chat_top_notice": [
        {
            "action_type": "2",
            "message_id": "om_dc13264520392913993dd051dba21dcf"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateChatTopNoticeReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateChatTopNoticeRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
