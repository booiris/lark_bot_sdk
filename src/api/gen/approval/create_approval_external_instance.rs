//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::approval::ApprovalService;

impl<'c, IStore: Store, IClient: HttpClient> ApprovalService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-26T07:51:30+00:00**
    ///
    /// ## 同步三方审批实例
    ///
    /// 审批中心不负责审批的流转，审批的流转在三方系统，三方系统在审批流转后生成的审批实例、审批任务、审批抄送数据同步到审批中心。
    ///
    /// 用户可以在审批中心中浏览三方系统同步过来的实例、任务、抄送信息，并且可以跳转回三方系统进行更详细的查看和操作，其中实例信息在【已发起】列表，任务信息在【待审批】和【已审批】列表，抄送信息在【抄送我】列表。
    ///
    /// :::html
    ///
    /// <img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/9dff4434afbeb0ef69de7f36b9a6e995_z5iwmTzEgg.png" alt="" style="zoom:17%;" />
    ///
    /// <img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/ca6e0e984a7a6d64e1b16a0bac4bf868_tfqjCiaJQM.png" alt="" style="zoom:17%;" />
    ///
    /// <img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/529377e238df78d391bbd22e962ad195_T7eefLI1GA.png" alt="" style="zoom:17%;" />
    ///
    /// :::
    ///
    /// 对于审批任务，三方系统也可以配置审批任务的回调接口，这样审批人可以在审批中心中直接进行审批操作，审批中心会回调三方系统，三方系统收到回调后更新任务信息，并将新的任务信息同步回审批中心，形成闭环。
    ///
    /// :::html
    ///
    /// <img src="//sf3-cn.feishucdn.com/obj/open-platform-opendoc/721c35428bc1187db3318c572f9979ad_je75QpElcg.png" alt=""  style="zoom:25%;" />
    ///
    /// :::
    ///
    /// <br>
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_instance/create>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/approval-v4/external_instance/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fapproval-v4%2Fexternal_instance%2Fcreate>
    pub async fn create_approval_external_instance(
        &self,
        req: CreateApprovalExternalInstanceReq,
    ) -> Result<(CreateApprovalExternalInstanceResp, CommonResponse), Error> {
        self.create_approval_external_instance_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_approval_external_instance](#method.create_approval_external_instance) 函数
    pub async fn create_approval_external_instance_with_opt(
        &self,
        req: CreateApprovalExternalInstanceReq,
        method_option: MethodOption,
    ) -> Result<(CreateApprovalExternalInstanceResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_approval_external_instance(&req) {
                tracing::info!("[lark] Approval#CreateApprovalExternalInstance **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Approval#CreateApprovalExternalInstance call api");

        let req = ApiRequest {
            scope: "Approval",
            api: "CreateApprovalExternalInstance",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/approval/v4/external_instances",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateApprovalExternalInstanceRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateApprovalExternalInstanceReq {
    /// 审批定义 code， 创建审批定义返回的值，表示该实例属于哪个流程；该字段会影响到列表中该实例的标题，标题取自对应定义的 name 字段
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "81D31358-93AF-92D6-7425-01A5D67C4E71"
    #[api(kind = "body", name = "approval_code")]
    pub approval_code: String,
    /// 审批实例状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "PENDING"
    ///
    /// **可选值**:
    ///
    /// `Pending`: 审批中
    ///
    /// `Approved`: 审批流程结束，结果为同意
    ///
    /// `Rejected`: 审批流程结束，结果为拒绝
    ///
    /// `Canceled`: 审批发起人撤回
    ///
    /// `Deleted`: 审批被删除
    ///
    /// `Hidden`: 状态隐藏(不显示状态)
    ///
    /// `Terminated`: 审批终止
    #[api(kind = "body", name = "status")]
    pub status: String,
    /// 审批实例扩展 JSON。单据编号通过传business_key字段来实现。以下示例值未转义，使用时请注意转义。你可查看请求体示例中转义后的 extra 示例值
    ///
    /// **示例值**: "{\"xxx\":\"xxx\",\"business_key\":\"xxx\"}"
    #[api(kind = "body", name = "extra")]
    pub extra: Option<String>,
    /// 审批实例唯一标识，用户自定义，需确保证租户和应用下都唯一
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "24492654"
    #[api(kind = "body", name = "instance_id")]
    pub instance_id: String,
    /// 审批实例链接集合 ，用于【已发起】列表的跳转，跳转回三方系统； pc_link 和 mobile_link 必须填一个，填写的是哪一端的链接，即会跳转到该链接，不受平台影响
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "links")]
    pub links: ExternalInstanceLinkSubReq,
    /// 审批展示名称，如果填写了该字段，则审批列表中的审批名称使用该字段，如果不填该字段，则审批名称使用审批定义的名称
    ///
    /// **示例值**: "@i18n@1"
    #[api(kind = "body", name = "title")]
    pub title: Option<String>,
    /// 用户提交审批时填写的表单数据，用于所有审批列表中展示。可传多个值，但审批中心pc展示前2个,移动端展示前3个,长度不超过2048字符
    ///
    /// **示例值**: "[{ "name": "@i18n@2", "value": "@i18n@3" }]"
    #[api(kind = "body", name = "form")]
    pub form: Vec<Option<ExternalInstanceFormSubReq>>,
    /// 审批发起人 user_id，发起人可在【已发起】列表中看到所有已发起的审批; 在【待审批】，【已审批】【抄送我】列表中，该字段展示审批是谁发起的。
    ///
    /// **示例值**: "a987sf9s"
    #[api(kind = "body", name = "user_id")]
    pub user_id: Option<String>,
    /// 审批发起人 用户名，如果发起人不是真实的用户（例如是某个部门），没有 user_id，则可以使用该字段传名称
    ///
    /// **示例值**: "@i18n@9"
    #[api(kind = "body", name = "user_name")]
    pub user_name: Option<String>,
    /// 审批发起人 open id
    ///
    /// **示例值**: "ou_be73cbc0ee35eb6ca54e9e7cc14998c1"
    #[api(kind = "body", name = "open_id")]
    pub open_id: Option<String>,
    /// 发起人部门，用于列表中展示发起人所属部门。不传则不展示。如果用户没加入任何部门，传 ""，将展示租户名称传 department_name 展示部门名称
    ///
    /// **示例值**: "od-8ec33278bc2"
    #[api(kind = "body", name = "department_id")]
    pub department_id: Option<String>,
    /// 审批发起人 部门，如果发起人不是真实的用户（例如是某个部门），没有 department_id，则可以使用该字段传名称
    ///
    /// **示例值**: "@i18n@10"
    #[api(kind = "body", name = "department_name")]
    pub department_name: Option<String>,
    /// 审批发起时间，Unix毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[api(kind = "body", name = "start_time")]
    pub start_time: String,
    /// 审批实例结束时间：未结束的审批为 0，Unix毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[api(kind = "body", name = "end_time")]
    pub end_time: String,
    /// 审批实例最近更新时间；用于推送数据版本控制如果 update_mode 值为 UPDATE，则只有传过来的 update_time 有变化时（变大），才会更新审批中心中的审批实例信息。使用该字段主要用来避免并发时老的数据更新了新的数据
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[api(kind = "body", name = "update_time")]
    pub update_time: String,
    /// 列表页打开审批实例的方式
    ///
    /// **示例值**: "BROWSER"
    ///
    /// **可选值**:
    ///
    /// `Browser`: 跳转系统默认浏览器打开
    ///
    /// `SIdebar`: 飞书中侧边抽屉打开
    ///
    /// `Normal`: 飞书内嵌页面打开
    ///
    /// `Trusteeship`: 以托管打开
    #[api(kind = "body", name = "display_method")]
    pub display_method: Option<String>,
    /// 更新方式， 当 update_mode=REPLACE时，每次都以当前推送的数据为最终数据，会删掉审批中心中多余的任务、抄送数据（不在这次推送的数据中）; 当 update_mode=UPDATE时，则不会删除审批中心的数据，而只是进行新增和更新实例、任务数据
    ///
    /// **示例值**: "UPDATE"
    ///
    /// **可选值**:
    ///
    /// `Replace`: 全量替换，默认值
    ///
    /// `Update`: 增量更新
    #[api(kind = "body", name = "update_mode")]
    pub update_mode: Option<String>,
    /// 任务列表
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `300` 字符
    #[api(kind = "body", name = "task_list")]
    pub task_list: Vec<Option<ExternalInstanceTaskNodeSubReq>>,
    /// 抄送列表
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `200` 字符
    #[api(kind = "body", name = "cc_list")]
    pub cc_list: Vec<Option<CcNodeSubReq>>,
    /// 国际化文案
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "i18n_resources")]
    pub i18n_resources: Vec<Option<I18nResourceSubReq>>,
    /// 单据托管认证token，托管回调会附带此token，帮助业务方认证
    ///
    /// **示例值**: "788981c886b1c28ac29d1e68efd60683d6d90dfce80938ee9453e2a5f3e9e306"
    #[api(kind = "body", name = "trusteeship_url_token")]
    pub trusteeship_url_token: Option<String>,
    /// 用户的类型，会影响请求参数用户标识域的选择，包括加签操作回传的目标用户， 目前仅支持 "user_id"
    ///
    /// **示例值**: "user_id"
    #[api(kind = "body", name = "trusteeship_user_id_type")]
    pub trusteeship_user_id_type: Option<String>,
    /// 单据托管回调接入方的接口的URL地址
    #[api(kind = "body", name = "trusteeship_urls")]
    pub trusteeship_urls: Option<TrusteeshipUrlsSubReq>,
    /// 托管预缓存策略
    #[api(kind = "body", name = "trusteeship_cache_config")]
    pub trusteeship_cache_config: Option<TrusteeshipInstanceCacheConfigSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInstanceLinkSubReq {
    /// pc 端的跳转链接，当用户使用飞书 pc 端时，使用该字段进行跳转，托管的链接保持不变。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234"
    #[serde(
        rename = "pc_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pc_link: String,
    /// 移动端 跳转链接，当用户使用飞书 移动端时，使用该字段进行跳转，托管的链接保持不变
    ///
    /// **示例值**: "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
    #[serde(
        rename = "mobile_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile_link: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TrusteeshipUrlsSubReq {
    /// 获取表单schema相关数据的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/form_detail"
    #[serde(
        rename = "form_detail_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_detail_url: Option<String>,
    /// 表示获取审批操作区数据的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/action_definition"
    #[serde(
        rename = "action_definition_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_definition_url: Option<String>,
    /// 获取审批记录相关数据的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/approval_node"
    #[serde(
        rename = "approval_node_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_node_url: Option<String>,
    /// 进行审批操作时回调的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/action_callback"
    #[serde(
        rename = "action_callback_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_callback_url: Option<String>,
    /// 获取托管动态数据url 地址，使用该接口时必须要保证历史托管单据的数据中都同步了该接口地址，如果历史单据中没有该接口需要重新同步历史托管单据的数据来更新该URL。该接口用于飞书审批前端和业务线进行交互使用,只有使用审批前端的特定组件(由飞书审批前端提供的组件，并且需要和业务线进行接口交互的组件)才会需要
    ///
    /// **示例值**: "https://#{your_domain}/api/pull_business_data"
    #[serde(
        rename = "pull_business_data_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pull_business_data_url: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TrusteeshipInstanceCacheConfigSubReq {
    /// 托管预缓存策略
    ///
    /// **示例值**: "DISABLE"
    ///
    /// **可选值**:
    ///
    /// `Disable`: 不启用，默认
    ///
    /// `Immutable`: 表单不会随流程进行改变
    ///
    /// `ByNode`: 跟随流程节点变更更新缓存
    ///
    /// `ByUser`: 对于每个待办任务存储一份
    #[serde(
        rename = "form_policy",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_policy: Option<String>,
    /// 表单是否随国际化改变
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "form_vary_with_locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_vary_with_locale: Option<bool>,
    /// 当前使用的表单版本号，保证表单改变后，版本号增加，实际值为int64整数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "form_version",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_version: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInstanceFormSubReq {
    /// 表单字段名称
    ///
    /// **示例值**: "@i18n@2"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Option<String>,
    /// 表单值
    ///
    /// **示例值**: "@i18n@3"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInstanceTaskNodeSubReq {
    /// 审批实例内的唯一标识，用于更新审批任务时定位数据
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "112534"
    #[serde(
        rename = "task_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_id: String,
    /// 审批人 user_id，和 open_id 二者至少填一个。该任务会出现在审批人的【待审批】或【已审批】列表中
    ///
    /// **示例值**: "a987sf9s"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: Option<String>,
    /// 审批人 open_id，和 user_id 二者至少填一个
    ///
    /// **示例值**: "ou_be73cbc0ee35eb6ca54e9e7cc14998c1"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: Option<String>,
    /// 审批任务名称
    ///
    /// **示例值**: "i18n1"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: Option<String>,
    /// 【待审批】或【已审批】中使用的跳转链接，用于跳转回三方系统pc_link 和 mobile_link 必须填一个，填写的是哪一端的链接，即会跳转到该链接，不受平台影响
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "links",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub links: ExternalInstanceLinkSubReq,
    /// 任务状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "PENDING"
    ///
    /// **可选值**:
    ///
    /// `Pending`: 待审批
    ///
    /// `Approved`: 任务同意
    ///
    /// `Reject`: 任务拒绝
    ///
    /// `Transefrred`: 任务转交
    ///
    /// `Done`: 任务通过但审批人未操作；审批人看不到这个任务, 若想要看到, 可以通过抄送该人.
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 扩展 json，任务结束原因需传complete_reason字段。枚举值与对应说明：
    ///
    /// - approved：同意
    ///
    /// - rejected：拒绝
    ///
    /// - node_auto_reject：（因逻辑判断产生的）自动拒绝
    ///
    /// - specific_rollback：退回（包括退回到发起人、退回到中间任一审批人）
    ///
    /// - add：并加签（添加新审批人，和我一起审批）
    ///
    /// - add_pre：前加签（添加新审批人，在我之前审批）
    ///
    /// - add_post：后加签（添加新审批人，在我之后审批）
    ///
    /// - delete_assignee：减签
    ///
    /// - forward: 手动转交
    ///
    /// - forward_resign：离职自动转交
    ///
    /// - recall：撤销（撤回单据，单据失效）
    ///
    /// - delete ：删除审批单
    ///
    /// - admin_forward：管理员在后台操作转交
    ///
    /// - system_forward：系统自动转交
    ///
    /// - auto_skip：自动通过
    ///
    /// - manual_skip：手动跳过
    ///
    /// - submit_again：重新提交任务
    ///
    /// - restart：重新启动流程
    ///
    /// - others：其他（作为兜底）
    ///
    /// **示例值**: "{\"xxx\":\"xxx\",\"complete_reason\":\"approved\"}"
    #[serde(
        rename = "extra",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub extra: Option<String>,
    /// 任务创建时间，Unix 毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 任务完成时间：未结束的审批为 0，Unix 毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// task最近更新时间，用于推送数据版本控制； 更新策略同 instance 中的 update_time
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: Option<String>,
    /// 操作上下文，当用户操作时，回调请求中带上该参数，用于传递该任务的上下文数据
    ///
    /// **示例值**: "123456"
    #[serde(
        rename = "action_context",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_context: Option<String>,
    /// 任务级别操作配置,快捷审批目前支持移动端操作
    #[serde(
        rename = "action_configs",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_configs: Vec<Option<ActionConfigSubReq>>,
    /// 列表页打开审批任务的方式
    ///
    /// **示例值**: "BROWSER"
    ///
    /// **可选值**:
    ///
    /// `Browser`: 跳转系统默认浏览器打开
    ///
    /// `Sidbar`: 飞书中侧边抽屉打开
    ///
    /// `Normal`: 飞书内嵌页面打开
    ///
    /// `Trusteeship`: 以托管模式打开
    #[serde(
        rename = "display_method",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_method: Option<String>,
    /// 三方任务支持不纳入效率统计。
    ///
    /// false：纳入效率统计。
    ///
    /// true：不纳入效率统计
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "exclude_statistics",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub exclude_statistics: Option<bool>,
    /// 节点id：必须同时满足
    ///
    /// - 一个流程内，每个节点id唯一。如一个流程下「直属上级」、「隔级上级」等每个节点的Node_id均不一样
    ///
    /// - 同一个流程定义内，不同审批实例中的相同节点，Node_id要保持不变。例如张三和李四分别发起了请假申请，这2个审批实例中的「直属上级」节点的node_id应该保持一致
    ///
    /// **示例值**: "node"
    #[serde(
        rename = "node_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub node_id: Option<String>,
    /// 节点名称，如「财务审批」「法务审批」，支持中英日三种语言。示例：i18n@name。需要在i18n_resources中传该名称对应的国际化文案
    ///
    /// **示例值**: "i18n@name"
    #[serde(
        rename = "node_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub node_name: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CcNodeSubReq {
    /// 审批实例内唯一标识
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "123456"
    #[serde(
        rename = "cc_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cc_id: String,
    /// 抄送人 employee id
    ///
    /// **示例值**: "12345"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: Option<String>,
    /// 抄送人 open id，和user id 二者至少填一个
    ///
    /// **示例值**: "ou_be73cbc0ee35eb6ca54e9e7cc14998c1"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: Option<String>,
    /// 跳转链接，用于【抄送我的】列表中的跳转pc_link 和 mobile_link 必须填一个，填写的是哪一端的链接，即会跳转到该链接，不受平台影响
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "links",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub links: ExternalInstanceLinkSubReq,
    /// 阅读状态，空值表示不支持已读未读：
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "READ"
    ///
    /// **可选值**:
    ///
    /// `Read`: 已读
    ///
    /// `Unread`: 未读
    #[serde(
        rename = "read_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub read_status: String,
    /// 扩展 json
    ///
    /// **示例值**: "{\"xxx\":\"xxx\"}"
    #[serde(
        rename = "extra",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub extra: Option<String>,
    /// 抄送任务名称
    ///
    /// **示例值**: "xxx"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: Option<String>,
    /// 抄送发起时间，Unix 毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 抄送最近更新时间，用于推送数据版本控制更新策略同 instance 的update_time
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 列表页打开审批任务的方式
    ///
    /// **示例值**: "BROWSER"
    ///
    /// **可选值**:
    ///
    /// `Browser`: 跳转系统默认浏览器打开
    ///
    /// `Sidebar`: 飞书中侧边抽屉打开
    ///
    /// `Normal`: 飞书内嵌页面打开
    ///
    /// `Trusteeship`: 以托管模式打开
    #[serde(
        rename = "display_method",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_method: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nResourceSubReq {
    /// 语言可选值有： zh-CN：中文 en-US：英文 ja-JP：日文
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    ///
    /// **可选值**:
    ///
    /// `Zhcn`: 中文
    ///
    /// `Enus`: 英文
    ///
    /// `Jajp`: 日文
    #[serde(
        rename = "locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub locale: String,
    /// 文案 key, value, i18n key 以 @i18n@ 开头； 该字段主要用于做国际化，允许用户同时传多个语言的文案，审批中心会根据用户当前的语音环境使用对应的文案，如果没有传用户当前的语音环境文案，则会使用默认的语言文案。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{ "@i18n@1": "权限申请", "@i18n@2": "OA审批", "@i18n@3": "Permission" }"
    #[serde(
        rename = "texts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub texts: Vec<Option<I18nResourceTextSubReq>>,
    /// 是否默认语言，默认语言需要包含所有key，非默认语言如果key不存在会使用默认语言代替
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_default",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_default: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ActionConfigSubReq {
    /// 操作类型，每个任务都可以配置2个操作，会展示审批列表中，当用户操作时，回调请求会带上该字段，表示用户进行了同意操作还是拒绝操作
    ///
    /// **可选值有**：
    ///
    /// <md-enum>
    ///
    /// <md-enum-item key="APPROVE" >同意</md-enum-item>
    ///
    /// <md-enum-item key="REJECT" >拒绝</md-enum-item>
    ///
    /// <md-enum-item key="{KEY}" >任意字符串，如果使用任意字符串，则需要提供 action_name</md-enum-item>
    ///
    /// </md-enum>
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "APPROVE"
    #[serde(
        rename = "action_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_type: String,
    /// 操作名称，i18n key 用于前台展示，如果 action_type 不是 APPROVAL和REJECT，则必须提供该字段，用于展示特定的操作名称
    ///
    /// **示例值**: "@i18n@5"
    #[serde(
        rename = "action_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_name: Option<String>,
    /// 是否需要意见, 如果为true,则用户操作时，会跳转到 意见填写页面
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_need_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_need_reason: Option<bool>,
    /// 审批意见是否必填
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_reason_required",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_reason_required: Option<bool>,
    /// 意见是否支持上传附件
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_need_attachment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_need_attachment: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nResourceTextSubReq {
    /// 文案key
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "@i18n@1"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 文案
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "people"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateApprovalExternalInstanceRespInner {
    #[serde(flatten)]
    data: Option<CreateApprovalExternalInstanceResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateApprovalExternalInstanceResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 同步的实例数据
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: ExternalInstanceSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInstanceSubResp {
    /// 审批定义 code， 创建审批定义返回的值，表示该实例属于哪个流程；该字段会影响到列表中该实例的标题，标题取自对应定义的 name 字段
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "81D31358-93AF-92D6-7425-01A5D67C4E71"
    #[serde(
        rename = "approval_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_code: String,
    /// 审批实例状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "PENDING"
    ///
    /// **可选值**:
    ///
    /// `Pending`: 审批中
    ///
    /// `Approved`: 审批流程结束，结果为同意
    ///
    /// `Rejected`: 审批流程结束，结果为拒绝
    ///
    /// `Canceled`: 审批发起人撤回
    ///
    /// `Deleted`: 审批被删除
    ///
    /// `Hidden`: 状态隐藏(不显示状态)
    ///
    /// `Terminated`: 审批终止
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 审批实例扩展 JSON。单据编号通过传business_key字段来实现
    ///
    /// **示例值**: "{\"xxx\":\"xxx\",\"business_key\":\"xxx\"}"
    #[serde(
        rename = "extra",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub extra: String,
    /// 审批实例唯一标识，用户自定义，需确保证租户下唯一
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "24492654"
    #[serde(
        rename = "instance_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub instance_id: String,
    /// 审批实例链接集合 ，用于【已发起】列表的跳转，跳转回三方系统； pc_link 和 mobile_link 必须填一个，填写的是哪一端的链接，即会跳转到该链接，不受平台影响
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "links",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub links: ExternalInstanceLinkSubResp,
    /// 审批展示名称，如果填写了该字段，则审批列表中的审批名称使用该字段，如果不填该字段，则审批名称使用审批定义的名称
    ///
    /// **示例值**: "@i18n@1"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 用户提交审批时填写的表单数据，用于所有审批列表中展示。可传多个值，但审批中心pc展示前2个,移动端展示前3个,长度不超过2048字符
    ///
    /// **示例值**: "[{ "name": "@i18n@2", "value": "@i18n@3" }]"
    #[serde(
        rename = "form",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form: Vec<ExternalInstanceFormSubResp>,
    /// 审批发起人 user_id，发起人可在【已发起】列表中看到所有已发起的审批; 在【待审批】，【已审批】【抄送我】列表中，该字段展示审批是谁发起的。审批发起人 open id。
    ///
    /// **示例值**: "a987sf9s"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 审批发起人 用户名，如果发起人不是真实的用户（例如是某个部门），没有 user_id，则可以使用该字段传名称
    ///
    /// **示例值**: "@i18n@9"
    #[serde(
        rename = "user_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_name: String,
    /// 审批发起人 open id。
    ///
    /// **示例值**: "ou_be73cbc0ee35eb6ca54e9e7cc14998c1"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
    /// 发起人部门，用于列表中展示发起人所属部门。不传则不展示。如果用户没加入任何部门，传 ""，将展示租户名称传 department_name 展示部门名称
    ///
    /// **示例值**: "od-8ec33278bc2"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 审批发起人 部门，如果发起人不是真实的用户（例如是某个部门），没有 department_id，则可以使用该字段传名称
    ///
    /// **示例值**: "@i18n@10"
    #[serde(
        rename = "department_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_name: String,
    /// 审批发起时间，Unix毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 审批实例结束时间：未结束的审批为 0，Unix毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 审批实例最近更新时间；用于推送数据版本控制如果 update_mode 值为 UPDATE，则只有传过来的 update_time 有变化时（变大），才会更新审批中心中的审批实例信息。使用该字段主要用来避免并发时老的数据更新了新的数据
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 列表页打开审批实例的方式
    ///
    /// **示例值**: "BROWSER"
    ///
    /// **可选值**:
    ///
    /// `Browser`: 跳转系统默认浏览器打开
    ///
    /// `SIdebar`: 飞书中侧边抽屉打开
    ///
    /// `Normal`: 飞书内嵌页面打开
    ///
    /// `Trusteeship`: 以托管打开
    #[serde(
        rename = "display_method",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_method: String,
    /// 更新方式， 当 update_mode=REPLACE时，每次都以当前推送的数据为最终数据，会删掉审批中心中多余的任务、抄送数据（不在这次推送的数据中）; 当 update_mode=UPDATE时，则不会删除审批中心的数据，而只是进行新增和更新实例、任务数据
    ///
    /// **示例值**: "UPDATE"
    ///
    /// **可选值**:
    ///
    /// `Replace`: 全量替换，默认值
    ///
    /// `Update`: 增量更新
    #[serde(
        rename = "update_mode",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_mode: String,
    /// 任务列表
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `300` 字符
    #[serde(
        rename = "task_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_list: Vec<ExternalInstanceTaskNodeSubResp>,
    /// 抄送列表
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `200` 字符
    #[serde(
        rename = "cc_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cc_list: Vec<CcNodeSubResp>,
    /// 国际化文案
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "i18n_resources",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_resources: Vec<I18nResourceSubResp>,
    /// 单据托管认证token，托管回调会附带此token，帮助业务方认证
    ///
    /// **示例值**: "788981c886b1c28ac29d1e68efd60683d6d90dfce80938ee9453e2a5f3e9e306"
    #[serde(
        rename = "trusteeship_url_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub trusteeship_url_token: String,
    /// 用户的类型，会影响请求参数用户标识域的选择，包括加签操作回传的目标用户， 目前仅支持 "user_id"
    ///
    /// **示例值**: "user_id"
    #[serde(
        rename = "trusteeship_user_id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub trusteeship_user_id_type: String,
    /// 单据托管回调接入方的接口的URL地址
    #[serde(
        rename = "trusteeship_urls",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub trusteeship_urls: TrusteeshipUrlsSubResp,
    /// 托管预缓存策略
    #[serde(
        rename = "trusteeship_cache_config",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub trusteeship_cache_config: TrusteeshipInstanceCacheConfigSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInstanceLinkSubResp {
    /// pc 端的跳转链接，当用户使用飞书 pc 端时，使用该字段进行跳转
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234"
    #[serde(
        rename = "pc_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pc_link: String,
    /// 移动端 跳转链接，当用户使用飞书 移动端时，使用该字段进行跳转
    ///
    /// **示例值**: "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
    #[serde(
        rename = "mobile_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile_link: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TrusteeshipUrlsSubResp {
    /// 获取表单schema相关数据的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/form_detail"
    #[serde(
        rename = "form_detail_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_detail_url: String,
    /// 表示获取审批操作区数据的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/action_definition"
    #[serde(
        rename = "action_definition_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_definition_url: String,
    /// 获取审批记录相关数据的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/approval_node"
    #[serde(
        rename = "approval_node_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_node_url: String,
    /// 进行审批操作时回调的url地址
    ///
    /// **示例值**: "https://#{your_domain}/api/action_callback"
    #[serde(
        rename = "action_callback_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_callback_url: String,
    /// 获取托管动态数据url 地址，使用该接口时必须要保证历史托管单据的数据中都同步了该接口地址，如果历史单据中没有该接口需要重新同步历史托管单据的数据来更新该URL。该接口用于飞书审批前端和业务线进行交互使用,只有使用审批前端的特定组件(由飞书审批前端提供的组件，并且需要和业务线进行接口交互的组件)才会需要
    ///
    /// **示例值**: "https://#{your_domain}/api/pull_business_data"
    #[serde(
        rename = "pull_business_data_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pull_business_data_url: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TrusteeshipInstanceCacheConfigSubResp {
    /// 托管预缓存策略
    ///
    /// **示例值**: "DISABLE"
    ///
    /// **可选值**:
    ///
    /// `Disable`: 不启用，默认
    ///
    /// `Immutable`: 表单不会随流程进行改变
    ///
    /// `ByNode`: 跟随流程节点变更更新缓存
    ///
    /// `ByUser`: 对于每个待办任务存储一份
    #[serde(
        rename = "form_policy",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_policy: String,
    /// 表单是否随国际化改变
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "form_vary_with_locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_vary_with_locale: bool,
    /// 当前使用的表单版本号，保证表单改变后，版本号增加，实际值为int64整数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "form_version",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub form_version: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInstanceFormSubResp {
    /// 表单字段名称
    ///
    /// **示例值**: "@i18n@2"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 表单值
    ///
    /// **示例值**: "@i18n@3"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalInstanceTaskNodeSubResp {
    /// 审批实例内的唯一标识，用于更新审批任务时定位数据
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "112534"
    #[serde(
        rename = "task_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_id: String,
    /// 审批人 user_id。该任务会出现在审批人的【待审批】或【已审批】列表中
    ///
    /// **示例值**: "a987sf9s"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 审批人 open_id
    ///
    /// **示例值**: "ou_be73cbc0ee35eb6ca54e9e7cc14998c1"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
    /// 审批任务名称
    ///
    /// **示例值**: "i18n1"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 【待审批】或【已审批】中使用的跳转链接，用于跳转回三方系统pc_link 和 mobile_link 必须填一个，填写的是哪一端的链接，即会跳转到该链接，不受平台影响
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "links",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub links: ExternalInstanceLinkSubResp,
    /// 任务状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "PENDING"
    ///
    /// **可选值**:
    ///
    /// `Pending`: 待审批
    ///
    /// `Approved`: 任务同意
    ///
    /// `Reject`: 任务拒绝
    ///
    /// `Transefrred`: 任务转交
    ///
    /// `Done`: 任务通过但审批人未操作；审批人看不到这个任务, 若想要看到, 可以通过抄送该人.
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 扩展 json，任务结束原因需传complete_reason字段。枚举值与对应说明：
    ///
    /// - approved：同意
    ///
    /// - rejected：拒绝
    ///
    /// - node_auto_reject：（因逻辑判断产生的）自动拒绝
    ///
    /// - specific_rollback：退回（包括退回到发起人、退回到中间任一审批人）
    ///
    /// - add：并加签（添加新审批人，和我一起审批）
    ///
    /// - add_pre：前加签（添加新审批人，在我之前审批）
    ///
    /// - add_post：后加签（添加新审批人，在我之后审批）
    ///
    /// - delete_assignee：减签
    ///
    /// - forward_resign：转交（转给其他人审批）
    ///
    /// - recall：撤销（撤回单据，单据失效）
    ///
    /// - delete ：删除审批单
    ///
    /// - admin_forward：管理员在后台操作转交
    ///
    /// - system_forward：系统自动转交
    ///
    /// - auto_skip：自动通过
    ///
    /// - manual_skip：手动跳过
    ///
    /// - submit_again：重新提交任务
    ///
    /// - restart：重新启动流程
    ///
    /// - others：其他（作为兜底）
    ///
    /// **示例值**: "{\"xxx\":\"xxx\",\"complete_reason\":\"approved\"}"
    #[serde(
        rename = "extra",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub extra: String,
    /// 任务创建时间，Unix 毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 任务完成时间：未结束的审批为 0，Unix 毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// task最近更新时间，用于推送数据版本控制； 更新策略同 instance 中的 update_time
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 操作上下文，当用户操作时，回调请求中带上该参数，用于传递该任务的上下文数据
    ///
    /// **示例值**: "123456"
    #[serde(
        rename = "action_context",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_context: String,
    /// 任务级别操作配置,快捷审批目前支持移动端操作
    #[serde(
        rename = "action_configs",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_configs: Vec<ActionConfigSubResp>,
    /// 列表页打开审批任务的方式
    ///
    /// **示例值**: "BROWSER"
    ///
    /// **可选值**:
    ///
    /// `Browser`: 跳转系统默认浏览器打开
    ///
    /// `Sidbar`: 飞书中侧边抽屉打开
    ///
    /// `Normal`: 飞书内嵌页面打开
    ///
    /// `Trusteeship`: 以托管模式打开
    #[serde(
        rename = "display_method",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_method: String,
    /// 三方任务支持不纳入效率统计。
    ///
    /// false：纳入效率统计。
    ///
    /// true：不纳入效率统计
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "exclude_statistics",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub exclude_statistics: bool,
    /// 节点id：必须同时满足
    ///
    /// - 一个流程内，每个节点id唯一。如一个流程下「直属上级」、「隔级上级」等每个节点的Node_id均不一样
    ///
    /// - 同一个流程定义内，不同审批实例中的相同节点，Node_id要保持不变。例如张三和李四分别发起了请假申请，这2个审批实例中的「直属上级」节点的node_id应该保持一致
    ///
    /// **示例值**: "node"
    #[serde(
        rename = "node_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub node_id: String,
    /// 节点名称，如「财务审批」「法务审批」，支持中英日三种语言。示例：i18n@name。需要在i18n_resources中传该名称对应的国际化文案
    ///
    /// **示例值**: "i18n@name"
    #[serde(
        rename = "node_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub node_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CcNodeSubResp {
    /// 审批实例内唯一标识
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "123456"
    #[serde(
        rename = "cc_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cc_id: String,
    /// 抄送人 employee id
    ///
    /// **示例值**: "12345"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 抄送人 open id
    ///
    /// **示例值**: "ou_be73cbc0ee35eb6ca54e9e7cc14998c1"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
    /// 跳转链接，用于【抄送我的】列表中的跳转pc_link 和 mobile_link 必须填一个，填写的是哪一端的链接，即会跳转到该链接，不受平台影响
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "links",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub links: ExternalInstanceLinkSubResp,
    /// 阅读状态，空值表示不支持已读未读：
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "READ"
    ///
    /// **可选值**:
    ///
    /// `Read`: 已读
    ///
    /// `Unread`: 未读
    #[serde(
        rename = "read_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub read_status: String,
    /// 扩展 json
    ///
    /// **示例值**: "{\"xxx\":\"xxx\"}"
    #[serde(
        rename = "extra",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub extra: String,
    /// 抄送任务名称
    ///
    /// **示例值**: "xxx"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 抄送发起时间，Unix 毫秒时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 抄送最近更新时间，用于推送数据版本控制更新策略同 instance 的update_time
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1556468012678"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 列表页打开审批任务的方式
    ///
    /// **示例值**: "BROWSER"
    ///
    /// **可选值**:
    ///
    /// `Browser`: 跳转系统默认浏览器打开
    ///
    /// `Sidebar`: 飞书中侧边抽屉打开
    ///
    /// `Normal`: 飞书内嵌页面打开
    ///
    /// `Trusteeship`: 以托管模式打开
    #[serde(
        rename = "display_method",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_method: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nResourceSubResp {
    /// 语言可选值有： zh-CN：中文 en-US：英文 ja-JP：日文
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    ///
    /// **可选值**:
    ///
    /// `Zhcn`: 中文
    ///
    /// `Enus`: 英文
    ///
    /// `Jajp`: 日文
    #[serde(
        rename = "locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub locale: String,
    /// 文案 key, value, i18n key 以 @i18n@ 开头； 该字段主要用于做国际化，允许用户同时传多个语言的文案，审批中心会根据用户当前的语音环境使用对应的文案，如果没有传用户当前的语音环境文案，则会使用默认的语言文案。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{ "@i18n@1": "权限申请", "@i18n@2": "OA审批", "@i18n@3": "Permission" }"
    #[serde(
        rename = "texts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub texts: Vec<I18nResourceTextSubResp>,
    /// 是否默认语言，默认语言需要包含所有key，非默认语言如果key不存在会使用默认语言代替
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_default",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_default: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ActionConfigSubResp {
    /// 操作类型，每个任务都可以配置2个操作，会展示审批列表中，当用户操作时，回调请求会带上该字段，表示用户进行了同意操作还是拒绝操作
    ///
    /// **可选值有**：
    ///
    /// <md-enum>
    ///
    /// <md-enum-item key="APPROVE" >同意</md-enum-item>
    ///
    /// <md-enum-item key="REJECT" >拒绝</md-enum-item>
    ///
    /// <md-enum-item key="{KEY}" >任意字符串，如果使用任意字符串，则需要提供 action_name</md-enum-item>
    ///
    /// </md-enum>
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "APPROVE"
    #[serde(
        rename = "action_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_type: String,
    /// 操作名称，i18n key 用于前台展示，如果 action_type 不是 APPROVAL和REJECT，则必须提供该字段，用于展示特定的操作名称
    ///
    /// **示例值**: "@i18n@5"
    #[serde(
        rename = "action_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub action_name: String,
    /// 是否需要意见, 如果为true,则用户操作时，会跳转到 意见填写页面
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_need_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_need_reason: bool,
    /// 审批意见是否必填
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_reason_required",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_reason_required: bool,
    /// 意见是否支持上传附件
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_need_attachment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_need_attachment: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nResourceTextSubResp {
    /// 文案key
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "@i18n@1"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 文案
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "people"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::approval::ApprovalServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateApprovalExternalInstanceReq,
        ) -> Result<(CreateApprovalExternalInstanceResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateApprovalExternalInstanceReq,
                )
                    -> Result<(CreateApprovalExternalInstanceResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ApprovalServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_approval_external_instance<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateApprovalExternalInstanceReq,
            CreateApprovalExternalInstanceResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_approval_external_instance(
            &self,
            req: &CreateApprovalExternalInstanceReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateApprovalExternalInstanceReq,
                CreateApprovalExternalInstanceResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::approval::create_approval_external_instance::{
            CreateApprovalExternalInstanceReq, CreateApprovalExternalInstanceResp,
            CreateApprovalExternalInstanceRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .approval()
            .mock()
            .mock_create_approval_external_instance(|_| {
                Ok((
                    CreateApprovalExternalInstanceResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .approval()
            .create_approval_external_instance(CreateApprovalExternalInstanceReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .approval()
            .create_approval_external_instance(CreateApprovalExternalInstanceReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "approval_code": "81D31358-93AF-92D6-7425-01A5D67C4E71",
    "status": "PENDING",
    "extra": "{\"xxx\":\"xxx\",\"business_key\":\"xxx\"}",
    "instance_id": "24492654",
    "links": {
        "pc_link": "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234",
        "mobile_link": "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
    },
    "title": "@i18n@1",
    "form": [
        {
            "name": "@i18n@2",
            "value": "@i18n@3"
        }
    ],
    "user_id": "a987sf9s",
    "user_name": "@i18n@9",
    "open_id": "ou_be73cbc0ee35eb6ca54e9e7cc14998c1",
    "department_id": "od-8ec33278bc2",
    "department_name": "@i18n@10",
    "start_time": "1556468012678",
    "end_time": "1556468012678",
    "update_time": "1556468012678",
    "display_method": "BROWSER",
    "update_mode": "UPDATE",
    "task_list": [
        {
            "task_id": "112534",
            "user_id": "a987sf9s",
            "open_id": "ou_be73cbc0ee35eb6ca54e9e7cc14998c1",
            "title": "i18n1",
            "links": {
                "pc_link": "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234",
                "mobile_link": "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
            },
            "status": "PENDING",
            "extra": "{\"xxx\":\"xxx\",\"complete_reason\":\"approved\"}",
            "create_time": "1556468012678",
            "end_time": "1556468012678",
            "update_time": "1556468012678",
            "action_context": "123456",
            "action_configs": [
                {
                    "action_type": "APPROVE",
                    "action_name": "@i18n@5",
                    "is_need_reason": false,
                    "is_reason_required": false,
                    "is_need_attachment": false
                }
            ],
            "display_method": "BROWSER",
            "exclude_statistics": false,
            "node_id": "node",
            "node_name": "i18n@name"
        }
    ],
    "cc_list": [
        {
            "cc_id": "123456",
            "user_id": "12345",
            "open_id": "ou_be73cbc0ee35eb6ca54e9e7cc14998c1",
            "links": {
                "pc_link": "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234",
                "mobile_link": "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
            },
            "read_status": "READ",
            "extra": "{\"xxx\":\"xxx\"}",
            "title": "xxx",
            "create_time": "1556468012678",
            "update_time": "1556468012678",
            "display_method": "BROWSER"
        }
    ],
    "i18n_resources": [
        {
            "locale": "zh-CN",
            "texts": [
                {
                    "key": "@i18n@1",
                    "value": "people"
                }
            ],
            "is_default": true
        }
    ],
    "trusteeship_url_token": "788981c886b1c28ac29d1e68efd60683d6d90dfce80938ee9453e2a5f3e9e306",
    "trusteeship_user_id_type": "user_id",
    "trusteeship_urls": {
        "form_detail_url": "https://#{your_domain}/api/form_detail",
        "action_definition_url": "https://#{your_domain}/api/action_definition",
        "approval_node_url": "https://#{your_domain}/api/approval_node",
        "action_callback_url": "https://#{your_domain}/api/action_callback",
        "pull_business_data_url": "https://#{your_domain}/api/pull_business_data"
    },
    "trusteeship_cache_config": {
        "form_policy": "DISABLE",
        "form_vary_with_locale": false,
        "form_version": "1"
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateApprovalExternalInstanceReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "data": {
            "approval_code": "81D31358-93AF-92D6-7425-01A5D67C4E71",
            "status": "PENDING",
            "extra": "{\"xxx\":\"xxx\",\"business_key\":\"xxx\"}",
            "instance_id": "24492654",
            "links": {
                "pc_link": "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234",
                "mobile_link": "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
            },
            "title": "@i18n@1",
            "form": [
                {
                    "name": "@i18n@2",
                    "value": "@i18n@3"
                }
            ],
            "user_id": "a987sf9s",
            "user_name": "@i18n@9",
            "open_id": "ou_be73cbc0ee35eb6ca54e9e7cc14998c1",
            "department_id": "od-8ec33278bc2",
            "department_name": "@i18n@10",
            "start_time": "1556468012678",
            "end_time": "1556468012678",
            "update_time": "1556468012678",
            "display_method": "BROWSER",
            "update_mode": "UPDATE",
            "task_list": [
                {
                    "task_id": "112534",
                    "user_id": "a987sf9s",
                    "open_id": "ou_be73cbc0ee35eb6ca54e9e7cc14998c1",
                    "title": "i18n1",
                    "links": {
                        "pc_link": "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234",
                        "mobile_link": "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
                    },
                    "status": "PENDING",
                    "extra": "{\"xxx\":\"xxx\",\"complete_reason\":\"approved\"}",
                    "create_time": "1556468012678",
                    "end_time": "1556468012678",
                    "update_time": "1556468012678",
                    "action_context": "123456",
                    "action_configs": [
                        {
                            "action_type": "APPROVE",
                            "action_name": "@i18n@5",
                            "is_need_reason": false,
                            "is_reason_required": false,
                            "is_need_attachment": false
                        }
                    ],
                    "display_method": "BROWSER",
                    "exclude_statistics": false,
                    "node_id": "node",
                    "node_name": "i18n@name"
                }
            ],
            "cc_list": [
                {
                    "cc_id": "123456",
                    "user_id": "12345",
                    "open_id": "ou_be73cbc0ee35eb6ca54e9e7cc14998c1",
                    "links": {
                        "pc_link": "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/detail?id=1234",
                        "mobile_link": "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/detail?id=1234"
                    },
                    "read_status": "READ",
                    "extra": "{\"xxx\":\"xxx\"}",
                    "title": "xxx",
                    "create_time": "1556468012678",
                    "update_time": "1556468012678",
                    "display_method": "BROWSER"
                }
            ],
            "i18n_resources": [
                {
                    "locale": "zh-CN",
                    "texts": [
                        {
                            "key": "@i18n@1",
                            "value": "people"
                        }
                    ],
                    "is_default": true
                }
            ],
            "trusteeship_url_token": "788981c886b1c28ac29d1e68efd60683d6d90dfce80938ee9453e2a5f3e9e306",
            "trusteeship_user_id_type": "user_id",
            "trusteeship_urls": {
                "form_detail_url": "https://#{your_domain}/api/form_detail",
                "action_definition_url": "https://#{your_domain}/api/action_definition",
                "approval_node_url": "https://#{your_domain}/api/approval_node",
                "action_callback_url": "https://#{your_domain}/api/action_callback",
                "pull_business_data_url": "https://#{your_domain}/api/pull_business_data"
            },
            "trusteeship_cache_config": {
                "form_policy": "DISABLE",
                "form_vary_with_locale": false,
                "form_version": "1"
            }
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateApprovalExternalInstanceRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
