//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::approval::ApprovalService;

impl<'c, IStore: Store, IClient: HttpClient> ApprovalService<'c, IStore, IClient> {
    /// **api 版本: 2024-03-27T03:56:19+00:00**
    ///
    /// ## 创建审批实例
    ///
    /// 创建一个审批实例，调用方需对审批定义的表单有详细了解，将按照定义的表单结构，将表单 Value 通过接口传入。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/instance/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/approval-v4/instance/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fapproval-v4%2Finstance%2Fcreate>
    pub async fn create_approval_instance(
        &self,
        req: CreateApprovalInstanceReq,
    ) -> Result<(CreateApprovalInstanceResp, CommonResponse), Error> {
        self.create_approval_instance_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_approval_instance](#method.create_approval_instance) 函数
    pub async fn create_approval_instance_with_opt(
        &self,
        req: CreateApprovalInstanceReq,
        method_option: MethodOption,
    ) -> Result<(CreateApprovalInstanceResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_approval_instance(&req) {
                tracing::info!("[lark] Approval#CreateApprovalInstance **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Approval#CreateApprovalInstance call api");

        let req = ApiRequest {
            scope: "Approval",
            api: "CreateApprovalInstance",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/approval/v4/instances",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateApprovalInstanceRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateApprovalInstanceReq {
    /// 审批定义 code
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7C468A54-8745-2245-9675-08B7C63E7A85"
    #[api(kind = "body", name = "approval_code")]
    pub approval_code: String,
    /// 发起审批用户的 user_id，与 open_id 必须传入其中一个。如果传入了 user_id 则优先使用 user_id。
    ///
    /// **示例值**: "f7cb567e"
    #[api(kind = "body", name = "user_id")]
    pub user_id: Option<String>,
    /// 发起审批用户的 open_id，与 user_id 必须传入其中一个。如果传入了 user_id 则优先使用 user_id。
    ///
    /// **示例值**: "ou_3cda9c969f737aaa05e6915dce306cb9"
    #[api(kind = "body", name = "open_id")]
    pub open_id: Option<String>,
    /// 发起审批用户部门id，如果用户只属于一个部门，可以不填。如果属于多个部门，默认会选择部门列表第一个部门
    ///
    /// **示例值**: "9293493ccacbdb9a"
    #[api(kind = "body", name = "department_id")]
    pub department_id: Option<String>,
    /// json 数组（需压缩转义成string），控件值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "[{\"id\":\"111\", \"type\": \"input\", \"value\":\"test\"}]"
    #[api(kind = "body", name = "form")]
    pub form: String,
    /// 如果有发起人自选节点，则需要填写对应节点的审批人
    #[api(kind = "body", name = "node_approver_user_id_list")]
    pub node_approver_user_id_list: Vec<Option<NodeApproverSubReq>>,
    /// 审批人发起人自选 open id，与上述node_approver_user_id_list字段取并集
    #[api(kind = "body", name = "node_approver_open_id_list")]
    pub node_approver_open_id_list: Vec<Option<NodeApproverSubReq>>,
    /// 如果有发起人自选节点，则可填写对应节点的抄送人，单个节点最多选择20位抄送人
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `20` 字符
    #[api(kind = "body", name = "node_cc_user_id_list")]
    pub node_cc_user_id_list: Vec<Option<NodeCcSubReq>>,
    /// 抄送人发起人自选 open id 单个节点最多选择20位抄送人
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `20` 字符
    #[api(kind = "body", name = "node_cc_open_id_list")]
    pub node_cc_open_id_list: Vec<Option<NodeCcSubReq>>,
    /// 审批实例 uuid，用于幂等操作, 每个租户下面的唯一key，同一个 uuid 只能用于创建一个审批实例，如果冲突，返回错误码 60012 ，格式建议为 XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX，不区分大小写
    ///
    /// **示例值**: "7C468A54-8745-2245-9675-08B7C63E7A87"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `64` 字符
    #[api(kind = "body", name = "uuid")]
    pub uuid: Option<String>,
    /// 可配置“提交”按钮，该操作适用于审批人退回场景，提单人在同一实例提交单据
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "allow_resubmit")]
    pub allow_resubmit: Option<bool>,
    /// 可配置是否可以再次提交，适用于周期性提单场景，按照当前表单内容再次发起一个新实例
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "allow_submit_again")]
    pub allow_submit_again: Option<bool>,
    /// 取消指定的 bot 推送通知。可选值:
    ///
    /// - 1：取消通过推送。
    ///
    /// - 2：取消拒绝推送。
    ///
    /// - 4：取消实例取消推送。
    ///
    /// 支持同时取消多个 bot 推送通知。位运算，即如需取消 1 和 2 两种通知，则需要传入加和值 3。
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "cancel_bot_notification")]
    pub cancel_bot_notification: Option<String>,
    /// 配置是否可以禁止撤销
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "forbid_revoke")]
    pub forbid_revoke: Option<bool>,
    /// 国际化文案。目前只支单行、多行文本的值。
    #[api(kind = "body", name = "i18n_resources")]
    pub i18n_resources: Vec<Option<I18nResourceSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct NodeApproverSubReq {
    /// node id 或 custom node id，通过 [查看审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/get) 获取
    ///
    /// **示例值**: "46e6d96cfa756980907209209ec03b64"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: Option<String>,
    /// value: 审批人列表
    ///
    /// **示例值**: "["f7cb567e"]"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct NodeCcSubReq {
    /// node id ，通过 [查看审批定义](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/approval/get) 获取
    ///
    /// **示例值**: "46e6d96cfa756980907209209ec03b75"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: Option<String>,
    /// value: 审批人列表
    ///
    /// **示例值**: "["f7cb567e"]"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nResourceSubReq {
    /// 语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    ///
    /// **可选值**:
    ///
    /// `Zhcn`: 中文
    ///
    /// `Enus`: 英文
    ///
    /// `Jajp`: 日文
    #[serde(
        rename = "locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub locale: String,
    /// 文案 key, value, i18n key 以 @i18n@ 开头； 该字段主要用于做国际化，允许用户同时传多个语言的文案，审批中心会根据用户当前的语音环境使用对应的文案，如果没有传用户当前的语音环境文案，则会使用默认的语言文案。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{ "@i18n@1": "权限申请", "@i18n@2": "OA审批", "@i18n@3": "Permission" }"
    #[serde(
        rename = "texts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub texts: Vec<Option<I18nResourceTextSubReq>>,
    /// 是否默认语言，默认语言需要包含所有key，非默认语言如果key不存在会使用默认语言代替
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_default",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_default: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nResourceTextSubReq {
    /// 文案key
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "@i18n@1"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 文案
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "people"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateApprovalInstanceRespInner {
    #[serde(flatten)]
    data: Option<CreateApprovalInstanceResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateApprovalInstanceResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 审批实例 Code
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "81D31358-93AF-92D6-7425-01A5D67C4E71"
    #[serde(
        rename = "instance_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub instance_code: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::approval::ApprovalServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateApprovalInstanceReq) -> Result<(CreateApprovalInstanceResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateApprovalInstanceReq,
                ) -> Result<(CreateApprovalInstanceResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ApprovalServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_approval_instance<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateApprovalInstanceReq,
            CreateApprovalInstanceResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_approval_instance(
            &self,
            req: &CreateApprovalInstanceReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateApprovalInstanceReq,
                CreateApprovalInstanceResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::approval::create_approval_instance::{
            CreateApprovalInstanceReq, CreateApprovalInstanceResp, CreateApprovalInstanceRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .approval()
            .mock()
            .mock_create_approval_instance(|_| {
                Ok((
                    CreateApprovalInstanceResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .approval()
            .create_approval_instance(CreateApprovalInstanceReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .approval()
            .create_approval_instance(CreateApprovalInstanceReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "approval_code":"4202AD96-9EC1-4284-9C48-B923CDC4F30B",
    "user_id":"59a92c4a",
    "open_id":"ou_806a18fb5bdf525e38ba219733bdbd73",
    "form":"[{\"id\":\"111\",\"type\":\"input\",\"value\":\"11111\"},{\"id\":\"222\",\"required\":true,\"type\":\"dateInterval\",\"value\":{\"start\":\"2019-10-01T08:12:01+08:00\",\"end\":\"2019-10-02T08:12:01+08:00\",\"interval\": 2.0}},{\"id\":\"333\",\"type\":\"radioV2\",\"value\":\"1\"},{\"id\":\"444\",\"type\":\"number\", \"value\":\"4\"},{\"id\":\"555\",\"type\":\"textarea\",\"value\":\"fsafs\"}]",
    "node_approver_user_id_list":[
        {"key": "46e6d96cfa756980907209209ec03b64","value":["59a92c4a"]},
        {"key": "manager_node_id","value":["59a92c4a"]}
    ],
    "node_approver_open_id_list":[
        {"key": "46e6d96cfa756980907209209ec03b64","value":["ou_806a18fb5bdf525e38ba219733bdbd73"]},
        {"key": "manager_node_id","value":["ou_806a18fb5bdf525e38ba219733bdbd73"]}
    ],
    "node_cc_user_id_list":[
        {"key": "46e6d96cfa756980907209209ec03b64","value":["59a92c4a"]},
        {"key": "manager_node_id","value":["59a92c4a"]}
    ],
    "node_cc_open_id_list":[
        {"key": "46e6d96cfa756980907209209ec03b64","value":["ou_806a18fb5bdf525e38ba219733bdbd73"]},
        {"key": "manager_node_id","value":["ou_806a18fb5bdf525e38ba219733bdbd73"]}
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateApprovalInstanceReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "instance_code": "81D31358-93AF-92D6-7425-01A5D67C4E71"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateApprovalInstanceRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
