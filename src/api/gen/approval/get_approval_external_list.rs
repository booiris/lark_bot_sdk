//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_task/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::approval::ApprovalService;

impl<'c, IStore: Store, IClient: HttpClient> ApprovalService<'c, IStore, IClient> {
    /// **api 版本: 2023-07-14T10:16:08+00:00**
    ///
    /// ## 获取三方审批任务状态
    ///
    /// 该接口用于获取三方审批的状态。用户传入查询条件，接口返回满足条件的审批实例的状态。该接口支持多种参数的组合，包括如下组合：
    ///
    /// 1.通过 instance_ids 获取指定实例的任务状态
    ///
    /// 2.通过 user_ids 获取指定用户的任务状态
    ///
    /// 3.通过 status 获取指定状态的所有任务
    ///
    /// 4.通过page_token获取下一批数据
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_task/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/approval-v4/external_task/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fapproval-v4%2Fexternal_task%2Flist>
    pub async fn get_approval_external_list(
        &self,
        req: GetApprovalExternalListReq,
    ) -> Result<(GetApprovalExternalListResp, CommonResponse), Error> {
        self.get_approval_external_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_approval_external_list](#method.get_approval_external_list) 函数
    pub async fn get_approval_external_list_with_opt(
        &self,
        req: GetApprovalExternalListReq,
        method_option: MethodOption,
    ) -> Result<(GetApprovalExternalListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_approval_external_list(&req) {
                tracing::info!("[lark] Approval#GetApprovalExternalList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Approval#GetApprovalExternalList call api");

        let req = ApiRequest {
            scope: "Approval",
            api: "GetApprovalExternalList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/approval/v4/external_tasks",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetApprovalExternalListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetApprovalExternalListReq {
    /// 分页大小
    ///
    /// **示例值**: "100"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 审批定义 Code，用于指定只获取这些定义下的数据
    ///
    /// **示例值**: "B7B65FFE-C2GC-452F-9F0F-9AA8352363D6"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `20` 字符
    #[api(kind = "body", name = "approval_codes")]
    pub approval_codes: Vec<Option<String>>,
    /// 审批实例 ID, 用于指定只获取这些实例下的数据，最多支持 20 个
    ///
    /// **示例值**: "oa_159160304"
    #[api(kind = "body", name = "instance_ids")]
    pub instance_ids: Vec<Option<String>>,
    /// 审批人 user_id，用于指定只获取这些用户的数据
    ///
    /// **示例值**: "112321"
    #[api(kind = "body", name = "user_ids")]
    pub user_ids: Vec<Option<String>>,
    /// 审批任务状态，用于指定获取该状态下的数据
    ///
    /// **示例值**: "PENDING"
    ///
    /// **可选值**:
    ///
    /// `Pending`: 审批中
    ///
    /// `Approved`: 审批流程结束，结果为同意
    ///
    /// `Rejected`: 审批流程结束，结果为拒绝
    ///
    /// `Transferred`: 任务转交
    ///
    /// `Done`: 任务通过但审批人未操作；审批人看不到这个任务, 若想要看到, 可以通过抄送该人.
    #[api(kind = "body", name = "status")]
    pub status: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetApprovalExternalListRespInner {
    #[serde(flatten)]
    data: Option<GetApprovalExternalListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetApprovalExternalListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 返回数据
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: Vec<ExternalTaskListSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalTaskListSubResp {
    /// 审批实例 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "29075"
    #[serde(
        rename = "instance_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub instance_id: String,
    /// 审批的id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "fwwweffff33111133xxx"
    #[serde(
        rename = "approval_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_id: String,
    /// 审批对应的 approval_code
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "B7B65FFE-C2GC-452F-9F0F-9AA8352363D6"
    #[serde(
        rename = "approval_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_code: String,
    /// 审批实例当前的状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "PENDING"
    ///
    /// **可选值**:
    ///
    /// `PENDING`: 审批中
    ///
    /// `APPROVED`: 审批流程结束，结果为同意
    ///
    /// `REJECTED`: 审批流程结束，结果为拒绝
    ///
    /// `CANCELED`: 审批发起人撤回
    ///
    /// `DELETED`: 审批被删除
    ///
    /// `HIDDEN`: 状态隐藏(不显示状态)
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 审批实例最后更新时间，单位 毫秒
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1621863215000"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
    /// 审批实例下的审批任务
    #[serde(
        rename = "tasks",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tasks: Vec<ExternalTaskItemSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExternalTaskItemSubResp {
    /// 审批任务 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "310"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 审批任务状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "PENDING"
    ///
    /// **可选值**:
    ///
    /// `Pending`: 审批中
    ///
    /// `Approved`: 审批流程结束，结果为同意
    ///
    /// `Rejected`: 审批流程结束，结果为拒绝
    ///
    /// `Transferred`: 任务转交
    ///
    /// `Done`: 任务通过但审批人未操作；审批人看不到这个任务, 若想要看到, 可以通过抄送该人.
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 审批任务最后更新时间，单位 毫秒
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1621863215000"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::approval::ApprovalServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetApprovalExternalListReq,
        ) -> Result<(GetApprovalExternalListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetApprovalExternalListReq,
                ) -> Result<(GetApprovalExternalListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ApprovalServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_approval_external_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetApprovalExternalListReq,
            GetApprovalExternalListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_approval_external_list(
            &self,
            req: &GetApprovalExternalListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetApprovalExternalListReq,
                GetApprovalExternalListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::approval::get_approval_external_list::{
            GetApprovalExternalListReq, GetApprovalExternalListResp,
            GetApprovalExternalListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .approval()
            .mock()
            .mock_get_approval_external_list(|_| {
                Ok((
                    GetApprovalExternalListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .approval()
            .get_approval_external_list(GetApprovalExternalListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .approval()
            .get_approval_external_list(GetApprovalExternalListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "approval_codes": [
        "E78F1022-A166-447C-8320-E151DA90D70F"
    ],
    "instance_ids": [
        "oa_159160304"
    ],
    "user_ids": [
        "112321"
    ],
    "status": "PENDING"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetApprovalExternalListReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "data": [
            {
                "instance_id": "29075",
                "approval_id": "fwwweffff33111133xxx",
                "approval_code": "B7B65FFE-C2GC-452F-9F0F-9AA8352363D6",
                "status": "PENDING",
                "update_time": "1621863215000",
                "tasks": [
                    {
                        "id": "310",
                        "status": "PENDING",
                        "update_time": "1621863215000"
                    }
                ]
            }
        ],
        "page_token": "nF1ZXJ5VGhlbkZldGNoCgAAAAAA6PZwFmUzSldvTC1yU",
        "has_more": false
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetApprovalExternalListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
