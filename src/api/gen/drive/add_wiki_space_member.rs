//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T11:17:56+00:00**
    ///
    /// ## 添加知识空间成员
    ///
    /// 添加知识空间成员或管理员。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/wiki-v2/space-member/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fwiki-v2%2Fspace-member%2Fcreate>
    pub async fn add_wiki_space_member(
        &self,
        req: AddWikiSpaceMemberReq,
    ) -> Result<(AddWikiSpaceMemberResp, CommonResponse), Error> {
        self.add_wiki_space_member_with_opt(req, Default::default())
            .await
    }

    /// 参见 [add_wiki_space_member](#method.add_wiki_space_member) 函数
    pub async fn add_wiki_space_member_with_opt(
        &self,
        req: AddWikiSpaceMemberReq,
        method_option: MethodOption,
    ) -> Result<(AddWikiSpaceMemberResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_add_wiki_space_member(&req) {
                tracing::info!("[lark] Drive#AddWikiSpaceMember **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#AddWikiSpaceMember call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "AddWikiSpaceMember",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/wiki/v2/spaces/:space_id/members",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (AddWikiSpaceMemberRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct AddWikiSpaceMemberReq {
    /// 知识空间 ID。可通过以下两种方式获取。了解更多，参考[知识库概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-overview)。
    ///
    /// - 调用 [获取知识空间列表](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list)获取
    ///
    /// - 如果你是知识库管理员，可以进入知识库设置页面，复制地址栏的数字部分：https://sample.feishu.cn/wiki/settings/==6870403571079249922==
    ///
    /// **示例值**: "1565676577122621"
    #[api(kind = "path", name = "space_id")]
    pub space_id: String,
    /// 添加权限后是否通知对方
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "need_notification",
        v_type = "var",
        option = "false"
    )]
    pub need_notification: bool,
    /// 要添加的成员或管理员的身份类型。可选值：
    ///
    /// - openchat：群组 ID。参考[群 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)获取
    ///
    /// - userid：用户 ID。详情参考[如何获取 User ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// - email：用户邮箱
    ///
    /// - opendepartmentid：部门 ID。参考[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)获取
    ///
    /// - openid：用户的 Open ID。详情参考[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// - unionid：用户的 Union ID。详情参考[如何获取 Union ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "openid"
    #[api(kind = "body", name = "member_type")]
    pub member_type: String,
    /// 成员或管理员的 ID，值的类型由 member_type 参数决定。参考 member_type 的描述获取不同类型的 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_449b53ad6aee526f7ed311b216aabcef"
    #[api(kind = "body", name = "member_id")]
    pub member_id: String,
    /// 成员的角色类型。可选值:
    ///
    /// - admin：管理员
    ///
    /// - member：成员
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "admin"
    #[api(kind = "body", name = "member_role")]
    pub member_role: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct AddWikiSpaceMemberRespInner {
    #[serde(flatten)]
    data: Option<AddWikiSpaceMemberResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct AddWikiSpaceMemberResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 知识空间成员
    #[serde(
        rename = "member",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member: MemberSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MemberSubResp {
    /// 要添加的成员或管理员的身份类型。枚举值：
    ///
    /// - openchat：群组 ID。参考[群 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)获取
    ///
    /// - userid：用户 ID。详情参考[如何获取 User ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// - email：用户邮箱
    ///
    /// - opendepartmentid：部门 ID。参考[部门资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)获取
    ///
    /// - openid：用户的 Open ID。详情参考[如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// - unionid：用户的 Union ID。详情参考[如何获取 Union ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "openid"
    #[serde(
        rename = "member_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_type: String,
    /// 成员或管理员的 ID，值的类型由 member_type 参数决定。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_449b53ad6aee526f7ed311b216aabcef"
    #[serde(
        rename = "member_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_id: String,
    /// 成员的角色类型。可选值:
    ///
    /// - admin：管理员
    ///
    /// - member：成员
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "admin"
    #[serde(
        rename = "member_role",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_role: String,
    /// 知识库协作者类型（未来支持）
    ///
    /// **示例值**: "user"
    ///
    /// **可选值**:
    ///
    /// `user`: 用户
    ///
    /// `chat`: 群组
    ///
    /// `department`: 组织架构
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(AddWikiSpaceMemberReq) -> Result<(AddWikiSpaceMemberResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(AddWikiSpaceMemberReq) -> Result<(AddWikiSpaceMemberResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_add_wiki_space_member<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, AddWikiSpaceMemberReq, AddWikiSpaceMemberResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_add_wiki_space_member(
            &self,
            req: &AddWikiSpaceMemberReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, AddWikiSpaceMemberReq, AddWikiSpaceMemberResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::add_wiki_space_member::{
            AddWikiSpaceMemberReq, AddWikiSpaceMemberResp, AddWikiSpaceMemberRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_add_wiki_space_member(|_| {
                Ok((AddWikiSpaceMemberResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .add_wiki_space_member(AddWikiSpaceMemberReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .add_wiki_space_member(AddWikiSpaceMemberReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "member_type": "openid",
    "member_id": "ou_449b53ad6aee526f7ed311b216aabcef",
    "member_role": "admin"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::AddWikiSpaceMemberReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "member": {
            "member_type": "openid",
            "member_id": "ou_449b53ad6aee526f7ed311b216aabcef",
            "member_role": "admin",
            "type": "user"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<AddWikiSpaceMemberRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
