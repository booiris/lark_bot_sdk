//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/meta/batch_query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-29T08:43:21+00:00**
    ///
    /// ## 获取文件元数据
    ///
    /// 该接口用于根据文件 token 获取其元数据，包括标题、所有者、创建时间、密级、访问链接等数据。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/meta/batch_query>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/drive-v1/file/batch_query>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Ffile%2Fbatch_query>
    pub async fn get_drive_file_meta(
        &self,
        req: GetDriveFileMetaReq,
    ) -> Result<(GetDriveFileMetaResp, CommonResponse), Error> {
        self.get_drive_file_meta_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_drive_file_meta](#method.get_drive_file_meta) 函数
    pub async fn get_drive_file_meta_with_opt(
        &self,
        req: GetDriveFileMetaReq,
        method_option: MethodOption,
    ) -> Result<(GetDriveFileMetaResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_drive_file_meta(&req) {
                tracing::info!("[lark] Drive#GetDriveFileMeta **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#GetDriveFileMeta call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "GetDriveFileMeta",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/metas/batch_query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetDriveFileMetaRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetDriveFileMetaReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 请求的文件的 token 和类型。一次请求中不可超过 200 个
    ///
    /// **是否必填**: 是
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `200` 字符
    #[api(kind = "body", name = "request_docs")]
    pub request_docs: Vec<Option<RequestDocSubReq>>,
    /// 是否获取文件的访问链接
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "with_url")]
    pub with_url: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RequestDocSubReq {
    /// 文件的 token，获取方式见[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doccnfYZzTlvXqZIGTdAHKabcef"
    #[serde(
        rename = "doc_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub doc_token: String,
    /// 文件的类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    ///
    /// **可选值**:
    ///
    /// `Doc`: 飞书文档
    ///
    /// `Sheet`: 飞书电子表格
    ///
    /// `Bitable`: 飞书多维表格
    ///
    /// `Mindnote`: 飞书思维笔记
    ///
    /// `File`: 飞书文件
    ///
    /// `Wiki`: 飞书知识库
    ///
    /// `Docx`: 飞书新版文档
    ///
    /// `Folder`: 飞书文件夹
    ///
    /// `SyncedBlock`: 文档同步块（灰度中）
    #[serde(
        rename = "doc_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub doc_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetDriveFileMetaRespInner {
    #[serde(flatten)]
    data: Option<GetDriveFileMetaResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetDriveFileMetaResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 文件的元数据列表
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "metas",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub metas: Vec<MetaSubResp>,
    /// 获取元数据失败的文档 token 列表
    #[serde(
        rename = "failed_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub failed_list: Vec<MetaFailedSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MetaSubResp {
    /// 文件的 token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doccnfYZzTlvXqZIGTdAHKabcef"
    #[serde(
        rename = "doc_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub doc_token: String,
    /// 文件的类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    #[serde(
        rename = "doc_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub doc_type: String,
    /// 标题
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "sampletitle"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 文件的所有者
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_b13d41c02edc52ce66aaae67bf1abcef"
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: String,
    /// 创建时间。UNIX 时间戳，单位为秒
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1652066345"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 最后编辑者
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_b13d41c02edc52ce66aaae67bf1abcef"
    #[serde(
        rename = "latest_modify_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latest_modify_user: String,
    /// 最后编辑时间。UNIX 时间戳，单位为秒
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1652066345"
    #[serde(
        rename = "latest_modify_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latest_modify_time: String,
    /// 文档访问链接
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https://sample.feishu.cn/docs/doccnfYZzTlvXqZIGTdAHKabcef"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 文档密级标签名称
    ///
    /// **示例值**: "L2-内部"
    #[serde(
        rename = "sec_label_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sec_label_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MetaFailedSubResp {
    /// 获取元数据失败的文档token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "boxcnrHpsg1QDqXAAAyachabcef"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
    /// 获取元数据失败的错误码
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "970005"
    ///
    /// **可选值**:
    ///
    /// `InvalidDocTypeError`: 文档类型不支持
    ///
    /// `NoPermissionError`: 当前应用或用户没有获取该文件元数据的权限
    ///
    /// `RecordNotFoundError`: 文件 token 和 doc_type 不匹配或该文件不存在
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetDriveFileMetaReq) -> Result<(GetDriveFileMetaResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetDriveFileMetaReq) -> Result<(GetDriveFileMetaResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_drive_file_meta<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetDriveFileMetaReq, GetDriveFileMetaResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_drive_file_meta(
            &self,
            req: &GetDriveFileMetaReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetDriveFileMetaReq, GetDriveFileMetaResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::get_drive_file_meta::{
            GetDriveFileMetaReq, GetDriveFileMetaResp, GetDriveFileMetaRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_get_drive_file_meta(|_| {
                Ok((GetDriveFileMetaResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .get_drive_file_meta(GetDriveFileMetaReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .get_drive_file_meta(GetDriveFileMetaReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "request_docs": [
        {
            "doc_token": "doccnfYZzTlvXqZIGTdAHKabcef",
            "doc_type": "doc"
        }
    ],
    "with_url": false
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetDriveFileMetaReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "metas": [
            {
                "doc_token": "doccnfYZzTlvXqZIGTdAHKabcef",
                "doc_type": "doc",
                "title": "sampletitle",
                "owner_id": "ou_b13d41c02edc52ce66aaae67bf1abcef",
                "create_time": "1652066345",
                "latest_modify_user": "ou_b13d41c02edc52ce66aaae67bf1abcef",
                "latest_modify_time": "1652066345",
                "url": "https://sample.feishu.cn/docs/doccnfYZzTlvXqZIGTdAHKabcef",
                "sec_label_name": "L2-内部"
            }
        ],
        "failed_list": [
            {
                "token": "boxcnrHpsg1QDqXAAAyachabcef",
                "code": 970005
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetDriveFileMetaRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
