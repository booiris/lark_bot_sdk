//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T09:16:49+00:00**
    ///
    /// ## 获取文档基本信息
    ///
    /// 获取文档标题和最新版本 ID。
    ///
    /// **应用频率限制**：单个应用调用频率上限为每秒 5 次，超过该频率限制，接口将返回 HTTP 状态码 <font color="blue">400</font> 及错误码 <font color="blue">99991400</font>。当请求被限频，应用需要处理限频状态码，并使用指数退避算法或其它一些频控策略降低对 API 的调用速率。
    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/docs/docx-v1/document/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdocs%2Fdocx-v1%2Fdocument%2Fget>
    pub async fn get_docx_document(
        &self,
        req: GetDocxDocumentReq,
    ) -> Result<(GetDocxDocumentResp, CommonResponse), Error> {
        self.get_docx_document_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_docx_document](#method.get_docx_document) 函数
    pub async fn get_docx_document_with_opt(
        &self,
        req: GetDocxDocumentReq,
        method_option: MethodOption,
    ) -> Result<(GetDocxDocumentResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_docx_document(&req) {
                tracing::info!("[lark] Drive#GetDocxDocument **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#GetDocxDocument call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "GetDocxDocument",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/docx/v1/documents/:document_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetDocxDocumentRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetDocxDocumentReq {
    /// 文档的唯一标识。点击[这里](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-overview)了解如何获取文档的 `document_id`
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxcnePuYufKa49ISjhD8Iabcef"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `27` 字符- `27` 字符
    #[api(kind = "path", name = "document_id")]
    pub document_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetDocxDocumentRespInner {
    #[serde(flatten)]
    data: Option<GetDocxDocumentResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetDocxDocumentResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 文档信息
    #[serde(
        rename = "document",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub document: DocumentSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DocumentSubResp {
    /// 文档的唯一标识。点击[这里](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-overview)了解如何获取文档的 `document_id`
    ///
    /// **示例值**: "doxcni6mOy7jLRWbEylaKKC7K88"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `27` 字符- `27` 字符
    #[serde(
        rename = "document_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub document_id: String,
    /// 文档版本 ID。起始值为 1
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "revision_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub revision_id: i64,
    /// 文档标题
    ///
    /// **示例值**: "undefined"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `800` 字符
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 文档展示设置
    #[serde(
        rename = "display_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_setting: DocumentDisplaySettingSubResp,
    /// 文档封面
    #[serde(
        rename = "cover",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cover: DocumentCoverSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DocumentDisplaySettingSubResp {
    /// 文档信息中是否展示文档作者
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_authors",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_authors: bool,
    /// 文档信息中是否展示文档创建时间
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_create_time: bool,
    /// 文档信息中是否展示文档访问次数
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_pv",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_pv: bool,
    /// 文档信息中是否展示文档访问人数
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_uv",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_uv: bool,
    /// 文档信息中是否展示点赞总数
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_like_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_like_count: bool,
    /// 文档信息中是否展示评论总数
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_comment_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_comment_count: bool,
    /// 文档信息中是否展示关联事项。暂未支持
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_related_matters",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_related_matters: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DocumentCoverSubResp {
    /// 图片 token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "O9E7bhebQooOzMx7yc7cSabcdef"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `27` 字符- `27` 字符
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
    /// 视图在水平方向的偏移比例。其值为距离原图中心的水平方向偏移值 px / 原图宽度 px。
    ///
    /// 视图在原图中心时，该值为 0；
    ///
    /// 视图在原图右部分时，该值为正数；
    ///
    /// 视图在原图左部分时，该值为负数。
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "offset_ratio_x",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offset_ratio_x: f64,
    /// 视图在垂直方向的偏移比例。其值为距离原图中心的垂直方向偏移值 px / 原图高度 px。
    ///
    /// 视图在原图中心时，该值为 0；
    ///
    /// 视图在原图上部分时，该值为正数；
    ///
    /// 视图在原图下部分时，该值为负数。
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "offset_ratio_y",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offset_ratio_y: f64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetDocxDocumentReq) -> Result<(GetDocxDocumentResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetDocxDocumentReq) -> Result<(GetDocxDocumentResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_docx_document<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetDocxDocumentReq, GetDocxDocumentResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_docx_document(
            &self,
            req: &GetDocxDocumentReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetDocxDocumentReq, GetDocxDocumentResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::get_docx_document::{
            GetDocxDocumentReq, GetDocxDocumentResp, GetDocxDocumentRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_get_docx_document(|_| {
                Ok((GetDocxDocumentResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .get_docx_document(GetDocxDocumentReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .get_docx_document(GetDocxDocumentReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "document": {
            "document_id": "doxcni6mOy7jLRWbEylaKKabcef",
            "revision_id": 1,
            "title": "title",
            "cover": {
                "token": "D6d9bkdH7onNylxKyvucm8abcef",
                "offset_ratio_x": 0,
                "offset_ratio_y": 0
            },
            "display_setting": {
                "show_authors": true,
                "show_comment_count": false,
                "show_create_time": true,
                "show_like_count": false,
                "show_pv": false,
                "show_uv": false
            }
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetDocxDocumentRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
