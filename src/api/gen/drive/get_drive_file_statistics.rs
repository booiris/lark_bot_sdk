//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-statistics/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-29T08:43:21+00:00**
    ///
    /// ## 获取文件统计信息
    ///
    /// 此接口用于获取各类文件的流量统计信息和互动信息，包括阅读人数、阅读次数和点赞数。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-statistics/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/drive-v1/file/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Ffile%2Fget>
    pub async fn get_drive_file_statistics(
        &self,
        req: GetDriveFileStatisticsReq,
    ) -> Result<(GetDriveFileStatisticsResp, CommonResponse), Error> {
        self.get_drive_file_statistics_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_drive_file_statistics](#method.get_drive_file_statistics) 函数
    pub async fn get_drive_file_statistics_with_opt(
        &self,
        req: GetDriveFileStatisticsReq,
        method_option: MethodOption,
    ) -> Result<(GetDriveFileStatisticsResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_drive_file_statistics(&req) {
                tracing::info!("[lark] Drive#GetDriveFileStatistics **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#GetDriveFileStatistics call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "GetDriveFileStatistics",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/files/:file_token/statistics",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetDriveFileStatisticsRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetDriveFileStatisticsReq {
    /// 文件 token。了解如何获取文件 token，参考[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)。
    ///
    /// **示例值**: "doccnfYZzTlvXqZIGTdAHKabcef"
    #[api(kind = "path", name = "file_token")]
    pub file_token: String,
    /// 文件类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    ///
    /// **可选值**:
    ///
    /// `doc`: 旧版文档
    ///
    /// `sheet`: 电子表格
    ///
    /// `mindnote`: 思维笔记
    ///
    /// `bitable`: 多维表格
    ///
    /// `wiki`: 知识库文档
    ///
    /// `file`: 文件
    ///
    /// `docx`: 新版文档
    #[api(kind = "query", name = "file_type", v_type = "var", option = "false")]
    pub file_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetDriveFileStatisticsRespInner {
    #[serde(flatten)]
    data: Option<GetDriveFileStatisticsResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetDriveFileStatisticsResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 文档 token
    ///
    /// **示例值**: "doccnfYZzTlvXqZIGTdAHKabcef"
    #[serde(
        rename = "file_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: String,
    /// 文档类型
    ///
    /// **示例值**: "doc"
    #[serde(
        rename = "file_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_type: String,
    /// 文档统计信息
    #[serde(
        rename = "statistics",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub statistics: FileStatisticsSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileStatisticsSubResp {
    /// 文档历史访问人数，同一用户（user_id）多次访问按一次计算。
    ///
    /// **示例值**: "10"
    #[serde(
        rename = "uv",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub uv: i64,
    /// 文档历史访问次数，同一用户（user_id）多次访问按多次计算，但同一用户在间隔在半小时内访问两次视为一次访问
    ///
    /// **示例值**: "15"
    #[serde(
        rename = "pv",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pv: i64,
    /// 文档历史点赞总数。`-1` 表示对应的文档类型不支持点赞
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "like_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub like_count: i64,
    /// 时间戳（单位：秒）
    ///
    /// **示例值**: "1627367349"
    #[serde(
        rename = "timestamp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub timestamp: i64,
    /// 今日新增文档访问人数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "uv_today",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub uv_today: i64,
    /// 今日新增文档访问次数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "pv_today",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pv_today: i64,
    /// 今日新增文档点赞数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "like_count_today",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub like_count_today: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetDriveFileStatisticsReq) -> Result<(GetDriveFileStatisticsResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetDriveFileStatisticsReq,
                ) -> Result<(GetDriveFileStatisticsResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_drive_file_statistics<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetDriveFileStatisticsReq,
            GetDriveFileStatisticsResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_drive_file_statistics(
            &self,
            req: &GetDriveFileStatisticsReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetDriveFileStatisticsReq,
                GetDriveFileStatisticsResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::get_drive_file_statistics::{
            GetDriveFileStatisticsReq, GetDriveFileStatisticsResp, GetDriveFileStatisticsRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_get_drive_file_statistics(|_| {
                Ok((
                    GetDriveFileStatisticsResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .get_drive_file_statistics(GetDriveFileStatisticsReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .get_drive_file_statistics(GetDriveFileStatisticsReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "file_token": "doccnfYZzTlvXqZIGTdAHKabcef",
        "file_type": "doc",
        "statistics": {
            "uv": 10,
            "pv": 15,
            "like_count": 2,
            "timestamp": 1627367349,
            "uv_today": 1,
            "pv_today": 1,
            "like_count_today": 1
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetDriveFileStatisticsRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
