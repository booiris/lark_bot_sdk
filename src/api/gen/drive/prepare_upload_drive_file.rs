//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_prepare>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-29T08:45:13+00:00**
    ///
    /// ## 分片上传文件-预上传
    ///
    /// 发送初始化请求，以获取上传事务 ID 和分片策略，为[上传分片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_part)做准备。平台固定以 4MB 的大小对文件进行分片。了解完整的上传文件流程，参考[上传文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_prepare>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/drive-v1/upload/multipart-upload-file-/upload_prepare>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Fupload%2Fmultipart-upload-file-%2Fupload_prepare>
    pub async fn prepare_upload_drive_file(
        &self,
        req: PrepareUploadDriveFileReq,
    ) -> Result<(PrepareUploadDriveFileResp, CommonResponse), Error> {
        self.prepare_upload_drive_file_with_opt(req, Default::default())
            .await
    }

    /// 参见 [prepare_upload_drive_file](#method.prepare_upload_drive_file) 函数
    pub async fn prepare_upload_drive_file_with_opt(
        &self,
        req: PrepareUploadDriveFileReq,
        method_option: MethodOption,
    ) -> Result<(PrepareUploadDriveFileResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_prepare_upload_drive_file(&req) {
                tracing::info!("[lark] Drive#PrepareUploadDriveFile **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#PrepareUploadDriveFile call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "PrepareUploadDriveFile",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/files/upload_prepare",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (PrepareUploadDriveFileRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct PrepareUploadDriveFileReq {
    /// 文件的名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "test.txt"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `250` 字符
    #[api(kind = "body", name = "file_name")]
    pub file_name: String,
    /// 上传点的类型。取固定值 explorer，表示将文件上传至云空间中。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "explorer"
    ///
    /// **可选值**:
    ///
    /// `explorer`: 云空间
    #[api(kind = "body", name = "parent_type")]
    pub parent_type: String,
    /// 云空间中文件夹的 token。了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "fldbcO1UuPz8VwnpPx5a92abcef"
    #[api(kind = "body", name = "parent_node")]
    pub parent_node: String,
    /// 文件的大小，单位为字节。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1024"
    #[api(kind = "body", name = "size")]
    pub size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct PrepareUploadDriveFileRespInner {
    #[serde(flatten)]
    data: Option<PrepareUploadDriveFileResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct PrepareUploadDriveFileResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 分片上传事务 ID
    ///
    /// **示例值**: "7111211691345512356"
    #[serde(
        rename = "upload_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub upload_id: String,
    /// 分片大小策略
    ///
    /// **示例值**: "4194304"
    #[serde(
        rename = "block_size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_size: i64,
    /// 分片的数量
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "block_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_num: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(PrepareUploadDriveFileReq) -> Result<(PrepareUploadDriveFileResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    PrepareUploadDriveFileReq,
                ) -> Result<(PrepareUploadDriveFileResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_prepare_upload_drive_file<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            PrepareUploadDriveFileReq,
            PrepareUploadDriveFileResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_prepare_upload_drive_file(
            &self,
            req: &PrepareUploadDriveFileReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                PrepareUploadDriveFileReq,
                PrepareUploadDriveFileResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::prepare_upload_drive_file::{
            PrepareUploadDriveFileReq, PrepareUploadDriveFileResp, PrepareUploadDriveFileRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_prepare_upload_drive_file(|_| {
                Ok((
                    PrepareUploadDriveFileResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .prepare_upload_drive_file(PrepareUploadDriveFileReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .prepare_upload_drive_file(PrepareUploadDriveFileReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "file_name": "test.txt",
    "parent_type": "explorer",
    "parent_node": "fldbcO1UuPz8VwnpPx5a92abcef",
    "size": 1024
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::PrepareUploadDriveFileReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "upload_id": "7111211691345512356",
        "block_size": 4194304,
        "block_num": 1
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<PrepareUploadDriveFileRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
