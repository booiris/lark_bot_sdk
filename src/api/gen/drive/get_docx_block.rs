//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T09:16:54+00:00**
    ///
    /// ## 获取块
    ///
    /// 获取指定块的富文本内容。
    ///
    /// 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnamKaccZKqIMopnREJCZUMe#doxcnWEMWYAg2YMkEq0SZXHzaih)，了解相关规则及约束。
    ///
    /// **应用频率限制**：单个应用调用频率上限为每秒 5 次，超过该频率限制，接口将返回 HTTP 状态码 <font color="blue">400</font> 及错误码 <font color="blue">99991400</font>。当请求被限频，应用需要处理限频状态码，并使用指数退避算法或其它一些频控策略降低对 API 的调用速率。
    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/docs/docx-v1/document-block/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdocs%2Fdocx-v1%2Fdocument-block%2Fget>
    pub async fn get_docx_block(
        &self,
        req: GetDocxBlockReq,
    ) -> Result<(GetDocxBlockResp, CommonResponse), Error> {
        self.get_docx_block_with_opt(req, Default::default()).await
    }

    /// 参见 [get_docx_block](#method.get_docx_block) 函数
    pub async fn get_docx_block_with_opt(
        &self,
        req: GetDocxBlockReq,
        method_option: MethodOption,
    ) -> Result<(GetDocxBlockResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_docx_block(&req) {
                tracing::info!("[lark] Drive#GetDocxBlock **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#GetDocxBlock call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "GetDocxBlock",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/docx/v1/documents/:document_id/blocks/:block_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetDocxBlockRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetDocxBlockReq {
    /// 文档唯一标识。对应新版文档 Token，[点击了解如何获取云文档 Token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxcnePuYufKa49ISjhD8Ih0ikh"
    #[api(kind = "path", name = "document_id")]
    pub document_id: String,
    /// Block 的唯一标识
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxcnO6UW6wAw2qIcYf4hZpFIth"
    #[api(kind = "path", name = "block_id")]
    pub block_id: String,
    /// 查询的文档版本，-1 表示文档最新版本。若此时查询的版本为文档最新版本，则需要持有文档的阅读权限；若此时查询的版本为文档的历史版本，则需要持有文档的编辑权限。
    ///
    /// **示例值**: "-1"
    #[api(
        kind = "query",
        name = "document_revision_id",
        v_type = "var",
        option = "false"
    )]
    pub document_revision_id: i64,
    /// 此次调用中使用的用户ID的类型
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetDocxBlockRespInner {
    #[serde(flatten)]
    data: Option<GetDocxBlockResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetDocxBlockResp {
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 查询的 Block 的信息
    #[serde(
        rename = "block",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block: BlockSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BlockSubResp {
    /// Block 唯一标识
    ///
    /// **示例值**: "doxcnSS4ouQkQEouGSUkTg9NJPe"
    #[serde(
        rename = "block_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_id: String,
    /// block 的父亲 id
    ///
    /// **示例值**: "doxcnePuYufKa49ISjhD8Ih0ikh"
    #[serde(
        rename = "parent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_id: String,
    /// block 的孩子 id 列表
    ///
    /// **示例值**: "[doxcnO6UW6wAw2qIcYf4hZpFIth]"
    #[serde(
        rename = "children",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub children: Vec<String>,
    /// block 类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Page`: 页面 Block
    ///
    /// `Text`: 文本 Block
    ///
    /// `Heading1`: 标题 1 Block
    ///
    /// `Heading2`: 标题 2 Block
    ///
    /// `Heading3`: 标题 3 Block
    ///
    /// `Heading4`: 标题 4 Block
    ///
    /// `Heading5`: 标题 5 Block
    ///
    /// `Heading6`: 标题 6 Block
    ///
    /// `Heading7`: 标题 7 Block
    ///
    /// `Heading8`: 标题 8 Block
    ///
    /// `Heading9`: 标题 9 Block
    ///
    /// `Bullet`: 无序列表 Block
    ///
    /// `Ordered`: 有序列表 Block
    ///
    /// `Code`: 代码块 Block
    ///
    /// `Quote`: 引用 Block
    ///
    /// `Todo`: 待办事项 Block
    ///
    /// `Bitable`: 多维表格 Block
    ///
    /// `Callout`: 高亮块 Block
    ///
    /// `ChatCard`: 会话卡片 Block
    ///
    /// `Diagram`: 流程图 & UML Block
    ///
    /// `Divider`: 分割线 Block
    ///
    /// `File`: 文件 Block
    ///
    /// `Grid`: 分栏 Block
    ///
    /// `GridColumn`: 分栏列 Block
    ///
    /// `Iframe`: 内嵌 Block Block
    ///
    /// `Image`: 图片 Block
    ///
    /// `ISV`: 开放平台小组件 Block
    ///
    /// `Mindnote`: 思维笔记 Block
    ///
    /// `Sheet`: 电子表格 Block
    ///
    /// `Table`: 表格 Block
    ///
    /// `TableCell`: 表格单元格 Block
    ///
    /// `View`: 视图 Block
    ///
    /// `QuoteContainer`: 引用容器 Block
    ///
    /// `Task`: 任务 Block
    ///
    /// `Okr`: OKR Block
    ///
    /// `OkrObjective`: OKR Objective Block
    ///
    /// `OkrKeyResult`: OKR Key Result Block
    ///
    /// `OkrProgress`: OKR 进展 Block
    ///
    /// `AddOns`: 文档小组件
    ///
    /// `Undefined`: 未支持 Block
    #[serde(
        rename = "block_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_type: i64,
    /// 文档 Block
    #[serde(
        rename = "page",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page: TextSubResp,
    /// 文本 Block
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: TextSubResp,
    /// 一级标题 Block
    #[serde(
        rename = "heading1",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading1: TextSubResp,
    /// 二级标题 Block
    #[serde(
        rename = "heading2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading2: TextSubResp,
    /// 三级标题 Block
    #[serde(
        rename = "heading3",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading3: TextSubResp,
    /// 四级标题 Block
    #[serde(
        rename = "heading4",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading4: TextSubResp,
    /// 五级标题 Block
    #[serde(
        rename = "heading5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading5: TextSubResp,
    /// 六级标题 Block
    #[serde(
        rename = "heading6",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading6: TextSubResp,
    /// 七级标题 Block
    #[serde(
        rename = "heading7",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading7: TextSubResp,
    /// 八级标题 Block
    #[serde(
        rename = "heading8",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading8: TextSubResp,
    /// 九级标题 Block
    #[serde(
        rename = "heading9",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub heading9: TextSubResp,
    /// 无序列表 Block
    #[serde(
        rename = "bullet",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bullet: TextSubResp,
    /// 有序列表 Block
    #[serde(
        rename = "ordered",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ordered: TextSubResp,
    /// 代码块 Block
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: TextSubResp,
    /// 引用 Block
    #[serde(
        rename = "quote",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub quote: TextSubResp,
    /// 公式 Block
    #[serde(
        rename = "equation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub equation: TextSubResp,
    /// 待办事项 Block
    #[serde(
        rename = "todo",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub todo: TextSubResp,
    /// 多维表格 Block
    #[serde(
        rename = "bitable",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bitable: BitableSubResp,
    /// 高亮块 Block
    #[serde(
        rename = "callout",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub callout: CalloutSubResp,
    /// 群聊卡片 Block
    #[serde(
        rename = "chat_card",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_card: ChatCardSubResp,
    /// 流程图/UML Block
    #[serde(
        rename = "diagram",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub diagram: DiagramSubResp,
    /// 分割线 Block
    #[serde(
        rename = "divider",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub divider: serde_json::Value,
    /// 文件 Block
    #[serde(
        rename = "file",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file: FileSubResp,
    /// 分栏 Block
    #[serde(
        rename = "grid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub grid: GridSubResp,
    /// 分栏列 Block
    #[serde(
        rename = "grid_column",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub grid_column: GridColumnSubResp,
    /// 内嵌 Block
    #[serde(
        rename = "iframe",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub iframe: IframeSubResp,
    /// 图片 Block
    #[serde(
        rename = "image",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub image: ImageSubResp,
    /// 三方 Block
    #[serde(
        rename = "isv",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub isv: IsvSubResp,
    /// Add-ons
    #[serde(
        rename = "add_ons",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub add_ons: AddOnsSubResp,
    /// 思维笔记 Block
    #[serde(
        rename = "mindnote",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mindnote: MindnoteSubResp,
    /// 电子表格 Block
    #[serde(
        rename = "sheet",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sheet: SheetSubResp,
    /// 表格 Block
    #[serde(
        rename = "table",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table: TableSubResp,
    /// 单元格 Block
    #[serde(
        rename = "table_cell",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_cell: serde_json::Value,
    /// 视图 Block
    #[serde(
        rename = "view",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub view: ViewSubResp,
    /// 未支持 Block
    #[serde(
        rename = "undefined",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub undefined: serde_json::Value,
    /// 引用容器 Block
    #[serde(
        rename = "quote_container",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub quote_container: serde_json::Value,
    /// 任务 Block
    #[serde(
        rename = "task",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task: TaskSubResp,
    /// OKR Block，仅可在使用 `user_access_token` 时创建
    #[serde(
        rename = "okr",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub okr: OkrSubResp,
    /// OKR Objective Block
    #[serde(
        rename = "okr_objective",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub okr_objective: OkrObjectiveSubResp,
    /// OKR Key Result
    #[serde(
        rename = "okr_key_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub okr_key_result: OkrKeyResultSubResp,
    /// OKR 进展信息
    #[serde(
        rename = "okr_progress",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub okr_progress: serde_json::Value,
    /// 评论 id 列表
    ///
    /// **示例值**: "[1660030311959965796]"
    #[serde(
        rename = "comment_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub comment_ids: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextSubResp {
    /// 文本样式
    #[serde(
        rename = "style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub style: TextStyleSubResp,
    /// 文本元素
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "elements",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub elements: Vec<TextElementSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BitableSubResp {
    /// 多维表格文档 Token
    ///
    /// **示例值**: "basbcqH9FfRn3sWCCBOtdNVpCsb_tblSAh8fEwhuMXQg"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CalloutSubResp {
    /// 高亮块背景色
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `LightRed`: 浅红色
    ///
    /// `LightOrange`: 浅橙色
    ///
    /// `LightYellow`: 浅黄色
    ///
    /// `LightGreen`: 浅绿色
    ///
    /// `LightBlue`: 浅蓝色
    ///
    /// `LightPurple`: 浅紫色
    ///
    /// `LightNeutral`: 浅灰色
    ///
    /// `DarkRed`: 暗红色
    ///
    /// `DarkOrange`: 暗橙色
    ///
    /// `DarkYellow`: 暗黄色
    ///
    /// `DarkGreen`: 暗绿色
    ///
    /// `DarkBlue`: 暗蓝色
    ///
    /// `DarkPurple`: 暗紫色
    ///
    /// `DarkNeutral`: 暗灰色
    ///
    /// `DarkSlightGray`: 暗银灰色
    #[serde(
        rename = "background_color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub background_color: i64,
    /// 边框色
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Red`: 红色
    ///
    /// `Orange`: 橙色
    ///
    /// `Yellow`: 黄色
    ///
    /// `Green`: 绿色
    ///
    /// `Blue`: 蓝色
    ///
    /// `Purple`: 紫色
    ///
    /// `Neutral`: 灰色
    #[serde(
        rename = "border_color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub border_color: i64,
    /// 文字颜色
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Pink`: 粉红色
    ///
    /// `Orange`: 橙色
    ///
    /// `Yellow`: 黄色
    ///
    /// `Green`: 绿色
    ///
    /// `Blue`: 蓝色
    ///
    /// `Purple`: 紫色
    ///
    /// `Gray`: 灰色
    #[serde(
        rename = "text_color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_color: i64,
    /// 高亮块图标
    ///
    /// **示例值**: "pushpin"
    #[serde(
        rename = "emoji_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub emoji_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChatCardSubResp {
    /// 群聊天会话 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "oc_2e2ef17a54207c68efdf998554ef27e3"
    #[serde(
        rename = "chat_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub chat_id: String,
    /// 对齐方式
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Left`: 居左排版
    ///
    /// `Center`: 居中排版
    ///
    /// `Right`: 居右排版
    #[serde(
        rename = "align",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub align: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DiagramSubResp {
    /// 绘图类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Flowchart`: 流程图
    ///
    /// `UML`: UML 图
    #[serde(
        rename = "diagram_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub diagram_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileSubResp {
    /// 附件 Token
    ///
    /// **示例值**: "boxbcOj88GDkmWGm2zsTyCBqoLb"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
    /// 文件名
    ///
    /// **示例值**: "文件名"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct GridSubResp {
    /// 分栏列数量
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "column_size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub column_size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct GridColumnSubResp {
    /// 当前分栏列占整个分栏的比例
    ///
    /// **示例值**: "50"
    #[serde(
        rename = "width_ratio",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub width_ratio: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct IframeSubResp {
    /// iframe 的组成元素
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "component",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub component: IframeComponentSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ImageSubResp {
    /// 宽度单位 px
    ///
    /// **示例值**: "4069"
    #[serde(
        rename = "width",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub width: i64,
    /// 高度
    ///
    /// **示例值**: "2480"
    #[serde(
        rename = "height",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub height: i64,
    /// 图片 Token
    ///
    /// **示例值**: "boxbcVA91JtFgNhaCgy6s6wK4he"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct IsvSubResp {
    /// 团队互动应用唯一ID
    ///
    /// **示例值**: "7056882725002051603"
    #[serde(
        rename = "component_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub component_id: String,
    /// 团队互动应用类型，比如信息收集"blk_5f992038c64240015d280958"
    ///
    /// **示例值**: "blk_5f992038c64240015d280958"
    #[serde(
        rename = "component_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub component_type_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AddOnsSubResp {
    /// 文档小组件 ID
    ///
    /// **示例值**: "7056882725002051603"
    #[serde(
        rename = "component_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub component_id: String,
    /// 文档小组件类型，比如问答互动"blk_636a0a6657db8001c8df5488"
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "blk_636a0a6657db8001c8df5488"
    #[serde(
        rename = "component_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub component_type_id: String,
    /// 文档小组件内容数据，JSON 字符串
    ///
    /// **示例值**: ""{}""
    #[serde(
        rename = "record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MindnoteSubResp {
    /// 思维导图 token
    ///
    /// **示例值**: "bmnbcXXGPWfJMwDfGCbCiU14c6f"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SheetSubResp {
    /// 电子表格 block 的 token
    ///
    /// **示例值**: "shtbcW6ufcUtRRet7Hz6Iv4ytzg"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TableSubResp {
    /// 单元格数组，数组元素为 Table Cell Block 的 ID
    #[serde(
        rename = "cells",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cells: Vec<String>,
    /// 表格属性
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "property",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub property: TablePropertySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ViewSubResp {
    /// 视图类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Card`: 卡片视图
    ///
    /// `Preview`: 预览视图
    ///
    /// `Inline`: 内联视图
    #[serde(
        rename = "view_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub view_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TaskSubResp {
    /// 任务 ID，查询具体任务详情见[获取任务详情
    ///
    /// ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/get)
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "task_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrSubResp {
    /// OKR ID，获取需要插入的 OKR ID 可见[获取用户的 OKR 列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/user-okr/list)
    ///
    /// **示例值**: ""7076349900476448796""
    #[serde(
        rename = "okr_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub okr_id: String,
    /// 周期的状态
    ///
    /// **示例值**: ""default""
    ///
    /// **可选值**:
    ///
    /// `Default`: 默认
    ///
    /// `Normal`: 正常
    ///
    /// `Invalid`: 失效
    ///
    /// `Hidden`: 隐藏
    #[serde(
        rename = "period_display_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub period_display_status: String,
    /// 周期名 - 中文
    ///
    /// **示例值**: ""2022 年 4 月 - 6 月""
    #[serde(
        rename = "period_name_zh",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub period_name_zh: String,
    /// 周期名 - 英文
    ///
    /// **示例值**: ""Apr - Jun 2022""
    #[serde(
        rename = "period_name_en",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub period_name_en: String,
    /// OKR 所属的用户 ID
    ///
    /// **示例值**: ""ou_3bbe8a09c20e89cce9bff989ed840674""
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 可见性设置
    #[serde(
        rename = "visible_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visible_setting: OkrVisibleSettingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrObjectiveSubResp {
    /// Objective ID
    ///
    /// **示例值**: ""7109022409227026460""
    #[serde(
        rename = "objective_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub objective_id: String,
    /// 是否在 OKR 平台设置了私密权限
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "confidential",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub confidential: bool,
    /// Objective 的位置编号，对应 Block 中 O1、O2 的 1、2
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "position",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub position: i64,
    /// 打分信息
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score: i64,
    /// OKR Block 中是否展示该 Objective
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visible: bool,
    /// Objective 的权重
    ///
    /// **示例值**: "1.0"
    #[serde(
        rename = "weight",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub weight: f64,
    /// 进展信息
    #[serde(
        rename = "progress_rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate: OkrProgressRateSubResp,
    /// Objective 的文本内容
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: TextSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrKeyResultSubResp {
    /// Key Result 的 ID
    ///
    /// **示例值**: ""7109022573011894300""
    #[serde(
        rename = "kr_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub kr_id: String,
    /// 是否在 OKR 平台设置了私密权限
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "confidential",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub confidential: bool,
    /// Key Result 的位置编号，对应 Block 中 KR1、KR2 的 1、2。
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "position",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub position: i64,
    /// 打分信息
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score: i64,
    /// OKR Block 中此 Key Result 是否可见
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visible: bool,
    /// Key Result 的权重
    ///
    /// **示例值**: "0.5"
    #[serde(
        rename = "weight",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub weight: f64,
    /// 进展信息
    #[serde(
        rename = "progress_rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_rate: OkrProgressRateSubResp,
    /// Key Result 的文本内容
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: TextSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextStyleSubResp {
    /// 对齐方式
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Left`: 居左排版
    ///
    /// `Center`: 居中排版
    ///
    /// `Right`: 居右排版
    #[serde(
        rename = "align",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub align: i64,
    /// todo 的完成状态
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "done",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub done: bool,
    /// 文本的折叠状态
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "folded",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub folded: bool,
    /// 代码块语言
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `PlainText`: PlainText
    ///
    /// `ABAP`: ABAP
    ///
    /// `Ada`: Ada
    ///
    /// `Apache`: Apache
    ///
    /// `Apex`: Apex
    ///
    /// `AssemblyLanguage`: Assembly Language
    ///
    /// `Bash`: Bash
    ///
    /// `CSharp`: CSharp
    ///
    /// `CPlusPlus`: C++
    ///
    /// `C`: C
    ///
    /// `COBOL`: COBOL
    ///
    /// `CSS`: CSS
    ///
    /// `CoffeeScript`: CoffeeScript
    ///
    /// `D`: D
    ///
    /// `Dart`: Dart
    ///
    /// `Delphi`: Delphi
    ///
    /// `Django`: Django
    ///
    /// `Dockerfile`: Dockerfile
    ///
    /// `Erlang`: Erlang
    ///
    /// `Fortran`: Fortran
    ///
    /// `FoxPro`: FoxPro
    ///
    /// `Go`: Go
    ///
    /// `Groovy`: Groovy
    ///
    /// `HTML`: HTML
    ///
    /// `HTMLBars`: HTMLBars
    ///
    /// `HTTP`: HTTP
    ///
    /// `Haskell`: Haskell
    ///
    /// `JSON`: JSON
    ///
    /// `Java`: Java
    ///
    /// `JavaScript`: JavaScript
    ///
    /// `Julia`: Julia
    ///
    /// `Kotlin`: Kotlin
    ///
    /// `LateX`: LateX
    ///
    /// `Lisp`: Lisp
    ///
    /// `Logo`: Logo
    ///
    /// `Lua`: Lua
    ///
    /// `MATLAB`: MATLAB
    ///
    /// `Makefile`: Makefile
    ///
    /// `Markdown`: Markdown
    ///
    /// `Nginx`: Nginx
    ///
    /// `ObjectiveC`: Objective-C
    ///
    /// `OpenEdgeABL`: OpenEdgeABL
    ///
    /// `PHP`: PHP
    ///
    /// `Perl`: Perl
    ///
    /// `PostScript`: PostScript
    ///
    /// `PowerShell`: Power Shell
    ///
    /// `Prolog`: Prolog
    ///
    /// `ProtoBuf`: ProtoBuf
    ///
    /// `Python`: Python
    ///
    /// `R`: R
    ///
    /// `RPG`: RPG
    ///
    /// `Ruby`: Ruby
    ///
    /// `Rust`: Rust
    ///
    /// `SAS`: SAS
    ///
    /// `SCSS`: SCSS
    ///
    /// `SQL`: SQL
    ///
    /// `Scala`: Scala
    ///
    /// `Scheme`: Scheme
    ///
    /// `Scratch`: Scratch
    ///
    /// `Shell`: Shell
    ///
    /// `Swift`: Swift
    ///
    /// `Thrift`: Thrift
    ///
    /// `TypeScript`: TypeScript
    ///
    /// `VBScript`: VBScript
    ///
    /// `VisualBasic`: Visual Basic
    ///
    /// `XML`: XML
    ///
    /// `YAML`: YAML
    ///
    /// `CMake`: CMake
    ///
    /// `Diff`: Diff
    ///
    /// `Gherkin`: Gherkin
    ///
    /// `GraphQL`: GraphQL
    ///
    /// `OpenGLShadingLanguage`: OpenGL Shading Language
    ///
    /// `Properties`: Properties
    ///
    /// `Solidity`: Solidity
    ///
    /// `TOML`: TOML
    #[serde(
        rename = "language",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub language: i64,
    /// 代码块是否自动换行
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "wrap",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub wrap: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct IframeComponentSubResp {
    /// iframe 类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Bilibili`: 哔哩哔哩
    ///
    /// `XiGua`: 西瓜视频
    ///
    /// `Youku`: 优酷
    ///
    /// `Airtable`: Airtable
    ///
    /// `BaiduMap`: 百度地图
    ///
    /// `Amap`: 高德地图
    ///
    /// `TikTok`: Undefined
    ///
    /// `Figma`: Figma
    ///
    /// `Modao`: 墨刀
    ///
    /// `Canva`: Canva
    ///
    /// `CodePen`: CodePen
    ///
    /// `FeiShuWenJuan`: 飞书问卷
    ///
    /// `JinShuJu`: 金数据
    ///
    /// `GoogleMap`: Undefined
    ///
    /// `Youtube`: Undefined
    ///
    /// `Other`: Other
    #[serde(
        rename = "iframe_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub iframe_type: i64,
    /// iframe 目标 url（需要进行 url_encode）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Hi4y1w7V7"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TablePropertySubResp {
    /// 行数
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "row_size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub row_size: i64,
    /// 列数
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "column_size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub column_size: i64,
    /// 列宽，单位px
    ///
    /// **示例值**: "100"
    ///
    /// **数据校验规则**：
    ///
    /// - **最小长度**: `50` 字符
    #[serde(
        rename = "column_width",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub column_width: Vec<i64>,
    /// 单元格合并信息。在创建 Table 时候此属性是只读的，将由后端进行生成。如果需要对单元格进行合并操作，可以通过更新块的子请求 merge_table_cells 来实现。
    #[serde(
        rename = "merge_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub merge_info: Vec<TableMergeInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrVisibleSettingSubResp {
    /// 进展编辑区域是否可见
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "progress_fill_area_visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_fill_area_visible: bool,
    /// 进展状态是否可见
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "progress_status_visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_status_visible: bool,
    /// 分数是否可见
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "score_visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub score_visible: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OkrProgressRateSubResp {
    /// 状态模式
    ///
    /// **示例值**: ""simple""
    ///
    /// **可选值**:
    ///
    /// `Simple`: 简单模式
    ///
    /// `Advanced`: 高级模式
    #[serde(
        rename = "mode",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mode: String,
    /// 当前进度, advanced 模式使用
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "current",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub current: f64,
    /// 当前进度百分比，simple 模式使用
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "percent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub percent: f64,
    /// 进展状态
    ///
    /// **示例值**: ""normal""
    ///
    /// **可选值**:
    ///
    /// `Unset`: 未设置
    ///
    /// `Normal`: 正常
    ///
    /// `Risk`: 有风险
    ///
    /// `Extended`: 已延期
    #[serde(
        rename = "progress_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub progress_status: String,
    /// 进度起始值，advanced 模式使用
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start: f64,
    /// 状态计算类型
    ///
    /// **示例值**: ""default""
    ///
    /// **可选值**:
    ///
    /// `Default`: 以风险最高的 Key Result 状态展示
    ///
    /// `Custom`: 自定义
    #[serde(
        rename = "status_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status_type: String,
    /// 进度目标值，advanced 模式使用
    #[serde(
        rename = "target",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub target: f64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextElementSubResp {
    /// 文字
    #[serde(
        rename = "text_run",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_run: TextRunSubResp,
    /// @用户
    #[serde(
        rename = "mention_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mention_user: MentionUserSubResp,
    /// @文档
    #[serde(
        rename = "mention_doc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mention_doc: MentionDocSubResp,
    /// 日期提醒
    #[serde(
        rename = "reminder",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reminder: ReminderSubResp,
    /// 内联附件
    #[serde(
        rename = "file",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file: InlineFileSubResp,
    /// 未支持的 TextElement
    #[serde(
        rename = "undefined",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub undefined: serde_json::Value,
    /// 内联 block
    #[serde(
        rename = "inline_block",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub inline_block: InlineBlockSubResp,
    /// 公式
    #[serde(
        rename = "equation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub equation: EquationSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextRunSubResp {
    /// 文本内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "文本"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 文本局部样式
    #[serde(
        rename = "text_element_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_element_style: TextElementStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MentionUserSubResp {
    /// 用户 OpenID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_3bbe8a09c20e89cce9bff989ed840674"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 文本局部样式
    #[serde(
        rename = "text_element_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_element_style: TextElementStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MentionDocSubResp {
    /// 云文档 token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxbc873Y7cXD153gXqb76G1Y9b"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
    /// 云文档类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "22"
    ///
    /// **可选值**:
    ///
    /// `Doc`: Doc
    ///
    /// `Sheet`: Sheet
    ///
    /// `Bitable`: Bitable
    ///
    /// `MindNote`: MindNote
    ///
    /// `File`: File
    ///
    /// `Slide`: Slide
    ///
    /// `Wiki`: Wiki
    ///
    /// `Docx`: Docx
    #[serde(
        rename = "obj_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub obj_type: i64,
    /// 云文档链接（需要 url_encode)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https%3A%2F%2Fbytedance.feishu-boe.cn%2Fdocx%2Fdoxbc873Y7cXD153gXqb76G1Y9b"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 文档标题，只读属性
    ///
    /// **示例值**: "undefined"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `800` 字符
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 文本局部样式
    #[serde(
        rename = "text_element_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_element_style: TextElementStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReminderSubResp {
    /// 创建者用户 ID
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "create_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_user_id: String,
    /// 是否通知
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_notify",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_notify: bool,
    /// 是日期还是整点小时
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_whole_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_whole_day: bool,
    /// 事件发生的时间（毫秒级时间戳）
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "expire_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expire_time: String,
    /// 触发通知的时间（毫秒级时间戳）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1643166000000"
    #[serde(
        rename = "notify_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub notify_time: String,
    /// 文本局部样式
    #[serde(
        rename = "text_element_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_element_style: TextElementStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct InlineFileSubResp {
    /// 附件 token
    ///
    /// **示例值**: "boxcnOj88GDkmWGm2zsTyCBqoLb"
    #[serde(
        rename = "file_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: String,
    /// 当前文档中该附件所处的 block 的 id
    ///
    /// **示例值**: "doxcnM46kSWSkgUMW04ldKsJDsc"
    #[serde(
        rename = "source_block_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub source_block_id: String,
    /// 文本局部样式
    #[serde(
        rename = "text_element_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_element_style: TextElementStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct InlineBlockSubResp {
    /// 关联的内联状态的 block 的 block_id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxcnPFi0R56ctbvh2MjkkROFWf"
    #[serde(
        rename = "block_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_id: String,
    /// 文本局部样式
    #[serde(
        rename = "text_element_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_element_style: TextElementStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EquationSubResp {
    /// 符合 KaTeX 语法的公式内容，语法规则请参考：https://katex.org/docs/supported.html
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "E=mc^2\n"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 文本局部样式
    #[serde(
        rename = "text_element_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_element_style: TextElementStyleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TableMergeInfoSubResp {
    /// 从当前行索引起被合并的连续行数
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "row_span",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub row_span: i64,
    /// 从当前列索引起被合并的连续列数
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "col_span",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub col_span: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextElementStyleSubResp {
    /// 加粗
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "bold",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bold: bool,
    /// 斜体
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "italic",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub italic: bool,
    /// 删除线
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "strikethrough",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub strikethrough: bool,
    /// 下划线
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "underline",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub underline: bool,
    /// inline 代码
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "inline_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub inline_code: bool,
    /// 背景色
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `LightPink`: 浅粉红色
    ///
    /// `LightOrange`: 浅橙色
    ///
    /// `LightYellow`: 浅黄色
    ///
    /// `LightGreen`: 浅绿色
    ///
    /// `LightBlue`: 浅蓝色
    ///
    /// `LightPurple`: 浅紫色
    ///
    /// `LightGray`: 浅灰色
    ///
    /// `DarkPink`: 暗粉红色
    ///
    /// `DarkOrange`: 暗橙色
    ///
    /// `DarkYellow`: 暗黄色
    ///
    /// `DarkGreen`: 暗绿色
    ///
    /// `DarkBlue`: 暗蓝色
    ///
    /// `DarkPurple`: 暗紫色
    ///
    /// `DarkGray`: 暗灰色
    ///
    /// `DarkSlightGray`: 暗银灰色
    #[serde(
        rename = "background_color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub background_color: i64,
    /// 字体颜色
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Pink`: 粉红色
    ///
    /// `Orange`: 橙色
    ///
    /// `Yellow`: 黄色
    ///
    /// `Green`: 绿色
    ///
    /// `Blue`: 蓝色
    ///
    /// `Purple`: 紫色
    ///
    /// `Gray`: 灰色
    #[serde(
        rename = "text_color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_color: i64,
    /// 链接
    #[serde(
        rename = "link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub link: LinkSubResp,
    /// 评论 ID 列表。在创建 Block 时，不支持传入评论 ID；在更新文本 Block 的 Element 时，允许将对应版本已存在的评论 ID 移动到同一个 Block 内的任意 Element 中，但不支持传入新的评论 ID。如需查询评论内容请阅览「[获取评论](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/get)」。
    ///
    /// **示例值**: "["1660030311959965796"]"
    #[serde(
        rename = "comment_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub comment_ids: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LinkSubResp {
    /// 超链接指向的 url (需要 url_encode)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https%3A%2F%2Fopen.feishu.cn%2F"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetDocxBlockReq) -> Result<(GetDocxBlockResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetDocxBlockReq) -> Result<(GetDocxBlockResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_docx_block<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetDocxBlockReq, GetDocxBlockResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_docx_block(
            &self,
            req: &GetDocxBlockReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetDocxBlockReq, GetDocxBlockResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::get_docx_block::{
            GetDocxBlockReq, GetDocxBlockResp, GetDocxBlockRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_get_docx_block(|_| Ok((GetDocxBlockResp::default(), CommonResponse::default())))
            .build();
        let res = lark
            .drive()
            .get_docx_block(GetDocxBlockReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .get_docx_block(GetDocxBlockReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "block": {
            "block_id": "doxcnC4cO4qUui6isgnpofh5edc",
            "block_type": 2,
            "parent_id": "doxcnAJ9VRRJqVMYZ1MyKnayXWe",
            "text": {
                "elements": [
                    {
                        "text_run": {
                            "content": "云文档：专为协作而生",
                            "text_element_style": {
                                "link": {
                                    "url": "https%3A%2F%2Fbytedance.feishu.cn%2Fdrive%2Fhome%2F"
                                }
                            }
                        }
                    }
                ],
                "style": {}
            }
        }
    },
    "msg": ""
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetDocxBlockRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
