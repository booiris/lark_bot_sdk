//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/batch_get_tmp_download_url>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-06T12:20:56+00:00**
    ///
    /// ## 获取素材临时下载链接
    ///
    /// 该接口用于获取云文档中素材的临时下载链接。链接的有效期为 24 小时，过期失效。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/batch_get_tmp_download_url>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/drive-v1/media/batch_get_tmp_download_url>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Fmedia%2Fbatch_get_tmp_download_url>
    pub async fn batch_get_drive_media_tmp_download_url(
        &self,
        req: BatchGetDriveMediaTmpDownloadUrlReq,
    ) -> Result<(BatchGetDriveMediaTmpDownloadUrlResp, CommonResponse), Error> {
        self.batch_get_drive_media_tmp_download_url_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_get_drive_media_tmp_download_url](#method.batch_get_drive_media_tmp_download_url) 函数
    pub async fn batch_get_drive_media_tmp_download_url_with_opt(
        &self,
        req: BatchGetDriveMediaTmpDownloadUrlReq,
        method_option: MethodOption,
    ) -> Result<(BatchGetDriveMediaTmpDownloadUrlResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_batch_get_drive_media_tmp_download_url(&req)
            {
                tracing::info!("[lark] Drive#BatchGetDriveMediaTmpDownloadUrl **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#BatchGetDriveMediaTmpDownloadUrl call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "BatchGetDriveMediaTmpDownloadUrl",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/medias/batch_get_tmp_download_url",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchGetDriveMediaTmpDownloadUrlRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchGetDriveMediaTmpDownloadUrlReq {
    /// 素材文件的 token。获取方式如下所示：
    ///
    /// * 新版文档：通过[获取文档所有块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list)接口获取指定文件块（File Block）或图片块（Image Block）的 token，即为素材 token。
    ///
    /// * 电子表格：通过[读取多个范围](https://open.feishu.cn/document/ukTMukTMukTM/ukTMzUjL5EzM14SOxMTN)接口获取指定附件的
    ///
    /// `fileToken`，即为素材的 token。
    ///
    /// * 多维表格：通过[列出记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list)接口获取指定附件的 `file_token`，即为素材的 token。
    ///
    /// 如需一次获取多个素材的下载链接，可多次传递本参数及素材的 token 值，格式如下：
    ///
    /// `https://{url}?file_tokens={token1}&file_tokens={token2}`
    ///
    /// 其中：
    ///
    /// - `file_tokens` 是参数名，可以多次传递
    ///
    /// - `token1` 和 `token2` 为素材的实际 token 值
    ///
    /// - 你最多可一次获取五个素材的下载链接
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "boxcnrHpsg1QDqXAAAyachabcef"
    #[api(
        kind = "query",
        name = "file_tokens",
        v_type = "list",
        option = "false"
    )]
    pub file_tokens: Vec<String>,
    /// 拓展信息，如拥有高级权限的多维表格在下载素材时，需要添加额外的扩展信息作为 URL 查询参数鉴权。详情参考[extra 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)。未填正确填写该参数的接口将返回 403 的 HTTP 状态码。
    ///
    /// **示例值**: "请参考 [extra 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)"
    #[api(kind = "query", name = "extra", v_type = "var", option = "false")]
    pub extra: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchGetDriveMediaTmpDownloadUrlRespInner {
    #[serde(flatten)]
    data: Option<BatchGetDriveMediaTmpDownloadUrlResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchGetDriveMediaTmpDownloadUrlResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 临时下载列表
    #[serde(
        rename = "tmp_download_urls",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tmp_download_urls: Vec<TmpDownloadUrlSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TmpDownloadUrlSubResp {
    /// 素材的 token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "boxcnrHpsg1QDqXAAAyachabcef"
    #[serde(
        rename = "file_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: String,
    /// 素材的临时下载链接
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/authcode/?code=ZDA3MzNiNmUwMjE2MGUzZmQ1OGZlOWYzMWQ4YmI0ZjdfMDYzOWNlZjgyMmI1MmY5NTUxZmM0MjJlYWIyMGVjOWZfSUQ6Njk3NjgzMTY0Mjc5OTI5MjQyMl8xNjI0NDMxMDY3OjE2MjQ1MTc0NjdfVjM"
    #[serde(
        rename = "tmp_download_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tmp_download_url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            BatchGetDriveMediaTmpDownloadUrlReq,
        ) -> Result<(BatchGetDriveMediaTmpDownloadUrlResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    BatchGetDriveMediaTmpDownloadUrlReq,
                )
                    -> Result<(BatchGetDriveMediaTmpDownloadUrlResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_get_drive_media_tmp_download_url<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            BatchGetDriveMediaTmpDownloadUrlReq,
            BatchGetDriveMediaTmpDownloadUrlResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_get_drive_media_tmp_download_url(
            &self,
            req: &BatchGetDriveMediaTmpDownloadUrlReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                BatchGetDriveMediaTmpDownloadUrlReq,
                BatchGetDriveMediaTmpDownloadUrlResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::batch_get_drive_media_tmp_download_url::{
            BatchGetDriveMediaTmpDownloadUrlReq, BatchGetDriveMediaTmpDownloadUrlResp,
            BatchGetDriveMediaTmpDownloadUrlRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_batch_get_drive_media_tmp_download_url(|_| {
                Ok((
                    BatchGetDriveMediaTmpDownloadUrlResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .batch_get_drive_media_tmp_download_url(BatchGetDriveMediaTmpDownloadUrlReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .batch_get_drive_media_tmp_download_url(BatchGetDriveMediaTmpDownloadUrlReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "tmp_download_urls": [
            {
                "file_token": "boxcnrHpsg1QDqXAAAyachabcef",
                "tmp_download_url": "https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/authcode/?code=ZDA3MzNiNmUwMjE2MGUzZmQ1OGZlOWYzMWQ4YmI0ZjdfMDYzOWNlZjgyMmI1MmY5NTUxZmM0MjJlYWIyMGVjOWZfSUQ6Njk3NjgzMTY0Mjc5OTI5MjQyMl8xNjI0NDMxMDY3OjE2MjQ1MTc0NjdfVjM"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchGetDriveMediaTmpDownloadUrlRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
