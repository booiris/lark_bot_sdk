//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T09:16:03+00:00**
    ///
    /// ## 创建导入任务
    ///
    /// 该接口用于创建导入文件的任务，并返回导入任务 ID。导入文件指将本地文件如 Word、TXT、Markdown、Excel 等格式的文件导入为某种格式的飞书在线云文档。该接口为异步接口，需要继续调用[查询导入任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/get)接口获取导入结果。了解完整的导入文件步骤，参考[导入文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/drive-v1/import_task/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Fimport_task%2Fcreate>
    pub async fn create_drive_import_task(
        &self,
        req: CreateDriveImportTaskReq,
    ) -> Result<(CreateDriveImportTaskResp, CommonResponse), Error> {
        self.create_drive_import_task_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_drive_import_task](#method.create_drive_import_task) 函数
    pub async fn create_drive_import_task_with_opt(
        &self,
        req: CreateDriveImportTaskReq,
        method_option: MethodOption,
    ) -> Result<(CreateDriveImportTaskResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_drive_import_task(&req) {
                tracing::info!("[lark] Drive#CreateDriveImportTask **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#CreateDriveImportTask call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "CreateDriveImportTask",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/import_tasks",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateDriveImportTaskRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateDriveImportTaskReq {
    /// 要导入的文件的扩展名。了解支持的文件格式，参考[导入文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)。
    ///
    /// **注意**：此处填写的文件扩展名需与实际文件的后缀名保持严格一致。请注意区分后缀为 “markdown”、“md”、“mark” 的 Markdown 文件，并在填写相关参数时保持后缀名一致。否则将返回 1069910 错误码。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "xlsx"
    #[api(kind = "body", name = "file_extension")]
    pub file_extension: String,
    /// 要导入文件的 token。创建任务前，你需先调用[上传素材](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all)或[上传文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all)接口获取源文件的 token。了解更多，参考[导入文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "boxcnrHpsg1QDqXAAAyachabcef"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `27` 字符
    #[api(kind = "body", name = "file_token")]
    pub file_token: String,
    /// 目标云文档格式。不同文件支持的云文档格式不同。详情参考[导入文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)。可选值如下所示：
    ///
    /// - `docx`：新版文档
    ///
    /// - `sheet`：电子表格
    ///
    /// - `bitable`：多维表格
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "sheet"
    #[api(kind = "body", name = "type")]
    pub body_type: String,
    /// 导入后的在线云文档名称。参数为空时，使用上传本地文件时的文件名。
    ///
    /// **示例值**: "销售表"
    #[api(kind = "body", name = "file_name")]
    pub file_name: Option<String>,
    /// 挂载点（导入后的云文档所在位置）
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "point")]
    pub point: ImportTaskMountPointSubReq,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ImportTaskMountPointSubReq {
    /// 挂载类型。取固定值 1，表示将该云文档挂载至云空间下。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Space`: 挂载到云空间
    #[serde(
        rename = "mount_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mount_type: i64,
    /// 云文档挂载的文件夹的 token，即云空间下文件夹的 token。空表示云空间根目录。了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "AbqrfuRTjlJEIJduwDwcnIabcef"
    #[serde(
        rename = "mount_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mount_key: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateDriveImportTaskRespInner {
    #[serde(flatten)]
    data: Option<CreateDriveImportTaskResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateDriveImportTaskResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 导入任务 ID
    ///
    /// **示例值**: "7369583175086912356"
    #[serde(
        rename = "ticket",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ticket: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateDriveImportTaskReq) -> Result<(CreateDriveImportTaskResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateDriveImportTaskReq,
                ) -> Result<(CreateDriveImportTaskResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_drive_import_task<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateDriveImportTaskReq,
            CreateDriveImportTaskResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_drive_import_task(
            &self,
            req: &CreateDriveImportTaskReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateDriveImportTaskReq, CreateDriveImportTaskResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::create_drive_import_task::{
            CreateDriveImportTaskReq, CreateDriveImportTaskResp, CreateDriveImportTaskRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_create_drive_import_task(|_| {
                Ok((
                    CreateDriveImportTaskResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .create_drive_import_task(CreateDriveImportTaskReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .create_drive_import_task(CreateDriveImportTaskReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "file_extension": "xlsx",
    "file_token": "boxcnrHpsg1QDqXAAAyachabcef",
    "type": "sheet",
    "file_name": "销售表",
    "point": {
        "mount_type": 1,
        "mount_key": "AbqrfuRTjlJEIJduwDwcnIabcef"
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateDriveImportTaskReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "ticket": "7369583175086912356"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateDriveImportTaskRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
