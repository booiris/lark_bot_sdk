//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-setting/update>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T11:17:56+00:00**
    ///
    /// ## 更新知识空间设置
    ///
    /// 根据space_id更新知识空间公共设置
    ///
    /// 知识库权限要求：
    ///
    /// - 为知识空间管理员
    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-setting/update>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/wiki-v2/space-setting/update>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fwiki-v2%2Fspace-setting%2Fupdate>
    pub async fn update_wiki_space_setting(
        &self,
        req: UpdateWikiSpaceSettingReq,
    ) -> Result<(UpdateWikiSpaceSettingResp, CommonResponse), Error> {
        self.update_wiki_space_setting_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_wiki_space_setting](#method.update_wiki_space_setting) 函数
    pub async fn update_wiki_space_setting_with_opt(
        &self,
        req: UpdateWikiSpaceSettingReq,
        method_option: MethodOption,
    ) -> Result<(UpdateWikiSpaceSettingResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_wiki_space_setting(&req) {
                tracing::info!("[lark] Drive#UpdateWikiSpaceSetting **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#UpdateWikiSpaceSetting call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "UpdateWikiSpaceSetting",
            method: http::Method::PUT,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/wiki/v2/spaces/:space_id/setting",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateWikiSpaceSettingRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateWikiSpaceSettingReq {
    /// 知识空间id
    ///
    /// **示例值**: "1565676577122621"
    #[api(kind = "path", name = "space_id")]
    pub space_id: String,

    /// 谁可以创建空间的一级页面： "admin_and_member" = 管理员和成员 "admin"  - 仅管理员
    ///
    /// **示例值**: "admin/admin_and_member"
    #[api(kind = "body", name = "create_setting")]
    pub create_setting: Option<String>,
    /// 可阅读用户可否创建副本/打印/导出/复制： "allow" - 允许 "not_allow" - 不允许
    ///
    /// **示例值**: "allow/not_allow"
    #[api(kind = "body", name = "security_setting")]
    pub security_setting: Option<String>,
    /// 可阅读用户可否评论： "allow" - 允许 "not_allow" - 不允许
    ///
    /// **示例值**: "allow/not_allow"
    #[api(kind = "body", name = "comment_setting")]
    pub comment_setting: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateWikiSpaceSettingRespInner {
    #[serde(flatten)]
    data: Option<UpdateWikiSpaceSettingResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateWikiSpaceSettingResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 知识空间设置
    #[serde(
        rename = "setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub setting: SettingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SettingSubResp {
    /// 谁可以创建空间的一级页面： "admin_and_member" = 管理员和成员 "admin"  - 仅管理员
    ///
    /// **示例值**: "admin/admin_and_member"
    #[serde(
        rename = "create_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_setting: String,
    /// 可阅读用户可否创建副本/打印/导出/复制： "allow" - 允许 "not_allow" - 不允许
    ///
    /// **示例值**: "allow/not_allow"
    #[serde(
        rename = "security_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub security_setting: String,
    /// 可阅读用户可否评论： "allow" - 允许 "not_allow" - 不允许
    ///
    /// **示例值**: "allow/not_allow"
    #[serde(
        rename = "comment_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub comment_setting: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateWikiSpaceSettingReq) -> Result<(UpdateWikiSpaceSettingResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateWikiSpaceSettingReq,
                ) -> Result<(UpdateWikiSpaceSettingResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_wiki_space_setting<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdateWikiSpaceSettingReq,
            UpdateWikiSpaceSettingResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_wiki_space_setting(
            &self,
            req: &UpdateWikiSpaceSettingReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                UpdateWikiSpaceSettingReq,
                UpdateWikiSpaceSettingResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::update_wiki_space_setting::{
            UpdateWikiSpaceSettingReq, UpdateWikiSpaceSettingResp, UpdateWikiSpaceSettingRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_update_wiki_space_setting(|_| {
                Ok((
                    UpdateWikiSpaceSettingResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .update_wiki_space_setting(UpdateWikiSpaceSettingReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .update_wiki_space_setting(UpdateWikiSpaceSettingReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "create_setting": "admin/admin_and_member",
    "security_setting": "allow/not_allow",
    "comment_setting": "allow/not_allow"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateWikiSpaceSettingReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "setting": {
            "create_setting": "admin/admin_and_member",
            "security_setting": "allow/not_allow",
            "comment_setting": "allow/not_allow"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateWikiSpaceSettingRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
