//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T09:16:04+00:00**
    ///
    /// ## 查询导出任务结果
    ///
    /// 根据[创建导出任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create)返回的导出任务 ID（ticket）轮询导出任务结果，并返回导出文件的 token。你可使用该 token 继续调用[下载导出文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download)接口将导出的产物下载到本地。了解完整的导出文件步骤，参考[导出飞书云文档概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/export-user-guide)。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/drive-v1/export_task/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Fexport_task%2Fget>
    pub async fn get_drive_export_task(
        &self,
        req: GetDriveExportTaskReq,
    ) -> Result<(GetDriveExportTaskResp, CommonResponse), Error> {
        self.get_drive_export_task_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_drive_export_task](#method.get_drive_export_task) 函数
    pub async fn get_drive_export_task_with_opt(
        &self,
        req: GetDriveExportTaskReq,
        method_option: MethodOption,
    ) -> Result<(GetDriveExportTaskResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_drive_export_task(&req) {
                tracing::info!("[lark] Drive#GetDriveExportTask **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#GetDriveExportTask call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "GetDriveExportTask",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/export_tasks/:ticket",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetDriveExportTaskRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetDriveExportTaskReq {
    /// 导出任务 ID。调用[创建导出任务](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create) 获取。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6933093124755412345"
    #[api(kind = "path", name = "ticket")]
    pub ticket: String,
    /// 要导出的云文档的 token。获取方式参考[如何获取云文档相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)。你可参考以下请求示例了解如何使用查询参数。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docbcZVGtv1papC6jAVGiyabcef"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `27` 字符
    #[api(kind = "query", name = "token", v_type = "var", option = "false")]
    pub token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetDriveExportTaskRespInner {
    #[serde(flatten)]
    data: Option<GetDriveExportTaskResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetDriveExportTaskResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 导出任务结果
    #[serde(
        rename = "result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub result: ExportTaskSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExportTaskSubResp {
    /// 导出的文件的扩展名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "pdf"
    ///
    /// **可选值**:
    ///
    /// `Docx`: Microsoft Word 格式
    ///
    /// `Pdf`: PDF 格式
    ///
    /// `Xlsx`: Microsoft Excel (XLSX) 格式
    ///
    /// `Csv`: CSV 格式
    #[serde(
        rename = "file_extension",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_extension: String,
    /// 要导出的云文档的类型。可通过云文档的链接判断。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    ///
    /// **可选值**:
    ///
    /// `Doc`: 旧版飞书文档。支持导出扩展名为 docx 和 pdf 的文件。已不推荐使用。
    ///
    /// `Sheet`: 飞书电子表格。支持导出扩展名为 xlsx 和 csv 的文件
    ///
    /// `Bitable`: 飞书多维表格。支持导出扩展名为 xlsx 和 csv 格式的文件
    ///
    /// `Docx`: 新版飞书文档。支持导出扩展名为 docx 和 pdf 格式的文件
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 导出的文件名称
    ///
    /// **示例值**: "docName"
    #[serde(
        rename = "file_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_name: String,
    /// 导出的文件的 token。可用于调用[下载导出文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download)接口将导出的产物下载到本地。
    ///
    /// **示例值**: "boxcnxe5OdjlAkNgSNdsJvabcef"
    #[serde(
        rename = "file_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: String,
    /// 导出文件的大小，单位字节。
    ///
    /// **示例值**: "34356"
    #[serde(
        rename = "file_size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_size: i64,
    /// 导出任务失败的原因
    ///
    /// **示例值**: "success"
    #[serde(
        rename = "job_error_msg",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_error_msg: String,
    /// 导出任务状态
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `Success`: 成功
    ///
    /// `New`: 初始化
    ///
    /// `Processing`: 处理中
    ///
    /// `InternalError`: 内部错误
    ///
    /// `ExportSizeLimit`: 导出文档过大
    ///
    /// `TimeOut`: 处理超时
    ///
    /// `ExportBlockNotPermited`: 导出内容块无权限
    ///
    /// `NoPermission`: 无权限
    ///
    /// `DocsDeleted`: 导出文档已删除
    ///
    /// `ExportDeniedOnCopying`: 创建副本中禁止导出
    ///
    /// `DocsNotExist`: 导出文档不存在
    ///
    /// `ExportImagesExceedLimit`: 导出文档图片过多
    #[serde(
        rename = "job_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_status: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetDriveExportTaskReq) -> Result<(GetDriveExportTaskResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetDriveExportTaskReq) -> Result<(GetDriveExportTaskResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_drive_export_task<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetDriveExportTaskReq, GetDriveExportTaskResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_drive_export_task(
            &self,
            req: &GetDriveExportTaskReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetDriveExportTaskReq, GetDriveExportTaskResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::get_drive_export_task::{
            GetDriveExportTaskReq, GetDriveExportTaskResp, GetDriveExportTaskRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_get_drive_export_task(|_| {
                Ok((GetDriveExportTaskResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .get_drive_export_task(GetDriveExportTaskReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .get_drive_export_task(GetDriveExportTaskReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "result": {
            "file_extension": "pdf",
            "type": "doc",
            "file_name": "docName",
            "file_token": "boxcnxe5OdjlAkNgSNdsJvabcef",
            "file_size": 34356,
            "job_error_msg": "success",
            "job_status": 0
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetDriveExportTaskRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
