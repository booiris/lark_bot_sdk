//! doc url: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T11:17:57+00:00**
    ///
    /// ## 移动云空间文档至知识空间
    ///
    /// 该接口允许移动云空间文档至知识空间，并挂载在指定位置
    ///
    /// ### 移动操作 ###
    ///
    /// 移动后，文档将从“我的空间”或“共享空间”转移至“知识库”后，无法从下列入口查看到文档：
    ///
    /// - 云空间主页：快速访问
    ///
    /// - 我的空间
    ///
    /// - 共享空间
    ///
    /// ### 权限变更 ###
    ///
    /// 移动后，文档会向所有可查看“页面树”的用户显示，默认继承父页面的权限设置。
    ///
    /// </md-alert
    ///
    /// 此接口为异步接口。若移动已完成（或文档已在Wiki中），则直接返回结果（Wiki token）。若尚未完成，则返回task id。请使用[获取任务结果](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get)接口进行查询。
    ///
    /// 知识库权限要求，当前使用的 access token 所代表的应用或用户拥有：
    ///
    /// - 文档可管理权限
    ///
    /// - 原文件夹编辑权限
    ///
    /// - 目标父节点容器编辑权限
    ///
    /// doc: <https://open.larkoffice.com/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/wiki-v2/task/move_docs_to_wiki>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fwiki-v2%2Ftask%2Fmove_docs_to_wiki>
    pub async fn move_docs_to_wiki(
        &self,
        req: MoveDocsToWikiReq,
    ) -> Result<(MoveDocsToWikiResp, CommonResponse), Error> {
        self.move_docs_to_wiki_with_opt(req, Default::default())
            .await
    }

    /// 参见 [move_docs_to_wiki](#method.move_docs_to_wiki) 函数
    pub async fn move_docs_to_wiki_with_opt(
        &self,
        req: MoveDocsToWikiReq,
        method_option: MethodOption,
    ) -> Result<(MoveDocsToWikiResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_move_docs_to_wiki(&req) {
                tracing::info!("[lark] Drive#MoveDocsToWiki **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#MoveDocsToWiki call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "MoveDocsToWiki",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (MoveDocsToWikiRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct MoveDocsToWikiReq {
    /// 知识库id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1565676577122621"
    #[api(kind = "path", name = "space_id")]
    pub space_id: String,

    /// 节点的父亲token。
    ///
    /// 传空或不传时将移动为知识空间一级节点。
    ///
    /// **示例值**: "wikcnKQ1k3p******8Vabce"
    #[api(kind = "body", name = "parent_wiki_token")]
    pub parent_wiki_token: Option<String>,
    /// 文档类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    ///
    /// **可选值**:
    ///
    /// `ObjTypeDoc`: 旧版文档
    ///
    /// `ObjTypeSheet`: 表格
    ///
    /// `ObjTypeBitable`: 多维表格
    ///
    /// `ObjTypeMindNote`: 思维导图
    ///
    /// `ObjTypeDocx`: 新版文档
    ///
    /// `ObjTypeFile`: 文件
    ///
    /// `ObjTypeSlides`: slides（幻灯片）
    #[api(kind = "body", name = "obj_type")]
    pub obj_type: String,
    /// 文档token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doccnzAaOD******Wabcdef"
    #[api(kind = "body", name = "obj_token")]
    pub obj_token: String,
    /// 没有权限时，是否申请移动文档。
    ///
    /// 如果申请移动，文档将在处理人同意时自动移动至指定位置。
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "apply")]
    pub apply: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct MoveDocsToWikiRespInner {
    #[serde(flatten)]
    data: Option<MoveDocsToWikiResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct MoveDocsToWikiResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 移动后的知识库节点token
    ///
    /// **示例值**: "wikbcLZuhp4r9QuJumHzVabcdef"
    #[serde(
        rename = "wiki_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub wiki_token: String,
    /// 任务id
    ///
    /// **示例值**: "7037044037068177428-075c9481e6a0007c1df689dfbe5b55a08b6b06f7"
    #[serde(
        rename = "task_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_id: String,
    /// 是否提交了文档迁入申请
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "applied",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub applied: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(MoveDocsToWikiReq) -> Result<(MoveDocsToWikiResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(MoveDocsToWikiReq) -> Result<(MoveDocsToWikiResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_move_docs_to_wiki<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, MoveDocsToWikiReq, MoveDocsToWikiResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_move_docs_to_wiki(
            &self,
            req: &MoveDocsToWikiReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, MoveDocsToWikiReq, MoveDocsToWikiResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::move_docs_to_wiki::{
            MoveDocsToWikiReq, MoveDocsToWikiResp, MoveDocsToWikiRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_move_docs_to_wiki(|_| {
                Ok((MoveDocsToWikiResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .move_docs_to_wiki(MoveDocsToWikiReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .move_docs_to_wiki(MoveDocsToWikiReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "parent_wiki_token": "wikcnKQ1k3p******8Vabce",
    "obj_type": "doc",
    "obj_token": "doccnzAaOD******Wabcdef"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::MoveDocsToWikiReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "wiki_token": "wikbcLZuhp4r9QuJumHzVabcdef"
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<MoveDocsToWikiRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
