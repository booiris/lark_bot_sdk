//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/batch_query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-04-09T11:08:32+00:00**
    ///
    /// ## 批量获取评论
    ///
    /// 该接口用于根据评论 ID 列表批量获取云文档评论信息，包括评论和回复 ID、回复的内容、评论人和回复人的用户 ID 等。支持返回全局评论以及局部评论（可通过 is_whole 字段区分）。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/batch_query>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/CommentAPI/batch_query>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2FCommentAPI%2Fbatch_query>
    pub async fn batch_get_drive_comment(
        &self,
        req: BatchGetDriveCommentReq,
    ) -> Result<(BatchGetDriveCommentResp, CommonResponse), Error> {
        self.batch_get_drive_comment_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_get_drive_comment](#method.batch_get_drive_comment) 函数
    pub async fn batch_get_drive_comment_with_opt(
        &self,
        req: BatchGetDriveCommentReq,
        method_option: MethodOption,
    ) -> Result<(BatchGetDriveCommentResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_batch_get_drive_comment(&req) {
                tracing::info!("[lark] Drive#BatchGetDriveComment **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#BatchGetDriveComment call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "BatchGetDriveComment",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/files/:file_token/comments/batch_query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchGetDriveCommentRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchGetDriveCommentReq {
    /// 文档 Token
    ///
    /// **示例值**: "doxbcdl03Vsxhm7Qmnj110abcef"
    #[api(kind = "path", name = "file_token")]
    pub file_token: String,
    /// 文档类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docx"
    ///
    /// **可选值**:
    ///
    /// `doc`: 文档类型
    ///
    /// `sheet`: 电子表格类型
    ///
    /// `file`: 文件类型
    ///
    /// `docx`: 新版文档类型
    #[api(kind = "query", name = "file_type", v_type = "var", option = "false")]
    pub file_type: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 需要获取数据的评论 ID ，可通过调用获取云文档所有评论接口获取 comment_id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1654857036541812356"
    #[api(kind = "body", name = "comment_ids")]
    pub comment_ids: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchGetDriveCommentRespInner {
    #[serde(flatten)]
    data: Option<BatchGetDriveCommentResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchGetDriveCommentResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 评论的相关信息、回复的信息、回复分页的信息
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<FileCommentSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileCommentSubResp {
    /// 评论 ID
    ///
    /// **示例值**: "6916106822734512356"
    #[serde(
        rename = "comment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub comment_id: String,
    /// 用户 ID
    ///
    /// **示例值**: "ou_cc19b2bfb93f8a44db4b4d6eababcef"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 创建时间
    ///
    /// **示例值**: "1610281603"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: i64,
    /// 更新时间
    ///
    /// **示例值**: "1610281603"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: i64,
    /// 是否已解决
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_solved",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_solved: bool,
    /// 解决评论时间
    ///
    /// **示例值**: "1610281603"
    #[serde(
        rename = "solved_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub solved_time: i64,
    /// 解决评论者的用户 ID
    ///
    /// **示例值**: "null"
    #[serde(
        rename = "solver_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub solver_user_id: String,
    /// 是否有更多回复
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 回复分页标记
    ///
    /// **示例值**: "6916106822734512356"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否是全文评论
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_whole",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_whole: bool,
    /// 局部评论的引用字段
    ///
    /// **示例值**: "划词评论引用内容"
    #[serde(
        rename = "quote",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub quote: String,
    /// 评论里的回复列表
    #[serde(
        rename = "reply_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reply_list: ReplyListSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReplyListSubResp {
    /// 回复列表
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "replies",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub replies: Vec<FileCommentReplySubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileCommentReplySubResp {
    /// 回复内容
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: ReplyContentSubResp,
    /// 回复 ID
    ///
    /// **示例值**: "6916106822734512356"
    #[serde(
        rename = "reply_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reply_id: String,
    /// 用户 ID
    ///
    /// **示例值**: "ou_cc19b2bfb93f8a44db4b4d6eab2abcef"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 创建时间
    ///
    /// **示例值**: "1610281603"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: i64,
    /// 更新时间
    ///
    /// **示例值**: "1610281603"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: i64,
    /// 回复的其他内容，图片 Token 等
    #[serde(
        rename = "extra",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub extra: ReplyExtraSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReplyContentSubResp {
    /// 回复的内容
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "elements",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub elements: Vec<ReplyElementSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReplyExtraSubResp {
    /// 评论中的图片 Token list
    #[serde(
        rename = "image_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub image_list: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReplyElementSubResp {
    /// 回复的内容元素
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "text_run"
    ///
    /// **可选值**:
    ///
    /// `text_run`: 普通文本
    ///
    /// `docs_link`: at 云文档链接
    ///
    /// `person`: at 联系人
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 文本内容
    #[serde(
        rename = "text_run",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_run: TextRunSubResp,
    /// 添加云文档链接
    #[serde(
        rename = "docs_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub docs_link: DocsLinkSubResp,
    /// 添加用户的 user_id
    #[serde(
        rename = "person",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub person: PersonSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextRunSubResp {
    /// 回复 普通文本
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "comment text"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DocsLinkSubResp {
    /// 回复 at 云文档
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https://example.feishu.cn/docs/doccnHh7U87HOFpii5u5Gabcef"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonSubResp {
    /// 添加用户的 user_id 以@用户
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_cc19b2bfb93f8a44db4b4d6eababcef"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(BatchGetDriveCommentReq) -> Result<(BatchGetDriveCommentResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    BatchGetDriveCommentReq,
                ) -> Result<(BatchGetDriveCommentResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_get_drive_comment<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            BatchGetDriveCommentReq,
            BatchGetDriveCommentResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_get_drive_comment(
            &self,
            req: &BatchGetDriveCommentReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, BatchGetDriveCommentReq, BatchGetDriveCommentResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::batch_get_drive_comment::{
            BatchGetDriveCommentReq, BatchGetDriveCommentResp, BatchGetDriveCommentRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_batch_get_drive_comment(|_| {
                Ok((
                    BatchGetDriveCommentResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .batch_get_drive_comment(BatchGetDriveCommentReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .batch_get_drive_comment(BatchGetDriveCommentReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "comment_ids": [
        "1654857036541812356"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::BatchGetDriveCommentReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "comment_id": "6916106822734512356",
                "user_id": "ou_cc19b2bfb93f8a44db4b4d6eababcef",
                "create_time": 1610281603,
                "update_time": 1610281603,
                "is_solved": false,
                "solved_time": 1610281603,
                "solver_user_id": "null",
                "has_more": false,
                "page_token": "6916106822734512356",
                "is_whole": true,
                "quote": "划词评论引用内容",
                "reply_list": {
                    "replies": [
                        {
                            "content": {
                                "elements": [
                                    {
                                        "type": "text_run",
                                        "text_run": {
                                            "text": "comment text"
                                        },
                                        "docs_link": {
                                            "url": "https://example.feishu.cn/docs/doccnHh7U87HOFpii5u5Gabcef"
                                        },
                                        "person": {
                                            "user_id": "ou_cc19b2bfb93f8a44db4b4d6eababcef"
                                        }
                                    }
                                ]
                            },
                            "reply_id": "6916106822734512356",
                            "user_id": "ou_cc19b2bfb93f8a44db4b4d6eab2abcef",
                            "create_time": 1610281603,
                            "update_time": 1610281603,
                            "extra": {
                                "image_list": [
                                    "xfsfseewewabcef"
                                ]
                            }
                        }
                    ]
                }
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchGetDriveCommentRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
