//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{
    ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqData, StreamReqParam,
};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:26+00:00**
    ///
    /// ## 上传文件
    ///
    /// 将指定文件上传至云空间指定目录中。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/drive-v1/upload/upload_all>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Fupload%2Fupload_all>
    pub async fn upload_drive_file<Data: StreamReqData>(
        &self,
        req: UploadDriveFileReq<Data>,
    ) -> Result<(UploadDriveFileResp, CommonResponse), Error> {
        self.upload_drive_file_with_opt(req, Default::default())
            .await
    }

    /// 参见 [upload_drive_file](#method.upload_drive_file) 函数
    pub async fn upload_drive_file_with_opt<Data: StreamReqData>(
        &self,
        req: UploadDriveFileReq<Data>,
        method_option: MethodOption,
    ) -> Result<(UploadDriveFileResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_upload_drive_file(&req) {
                tracing::info!("[lark] Drive#UploadDriveFile **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#UploadDriveFile call api");

        let req = ApiRequest::<()> {
            scope: "Drive",
            api: "UploadDriveFile",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/files/upload_all",
            stream_param_data: req.gen_stream_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UploadDriveFileRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, lark_bot_sdk_macros::ApiReqParams)]
pub struct UploadDriveFileReq<Data: StreamReqData> {
    /// 要上传的文件的名称。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "demo.pdf"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `250` 字符
    #[api(kind = "stream", name = "file_name", option = "false")]
    pub file_name: String,
    /// 上传点的类型。取固定值 `explorer`，表示将文件上传至云空间中。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "explorer"
    ///
    /// **可选值**:
    ///
    /// `explorer`: 云空间
    #[api(kind = "stream", name = "parent_type", option = "false")]
    pub parent_type: String,
    /// 云空间中文件夹的 token。获取方式见[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "fldbcO1UuPz8VwnpPx5a92abcef"
    #[api(kind = "stream", name = "parent_node", option = "false")]
    pub parent_node: String,
    /// 文件的大小，单位为字节。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1024"
    #[api(kind = "stream", name = "size", option = "false")]
    pub size: i64,
    /// 文件的 Adler-32 校验和
    ///
    /// **示例值**: "3248270248"
    #[api(kind = "stream", name = "checksum", option = "true")]
    pub checksum: Option<String>,
    #[api(kind = "stream", name = "#data#", option = "false")]
    pub data: Data,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UploadDriveFileRespInner {
    #[serde(flatten)]
    data: Option<UploadDriveFileResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UploadDriveFileResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 已上传的文件的 token
    ///
    /// **示例值**: "boxcnrHpsg1QDqXAAAyachabcef"
    #[serde(
        rename = "file_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_token: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<D: StreamReqData>:
        Fn(UploadDriveFileReq<D>) -> Result<(UploadDriveFileResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            D: StreamReqData,
            T: Fn(UploadDriveFileReq<D>) -> Result<(UploadDriveFileResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<D> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_upload_drive_file<T: StreamReqData, F: MockFunc<T>>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UploadDriveFileReq<T>, UploadDriveFileResp, Arc<dyn MockFunc<T>>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_upload_drive_file<T: StreamReqData>(
            &self,
            req: &UploadDriveFileReq<T>,
        ) -> Option<Arc<dyn MockFunc<T>>> {
            do_mock::<Mocker, UploadDriveFileReq<T>, UploadDriveFileResp, Arc<dyn MockFunc<T>>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}
