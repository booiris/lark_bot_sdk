//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download>
// Code generated by gen_api. DO NOT EDIT.

use crate::api::DownloadResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};
use serde::{Deserialize, Serialize};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-14T07:19:53+00:00**
    ///
    /// ## 下载导出文件
    ///
    /// 根据[查询导出任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get)返回的导出文件的 token，下载导出产物到本地。了解完整的导出文件步骤，参考[导出云文档概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/export-user-guide)。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/drive-v1/export_task/download>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Fexport_task%2Fdownload>
    pub async fn download_drive_export_task(
        &self,
        req: DownloadDriveExportTaskReq,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        self.download_drive_export_task_with_opt(req, Default::default())
            .await
    }

    /// 参见 [download_drive_export_task](#method.download_drive_export_task) 函数
    pub async fn download_drive_export_task_with_opt(
        &self,
        req: DownloadDriveExportTaskReq,
        method_option: MethodOption,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_download_drive_export_task(&req) {
                tracing::info!("[lark] Drive#DownloadDriveExportTask **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#DownloadDriveExportTask call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "DownloadDriveExportTask",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/export_tasks/file/:file_token/download",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (bin_data, bin_name, common_resp) = self.cli.do_download_req(req).await?;
        let resp = DownloadResp {
            data: bin_data,
            name: bin_name,
        };

        Ok((resp, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DownloadDriveExportTaskReq {
    /// 导出的文件的 token。可通过调用[查询导出任务结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get)获取该参数的值。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "boxcnxe5OdjlAkNgSNdsJvabcef"
    #[api(kind = "path", name = "file_token")]
    pub file_token: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<IClient: HttpClient>:
        Fn(DownloadDriveExportTaskReq) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            IClient: HttpClient,
            T: Fn(
                    DownloadDriveExportTaskReq,
                ) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<IClient> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_download_drive_export_task<F: MockFunc<IClient>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DownloadDriveExportTaskReq,
            DownloadResp<IClient>,
            Arc<dyn MockFunc<IClient>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_download_drive_export_task(
            &self,
            req: &DownloadDriveExportTaskReq,
        ) -> Option<Arc<dyn MockFunc<IClient>>> {
            do_mock::<
                Mocker,
                DownloadDriveExportTaskReq,
                DownloadResp<IClient>,
                Arc<dyn MockFunc<IClient>>,
            >(self.cli.instance_id, req)
        }
    }
}
