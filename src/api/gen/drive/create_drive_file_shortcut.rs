//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_shortcut>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-29T08:44:28+00:00**
    ///
    /// ## 创建文件快捷方式
    ///
    /// 创建指定文件的快捷方式到云空间的其它文件夹中。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_shortcut>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/drive-v1/file/create_shortcut>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Ffile%2Fcreate_shortcut>
    pub async fn create_drive_file_shortcut(
        &self,
        req: CreateDriveFileShortcutReq,
    ) -> Result<(CreateDriveFileShortcutResp, CommonResponse), Error> {
        self.create_drive_file_shortcut_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_drive_file_shortcut](#method.create_drive_file_shortcut) 函数
    pub async fn create_drive_file_shortcut_with_opt(
        &self,
        req: CreateDriveFileShortcutReq,
        method_option: MethodOption,
    ) -> Result<(CreateDriveFileShortcutResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_drive_file_shortcut(&req) {
                tracing::info!("[lark] Drive#CreateDriveFileShortcut **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#CreateDriveFileShortcut call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "CreateDriveFileShortcut",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/files/create_shortcut",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateDriveFileShortcutRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateDriveFileShortcutReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 目标父文件夹的 token，获取方式见[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "fldbc5qgwyQnO0uedNllWuabcef"
    #[api(kind = "body", name = "parent_token")]
    pub parent_token: String,
    /// 源文件的信息
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "refer_entity")]
    pub refer_entity: ReferEntitySubReq,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReferEntitySubReq {
    /// 源文件的 token。获取方式见[文件概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/file-overview)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxbcGvhSVN0R6octqPwAEabcef"
    #[serde(
        rename = "refer_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub refer_token: String,
    /// 源文件的类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docx"
    ///
    /// **可选值**:
    ///
    /// `File`: 文件
    ///
    /// `Docx`: 新版文档
    ///
    /// `Bitable`: 多维表格
    ///
    /// `Doc`: 旧版文档
    ///
    /// `Sheet`: 电子表格
    ///
    /// `Mindnote`: 思维笔记
    ///
    /// `Slides`: 幻灯片类型
    #[serde(
        rename = "refer_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub refer_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateDriveFileShortcutRespInner {
    #[serde(flatten)]
    data: Option<CreateDriveFileShortcutResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateDriveFileShortcutResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 快捷方式
    #[serde(
        rename = "succ_shortcut_node",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub succ_shortcut_node: FileSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileSubResp {
    /// 文件的 token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxbcGvhSVN0R6octqPwAEabcef"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
    /// 文件名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "快捷方式名称"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `250` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 文件类型，可选值参照请求体的`refer_type`
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docx"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 父文件夹的 token
    ///
    /// **示例值**: "fldbc5qgwyQnO0uedNllWuabcef"
    #[serde(
        rename = "parent_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_token: String,
    /// 访问链接
    ///
    /// **示例值**: "https://example.feishu.cn/docx/doxbcGvhSVN0R6octqPwAEabcef"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 快捷方式的源文件信息
    #[serde(
        rename = "shortcut_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shortcut_info: ShortcutInfoSubResp,
    /// 文件创建时间
    ///
    /// **示例值**: "1686125119"
    #[serde(
        rename = "created_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_time: String,
    /// 文件最近修改时间
    ///
    /// **示例值**: "1686125119"
    #[serde(
        rename = "modified_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modified_time: String,
    /// 文件所有者
    ///
    /// **示例值**: "ou_b13d41c02edc52ce66aaae67bf1abcef"
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShortcutInfoSubResp {
    /// 快捷方式对应的源文件类型，可选值参照请求体的 `refer_type`
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docx"
    #[serde(
        rename = "target_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub target_type: String,
    /// 快捷方式指向的源文件 token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxbcGvhSVN0R6octqPwAEabcef"
    #[serde(
        rename = "target_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub target_token: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateDriveFileShortcutReq,
        ) -> Result<(CreateDriveFileShortcutResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateDriveFileShortcutReq,
                ) -> Result<(CreateDriveFileShortcutResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_drive_file_shortcut<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateDriveFileShortcutReq,
            CreateDriveFileShortcutResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_drive_file_shortcut(
            &self,
            req: &CreateDriveFileShortcutReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateDriveFileShortcutReq,
                CreateDriveFileShortcutResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::create_drive_file_shortcut::{
            CreateDriveFileShortcutReq, CreateDriveFileShortcutResp,
            CreateDriveFileShortcutRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_create_drive_file_shortcut(|_| {
                Ok((
                    CreateDriveFileShortcutResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .create_drive_file_shortcut(CreateDriveFileShortcutReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .create_drive_file_shortcut(CreateDriveFileShortcutReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "parent_token": "fldbc5qgwyQnO0uedNllWuabcef",
    "refer_entity": {
        "refer_token": "doxbcGvhSVN0R6octqPwAEabcef",
        "refer_type": "docx"
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateDriveFileShortcutReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "succ_shortcut_node": {
            "token": "doxbcGvhSVN0R6octqPwAEabcef",
            "name": "快捷方式名称",
            "type": "docx",
            "parent_token": "fldbc5qgwyQnO0uedNllWuabcef",
            "url": "https://example.feishu.cn/docx/doxbcGvhSVN0R6octqPwAEabcef",
            "shortcut_info": {
                "target_type": "docx",
                "target_token": "doxbcGvhSVN0R6octqPwAEabcef"
            },
            "created_time": "1686125119",
            "modified_time": "1686125119",
            "owner_id": "ou_b13d41c02edc52ce66aaae67bf1abcef"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateDriveFileShortcutRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
