//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-29T08:42:14+00:00**
    ///
    /// ## 获取文件夹中的文件清单
    ///
    /// 该接口用于获取用户云空间指定文件夹中文件信息清单。文件的信息包括名称、类型、token、创建时间、所有者 ID 等。
    ///
    /// 了解如何让应用（tenant_access_token）访问个人云空间中的文件夹，参考[云空间常见问题](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/faq)。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fdrive-v1%2Ffolder%2Flist>
    pub async fn get_drive_file_list(
        &self,
        req: GetDriveFileListReq,
    ) -> Result<(GetDriveFileListResp, CommonResponse), Error> {
        self.get_drive_file_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_drive_file_list](#method.get_drive_file_list) 函数
    pub async fn get_drive_file_list_with_opt(
        &self,
        req: GetDriveFileListReq,
        method_option: MethodOption,
    ) -> Result<(GetDriveFileListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_drive_file_list(&req) {
                tracing::info!("[lark] Drive#GetDriveFileList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#GetDriveFileList call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "GetDriveFileList",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/drive/v1/files",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetDriveFileListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetDriveFileListReq {
    /// 指定每页显示的数据项的数量。若获取根目录下的清单，将返回全部数据，不支持分页
    ///
    /// **示例值**: "50"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "MTY1NTA3MTA1OXw3MTA4NDc2MDc1NzkyOTI0Nabcef"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 文件夹的 token。不填写或填空字符串，将获取用户云空间根目录下的清单，且不支持分页。了解如何获取文件夹 token，参考[文件夹概述](https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/folder-overview)。
    ///
    /// **示例值**: "fldbcO1UuPz8VwnpPx5a9abcef"
    #[api(
        kind = "query",
        name = "folder_token",
        v_type = "var",
        option = "false"
    )]
    pub folder_token: String,
    /// 定义清单中文件的排序方式
    ///
    /// **示例值**: "EditedTime"
    ///
    /// **可选值**:
    ///
    /// `EditedTime`: 按编辑时间排序
    ///
    /// `CreatedTime`: 按创建时间排序
    #[api(kind = "query", name = "order_by", v_type = "var", option = "false")]
    pub order_by: String,
    /// 定义清单中文件的排序规则
    ///
    /// **示例值**: "DESC"
    ///
    /// **可选值**:
    ///
    /// `ASC`: 按升序排序
    ///
    /// `DESC`: 按降序排序
    #[api(kind = "query", name = "direction", v_type = "var", option = "false")]
    pub direction: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetDriveFileListRespInner {
    #[serde(flatten)]
    data: Option<GetDriveFileListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetDriveFileListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 文件夹中的文件清单列表
    #[serde(
        rename = "files",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub files: Vec<FileSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回下一次遍历的 page_token，否则不返回。
    ///
    /// **示例值**: "MTY1NTA3MTA1OXw3MTA4NDc2MDc1NzkyOTI0Nabcef"
    #[serde(
        rename = "next_page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub next_page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileSubResp {
    /// 文件标识
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "fldbcO1UuPz8VwnpPx5a9abcef"
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
    /// 文件名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "title"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `250` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 文件类型。可选值有：
    ///
    /// - `doc`：旧版文档
    ///
    /// - `sheet`：表格
    ///
    /// - `mindnote`：思维导图
    ///
    /// - `bitable`：多维表格
    ///
    /// - `file`：文件
    ///
    /// - `docx`：新版文档
    ///
    /// - `folder`：文件夹
    ///
    /// - `shortcut`: 快捷方式（暂不支持）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docx"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 父文件夹标识
    ///
    /// **示例值**: "fldbcO1UuPz8VwnpPx5a9abcef"
    #[serde(
        rename = "parent_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_token: String,
    /// 文件在浏览器中的 URL 链接
    ///
    /// **示例值**: "https://feishu.cn/folder/fldbcO1UuPz8VwnpPx5a9abcef"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 快捷方式类型文件的信息（暂不支持）
    #[serde(
        rename = "shortcut_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shortcut_info: ShortcutInfoSubResp,
    /// 文件创建时间，秒级时间戳
    ///
    /// **示例值**: "1686125119"
    #[serde(
        rename = "created_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_time: String,
    /// 文件最近修改时间，秒级时间戳
    ///
    /// **示例值**: "1686125119"
    #[serde(
        rename = "modified_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub modified_time: String,
    /// 文件所有者的 ID。ID 类型由查询参数中的 `user_id_type` 决定
    ///
    /// **示例值**: "ou_b13d41c02edc52ce66aaae67bf1abcef"
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShortcutInfoSubResp {
    /// 快捷方式指向的原文件类型，包括：
    ///
    /// - `doc`：旧版文档
    ///
    /// - `sheet`：表格
    ///
    /// - `mindnote`：思维导图
    ///
    /// - `bitable`：多维表格
    ///
    /// - `file`：文件
    ///
    /// - `docx`：新版文档
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docx"
    #[serde(
        rename = "target_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub target_type: String,
    /// 快捷方式指向的原文件 token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "docxaO1UuPz8VwnpPx5a9abcef"
    #[serde(
        rename = "target_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub target_token: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetDriveFileListReq) -> Result<(GetDriveFileListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetDriveFileListReq) -> Result<(GetDriveFileListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_drive_file_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetDriveFileListReq, GetDriveFileListResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_drive_file_list(
            &self,
            req: &GetDriveFileListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetDriveFileListReq, GetDriveFileListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::get_drive_file_list::{
            GetDriveFileListReq, GetDriveFileListResp, GetDriveFileListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_get_drive_file_list(|_| {
                Ok((GetDriveFileListResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .get_drive_file_list(GetDriveFileListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .get_drive_file_list(GetDriveFileListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code":0,
    "data":{
        "files":[
            {
                "name":"test pdf.pdf",
                "parent_token":"fldbcO1UuPz8VwnpPx5a9abcef",
                "token":"boxbc0dGSMu23m7QkC1bvabcef",
                "type":"file",
                "created_time":"1679277808",
                "modified_time":"1679277808",
                "owner_id":"ou_20b31734443364ec8a1df89fdf325b44",
                "url":"https://feishu.cn/file/boxbc0dGSMu23m7QkC1bvabcef"
            },
            {
                "name":"test file.docx",
                "parent_token":"fldcnCEG903UUB4fUqfysdabcef",
                "shortcut_info":{
                    "target_token":"boxcnRPaXpD4I6Je9t8k8babcef",
                    "target_type":"file"
                },
                "token":"nodcnVkiLQ6LD4CsUEaANrabcef",
                "type":"shortcut",
                "created_time":"1679295364",
                "modified_time":"1679295364",
                "owner_id":"ou_20b31734443364ec8a1df89fdf325b44",
                "url":"https://feishu.cn/file/boxcnRPaXpD4I6Je9t8k8babcef"
            },
            {
                "name":"test docx",
                "parent_token":"fldcnCEG903UUB4fUqfysdabcef",
                "token":"doxcntan34DX4QoKJu7jJyabcef",
                "type":"docx",
                "created_time":"1679295364",
                "modified_time":"1679295364",
                "owner_id":"ou_20b31734443364ec8a1df89fdf325b44",
                "url":"https://feishu.cn/docx/doxcntan34DX4QoKJu7jJyabcef"
            },
            {
                "name":"test sheet",
                "parent_token":"fldcnCEG903UUB4fUqfysdabcef",
                "token":"shtcnOko1Ad0HU48HH8KHuabcef",
                "type":"sheet",
                "created_time":"1679295364",
                "modified_time":"1679295364",
                "owner_id":"ou_20b31734443364ec8a1df89fdf325b44",
                "url":"https://feishu.cn/sheets/shtcnOko1Ad0HU48HH8KHuabcef"
            }
        ],
        "has_more":false
    },
    "msg":"success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetDriveFileListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
