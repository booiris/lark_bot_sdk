//! doc url: <https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T11:17:42+00:00**
    ///
    /// ## 获取知识空间列表
    ///
    /// 此接口用于获取有权限访问的知识空间列表。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/wiki-v2/space/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fwiki-v2%2Fspace%2Flist>
    pub async fn get_wiki_space_list(
        &self,
        req: GetWikiSpaceListReq,
    ) -> Result<(GetWikiSpaceListResp, CommonResponse), Error> {
        self.get_wiki_space_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_wiki_space_list](#method.get_wiki_space_list) 函数
    pub async fn get_wiki_space_list_with_opt(
        &self,
        req: GetWikiSpaceListReq,
        method_option: MethodOption,
    ) -> Result<(GetWikiSpaceListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_wiki_space_list(&req) {
                tracing::info!("[lark] Drive#GetWikiSpaceList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#GetWikiSpaceList call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "GetWikiSpaceList",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/wiki/v2/spaces",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetWikiSpaceListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetWikiSpaceListReq {
    /// 分页大小
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "1565676577122621"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 当查询个人文档库时，指定返回的文档库名称展示语言。
    ///
    /// **示例值**: "zh"
    ///
    /// **可选值**:
    ///
    /// `LangZH`: 简体中文
    ///
    /// `LangID`: 印尼语
    ///
    /// `LangDE`: 德语
    ///
    /// `LangEN`: 英语
    ///
    /// `LangES`: 西班牙语
    ///
    /// `LangFR`: 法语
    ///
    /// `LangIT`: 意大利语
    ///
    /// `LangPT`: 葡萄牙语
    ///
    /// `LangVI`: 越南语
    ///
    /// `LangRU`: 俄语
    ///
    /// `LangHI`: 印地语
    ///
    /// `LangTH`: 泰语
    ///
    /// `LangKO`: 韩语
    ///
    /// `LangJA`: 日语
    ///
    /// `LangZHHK`: 繁体中文（中国香港）
    ///
    /// `LangZHTW`: 繁体中文（中国台湾）
    #[api(kind = "query", name = "lang", v_type = "var", option = "false")]
    pub lang: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetWikiSpaceListRespInner {
    #[serde(flatten)]
    data: Option<GetWikiSpaceListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetWikiSpaceListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 数据列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<SpaceSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "1565676577122621"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SpaceSubResp {
    /// 知识空间名称
    ///
    /// **示例值**: "workspace name"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 知识空间描述
    ///
    /// **示例值**: "workspace description"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 知识空间 ID
    ///
    /// **示例值**: "123456"
    #[serde(
        rename = "space_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub space_id: String,
    /// 表示知识空间类型
    ///
    /// **示例值**: "team"
    ///
    /// **可选值**:
    ///
    /// `Team`: 团队空间，归团队（多人）管理，可添加多个管理员
    ///
    /// `Person`: 个人空间，归个人管理。一人仅可拥有一个个人空间，无法添加其他管理员
    #[serde(
        rename = "space_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub space_type: String,
    /// 表示知识空间可见性
    ///
    /// **示例值**: "private"
    ///
    /// **可选值**:
    ///
    /// `Public`: 公开空间，租户内所有用户可见，默认为成员权限。无法额外添加成员，但可以添加管理员
    ///
    /// `Private`: 私有空间，仅对知识空间管理员、成员可见，需要手动添加管理员、成员
    #[serde(
        rename = "visibility",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visibility: String,
    /// 表示知识空间的分享状态
    ///
    /// **示例值**: "open"
    ///
    /// **可选值**:
    ///
    /// `Open`: 打开，即知识空间发布到互联网
    ///
    /// `Closed`: 关闭，即知识空间未发布到互联网
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "open_sharing",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_sharing: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetWikiSpaceListReq) -> Result<(GetWikiSpaceListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetWikiSpaceListReq) -> Result<(GetWikiSpaceListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_wiki_space_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetWikiSpaceListReq, GetWikiSpaceListResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_wiki_space_list(
            &self,
            req: &GetWikiSpaceListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetWikiSpaceListReq, GetWikiSpaceListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::get_wiki_space_list::{
            GetWikiSpaceListReq, GetWikiSpaceListResp, GetWikiSpaceListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_get_wiki_space_list(|_| {
                Ok((GetWikiSpaceListResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .get_wiki_space_list(GetWikiSpaceListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .get_wiki_space_list(GetWikiSpaceListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "name": "知识空间",
                "description": "知识空间描述",
                "space_id": "1565676577122621"
            }
        ],
        "page_token": "1565676577122621",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetWikiSpaceListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
