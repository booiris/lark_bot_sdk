//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/update>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-04-09T11:08:33+00:00**
    ///
    /// ## 更新回复的内容
    ///
    /// 更新云文档中的某条回复的内容。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/update>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/CommentAPI/update>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2FCommentAPI%2Fupdate>
    pub async fn update_drive_comment(
        &self,
        req: UpdateDriveCommentReq,
    ) -> Result<(UpdateDriveCommentResp, CommonResponse), Error> {
        self.update_drive_comment_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_drive_comment](#method.update_drive_comment) 函数
    pub async fn update_drive_comment_with_opt(
        &self,
        req: UpdateDriveCommentReq,
        method_option: MethodOption,
    ) -> Result<(UpdateDriveCommentResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_drive_comment(&req) {
                tracing::info!("[lark] Drive#UpdateDriveComment **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#UpdateDriveComment call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "UpdateDriveComment",
            method: http::Method::PUT,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateDriveCommentRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateDriveCommentReq {
    /// 文档 Token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doxbcdl03Vsxhm7Qmnj110abcef"
    #[api(kind = "path", name = "file_token")]
    pub file_token: String,
    /// 评论 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6916106822734578184"
    #[api(kind = "path", name = "comment_id")]
    pub comment_id: String,
    /// 回复 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6916106822734594568"
    #[api(kind = "path", name = "reply_id")]
    pub reply_id: String,
    /// 文档类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    ///
    /// **可选值**:
    ///
    /// `doc`: 文档
    ///
    /// `sheet`: 表格
    ///
    /// `file`: 文件
    ///
    /// `docx`: 新版文档
    #[api(kind = "query", name = "file_type", v_type = "var", option = "false")]
    pub file_type: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 回复内容
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "content")]
    pub content: ReplyContentSubReq,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReplyContentSubReq {
    /// 回复的内容
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "elements",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub elements: Vec<Option<ReplyElementSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReplyElementSubReq {
    /// 回复的内容元素
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "text_run"
    ///
    /// **可选值**:
    ///
    /// `text_run`: 普通文本
    ///
    /// `docs_link`: at 云文档链接
    ///
    /// `person`: at 联系人
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 文本内容
    #[serde(
        rename = "text_run",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_run: Option<TextRunSubReq>,
    /// 添加云文档链接
    #[serde(
        rename = "docs_link",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub docs_link: Option<DocsLinkSubReq>,
    /// 添加用户的 user_id
    #[serde(
        rename = "person",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub person: Option<PersonSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextRunSubReq {
    /// 回复 普通文本
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "comment text"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DocsLinkSubReq {
    /// 回复 at 云文档
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "https://example.feishu.cn/docs/doccnHh7U87HOFpii5u5Gabcef"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonSubReq {
    /// 添加用户的 user_id 以@用户。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_cc19b2bfb93f8a44db4b4d6eababcef"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateDriveCommentRespInner {
    #[serde(flatten)]
    data: Option<UpdateDriveCommentResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateDriveCommentResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateDriveCommentReq) -> Result<(UpdateDriveCommentResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(UpdateDriveCommentReq) -> Result<(UpdateDriveCommentResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_drive_comment<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateDriveCommentReq, UpdateDriveCommentResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_drive_comment(
            &self,
            req: &UpdateDriveCommentReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateDriveCommentReq, UpdateDriveCommentResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::update_drive_comment::{
            UpdateDriveCommentReq, UpdateDriveCommentResp, UpdateDriveCommentRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_update_drive_comment(|_| {
                Ok((UpdateDriveCommentResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .drive()
            .update_drive_comment(UpdateDriveCommentReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .update_drive_comment(UpdateDriveCommentReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "content": {
        "elements": [
            {
                "type": "text_run",
                "text_run": {
                    "text": "comment text"
                },
                "docs_link": {
                    "url": "https://example.feishu.cn/docs/doccnHh7U87HOFpii5u5Gabcef"
                },
                "person": {
                    "user_id": "ou_cc19b2bfb93f8a44db4b4d6eababcef"
                }
            }
        ]
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateDriveCommentReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateDriveCommentRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
