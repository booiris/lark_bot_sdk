//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/delete>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::drive::DriveService;

impl<'c, IStore: Store, IClient: HttpClient> DriveService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T09:16:05+00:00**
    ///
    /// ## 移除协作者权限
    ///
    /// 该接口用于根据文件的 token 移除文档协作者的权限。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/delete>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/permission/permission-member/delete>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fpermission%2Fpermission-member%2Fdelete>
    pub async fn delete_drive_member_permission(
        &self,
        req: DeleteDriveMemberPermissionReq,
    ) -> Result<(DeleteDriveMemberPermissionResp, CommonResponse), Error> {
        self.delete_drive_member_permission_with_opt(req, Default::default())
            .await
    }

    /// 参见 [delete_drive_member_permission](#method.delete_drive_member_permission) 函数
    pub async fn delete_drive_member_permission_with_opt(
        &self,
        req: DeleteDriveMemberPermissionReq,
        method_option: MethodOption,
    ) -> Result<(DeleteDriveMemberPermissionResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_delete_drive_member_permission(&req) {
                tracing::info!("[lark] Drive#DeleteDriveMemberPermission **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Drive#DeleteDriveMemberPermission call api");

        let req = ApiRequest {
            scope: "Drive",
            api: "DeleteDriveMemberPermission",
            method: http::Method::DELETE,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/drive/v1/permissions/:token/members/:member_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (DeleteDriveMemberPermissionRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DeleteDriveMemberPermissionReq {
    /// 文件的 token，获取方式见 [如何获取云文档资源相关 token](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df6)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doccnBKgoMyY5OMbUG6FioTXuBe"
    #[api(kind = "path", name = "token")]
    pub token: String,
    /// 协作者 ID，与协作者 ID 类型需要对应
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "path", name = "member_id")]
    pub member_id: String,
    /// 文件类型，需要与文件的 token 相匹配
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "doc"
    ///
    /// **可选值**:
    ///
    /// `Doc`: 文档
    ///
    /// `Sheet`: 电子表格
    ///
    /// `File`: 云空间文件
    ///
    /// `Wiki`: 知识库节点
    ///
    /// `Bitable`: 多维表格
    ///
    /// `Docx`: 新版文档
    ///
    /// `Folder`: 文件夹
    ///
    /// `Mindnote`: 思维笔记
    ///
    /// `Minutes`: 妙记
    ///
    /// `Slides`: 幻灯片
    #[api(kind = "query", name = "type", v_type = "var", option = "false")]
    pub query_type: String,
    /// 协作者 ID 类型，与协作者 ID 需要对应
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "openid"
    ///
    /// **可选值**:
    ///
    /// `Email`: 邮箱地址
    ///
    /// `OpenID`: 开放平台 ID
    ///
    /// `OpenChatID`: 开放平台群组 ID
    ///
    /// `OpenDepartmentID`: 开放平台部门 ID
    ///
    /// `UserID`: 用户自定义 ID
    ///
    /// `UnionID`: 开放平台 UnionID
    ///
    /// `GroupID`: 自定义用户组 ID
    ///
    /// `WikiSpaceID`: 知识空间 ID
    ///
    /// - **注意**：仅知识库文档支持该参数，当需要操作知识库文档里的「知识库成员」类型协作者时传该参数
    #[api(kind = "query", name = "member_type", v_type = "var", option = "false")]
    pub member_type: String,
    /// 协作者类型
    ///
    /// **注意**：当 `member_type` 参数为 `wikispaceid` 时必须传该参数
    ///
    /// **默认值**：""
    ///
    /// **示例值**: "user"
    ///
    /// **可选值**:
    ///
    /// `user`: 用户
    ///
    /// `chat`: 群组
    ///
    /// `department`: 组织架构
    ///
    /// `group`: 用户组
    ///
    /// `wiki_space_member`: 知识库成员
    ///
    /// - **注意**：在知识库启用了成员分组功能后不支持该参数
    ///
    /// `wiki_space_viewer`: 知识库可阅读成员
    ///
    /// - **注意**：仅在知识库启用了成员分组功能后才支持该参数
    ///
    /// `wiki_space_editor`: 知识库可编辑成员
    ///
    /// - **注意**：仅在知识库启用了成员分组功能后才支持该参数
    #[api(kind = "body", name = "type")]
    pub body_type: Option<String>,
    /// 协作者的权限角色类型
    ///
    /// **示例值**: "container"
    ///
    /// **可选值**:
    ///
    /// `container`: 当前页面及子页面
    ///
    /// `single_page`: 仅当前页面，当且仅当在知识库文档中该参数有效
    #[api(kind = "body", name = "perm_type")]
    pub perm_type: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct DeleteDriveMemberPermissionRespInner {
    #[serde(flatten)]
    data: Option<DeleteDriveMemberPermissionResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct DeleteDriveMemberPermissionResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::drive::DriveServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            DeleteDriveMemberPermissionReq,
        ) -> Result<(DeleteDriveMemberPermissionResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    DeleteDriveMemberPermissionReq,
                )
                    -> Result<(DeleteDriveMemberPermissionResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> DriveServiceMocker<'c, IStore, IClient> {
        pub fn mock_delete_drive_member_permission<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DeleteDriveMemberPermissionReq,
            DeleteDriveMemberPermissionResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_delete_drive_member_permission(
            &self,
            req: &DeleteDriveMemberPermissionReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                DeleteDriveMemberPermissionReq,
                DeleteDriveMemberPermissionResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::drive::delete_drive_member_permission::{
            DeleteDriveMemberPermissionReq, DeleteDriveMemberPermissionResp,
            DeleteDriveMemberPermissionRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .drive()
            .mock()
            .mock_delete_drive_member_permission(|_| {
                Ok((
                    DeleteDriveMemberPermissionResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .drive()
            .delete_drive_member_permission(DeleteDriveMemberPermissionReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .drive()
            .delete_drive_member_permission(DeleteDriveMemberPermissionReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "type": "user",
    "perm_type": "container"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::DeleteDriveMemberPermissionReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<DeleteDriveMemberPermissionRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
