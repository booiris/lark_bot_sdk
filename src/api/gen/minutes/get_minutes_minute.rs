//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/minutes-v1/minute/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::minutes::MinutesService;

impl<'c, IStore: Store, IClient: HttpClient> MinutesService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-29T08:32:39+00:00**
    ///
    /// ## 获取妙记信息
    ///
    /// 通过这个接口，可以得到一篇妙记的基础概述信息，包含 `owner_id`、`create_time`、标题、封面、时长和 URL。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/minutes-v1/minute/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/minutes-v1/minute/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fminutes-v1%2Fminute%2Fget>
    pub async fn get_minutes_minute(
        &self,
        req: GetMinutesMinuteReq,
    ) -> Result<(GetMinutesMinuteResp, CommonResponse), Error> {
        self.get_minutes_minute_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_minutes_minute](#method.get_minutes_minute) 函数
    pub async fn get_minutes_minute_with_opt(
        &self,
        req: GetMinutesMinuteReq,
        method_option: MethodOption,
    ) -> Result<(GetMinutesMinuteResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_minutes_minute(&req) {
                tracing::info!("[lark] Minutes#GetMinutesMinute **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Minutes#GetMinutesMinute call api");

        let req = ApiRequest {
            scope: "Minutes",
            api: "GetMinutesMinute",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/minutes/v1/minutes/:minute_token",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetMinutesMinuteRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetMinutesMinuteReq {
    /// 妙记唯一标识。可从妙记链接中获取，一般为链接中最后一串字符
    ///
    /// **示例值**: "obcnq3b9jl72l83w4f14xxxx"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `24` 字符- `24` 字符
    #[api(kind = "path", name = "minute_token")]
    pub minute_token: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetMinutesMinuteRespInner {
    #[serde(flatten)]
    data: Option<GetMinutesMinuteResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetMinutesMinuteResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 妙记基本信息
    #[serde(
        rename = "minute",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub minute: MinuteSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MinuteSubResp {
    /// 妙记token
    ///
    /// **示例值**: "obcnq3b9jl72l83w4f14xxxx"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `20` 字符- `20` 字符
    #[serde(
        rename = "token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub token: String,
    /// 所有者ID
    ///
    /// **示例值**: "ou_612b787ccd3259fb3c816b3f678dxxxx"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `100` 字符
    #[serde(
        rename = "owner_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub owner_id: String,
    /// 妙记创建时间timestamp（ms级别）
    ///
    /// **示例值**: "1669098360477"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `15` 字符
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 妙记标题
    ///
    /// **示例值**: "xxx的视频会议"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `100000` 字符
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 妙记封面链接
    ///
    /// **示例值**: "https://internal-api-drive-stream.feishu-pre.cn/space/api/box/stream/download/all/boxcncsI4EIhCSA1RLDsXDpxxxx"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[serde(
        rename = "cover",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cover: String,
    /// 妙记时长（ms级别）
    ///
    /// **示例值**: "314000"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `20` 字符
    #[serde(
        rename = "duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub duration: String,
    /// 妙记链接
    ///
    /// **示例值**: "https://bytedance.feishu-pre.cn/minutes/obcnq3b9jl72l83w4f14xxxx"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::minutes::MinutesServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetMinutesMinuteReq) -> Result<(GetMinutesMinuteResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetMinutesMinuteReq) -> Result<(GetMinutesMinuteResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> MinutesServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_minutes_minute<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetMinutesMinuteReq, GetMinutesMinuteResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_minutes_minute(
            &self,
            req: &GetMinutesMinuteReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetMinutesMinuteReq, GetMinutesMinuteResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::minutes::get_minutes_minute::{
            GetMinutesMinuteReq, GetMinutesMinuteResp, GetMinutesMinuteRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .minutes()
            .mock()
            .mock_get_minutes_minute(|_| {
                Ok((GetMinutesMinuteResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .minutes()
            .get_minutes_minute(GetMinutesMinuteReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .minutes()
            .get_minutes_minute(GetMinutesMinuteReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "minute": {
            "token": "obcnq3b9jl72l83w4f14xxxx",
            "owner_id": "ou_612b787ccd3259fb3c816b3f678dxxxx",
            "create_time": "1669098360477",
            "title": "xxx的视频会议",
            "cover": "https://internal-api-drive-stream.feishu-pre.cn/space/api/box/stream/download/all/boxcncsI4EIhCSA1RLDsXDpxxxx",
            "duration": "314000",
            "url": "https://bytedance.feishu-pre.cn/minutes/obcnq3b9jl72l83w4f14xxxx"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetMinutesMinuteRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
