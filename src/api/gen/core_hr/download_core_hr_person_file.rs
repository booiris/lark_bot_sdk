//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/file/get>
// Code generated by gen_api. DO NOT EDIT.

use crate::api::DownloadResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};
use serde::{Deserialize, Serialize};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-02-06T02:37:39+00:00**
    ///
    /// ## 下载文件
    ///
    /// 根据ID下载文件
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/file/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/get-2>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Femployee%2Fperson%2Fget-2>
    pub async fn download_core_hr_person_file(
        &self,
        req: DownloadCoreHrPersonFileReq,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        self.download_core_hr_person_file_with_opt(req, Default::default())
            .await
    }

    /// 参见 [download_core_hr_person_file](#method.download_core_hr_person_file) 函数
    pub async fn download_core_hr_person_file_with_opt(
        &self,
        req: DownloadCoreHrPersonFileReq,
        method_option: MethodOption,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_download_core_hr_person_file(&req) {
                tracing::info!("[lark] CoreHr#DownloadCoreHrPersonFile **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#DownloadCoreHrPersonFile call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "DownloadCoreHrPersonFile",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/corehr/v1/files/:id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (bin_data, bin_name, common_resp) = self.cli.do_download_req(req).await?;
        let resp = DownloadResp {
            data: bin_data,
            name: bin_name,
        };

        Ok((resp, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DownloadCoreHrPersonFileReq {
    /// 上传文件ID
    ///
    /// **示例值**: "150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150100"
    #[api(kind = "path", name = "id")]
    pub id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<IClient: HttpClient>:
        Fn(DownloadCoreHrPersonFileReq) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            IClient: HttpClient,
            T: Fn(
                    DownloadCoreHrPersonFileReq,
                ) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<IClient> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_download_core_hr_person_file<F: MockFunc<IClient>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DownloadCoreHrPersonFileReq,
            DownloadResp<IClient>,
            Arc<dyn MockFunc<IClient>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_download_core_hr_person_file(
            &self,
            req: &DownloadCoreHrPersonFileReq,
        ) -> Option<Arc<dyn MockFunc<IClient>>> {
            do_mock::<
                Mocker,
                DownloadCoreHrPersonFileReq,
                DownloadResp<IClient>,
                Arc<dyn MockFunc<IClient>>,
            >(self.cli.instance_id, req)
        }
    }
}
