//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-29T03:04:33+00:00**
    ///
    /// ## 查询流程实例列表
    ///
    /// 本接口用于查询流程实例列表，支持通过流程定义 ID 等进行查询，其中：
    ///
    /// - 流程实例：是指用户在业务功能或者飞书人事的审批中心发起的具体流程，process_id 是其唯一标识。
    ///
    /// - 流程定义：是指管理员在设置侧配置的流程，类似流程模板，flow_definition_id 是其唯一标识。用户发起的流程是按照对应的流程定义的配置生成。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Fcorehr-v2%2Fprocess%2Flist>
    pub async fn get_core_hr_process_list(
        &self,
        req: GetCoreHrProcessListReq,
    ) -> Result<(GetCoreHrProcessListResp, CommonResponse), Error> {
        self.get_core_hr_process_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_process_list](#method.get_core_hr_process_list) 函数
    pub async fn get_core_hr_process_list_with_opt(
        &self,
        req: GetCoreHrProcessListReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrProcessListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_core_hr_process_list(&req) {
                tracing::info!("[lark] CoreHr#GetCoreHrProcessList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrProcessList call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrProcessList",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/corehr/v2/processes",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrProcessListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrProcessListReq {
    /// 任务查询结束时间，闭区间
    ///
    /// 单位：ms。从 1970 年 1 月 1 日 (UTC/GMT的午夜) 开始经过的毫秒数
    ///
    /// 注意：开始时间和结束时间跨度不能超过 31 天
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1547654251506"
    #[api(
        kind = "query",
        name = "modify_time_to",
        v_type = "var",
        option = "false"
    )]
    pub modify_time_to: String,
    /// 查询流程状态列表。如需一次查询多个状态值,可通过将同一参数名多次传递,并且每次传递不同的参数值。例如:https://{url}?statuses=1&statuses=2
    ///
    /// 可选值：
    ///
    /// - 1：进行中
    ///
    /// - 2：已拒绝
    ///
    /// - 4：已撤回
    ///
    /// - 8：已撤销
    ///
    /// - 9：已完成
    ///
    /// - 15：撤销中
    #[api(kind = "query", name = "statuses", v_type = "list", option = "false")]
    pub statuses: Vec<i64>,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "7278949005675988535"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 任务查询开始时间，闭区间
    ///
    /// 单位：ms。从 1970 年 1 月 1 日 (UTC/GMT的午夜) 开始经过的毫秒数
    ///
    /// 注意：开始时间和结束时间跨度不能超过 31 天
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1547654251506"
    #[api(
        kind = "query",
        name = "modify_time_from",
        v_type = "var",
        option = "false"
    )]
    pub modify_time_from: String,
    /// 流程定义ID
    ///
    /// 可通过[获取单个流程详情](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/get)查询流程实例对应的流程定义ID
    ///
    /// **示例值**: "people_6961286846093788680_7081951411982077732"
    #[api(
        kind = "query",
        name = "flow_definition_id",
        v_type = "var",
        option = "false"
    )]
    pub flow_definition_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrProcessListRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrProcessListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrProcessListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 流程实例ID列表
    ///
    /// 可通过[获取单个流程详情](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/get) 查询流程详情
    #[serde(
        rename = "process_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub process_ids: Vec<String>,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "7278949005675988535"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetCoreHrProcessListReq) -> Result<(GetCoreHrProcessListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrProcessListReq,
                ) -> Result<(GetCoreHrProcessListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_process_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrProcessListReq,
            GetCoreHrProcessListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_process_list(
            &self,
            req: &GetCoreHrProcessListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetCoreHrProcessListReq, GetCoreHrProcessListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_process_list::{
            GetCoreHrProcessListReq, GetCoreHrProcessListResp, GetCoreHrProcessListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_process_list(|_| {
                Ok((
                    GetCoreHrProcessListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_process_list(GetCoreHrProcessListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_process_list(GetCoreHrProcessListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "process_ids": [
            "7278949005675988535"
        ],
        "has_more": true,
        "page_token": "7278949005675988535"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrProcessListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
