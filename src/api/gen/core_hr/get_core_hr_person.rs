//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2023-09-08T01:24:41+00:00**
    ///
    /// ## 查询单个个人信息
    ///
    /// 根据 ID 查询单个人员的个人信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/person/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/employee/person/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Femployee%2Fperson%2Fget>
    pub async fn get_core_hr_person(
        &self,
        req: GetCoreHrPersonReq,
    ) -> Result<(GetCoreHrPersonResp, CommonResponse), Error> {
        self.get_core_hr_person_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_person](#method.get_core_hr_person) 函数
    pub async fn get_core_hr_person_with_opt(
        &self,
        req: GetCoreHrPersonReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrPersonResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_core_hr_person(&req) {
                tracing::info!("[lark] CoreHr#GetCoreHrPerson **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrPerson call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrPerson",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/persons/:person_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrPersonRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrPersonReq {
    /// Person ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1616161616"
    #[api(kind = "path", name = "person_id")]
    pub person_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `people_employee_id`: 以people_employee_id来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrPersonRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrPersonResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrPersonResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 个人信息
    #[serde(
        rename = "person",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub person: PersonSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonSubResp {
    /// 个人手机号
    ///
    /// **示例值**: "11111111111"
    #[serde(
        rename = "phone_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_number: String,
    /// 法定姓名
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "legal_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub legal_name: String,
    /// 常用名
    ///
    /// **示例值**: "张四"
    #[serde(
        rename = "preferred_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub preferred_name: String,
    /// 实体在CoreHR内部的唯一键
    ///
    /// **示例值**: "646465654545"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 姓名
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "name_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name_list: Vec<PersonNameSubResp>,
    /// 性别
    #[serde(
        rename = "gender",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gender: EnumSubResp,
    /// 出生日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "date_of_birth",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_of_birth: String,
    /// 国籍 ID
    ///
    /// **示例值**: "7075702732803278381"
    #[serde(
        rename = "nationality_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub nationality_id: String,
    /// 民族 / 种族，枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "person"
    ///
    /// - custom_api_name = "race"
    #[serde(
        rename = "race",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub race: EnumSubResp,
    /// 婚姻状况，枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "person"
    ///
    /// - custom_api_name = "marital_status"
    ///
    /// <br><b>字段权限要求：</b>
    ///
    /// <br>读写婚姻状况信息(corehr:person.marital_status:write)
    #[serde(
        rename = "marital_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub marital_status: EnumSubResp,
    /// 电话列表
    #[serde(
        rename = "phone_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_list: Vec<PhoneSubResp>,
    /// 地址列表
    #[serde(
        rename = "address_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_list: Vec<AddressSubResp>,
    /// 邮件列表
    #[serde(
        rename = "email_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_list: Vec<EmailSubResp>,
    /// 工作履历
    #[serde(
        rename = "work_experience_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_experience_list: Vec<WorkExperienceSubResp>,
    /// 教育经历
    #[serde(
        rename = "education_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub education_list: Vec<EducationSubResp>,
    /// 银行账号
    #[serde(
        rename = "bank_account_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_account_list: Vec<BankAccountSubResp>,
    /// 证件号码
    #[serde(
        rename = "national_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub national_id_list: Vec<NationalIdSubResp>,
    /// 亲属
    #[serde(
        rename = "dependent_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub dependent_list: Vec<DependentSubResp>,
    /// 紧急联系人
    #[serde(
        rename = "emergency_contact_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub emergency_contact_list: Vec<EmergencyContactSubResp>,
    /// 参加工作日期
    ///
    /// **示例值**: "2020-10-01"
    #[serde(
        rename = "date_entered_workforce",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_entered_workforce: String,
    /// 头像资源的id
    ///
    /// **示例值**: "dfysuc8x76dsfsw"
    #[serde(
        rename = "profile_image_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub profile_image_id: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
    /// 邮箱
    ///
    /// **示例值**: "test@163.com"
    #[serde(
        rename = "email_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_address: String,
    /// 纳税身份信息
    #[serde(
        rename = "resident_tax_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resident_tax_id_list: Vec<String>,
    /// 年龄
    ///
    /// **示例值**: "22"
    #[serde(
        rename = "age",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub age: i64,
    /// 最高学历教育
    #[serde(
        rename = "highest_level_of_education",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub highest_level_of_education: EducationSubResp,
    /// 最高学位教育经历
    #[serde(
        rename = "highest_degree_of_education",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub highest_degree_of_education: EducationSubResp,
    /// 个人资料
    #[serde(
        rename = "personal_profile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub personal_profile: Vec<PersonalProfileSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubResp {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "phone_type"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
    /// 枚举多语展示
    #[serde(
        rename = "display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display: Vec<I18nSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EducationSubResp {
    /// 学校
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "school",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub school: Vec<I18nSubResp>,
    /// 学历
    #[serde(
        rename = "level_of_education",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub level_of_education: EnumSubResp,
    /// 开始日期
    ///
    /// **示例值**: "2011-09-01"
    #[serde(
        rename = "start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_date: String,
    /// 结束日期
    ///
    /// **示例值**: "2015-06-30"
    #[serde(
        rename = "end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_date: String,
    /// 专业
    #[serde(
        rename = "field_of_study",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_of_study: Vec<I18nSubResp>,
    /// 学位
    #[serde(
        rename = "degree",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub degree: EnumSubResp,
    /// 学校名称
    #[serde(
        rename = "school_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub school_name: EnumSubResp,
    /// 专业名称
    #[serde(
        rename = "field_of_study_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_of_study_name: EnumSubResp,
    /// 国家地区ID
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 预期结束日期
    ///
    /// **示例值**: "2011-09-01"
    #[serde(
        rename = "expected_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expected_end_date: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonNameSubResp {
    /// 姓 - 本地文字
    ///
    /// **示例值**: "黄"
    #[serde(
        rename = "local_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_primary: String,
    /// 名 - 本地文字
    ///
    /// **示例值**: "四"
    #[serde(
        rename = "local_first_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_first_name: String,
    /// 国家 / 地区 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6862995757234914824"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 姓名类型
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "name_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name_type: EnumSubResp,
    /// 名 - 第二本地文字
    ///
    /// **示例值**: "五"
    #[serde(
        rename = "local_first_name_2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_first_name_2: String,
    /// 姓 - 第二本地文字
    ///
    /// **示例值**: "王"
    #[serde(
        rename = "local_primary_2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_primary_2: String,
    /// 补充姓名类型
    #[serde(
        rename = "additional_name_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub additional_name_type: EnumSubResp,
    /// 名
    ///
    /// **示例值**: "帅"
    #[serde(
        rename = "first_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub first_name: String,
    /// 全名
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "full_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub full_name: String,
    /// 姓氏称谓
    ///
    /// **示例值**: "王"
    #[serde(
        rename = "hereditary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hereditary: String,
    /// 中间名
    ///
    /// **示例值**: "大"
    #[serde(
        rename = "middle_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub middle_name: String,
    /// 姓
    ///
    /// **示例值**: "王"
    #[serde(
        rename = "name_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name_primary: String,
    /// 第二姓氏
    ///
    /// **示例值**: "王"
    #[serde(
        rename = "secondary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub secondary: String,
    /// 尊称
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "social",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub social: EnumSubResp,
    /// 婚后姓氏
    ///
    /// **示例值**: "王"
    #[serde(
        rename = "tertiary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tertiary: String,
    /// 头衔
    ///
    /// **示例值**: "王"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: EnumSubResp,
    /// 本地中间名
    ///
    /// **示例值**: "大"
    #[serde(
        rename = "local_middle_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_middle_name: String,
    /// 第二姓氏 - 本地文字
    ///
    /// **示例值**: "王"
    #[serde(
        rename = "local_secondary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_secondary: String,
    /// 展示姓名（本地和西方文字）
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "display_name_local_and_western_script",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name_local_and_western_script: String,
    /// 展示姓名（本地文字）
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "display_name_local_script",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name_local_script: String,
    /// 展示姓名（西方文字）
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "display_name_western_script",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name_western_script: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PhoneSubResp {
    /// 国家区号，枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "phone"
    ///
    /// - custom_api_name = "international_area_code"
    #[serde(
        rename = "international_area_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub international_area_code: EnumSubResp,
    /// 电话号码
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "010-12345678"
    #[serde(
        rename = "phone_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_number: String,
    /// 完整电话号码
    ///
    /// **示例值**: "+86 010-12345678"
    #[serde(
        rename = "formatted_phone_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub formatted_phone_number: String,
    /// 设备类型，可选值如下：
    ///
    /// - mobile_phone：手机
    ///
    /// - landline：座机
    ///
    /// - fax：传真
    #[serde(
        rename = "device_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub device_type: EnumSubResp,
    /// 电话用途，可选值如下：
    ///
    /// - home：家庭
    ///
    /// - work：工作
    ///
    /// - emergency_contact：紧急联系人
    ///
    /// - company：公司
    #[serde(
        rename = "phone_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_usage: EnumSubResp,
    /// 主要电话
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary: bool,
    /// 公开电话
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_public",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_public: bool,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AddressSubResp {
    /// 完整地址（本地文字）
    ///
    /// **示例值**: "中国北京北京"
    #[serde(
        rename = "full_address_local_script",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub full_address_local_script: String,
    /// 完整地址（西方文字）
    ///
    /// **示例值**: "Beijing, Beijing, China,"
    #[serde(
        rename = "full_address_western_script",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub full_address_western_script: String,
    /// 地址ID
    ///
    /// **示例值**: "6989822217869624863"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 国家 / 地区
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6862995757234914824"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 主要行政区
    ///
    /// **示例值**: "6863326815667095047"
    #[serde(
        rename = "region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub region_id: String,
    /// 城市
    ///
    /// **示例值**: "6863333254578046471"
    #[serde(
        rename = "city_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city_id: String,
    /// 区/县
    ///
    /// **示例值**: "6863333516579440141"
    #[serde(
        rename = "distinct_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub distinct_id: String,
    /// 地址行 1（非拉丁语系的本地文字）
    ///
    /// **示例值**: "丹佛测试地址-纽埃时区"
    #[serde(
        rename = "local_address_line1",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line1: String,
    /// 地址行 2（非拉丁语系的本地文字）
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "local_address_line2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line2: String,
    /// 地址行 3（非拉丁语系的本地文字）
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "local_address_line3",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line3: String,
    /// 地址行 4（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line4",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line4: String,
    /// 地址行 5（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line5: String,
    /// 地址行 6（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line6",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line6: String,
    /// 地址行 7（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line7",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line7: String,
    /// 地址行 8（非拉丁语系的本地文字）
    ///
    /// **示例值**: "rafSu"
    #[serde(
        rename = "local_address_line8",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line8: String,
    /// 地址行 9（非拉丁语系的本地文字）
    ///
    /// **示例值**: "McPRG"
    #[serde(
        rename = "local_address_line9",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line9: String,
    /// 邮政编码
    ///
    /// **示例值**: "611530"
    #[serde(
        rename = "postal_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub postal_code: String,
    /// 地址类型
    #[serde(
        rename = "address_type_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_type_list: Vec<EnumSubResp>,
    /// 主要地址
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary: bool,
    /// 公开地址
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_public",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_public: bool,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmailSubResp {
    /// 邮箱号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "12456@test.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 主要邮箱
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary: bool,
    /// 公开邮箱
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_public",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_public: bool,
    /// 邮箱用途，枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "email"
    ///
    /// - custom_api_name = "email_usage"
    #[serde(
        rename = "email_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_usage: EnumSubResp,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct WorkExperienceSubResp {
    /// 公司 / 组织
    #[serde(
        rename = "company_organization",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub company_organization: Vec<I18nSubResp>,
    /// 部门
    #[serde(
        rename = "department",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department: Vec<I18nSubResp>,
    /// 岗位
    #[serde(
        rename = "job",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job: Vec<I18nSubResp>,
    /// 工作描述
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: Vec<I18nSubResp>,
    /// 开始日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_date: String,
    /// 结束日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_date: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BankAccountSubResp {
    /// 银行名称
    ///
    /// **示例值**: "中国农业银行"
    #[serde(
        rename = "bank_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_name: String,
    /// 银行账号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6231200000001223"
    #[serde(
        rename = "bank_account_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_account_number: String,
    /// 开户人姓名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "孟十五"
    #[serde(
        rename = "account_holder",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub account_holder: String,
    /// 银行名称（该字段待作废，请勿使用）
    #[serde(
        rename = "bank",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank: EnumSubResp,
    /// 支行名称
    ///
    /// **示例值**: "中国农业银行支行"
    #[serde(
        rename = "branch_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub branch_name: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
    /// 国家/地区id，详细信息可通过【查询国家/地区信息】接口查询获得
    ///
    /// **示例值**: "12"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 银行卡用途，枚举值可通过文档【飞书人事枚举常量】银行卡用途（Bank Account Usage）枚举定义部分获得
    #[serde(
        rename = "bank_account_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_account_usage: Vec<EnumSubResp>,
    /// 银行卡类型，枚举值可通过文档【飞书人事枚举常量】银行卡类型（Bank Account Type）枚举定义部分获得
    #[serde(
        rename = "bank_account_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_account_type: EnumSubResp,
    /// 货币id
    ///
    /// **示例值**: "12QueryCountryRegionSubdivisionDataReq"
    #[serde(
        rename = "currency_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct NationalIdSubResp {
    /// 国家证件类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6863330041896371725"
    #[serde(
        rename = "national_id_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub national_id_type_id: String,
    /// 证件号码
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1231131333"
    #[serde(
        rename = "national_id_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub national_id_number: String,
    /// 证件签发日期
    ///
    /// **示例值**: "2020-04-01"
    #[serde(
        rename = "issue_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub issue_date: String,
    /// 证件到期日期
    ///
    /// **示例值**: "2020-05-21"
    #[serde(
        rename = "expiration_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiration_date: String,
    /// 国家 / 地区
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6862995757234914824"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 证件签发机构
    ///
    /// **示例值**: "北京市公安局"
    #[serde(
        rename = "issued_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub issued_by: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DependentSubResp {
    /// 姓名
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: PersonNameSubResp,
    /// 关系
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "relationship",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub relationship: EnumSubResp,
    /// 性别
    #[serde(
        rename = "gender",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gender: EnumSubResp,
    /// 生日
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "date_of_birth",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_of_birth: String,
    /// 国籍 ID ，该字段已作废，请使用 nationality_id_v2 字段
    ///
    /// **示例值**: "7075702734054164011"
    #[serde(
        rename = "nationality_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub nationality_id: String,
    /// 证件号码
    #[serde(
        rename = "national_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub national_id_list: Vec<NationalIdSubResp>,
    /// 配偶工作状态
    #[serde(
        rename = "spouses_working_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub spouses_working_status: EnumSubResp,
    /// 包含家属医疗保险
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_this_person_covered_by_health_insurance",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_this_person_covered_by_health_insurance: bool,
    /// 允许家属抵扣税款
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_this_person_allowed_for_tax_deduction",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_this_person_allowed_for_tax_deduction: bool,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
    /// 家庭成员姓名
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "dependent_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub dependent_name: String,
    /// 工作单位
    ///
    /// **示例值**: "海淀区交警大队"
    #[serde(
        rename = "employer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employer: String,
    /// 岗位
    ///
    /// **示例值**: "保安"
    #[serde(
        rename = "job",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job: String,
    /// 电话
    #[serde(
        rename = "phone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone: PhoneSubResp,
    /// 联系地址
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: AddressSubResp,
    /// 出生证明
    #[serde(
        rename = "birth_certificate_of_child",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub birth_certificate_of_child: Vec<FileSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmergencyContactSubResp {
    /// 姓名
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: PersonNameSubResp,
    /// 关系
    #[serde(
        rename = "relationship",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub relationship: EnumSubResp,
    /// 电话
    #[serde(
        rename = "phone_ist",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_ist: Vec<PhoneSubResp>,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
    /// 法定姓名
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "legal_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub legal_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ObjectFieldDataSubResp {
    /// 字段名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(123, 123.23, true, [\"id1\",\"id2\], 2006-01-02 15:04:05])
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "Sandy"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonalProfileSubResp {
    /// 个人资料 ID
    ///
    /// **示例值**: "150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150200"
    #[serde(
        rename = "personal_profile_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub personal_profile_id: String,
    /// 资料类型
    #[serde(
        rename = "personal_profile_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub personal_profile_type: EnumSubResp,
    /// 上传文件列表
    #[serde(
        rename = "files",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub files: Vec<FileSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileSubResp {
    /// 上传文件ID
    ///
    /// **示例值**: "150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150200"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetCoreHrPersonReq) -> Result<(GetCoreHrPersonResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetCoreHrPersonReq) -> Result<(GetCoreHrPersonResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_person<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetCoreHrPersonReq, GetCoreHrPersonResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_person(
            &self,
            req: &GetCoreHrPersonReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetCoreHrPersonReq, GetCoreHrPersonResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_person::{
            GetCoreHrPersonReq, GetCoreHrPersonResp, GetCoreHrPersonRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_person(|_| {
                Ok((GetCoreHrPersonResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_person(GetCoreHrPersonReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_person(GetCoreHrPersonReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "person": {
            "phone_number": "11111111111",
            "legal_name": "张三",
            "preferred_name": "张四",
            "id": "646465654545",
            "name_list": [
                {
                    "local_primary": "黄",
                    "local_first_name": "四",
                    "country_region_id": "6862995757234914824",
                    "name_type": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "local_first_name_2": "五",
                    "local_primary_2": "王",
                    "additional_name_type": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "first_name": "帅",
                    "full_name": "刘梓新",
                    "hereditary": "王",
                    "middle_name": "大",
                    "name_primary": "王",
                    "secondary": "王",
                    "social": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "tertiary": "王",
                    "title": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "local_middle_name": "大",
                    "local_secondary": "王",
                    "display_name_local_and_western_script": "刘梓新",
                    "display_name_local_script": "刘梓新",
                    "display_name_western_script": "刘梓新",
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ]
                }
            ],
            "gender": {
                "enum_name": "phone_type",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ]
            },
            "date_of_birth": "2020-01-01",
            "nationality_id": "7075702732803278381",
            "race": {
                "enum_name": "phone_type",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ]
            },
            "marital_status": {
                "enum_name": "phone_type",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ]
            },
            "phone_list": [
                {
                    "international_area_code": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "phone_number": "010-12345678",
                    "formatted_phone_number": "+86 010-12345678",
                    "device_type": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "phone_usage": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "is_primary": true,
                    "is_public": true,
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ]
                }
            ],
            "address_list": [
                {
                    "full_address_local_script": "中国北京北京",
                    "full_address_western_script": "Beijing, Beijing, China,",
                    "id": "6989822217869624863",
                    "country_region_id": "6862995757234914824",
                    "region_id": "6863326815667095047",
                    "city_id": "6863333254578046471",
                    "distinct_id": "6863333516579440141",
                    "local_address_line1": "丹佛测试地址-纽埃时区",
                    "local_address_line2": "PoewH",
                    "local_address_line3": "PoewH",
                    "local_address_line4": "jmwJc",
                    "local_address_line5": "jmwJc",
                    "local_address_line6": "jmwJc",
                    "local_address_line7": "jmwJc",
                    "local_address_line8": "rafSu",
                    "local_address_line9": "McPRG",
                    "postal_code": "611530",
                    "address_type_list": [
                        {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        }
                    ],
                    "is_primary": true,
                    "is_public": true,
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ]
                }
            ],
            "email_list": [
                {
                    "email": "12456@test.com",
                    "is_primary": true,
                    "is_public": true,
                    "email_usage": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ]
                }
            ],
            "work_experience_list": [
                {
                    "company_organization": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ],
                    "department": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ],
                    "job": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ],
                    "description": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ],
                    "start_date": "2020-01-01",
                    "end_date": "2020-01-01",
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ]
                }
            ],
            "education_list": [
                {
                    "school": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ],
                    "level_of_education": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "start_date": "2011-09-01",
                    "end_date": "2015-06-30",
                    "field_of_study": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ],
                    "degree": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "school_name": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "field_of_study_name": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "country_region_id": "1",
                    "expected_end_date": "2011-09-01",
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ]
                }
            ],
            "bank_account_list": [
                {
                    "bank_name": "中国农业银行",
                    "bank_account_number": "6231200000001223",
                    "account_holder": "孟十五",
                    "bank": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "branch_name": "中国农业银行支行",
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ],
                    "country_region_id": "12",
                    "bank_account_usage": [
                        {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        }
                    ],
                    "bank_account_type": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "currency_id": "12QueryCountryRegionSubdivisionDataReq"
                }
            ],
            "national_id_list": [
                {
                    "national_id_type_id": "6863330041896371725",
                    "national_id_number": "1231131333",
                    "issue_date": "2020-04-01",
                    "expiration_date": "2020-05-21",
                    "country_region_id": "6862995757234914824",
                    "issued_by": "北京市公安局",
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ]
                }
            ],
            "dependent_list": [
                {
                    "name": {
                        "local_primary": "黄",
                        "local_first_name": "四",
                        "country_region_id": "6862995757234914824",
                        "name_type": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "local_first_name_2": "五",
                        "local_primary_2": "王",
                        "additional_name_type": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "first_name": "帅",
                        "full_name": "刘梓新",
                        "hereditary": "王",
                        "custom_name": "刘梓新",
                        "custom_local_name": "刘梓新",
                        "middle_name": "大",
                        "name_primary": "王",
                        "secondary": "王",
                        "social": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "tertiary": "王",
                        "title": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "local_middle_name": "大",
                        "local_secondary": "王",
                        "display_name_local_and_western_script": "刘梓新",
                        "display_name_local_script": "刘梓新",
                        "display_name_western_script": "刘梓新",
                        "custom_fields": [
                            {
                                "field_name": "name",
                                "value": "Sandy"
                            }
                        ]
                    },
                    "relationship": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "gender": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "date_of_birth": "2020-01-01",
                    "nationality_id": "7075702734054164011",
                    "national_id_list": [
                        {
                            "national_id_type_id": "6863330041896371725",
                            "national_id_number": "1231131333",
                            "issue_date": "2020-04-01",
                            "expiration_date": "2020-05-21",
                            "country_region_id": "6862995757234914824",
                            "issued_by": "北京市公安局",
                            "custom_fields": [
                                {
                                    "field_name": "name",
                                    "value": "Sandy"
                                }
                            ]
                        }
                    ],
                    "spouses_working_status": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "is_this_person_covered_by_health_insurance": true,
                    "is_this_person_allowed_for_tax_deduction": false,
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ],
                    "dependent_name": "张三",
                    "employer": "海淀区交警大队",
                    "job": "保安",
                    "phone": {
                        "international_area_code": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "phone_number": "010-12345678",
                        "formatted_phone_number": "+86 010-12345678",
                        "device_type": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "phone_usage": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "is_primary": true,
                        "is_public": true,
                        "custom_fields": [
                            {
                                "field_name": "name",
                                "value": "Sandy"
                            }
                        ]
                    },
                    "address": {
                        "full_address_local_script": "中国北京北京",
                        "full_address_western_script": "Beijing, Beijing, China,",
                        "id": "6989822217869624863",
                        "country_region_id": "6862995757234914824",
                        "region_id": "6863326815667095047",
                        "city_id": "6863333254578046471",
                        "distinct_id": "6863333516579440141",
                        "local_address_line1": "丹佛测试地址-纽埃时区",
                        "local_address_line2": "PoewH",
                        "local_address_line3": "PoewH",
                        "local_address_line4": "jmwJc",
                        "local_address_line5": "jmwJc",
                        "local_address_line6": "jmwJc",
                        "local_address_line7": "jmwJc",
                        "local_address_line8": "rafSu",
                        "local_address_line9": "McPRG",
                        "postal_code": "611530",
                        "address_type_list": [
                            {
                                "enum_name": "phone_type",
                                "display": [
                                    {
                                        "lang": "zh-CN",
                                        "value": "刘梓新"
                                    }
                                ]
                            }
                        ],
                        "is_primary": true,
                        "is_public": true,
                        "custom_fields": [
                            {
                                "field_name": "name",
                                "value": "Sandy"
                            }
                        ]
                    },
                    "birth_certificate_of_child": [
                        {
                            "id": "150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150200"
                        }
                    ]
                }
            ],
            "emergency_contact_list": [
                {
                    "name": {
                        "local_primary": "黄",
                        "local_first_name": "四",
                        "country_region_id": "6862995757234914824",
                        "name_type": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "local_first_name_2": "五",
                        "local_primary_2": "王",
                        "additional_name_type": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "first_name": "帅",
                        "full_name": "刘梓新",
                        "hereditary": "王",
                        "custom_name": "刘梓新",
                        "custom_local_name": "刘梓新",
                        "middle_name": "大",
                        "name_primary": "王",
                        "secondary": "王",
                        "social": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "tertiary": "王",
                        "title": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "刘梓新"
                                }
                            ]
                        },
                        "local_middle_name": "大",
                        "local_secondary": "王",
                        "display_name_local_and_western_script": "刘梓新",
                        "display_name_local_script": "刘梓新",
                        "display_name_western_script": "刘梓新",
                        "custom_fields": [
                            {
                                "field_name": "name",
                                "value": "Sandy"
                            }
                        ]
                    },
                    "relationship": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "phone_ist": [
                        {
                            "international_area_code": {
                                "enum_name": "phone_type",
                                "display": [
                                    {
                                        "lang": "zh-CN",
                                        "value": "刘梓新"
                                    }
                                ]
                            },
                            "phone_number": "010-12345678",
                            "formatted_phone_number": "+86 010-12345678",
                            "device_type": {
                                "enum_name": "phone_type",
                                "display": [
                                    {
                                        "lang": "zh-CN",
                                        "value": "刘梓新"
                                    }
                                ]
                            },
                            "phone_usage": {
                                "enum_name": "phone_type",
                                "display": [
                                    {
                                        "lang": "zh-CN",
                                        "value": "刘梓新"
                                    }
                                ]
                            },
                            "is_primary": true,
                            "is_public": true,
                            "custom_fields": [
                                {
                                    "field_name": "name",
                                    "value": "Sandy"
                                }
                            ]
                        }
                    ],
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "Sandy"
                        }
                    ],
                    "legal_name": "张三"
                }
            ],
            "date_entered_workforce": "2020-10-01",
            "profile_image_id": "dfysuc8x76dsfsw",
            "custom_fields": [
                {
                    "field_name": "name",
                    "value": "Sandy"
                }
            ],
            "email_address": "test@163.com",
            "resident_tax_id_list": [
                "123456"
            ],
            "age": 22,
            "highest_level_of_education": {
                "school": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ],
                "level_of_education": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "start_date": "2011-09-01",
                "end_date": "2015-06-30",
                "field_of_study": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ],
                "degree": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "school_name": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "field_of_study_name": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "country_region_id": "1",
                "expected_end_date": "2011-09-01",
                "custom_fields": [
                    {
                        "field_name": "name",
                        "value": "Sandy"
                    }
                ]
            },
            "highest_degree_of_education": {
                "school": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ],
                "level_of_education": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "start_date": "2011-09-01",
                "end_date": "2015-06-30",
                "field_of_study": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ],
                "degree": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "school_name": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "field_of_study_name": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "刘梓新"
                        }
                    ]
                },
                "country_region_id": "1",
                "expected_end_date": "2011-09-01",
                "custom_fields": [
                    {
                        "field_name": "name",
                        "value": "Sandy"
                    }
                ]
            },
            "personal_profile": [
                {
                    "personal_profile_id": "150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150200",
                    "personal_profile_type": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "files": [
                        {
                            "id": "150018109586e8ea745e47ae8feb3722dbe1d03a181336393633393133303431393831343930373235150200"
                        }
                    ]
                }
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrPersonRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
