//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/search>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-15T10:51:14+00:00**
    ///
    /// ## 搜索离职信息
    ///
    /// 该接口支持根据员工ID、离职审批发起时间和离职日期等字段搜索离职信息，可获取包括离职日期、离职原因、离职状态和流程审批状态等信息。
    ///
    /// 注意：该接口会按照应用拥有的「员工数据」的权限范围返回数据，请确定在「开发者后台 - 权限管理 - 数据权限-飞书人事（企业版）数据权限」中申请了「员工资源」权限范围。
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/search>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/corehr-v1/offboarding/search>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Foffboarding%2Fsearch>
    pub async fn search_core_hr_offboarding(
        &self,
        req: SearchCoreHrOffboardingReq,
    ) -> Result<(SearchCoreHrOffboardingResp, CommonResponse), Error> {
        self.search_core_hr_offboarding_with_opt(req, Default::default())
            .await
    }

    /// 参见 [search_core_hr_offboarding](#method.search_core_hr_offboarding) 函数
    pub async fn search_core_hr_offboarding_with_opt(
        &self,
        req: SearchCoreHrOffboardingReq,
        method_option: MethodOption,
    ) -> Result<(SearchCoreHrOffboardingResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_search_core_hr_offboarding(&req) {
                tracing::info!("[lark] CoreHr#SearchCoreHrOffboarding **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#SearchCoreHrOffboarding call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "SearchCoreHrOffboarding",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/offboardings/search",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SearchCoreHrOffboardingRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SearchCoreHrOffboardingReq {
    /// 分页大小，最大 100
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "100"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "6891251722631890445"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_corehr_id`: 以飞书人事的 ID 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 雇佣 ID 列表，为空默认查询所有离职人员。ID 类型与查询参数 user_id_type 的取值一致。例如，当user_id_type为user_id时，该字段取员工的user_id，若user_id_type为people_corehr_id时，则取该员工的人事雇佣ID。
    ///
    /// 注意：user_id_type不为people_corehr_id时，离职重聘员工可能搜索前一条离职数据，推荐使用people_corehr_id。
    #[api(kind = "body", name = "employment_ids")]
    pub employment_ids: Vec<Option<String>>,
    /// 离职审批发起时间（搜索的起始范围），请按照秒级时间戳格式传入。该字段非必填，需要与离职审批发起时间（搜索的结束范围）一同使用。
    ///
    /// **示例值**: "1672578336"
    #[api(kind = "body", name = "apply_initiating_time_start")]
    pub apply_initiating_time_start: Option<String>,
    /// 离职审批发起时间（搜索的结束范围），请按照秒级时间戳格式传入。该字段非必填，需要与离职审批发起时间（搜索的起始范围）一同使用。
    ///
    /// **示例值**: "1674133537"
    #[api(kind = "body", name = "apply_initiating_time_end")]
    pub apply_initiating_time_end: Option<String>,
    /// 期望离职日期（搜索的起始范围），请按日期格式传入。该字段非必填，需要与期望离职日期（搜索的结束范围）一同使用
    ///
    /// **示例值**: "2022-01-01"
    #[api(kind = "body", name = "expected_offboarding_date_start")]
    pub expected_offboarding_date_start: Option<String>,
    /// 期望离职日期（搜索的结束范围），请按日期格式传入。该字段非必填，需要与期望离职日期（搜索的起始范围）一同使用。
    ///
    /// **示例值**: "2022-01-01"
    #[api(kind = "body", name = "expected_offboarding_date_end")]
    pub expected_offboarding_date_end: Option<String>,
    /// 离职日期（搜索的起始范围），请按日期格式传入。该字段非必填，需要与离职日期（搜索的结束范围）一同使用。
    ///
    /// **示例值**: "2022-01-01"
    #[api(kind = "body", name = "offboarding_date_start")]
    pub offboarding_date_start: Option<String>,
    /// 离职日期（搜索的结束范围），该字段非必填，需要与离职日期（搜索的起始范围）一同使用。
    ///
    /// **示例值**: "2022-01-01"
    #[api(kind = "body", name = "offboarding_date_end")]
    pub offboarding_date_end: Option<String>,
    /// 离职状态，多个状态之间为「或」的关系。为空时默认搜索所有状态的离职信息。
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `10` 字符
    #[api(kind = "body", name = "statuses")]
    pub statuses: Vec<Option<String>>,
    /// 离职原因列表 , 可以通过[【查询员工离职原因列表】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/query)接口获取 ，查询时不返回下级原因相关的离职信息。为空时默认搜索所有离职数据。
    ///
    /// <br><b>字段权限要求：</b><br>
    ///
    /// <md-perm name="corehr:employment.offboarding_reason.search:read" desc="按照离职原因搜索" support_app_types="custom,isv" tags="">按照离职原因搜索</md-perm>corehr:employment.offboarding_reason.search:read，确认已开通该权限。
    #[api(kind = "body", name = "reasons")]
    pub reasons: Vec<Option<String>>,
    /// 离职原因（员工）列表 , 可以通过[【查询员工离职原因列表】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/query)接口获取，查询时不返回下级原因相关的离职信息。为空时默认搜索所有离职数据。
    ///
    /// <br><b>字段权限要求：</b><br>
    ///
    /// <md-perm name="corehr:employment.offboarding_reason.search:read" desc="按照离职原因搜索" support_app_types="custom,isv" tags="">按照离职原因搜索</md-perm>
    #[api(kind = "body", name = "employee_reasons")]
    pub employee_reasons: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SearchCoreHrOffboardingRespInner {
    #[serde(flatten)]
    data: Option<SearchCoreHrOffboardingResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SearchCoreHrOffboardingResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 查询的员工离职信息
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<OffboardingSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eyJldV9uYyI6IlswLFwiNjk2MTI4Njg0NjA5Mzc4ODY4MC03MjExMDM0ODcxMjA3OTUzOTc1XCJdIn0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OffboardingSubResp {
    /// 离职发起类型，可选项包括：
    ///
    /// -offboarding_initiated_by_self：员工申请离职
    ///
    /// -offboarding_initiated_by_others：代发起离职申请
    ///
    /// -offboarding_directly：直接离职
    ///
    /// **示例值**: "offboarding_directly"
    #[serde(
        rename = "initiating_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub initiating_type: String,
    /// 离职状态
    ///
    /// **示例值**: "Approving"
    ///
    /// **可选值**:
    ///
    /// `Approving`: 审批中
    ///
    /// `Approved`: 审批通过
    ///
    /// `Offboarded`: 已离职
    ///
    /// `Rejected`: 已拒绝
    ///
    /// `Withdrawn`: 已撤销
    ///
    /// `NoNeedApproval`: 无需审批
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: String,
    /// 离职审批信息
    #[serde(
        rename = "application_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application_info: ApplicationInfoSubResp,
    /// 员工离职信息
    #[serde(
        rename = "offboarding_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_info: OffboardingInfoSubResp,
    /// 离职办理流程信息
    #[serde(
        rename = "offboarding_checklist",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_checklist: OffboardingChecklistSubResp,
    /// 离职唯一标识
    ///
    /// **示例值**: "7298499290417251879"
    #[serde(
        rename = "offboarding_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationInfoSubResp {
    /// 离职审批发起人的雇佣 ID。ID 类型与查询参数 user_id_type 的取值一致。例如，当user_id_type为user_id时，该字段取员工的user_id，若user_id_type为people_corehr_id时，则取该员工的人事雇佣ID。
    ///
    /// **示例值**: "6838119494196871234"
    #[serde(
        rename = "apply_initiator_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub apply_initiator_id: String,
    /// 离职申请流程发起时间
    ///
    /// **示例值**: "2022-02-03 11:22:33"
    #[serde(
        rename = "apply_initiating_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub apply_initiating_time: String,
    /// 离职申请流程结束时间
    ///
    /// **示例值**: "2022-02-03 11:22:33"
    #[serde(
        rename = "apply_finish_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub apply_finish_time: String,
    /// 流程 ID。可用于[查询流程相关信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)，例如：作为[获取单个流程详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)的process_id查询流程详情。
    ///
    /// **示例值**: "6838119494196871234"
    #[serde(
        rename = "process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub process_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OffboardingInfoSubResp {
    /// 离职员工的雇佣 ID。ID 类型与查询参数 user_id_type 的取值一致。例如，当user_id_type为user_id时，该字段取员工的user_id，若user_id_type为people_corehr_id时，则取该员工的人事雇佣ID。
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 员工的 hrbp 列表，所有的 hrbp。ID 类型与查询参数 user_id_type 的取值一致。例如，当user_id_type为user_id时，该字段取员工的user_id，若user_id_type为people_corehr_id时，则取该员工的人事雇佣ID。
    #[serde(
        rename = "hrbp_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hrbp_id: Vec<String>,
    /// 期望离职日期
    ///
    /// **示例值**: "2022-02-08"
    #[serde(
        rename = "expected_offboarding_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expected_offboarding_date: String,
    /// 离职日期
    ///
    /// **示例值**: "2022-02-08"
    #[serde(
        rename = "offboarding_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_date: String,
    /// 离职原因
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: EnumSubResp,
    /// 离职原因说明
    ///
    /// **示例值**: "升学"
    #[serde(
        rename = "reason_explanation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason_explanation: String,
    /// 离职原因（员工）
    #[serde(
        rename = "employee_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_reason: EnumSubResp,
    /// 离职原因说明（员工）
    ///
    /// **示例值**: "升学"
    #[serde(
        rename = "employee_reason_explanation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_reason_explanation: String,
    /// 是否加入离职屏蔽名单。注意：该字段为字符类型。可选值有：
    ///
    /// -true：是
    ///
    /// -false：否
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "add_block_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub add_block_list: String,
    /// 屏蔽原因，枚举值可查询
    ///
    /// [【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口获取,按如下参数查
    ///
    /// 询即可:
    ///
    /// object_api_name= "offboarding_info"
    ///
    /// custom_api_name= "block_reason"
    #[serde(
        rename = "block_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_reason: EnumSubResp,
    /// 屏蔽原因说明
    ///
    /// **示例值**: "xx 年 xx 月 xx 日因 xx 原因红线"
    #[serde(
        rename = "block_reason_explanation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_reason_explanation: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<CustomFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OffboardingChecklistSubResp {
    /// 离职办理状态，可选值有：
    ///
    /// - AntiBegin：未发起
    ///
    /// - Approving：审批中
    ///
    /// - Finished：完成办理
    ///
    /// - Rejected：已拒绝
    ///
    /// - Withdrawn：已撤销
    ///
    /// **示例值**: "AntiBegin"
    #[serde(
        rename = "checklist_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub checklist_status: String,
    /// 离职流转开始时间
    ///
    /// **示例值**: "2022-02-03 11:22:33"
    #[serde(
        rename = "checklist_start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub checklist_start_time: String,
    /// 离职流转结束时间
    ///
    /// **示例值**: "2022-02-03 11:22:33"
    #[serde(
        rename = "checklist_finish_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub checklist_finish_time: String,
    /// 离职流转流程实例 ID。可用于[查询流程相关信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)，例如：作为[获取单个流程详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process/list)的process_id查询流程详情。
    ///
    /// **示例值**: "6838119494196871234"
    #[serde(
        rename = "checklist_process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub checklist_process_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubResp {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "phone_type"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
    /// 枚举多语展示
    #[serde(
        rename = "display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display: Vec<I18nSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomFieldDataSubResp {
    /// 自定义字段的唯一标识
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "custom_api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_api_name: String,
    /// 自定义字段名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: CustomNameSubResp,
    /// 自定义字段类型。可选值有：
    ///
    /// -1：文本类型，包括超链接字段
    ///
    /// -2：布尔类型
    ///
    /// -3：数字类型
    ///
    /// -4：枚举类型
    ///
    /// -5：Lookup类型，如离职人员、竞业公司等
    ///
    /// -8：时间类型
    ///
    /// -9：附件类型
    ///
    /// 注意：不支持的字段类型未给出说明。
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 字段值，是 json 转义后的字符串，根据元数据定义不同，字段格式不同（如 123, 123.23, "true", ["id1","id2"], "2006-01-02 15:04:05"）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "231"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomNameSubResp {
    /// 中文
    ///
    /// **示例值**: "自定义姓名"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文
    ///
    /// **示例值**: "Custom Name"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            SearchCoreHrOffboardingReq,
        ) -> Result<(SearchCoreHrOffboardingResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    SearchCoreHrOffboardingReq,
                ) -> Result<(SearchCoreHrOffboardingResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_search_core_hr_offboarding<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            SearchCoreHrOffboardingReq,
            SearchCoreHrOffboardingResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_search_core_hr_offboarding(
            &self,
            req: &SearchCoreHrOffboardingReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                SearchCoreHrOffboardingReq,
                SearchCoreHrOffboardingResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::search_core_hr_offboarding::{
            SearchCoreHrOffboardingReq, SearchCoreHrOffboardingResp,
            SearchCoreHrOffboardingRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_search_core_hr_offboarding(|_| {
                Ok((
                    SearchCoreHrOffboardingResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .search_core_hr_offboarding(SearchCoreHrOffboardingReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .search_core_hr_offboarding(SearchCoreHrOffboardingReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "employment_ids": [
        "7140964208476371111"
    ],
    "apply_initiating_time_start": "1672578336",
    "apply_initiating_time_end": "1674133537",
    "expected_offboarding_date_start": "2022-01-01",
    "expected_offboarding_date_end": "2022-01-01",
    "offboarding_date_start": "2022-01-01",
    "offboarding_date_end": "2022-01-01",
    "statuses": [
        "Approving"
    ],
    "reasons": [
        "voluntary"
    ],
    "employee_reasons": [
        "voluntary"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::SearchCoreHrOffboardingReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "initiating_type": "offboarding_directly",
                "status": "Approving",
                "application_info": {
                    "apply_initiator_id": "6838119494196871234",
                    "apply_initiating_time": "2022-02-03 11:22:33",
                    "apply_finish_time": "2022-02-03 11:22:33",
                    "process_id": "6838119494196871234"
                },
                "offboarding_info": {
                    "employment_id": "6893014062142064135",
                    "hrbp_id": [
                        "6893014062142064135"
                    ],
                    "expected_offboarding_date": "2022-02-08",
                    "offboarding_date": "2022-02-08",
                    "reason": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "reason_explanation": "升学",
                    "employee_reason": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "employee_reason_explanation": "升学",
                    "add_block_list": "false",
                    "block_reason": {
                        "enum_name": "phone_type",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "刘梓新"
                            }
                        ]
                    },
                    "block_reason_explanation": "xx 年 xx 月 xx 日因 xx 原因红线",
                    "custom_fields": [
                        {
                            "custom_api_name": "name",
                            "name": {
                                "zh_cn": "自定义姓名",
                                "en_us": "Custom Name"
                            },
                            "type": 1,
                            "value": "\"231\""
                        }
                    ]
                },
                "offboarding_checklist": {
                    "checklist_status": "AntiBegin",
                    "checklist_start_time": "2022-02-03 11:22:33",
                    "checklist_finish_time": "2022-02-03 11:22:33",
                    "checklist_process_id": "6838119494196871234"
                }
            }
        ],
        "page_token": "eyJldV9uYyI6IlswLFwiNjk2MTI4Njg0NjA5Mzc4ODY4MC03MjExMDM0ODcxMjA3OTUzOTc1XCJdIn0=",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SearchCoreHrOffboardingRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
