//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-30T11:05:57+00:00**
    ///
    /// ## 创建假期发放记录
    ///
    /// 向飞书人事休假系统写入假期发放记录。
    ///
    /// 仅飞书人事企业版可用
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave_granting_record/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/leave/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fleave%2Fcreate>
    pub async fn create_core_hr_leave_granting_record(
        &self,
        req: CreateCoreHrLeaveGrantingRecordReq,
    ) -> Result<(CreateCoreHrLeaveGrantingRecordResp, CommonResponse), Error> {
        self.create_core_hr_leave_granting_record_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_core_hr_leave_granting_record](#method.create_core_hr_leave_granting_record) 函数
    pub async fn create_core_hr_leave_granting_record_with_opt(
        &self,
        req: CreateCoreHrLeaveGrantingRecordReq,
        method_option: MethodOption,
    ) -> Result<(CreateCoreHrLeaveGrantingRecordResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_create_core_hr_leave_granting_record(&req)
            {
                tracing::info!("[lark] CoreHr#CreateCoreHrLeaveGrantingRecord **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#CreateCoreHrLeaveGrantingRecord call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "CreateCoreHrLeaveGrantingRecord",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/leave_granting_records",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateCoreHrLeaveGrantingRecordRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateCoreHrLeaveGrantingRecordReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_corehr_id`: 以飞书人事的ID来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 假期类型 ID，枚举值可通过[获取假期类型列表](https://open.larkoffice.com/document/server-docs/corehr-v1/leave/leave_types)接口获取（若假期类型下存在假期子类，此处仅支持传入假期子类的 ID）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7111688079785723436"
    #[api(kind = "body", name = "leave_type_id")]
    pub leave_type_id: String,
    /// 员工 ID，飞书人事的雇员id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6982509313466189342"
    #[api(kind = "body", name = "employment_id")]
    pub employment_id: String,
    /// 发放数量（小数位数不能超过6位，授予数量范围为-9999~9999）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0.5"
    #[api(kind = "body", name = "granting_quantity")]
    pub granting_quantity: String,
    /// 发放时长单位
    ///
    /// 可选值有：
    ///
    /// - 1: 天
    ///
    /// - 2: 小时
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "granting_unit")]
    pub granting_unit: i64,
    /// 生效时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2022-01-01"
    #[api(kind = "body", name = "effective_date")]
    pub effective_date: String,
    /// 失效时间
    ///
    /// **示例值**: "2022-01-01"
    #[api(kind = "body", name = "expiration_date")]
    pub expiration_date: Option<String>,
    /// 是否参与折算（1不参与折算，2参与折算）
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "section_type")]
    pub section_type: Option<i64>,
    /// 发放原因
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "reason")]
    pub reason: Vec<Option<I18nSubReq>>,
    /// 自定义外部 ID，可用于避免数据重复写入（不能超过 64 字符）
    ///
    /// **示例值**: "111"
    #[api(kind = "body", name = "external_id")]
    pub external_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubReq {
    /// 名称信息的语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateCoreHrLeaveGrantingRecordRespInner {
    #[serde(flatten)]
    data: Option<CreateCoreHrLeaveGrantingRecordResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateCoreHrLeaveGrantingRecordResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 假期发放记录
    #[serde(
        rename = "leave_granting_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_granting_record: LeaveGrantingRecordSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LeaveGrantingRecordSubResp {
    /// 假期发放记录 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 员工 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 假期类型 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "leave_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_type_id: String,
    /// 发放数量
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0.5"
    #[serde(
        rename = "granting_quantity",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub granting_quantity: String,
    /// 发放时长单位
    ///
    /// 可选值有：
    ///
    /// - 1: 天
    ///
    /// - 2: 小时
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "granting_unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub granting_unit: i64,
    /// 生效时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2022-01-01"
    #[serde(
        rename = "effective_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub effective_date: String,
    /// 失效时间（根据休假规则自动计算）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2022-01-01"
    #[serde(
        rename = "expiration_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiration_date: String,
    /// 发放来源
    ///
    /// 可选值有：
    ///
    /// - 1: 系统发放
    ///
    /// - 2: 手动发放
    ///
    /// - 3: 外部系统发放
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "granted_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub granted_by: i64,
    /// 发放原因
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: Vec<I18nSubResp>,
    /// 发放记录的创建时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1608725989000"
    #[serde(
        rename = "created_at",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_at: String,
    /// 发放记录的创建人，值为创建人的员工 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "646465654545"
    #[serde(
        rename = "created_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_by: String,
    /// 发放记录的更新时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1608725989000"
    #[serde(
        rename = "updated_at",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub updated_at: String,
    /// 发放记录的更新人，值为更新人的员工 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "646465654545"
    #[serde(
        rename = "updated_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub updated_by: String,
    /// 是否参与折算
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "section_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub section_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 名称信息的语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateCoreHrLeaveGrantingRecordReq,
        ) -> Result<(CreateCoreHrLeaveGrantingRecordResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateCoreHrLeaveGrantingRecordReq,
                )
                    -> Result<(CreateCoreHrLeaveGrantingRecordResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_core_hr_leave_granting_record<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateCoreHrLeaveGrantingRecordReq,
            CreateCoreHrLeaveGrantingRecordResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_core_hr_leave_granting_record(
            &self,
            req: &CreateCoreHrLeaveGrantingRecordReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateCoreHrLeaveGrantingRecordReq,
                CreateCoreHrLeaveGrantingRecordResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::create_core_hr_leave_granting_record::{
            CreateCoreHrLeaveGrantingRecordReq, CreateCoreHrLeaveGrantingRecordResp,
            CreateCoreHrLeaveGrantingRecordRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_create_core_hr_leave_granting_record(|_| {
                Ok((
                    CreateCoreHrLeaveGrantingRecordResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .create_core_hr_leave_granting_record(CreateCoreHrLeaveGrantingRecordReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .create_core_hr_leave_granting_record(CreateCoreHrLeaveGrantingRecordReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "leave_type_id": "7111688079785723436",
    "employment_id": "6982509313466189342",
    "granting_quantity": "0.5",
    "granting_unit": 1,
    "effective_date": "2022-01-01",
    "expiration_date": "2022-01-01",
    "section_type": 1,
    "reason": [
        {
            "lang": "zh-CN",
            "value": "张三"
        }
    ],
    "external_id": "111"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateCoreHrLeaveGrantingRecordReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "leave_granting_record": {
            "id": "6893014062142064135",
            "employment_id": "6893014062142064135",
            "leave_type_id": "6893014062142064135",
            "granting_quantity": "0.5",
            "granting_unit": 1,
            "effective_date": "2022-01-01",
            "expiration_date": "2022-01-01",
            "granted_by": 3,
            "reason": [
                {
                    "lang": "zh-CN",
                    "value": "张三"
                }
            ],
            "created_at": "1608725989000",
            "created_by": "646465654545",
            "updated_at": "1608725989000",
            "updated_by": "646465654545",
            "section_type": 1
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateCoreHrLeaveGrantingRecordRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
