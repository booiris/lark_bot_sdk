//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/probation/search>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-15T11:21:08+00:00**
    ///
    /// ## 搜索试用期信息
    ///
    /// 搜索试用期信息，创建试用期后立刻搜索，可能会存在 5s 左右延迟
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/probation/search>
    ///
    /// new doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/probation/search>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Fcorehr-v2%2Fprobation%2Fsearch>
    pub async fn search_core_hr_probation(
        &self,
        req: SearchCoreHrProbationReq,
    ) -> Result<(SearchCoreHrProbationResp, CommonResponse), Error> {
        self.search_core_hr_probation_with_opt(req, Default::default())
            .await
    }

    /// 参见 [search_core_hr_probation](#method.search_core_hr_probation) 函数
    pub async fn search_core_hr_probation_with_opt(
        &self,
        req: SearchCoreHrProbationReq,
        method_option: MethodOption,
    ) -> Result<(SearchCoreHrProbationResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_search_core_hr_probation(&req) {
                tracing::info!("[lark] CoreHr#SearchCoreHrProbation **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#SearchCoreHrProbation call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "SearchCoreHrProbation",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v2/probation/search",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SearchCoreHrProbationRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SearchCoreHrProbationReq {
    /// 分页大小，最大 100
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "100"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "6891251722631890445"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_corehr_id`: 以飞书人事的 ID 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的部门 ID 类型
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 以 open_department_id 来标识部门
    ///
    /// `department_id`: 以 department_id 来标识部门
    ///
    /// `people_corehr_department_id`: 以 people_corehr_department_id 来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 雇佣 ID 列表，可通过[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)接口获取
    #[api(kind = "body", name = "employment_ids")]
    pub employment_ids: Vec<Option<String>>,
    /// 部门 ID 列表，可通过[【批量查询部门】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/batch_get)接口获取
    #[api(kind = "body", name = "department_ids")]
    pub department_ids: Vec<Option<String>>,
    /// 试用期开始日期 - 搜索范围开始，需要与搜索范围结束一同使用，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-05-18"
    #[api(kind = "body", name = "probation_start_date_start")]
    pub probation_start_date_start: Option<String>,
    /// 试用期开始日期 - 搜索范围结束，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-05-20"
    #[api(kind = "body", name = "probation_start_date_end")]
    pub probation_start_date_end: Option<String>,
    /// 试用期预计结束日期 - 搜索范围开始，需要与搜索范围结束一同使用，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-06-20"
    #[api(kind = "body", name = "probation_expected_end_date_start")]
    pub probation_expected_end_date_start: Option<String>,
    /// 试用期预计结束日期 - 搜索范围结束，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-07-20"
    #[api(kind = "body", name = "probation_expected_end_date_end")]
    pub probation_expected_end_date_end: Option<String>,
    /// 试用期实际结束日期 - 搜索范围开始，需要与搜索范围结束一同使用，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-08-20"
    #[api(kind = "body", name = "actual_probation_end_date_start")]
    pub actual_probation_end_date_start: Option<String>,
    /// 试用期实际结束日期 - 搜索范围结束，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-09-20"
    #[api(kind = "body", name = "actual_probation_end_date_end")]
    pub actual_probation_end_date_end: Option<String>,
    /// 转正发起日期 - 搜索范围开始，需要与搜索范围结束一同使用，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-10-20"
    #[api(kind = "body", name = "initiating_time_start")]
    pub initiating_time_start: Option<String>,
    /// 转正发起日期 - 搜索范围结束，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-11-20"
    #[api(kind = "body", name = "initiating_time_end")]
    pub initiating_time_end: Option<String>,
    /// 试用期状态
    ///
    /// **示例值**: "approved"
    ///
    /// **可选值**:
    ///
    /// `pending`: 审批中
    ///
    /// `rejected`: 已拒绝
    ///
    /// `waiting`: 待发起转正
    ///
    /// `approved`: 审批通过
    ///
    /// `converted`: 已转正
    ///
    /// `offboarded`: 已离职
    #[api(kind = "body", name = "probation_status")]
    pub probation_status: Option<String>,
    /// 试用期最终考核结果
    ///
    /// **示例值**: "approved"
    ///
    /// **可选值**:
    ///
    /// `approved`: 通过
    ///
    /// `rejected`: 不通过
    #[api(kind = "body", name = "final_assessment_result")]
    pub final_assessment_result: Option<String>,
    /// 试用期最终考核等级，枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name：probation_management
    ///
    /// - custom_api_name：final_assessment_grade
    ///
    /// <br><b>字段权限要求：</b>
    ///
    /// <br>按照试用期考核等级搜索 (corehr:probation.grade.search:read)
    ///
    /// **示例值**: "grade_a"
    #[api(kind = "body", name = "final_assessment_grade")]
    pub final_assessment_grade: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SearchCoreHrProbationRespInner {
    #[serde(flatten)]
    data: Option<SearchCoreHrProbationResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SearchCoreHrProbationResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 查询的试用期信息
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<ProbationInfoSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ProbationInfoSubResp {
    /// 雇佣 ID，可通过[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)接口获取
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 试用期信息 ID
    ///
    /// **示例值**: "6893014062142064132"
    #[serde(
        rename = "probation_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_id: String,
    /// 试用期开始日期，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-05-20"
    #[serde(
        rename = "probation_start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_start_date: String,
    /// 试用期预计结束日期，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-05-28"
    #[serde(
        rename = "probation_expected_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_expected_end_date: String,
    /// 试用期实际结束日期，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-06-28"
    #[serde(
        rename = "actual_probation_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub actual_probation_end_date: String,
    /// 转正发起日期，格式："YYYY-MM-DD"
    ///
    /// **示例值**: "2022-07-28"
    #[serde(
        rename = "initiating_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub initiating_time: String,
    /// 发起方
    ///
    /// - hr_submission：HR 发起
    ///
    /// - self_submission：员工发起
    ///
    /// - system ：系统发起
    ///
    /// **示例值**: "hr_submission"
    #[serde(
        rename = "submission_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub submission_type: EnumSubResp,
    /// 转正发起人的雇佣 ID，当系统发起转正时该字段为空，可通过[【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)接口获取
    ///
    /// **示例值**: "6893014062142061135"
    #[serde(
        rename = "initiator_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub initiator_id: String,
    /// 试用期状态：
    ///
    /// - pending：审批中
    ///
    /// - rejected：已拒绝
    ///
    /// - waiting：待发起转正
    ///
    /// - approved：审批通过
    ///
    /// - converted：已转正
    ///
    /// - offboarded：已离职
    ///
    /// **示例值**: "converted"
    #[serde(
        rename = "probation_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_status: EnumSubResp,
    /// 员工自评
    ///
    /// **示例值**: "符合预期"
    #[serde(
        rename = "self_review",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub self_review: String,
    /// 备注
    ///
    /// **示例值**: "高潜"
    #[serde(
        rename = "notes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub notes: String,
    /// 流程实例 ID
    ///
    /// **示例值**: "6893014062142164135"
    #[serde(
        rename = "process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub process_id: String,
    /// 是否通过 BPM 转正
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "converted_via_bpm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub converted_via_bpm: bool,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<CustomFieldDataSubResp>,
    /// 试用期考核最终状态：
    ///
    /// - not_started：未开始
    ///
    /// - in_process：进行中
    ///
    /// - completed：已完成
    ///
    /// - no_need：无需考核
    ///
    /// **示例值**: "completed"
    #[serde(
        rename = "final_assessment_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub final_assessment_status: EnumSubResp,
    /// 试用期考核最终结果：
    ///
    /// - approved：通过
    ///
    /// - rejected：不通过
    ///
    /// **示例值**: "approved"
    #[serde(
        rename = "final_assessment_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub final_assessment_result: EnumSubResp,
    /// 试用期考核最终得分
    ///
    /// **示例值**: "99.9"
    #[serde(
        rename = "final_assessment_score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub final_assessment_score: f64,
    /// 试用期考核最终等级，枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "probation_management"
    ///
    /// - custom_api_name = "final_assessment_grade"
    ///
    /// **示例值**: "grade_a"
    #[serde(
        rename = "final_assessment_grade",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub final_assessment_grade: EnumSubResp,
    /// 试用期考核最终评语
    ///
    /// **示例值**: "超出预期"
    #[serde(
        rename = "final_assessment_comment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub final_assessment_comment: String,
    /// 最终考核结果页面超链接
    ///
    /// **示例值**: "https://qwe112233.feishuapp.bytedance.net/ae/ui/apps//122265873393330/recordPages/1/records/1767139312?objectId=17661180522543&recordPageId=173330728118312"
    #[serde(
        rename = "final_assessment_detail",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub final_assessment_detail: String,
    /// 试用期考核结果列表
    #[serde(
        rename = "assessments",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessments: Vec<AssessmentSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubResp {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "phone_type"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
    /// 枚举多语展示
    #[serde(
        rename = "display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display: Vec<I18nSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomFieldDataSubResp {
    /// 自定义字段 apiname，即自定义字段的唯一标识
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "custom_api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_api_name: String,
    /// 自定义字段名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: CustomNameSubResp,
    /// 自定义字段类型
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 字段值，是 json 转义后的字符串，根据元数据定义不同，字段格式不同（如 123, 123.23, "true", ["id1","id2"], "2006-01-02 15:04:05"）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\"231\""
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AssessmentSubResp {
    /// 考核结果 ID
    ///
    /// **示例值**: "6893014061142064135"
    #[serde(
        rename = "assessment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_id: String,
    /// 考核状态
    ///
    /// - not_started：未开始
    ///
    /// - in_process：进行中
    ///
    /// - completed：已完成
    ///
    /// - no_need：无需考核
    #[serde(
        rename = "assessment_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_status: EnumSubResp,
    /// 试用期考核结果
    ///
    /// - approved：通过
    ///
    /// - rejected：不通过
    #[serde(
        rename = "assessment_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_result: EnumSubResp,
    /// 考核得分
    ///
    /// **示例值**: "99.9"
    #[serde(
        rename = "assessment_score",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_score: f64,
    /// 试用期考核等级，枚举值 api_name 可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "probation_management"
    ///
    /// - custom_api_name = "final_assessment_grade"
    #[serde(
        rename = "assessment_grade",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_grade: EnumSubResp,
    /// 考核评语
    ///
    /// **示例值**: "超出预期"
    #[serde(
        rename = "assessment_comment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_comment: String,
    /// 考核结果页面超链接
    ///
    /// **示例值**: "https://qwe1123433.feishuapp.bytedance.net/ae/ui/apps//122265871113330/recordPages/2/records/17611111112?objectId=17663333322543&recordPageId=171128122312"
    #[serde(
        rename = "assessment_detail",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assessment_detail: String,
    /// 是否为最终考核结果
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_final_asssessment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_final_asssessment: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomNameSubResp {
    /// 中文
    ///
    /// **示例值**: "自定义姓名"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文
    ///
    /// **示例值**: "Custom Name"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(SearchCoreHrProbationReq) -> Result<(SearchCoreHrProbationResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    SearchCoreHrProbationReq,
                ) -> Result<(SearchCoreHrProbationResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_search_core_hr_probation<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            SearchCoreHrProbationReq,
            SearchCoreHrProbationResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_search_core_hr_probation(
            &self,
            req: &SearchCoreHrProbationReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, SearchCoreHrProbationReq, SearchCoreHrProbationResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::search_core_hr_probation::{
            SearchCoreHrProbationReq, SearchCoreHrProbationResp, SearchCoreHrProbationRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_search_core_hr_probation(|_| {
                Ok((
                    SearchCoreHrProbationResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .search_core_hr_probation(SearchCoreHrProbationReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .search_core_hr_probation(SearchCoreHrProbationReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "employment_ids": [
        "7140964208476371111"
    ],
    "department_ids": [
        "7140964208476371121"
    ],
    "probation_start_date_start": "2022-05-18",
    "probation_start_date_end": "2022-05-20",
    "probation_expected_end_date_start": "2022-06-20",
    "probation_expected_end_date_end": "2022-07-20",
    "actual_probation_end_date_start": "2022-08-20",
    "actual_probation_end_date_end": "2022-09-20",
    "initiating_time_start": "2022-10-20",
    "initiating_time_end": "2022-11-20",
    "probation_status": "approved",
    "final_assessment_result": "approved",
    "final_assessment_grade": "grade_a"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::SearchCoreHrProbationReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "employment_id": "6893014062142064135",
                "probation_id": "6893014062142064132",
                "probation_start_date": "2022-05-20",
                "probation_expected_end_date": "2022-05-28",
                "actual_probation_end_date": "2022-06-28",
                "initiating_time": "2022-07-28",
                "submission_type": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "initiator_id": "6893014062142061135",
                "probation_status": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "self_review": "符合预期",
                "notes": "高潜",
                "process_id": "6893014062142164135",
                "converted_via_bpm": false,
                "custom_fields": [
                    {
                        "custom_api_name": "name",
                        "name": {
                            "zh_cn": "自定义姓名",
                            "en_us": "Custom Name"
                        },
                        "type": 1,
                        "value": "\"231\""
                    }
                ],
                "final_assessment_status": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "final_assessment_result": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "final_assessment_score": 99.9,
                "final_assessment_grade": {
                    "enum_name": "phone_type",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "final_assessment_comment": "超出预期",
                "final_assessment_detail": "https://qwe112233.feishuapp.bytedance.net/ae/ui/apps//122265873393330/recordPages/1/records/1767139312?objectId=17661180522543&recordPageId=173330728118312",
                "assessments": [
                    {
                        "assessment_id": "6893014061142064135",
                        "assessment_status": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "张三"
                                }
                            ]
                        },
                        "assessment_result": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "张三"
                                }
                            ]
                        },
                        "assessment_score": 99.9,
                        "assessment_grade": {
                            "enum_name": "phone_type",
                            "display": [
                                {
                                    "lang": "zh-CN",
                                    "value": "张三"
                                }
                            ]
                        },
                        "assessment_comment": "超出预期",
                        "assessment_detail": "https://qwe1123433.feishuapp.bytedance.net/ae/ui/apps//122265871113330/recordPages/2/records/17611111112?objectId=17663333322543&recordPageId=171128122312",
                        "is_final_asssessment": false
                    }
                ]
            }
        ],
        "page_token": "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0=",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SearchCoreHrProbationRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
