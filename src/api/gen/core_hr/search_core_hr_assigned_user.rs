//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/assigned_user/search>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-12T08:37:08+00:00**
    ///
    /// ## 获取组织类角色授权列表
    ///
    /// 查询组织类角色的授权信息，返回的授权列表中包含被授权的用户ID和被授权的管理维度等信息。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/assigned_user/search>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/corehr-v1/authorization/search>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fauthorization%2Fsearch>
    pub async fn search_core_hr_assigned_user(
        &self,
        req: SearchCoreHrAssignedUserReq,
    ) -> Result<(SearchCoreHrAssignedUserResp, CommonResponse), Error> {
        self.search_core_hr_assigned_user_with_opt(req, Default::default())
            .await
    }

    /// 参见 [search_core_hr_assigned_user](#method.search_core_hr_assigned_user) 函数
    pub async fn search_core_hr_assigned_user_with_opt(
        &self,
        req: SearchCoreHrAssignedUserReq,
        method_option: MethodOption,
    ) -> Result<(SearchCoreHrAssignedUserResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_search_core_hr_assigned_user(&req) {
                tracing::info!("[lark] CoreHr#SearchCoreHrAssignedUser **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#SearchCoreHrAssignedUser call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "SearchCoreHrAssignedUser",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/assigned_users/search",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SearchCoreHrAssignedUserRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SearchCoreHrAssignedUserReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "people_corehr_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_corehr_id`: 以飞书人事的 ID 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 角色 ID，仅支持组织类角色， 角色 ID 可通过[批量获取角色列表](https://open.larkoffice.com/document/server-docs/corehr-v1/authorization/list)接口获取
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "100"
    #[api(kind = "body", name = "role_id")]
    pub role_id: String,
    /// 管理范围信息
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "management_scope_list")]
    pub management_scope_list: Vec<Option<ManagementScopeSubReq>>,
    /// 查找方式
    ///
    /// 可选值有：
    ///
    /// - 1：只查找指定 部门/工作地点/公司/社保城市，如无授权信息则返回为空
    ///
    /// - 2：当指定的 部门/工作地点/公司/社保城市 无授权信息，向上查找第一个授权记录并直接返回
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "search_method")]
    pub search_method: String,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
    #[api(kind = "body", name = "page_token")]
    pub page_token: Option<String>,
    /// 分页大小，最大100
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "100"
    #[api(kind = "body", name = "page_size")]
    pub page_size: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ManagementScopeSubReq {
    /// 管理维度
    ///
    /// 可选值有：
    ///
    /// - department：部门
    ///
    /// - work_location：工作地点
    ///
    /// - company：公司
    ///
    /// - social_security_location：社保城市
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "department"
    #[serde(
        rename = "management_dimension",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub management_dimension: String,
    /// 被授权部门/工作地点/公司/社保城市 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7023318326176777742"
    #[serde(
        rename = "obj_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub obj_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SearchCoreHrAssignedUserRespInner {
    #[serde(flatten)]
    data: Option<SearchCoreHrAssignedUserResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SearchCoreHrAssignedUserResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 用户授权信息
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<RoleAuthorizationSubResp>,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoleAuthorizationSubResp {
    /// 员工 ID
    ///
    /// >
    ///
    /// 如想获取员工详细信息，可通过[搜索员工信息](https://open.larkoffice.com/document/server-docs/corehr-v1/employee/search)接口获取。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6967639606963471902"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 实际授权管理范围
    #[serde(
        rename = "management_scope_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub management_scope_list: Vec<ManagementScopeSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ManagementScopeSubResp {
    /// 管理维度
    ///
    /// 可选值有：
    ///
    /// - department：部门
    ///
    /// - work_location：工作地点
    ///
    /// - company：公司
    ///
    /// - social_security_location：社保城市
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "department"
    #[serde(
        rename = "management_dimension",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub management_dimension: String,
    /// 被授权部门/工作地点/公司/社保城市 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7023318326176777742"
    #[serde(
        rename = "obj_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub obj_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            SearchCoreHrAssignedUserReq,
        ) -> Result<(SearchCoreHrAssignedUserResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    SearchCoreHrAssignedUserReq,
                ) -> Result<(SearchCoreHrAssignedUserResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_search_core_hr_assigned_user<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            SearchCoreHrAssignedUserReq,
            SearchCoreHrAssignedUserResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_search_core_hr_assigned_user(
            &self,
            req: &SearchCoreHrAssignedUserReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                SearchCoreHrAssignedUserReq,
                SearchCoreHrAssignedUserResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::search_core_hr_assigned_user::{
            SearchCoreHrAssignedUserReq, SearchCoreHrAssignedUserResp,
            SearchCoreHrAssignedUserRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_search_core_hr_assigned_user(|_| {
                Ok((
                    SearchCoreHrAssignedUserResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .search_core_hr_assigned_user(SearchCoreHrAssignedUserReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .search_core_hr_assigned_user(SearchCoreHrAssignedUserReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "role_id": "100",
    "management_scope_list": [
        {
            "management_dimension": "department",
            "obj_id": "7023318326176777742"
        }
    ],
    "search_method": "1",
    "page_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
    "page_size": "100"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::SearchCoreHrAssignedUserReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "employment_id": "6967639606963471902",
                "management_scope_list": [
                    {
                        "management_dimension": "department",
                        "obj_id": "7023318326176777742"
                    }
                ]
            }
        ],
        "has_more": true,
        "page_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SearchCoreHrAssignedUserRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
