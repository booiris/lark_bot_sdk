//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-12T08:36:45+00:00**
    ///
    /// ## 查询部门 / 地点的 HRBP / 属地 BP
    ///
    /// 通过部门或工作地点，查询对应的 HRBP / 属地 BP，返回的信息中包含BP的员工ID、部门ID、属地ID等信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/security_group/query>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/authorization/query>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fauthorization%2Fquery>
    pub async fn get_core_hr_security_group_bp(
        &self,
        req: GetCoreHrSecurityGroupBpReq,
    ) -> Result<(GetCoreHrSecurityGroupBpResp, CommonResponse), Error> {
        self.get_core_hr_security_group_bp_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_security_group_bp](#method.get_core_hr_security_group_bp) 函数
    pub async fn get_core_hr_security_group_bp_with_opt(
        &self,
        req: GetCoreHrSecurityGroupBpReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrSecurityGroupBpResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_core_hr_security_group_bp(&req) {
                tracing::info!("[lark] CoreHr#GetCoreHrSecurityGroupBp **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrSecurityGroupBp call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrSecurityGroupBp",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/security_groups/query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrSecurityGroupBpRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrSecurityGroupBpReq {
    /// 此次调用中使用的部门 ID 类型
    ///
    /// **示例值**: "people_corehr_department_id"
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 以 open_department_id 来标识部门
    ///
    /// `department_id`: 以 department_id 来标识部门
    ///
    /// `people_corehr_department_id`: 以 people_corehr_department_id 来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 角色列表，一次最多支持查询 50 个
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "item_list")]
    pub item_list: Vec<Option<BpRoleOrganizationSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BpRoleOrganizationSubReq {
    /// 角色类型的唯一标识
    ///
    /// - HRBP：与部门有关，role_key 固定为 「hrbp」
    ///
    /// - 属地 BP：与部门、工作地点有关，role_key 固定为 「location_bp」
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "location_bp"
    #[serde(
        rename = "role_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub role_key: String,
    /// 部门 ID，查询 HRBP 需输入部门 ID，ID类型与department_id_type的取值意义一致。
    ///
    /// >
    ///
    /// 可以使用 [ID转换服务](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/common_data-id/convert)换取 ==department_id==
    ///
    /// >
    ///
    /// 部门id也可通过[搜索部门信息](https://open.larkoffice.com/document/server-docs/corehr-v1/organization-management/department/search)接口获取。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7063072995761456670"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 工作地点 ID，查询属地 BP 需要输入部门 ID 与 工作地点 ID
    ///
    /// >
    ///
    /// 可从[批量查询地点](https://open.larkoffice.com/document/server-docs/corehr-v1/organization-management/location/list)接口获取，或者在「[飞书人事](https://people.feishu.cn/people/)-组织管理-地点」中查看。
    ///
    /// **示例值**: "6892687221355185677"
    #[serde(
        rename = "work_location_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_location_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrSecurityGroupBpRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrSecurityGroupBpResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrSecurityGroupBpResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// HRBP/属地 BP 信息
    #[serde(
        rename = "hrbp_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hrbp_list: Vec<HrbpSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct HrbpSubResp {
    /// HRBP/属地 BP 的雇员ID ：
    ///
    /// 对于 HRBP 而言，若入参的部门没有找到对应的 HRBP，将向上找寻，即向其上级部门取对应的 HRBP，且同一部门可能有多个 HRBP；
    ///
    /// 对于 属地 BP 而言，若入参的部门和地点没有找到对应的属地 BP，将优先拿地点向上找寻，即向其上级地点取对应的属地 BP
    ///
    /// >
    ///
    /// 如想获取BP的详细信息，可通过[搜索员工信息](https://open.larkoffice.com/document/server-docs/corehr-v1/employee/search)接口获取。
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "employment_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id_list: Vec<String>,
    /// 部门 ID
    ///
    /// >
    ///
    /// 如想获取部门详细信息，可通过[搜索部门信息](https://open.larkoffice.com/document/server-docs/corehr-v1/organization-management/department/search)接口获取。
    ///
    /// **示例值**: "7063072995761456670"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 工作地点 ID
    ///
    /// **示例值**: "6892687221355185677"
    #[serde(
        rename = "work_location_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_location_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCoreHrSecurityGroupBpReq,
        ) -> Result<(GetCoreHrSecurityGroupBpResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrSecurityGroupBpReq,
                ) -> Result<(GetCoreHrSecurityGroupBpResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_security_group_bp<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrSecurityGroupBpReq,
            GetCoreHrSecurityGroupBpResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_security_group_bp(
            &self,
            req: &GetCoreHrSecurityGroupBpReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCoreHrSecurityGroupBpReq,
                GetCoreHrSecurityGroupBpResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_security_group_bp::{
            GetCoreHrSecurityGroupBpReq, GetCoreHrSecurityGroupBpResp,
            GetCoreHrSecurityGroupBpRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_security_group_bp(|_| {
                Ok((
                    GetCoreHrSecurityGroupBpResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_security_group_bp(GetCoreHrSecurityGroupBpReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_security_group_bp(GetCoreHrSecurityGroupBpReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "item_list": [
        {
            "role_key": "location_bp",
            "department_id": "7063072995761456670",
            "work_location_id": "6892687221355185677"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetCoreHrSecurityGroupBpReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "hrbp_list": [
            {
                "employment_id_list": [
                    "['7063072995761456670']"
                ],
                "department_id": "7063072995761456670",
                "work_location_id": "6892687221355185677"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrSecurityGroupBpRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
