//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-12T06:34:46+00:00**
    ///
    /// ## 更新待入职信息（不推荐）
    ///
    /// 更新待入职信息接口，本接口只是会更新待入职数据，不会校验数据规则，推荐使用新接口[【更新待入职信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/pre_hire/patch)。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/patch>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/corehr-v1/pre_hire/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fpre_hire%2Fpatch>
    pub async fn update_core_hr_pre_hire(
        &self,
        req: UpdateCoreHrPreHireReq,
    ) -> Result<(UpdateCoreHrPreHireResp, CommonResponse), Error> {
        self.update_core_hr_pre_hire_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_core_hr_pre_hire](#method.update_core_hr_pre_hire) 函数
    pub async fn update_core_hr_pre_hire_with_opt(
        &self,
        req: UpdateCoreHrPreHireReq,
        method_option: MethodOption,
    ) -> Result<(UpdateCoreHrPreHireResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_core_hr_pre_hire(&req) {
                tracing::info!("[lark] CoreHr#UpdateCoreHrPreHire **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#UpdateCoreHrPreHire call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "UpdateCoreHrPreHire",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/pre_hires/:pre_hire_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateCoreHrPreHireRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateCoreHrPreHireReq {
    /// 待入职ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1616161616"
    #[api(kind = "path", name = "pre_hire_id")]
    pub pre_hire_id: String,
    /// 根据client_token是否一致来判断是否为同一请求
    ///
    /// **示例值**: "12454646"
    #[api(
        kind = "query",
        name = "client_token",
        v_type = "var",
        option = "false"
    )]
    pub client_token: String,
    /// 招聘投递 ID ，详细信息可以通过招聘的【获取投递信息】接口查询获得（仅部分租户可用）
    ///
    /// **示例值**: "4719168654814483759"
    #[api(kind = "body", name = "ats_application_id")]
    pub ats_application_id: Option<String>,
    /// 入职日期
    ///
    /// **示例值**: "2020-01-01"
    #[api(kind = "body", name = "hire_date")]
    pub hire_date: Option<String>,
    /// 雇佣类型
    #[api(kind = "body", name = "employee_type")]
    pub employee_type: Option<EnumSubReq>,
    /// 人员编号
    ///
    /// **示例值**: "1245646"
    #[api(kind = "body", name = "worker_id")]
    pub worker_id: Option<String>,
    /// 雇佣类型
    ///
    /// **示例值**: "正式"
    #[api(kind = "body", name = "employee_type_id")]
    pub employee_type_id: Option<String>,
    /// 引用Person ID
    ///
    /// **示例值**: "656464648662"
    #[api(kind = "body", name = "person_id")]
    pub person_id: Option<String>,
    /// 自定义字段
    #[api(kind = "body", name = "custom_fields")]
    pub custom_fields: Vec<Option<ObjectFieldDataSubReq>>,
    /// 成本中心分摊信息
    #[api(kind = "body", name = "cost_center_rate")]
    pub cost_center_rate: Vec<Option<SupportCostCenterItemSubReq>>,
    /// 入职状态
    ///
    /// - 待入职(preboarding)
    ///
    /// - 已删除(deleted)
    ///
    /// - 准备就绪(day_one)
    ///
    /// - 已撤销(withdrawn)
    ///
    /// - 已完成(completed)
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "onboarding_status")]
    pub onboarding_status: EnumSubReq,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubReq {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "type_1"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ObjectFieldDataSubReq {
    /// 字段名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(如123, 123.23, "true", [\"id1\",\"id2\"], "2006-01-02 15:04:05")
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\"Sandy\""
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SupportCostCenterItemSubReq {
    /// 支持的成本中心id
    ///
    /// **示例值**: "6950635856373745165"
    #[serde(
        rename = "cost_center_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cost_center_id: Option<String>,
    /// 分摊比例
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rate: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateCoreHrPreHireRespInner {
    #[serde(flatten)]
    data: Option<UpdateCoreHrPreHireResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateCoreHrPreHireResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 待入职数据
    #[serde(
        rename = "pre_hire",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pre_hire: PreHireSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PreHireSubResp {
    /// 招聘投递 ID ，详细信息可以通过招聘的【获取投递信息】接口查询获得
    ///
    /// **示例值**: "4719168654814483759"
    #[serde(
        rename = "ats_application_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ats_application_id: String,
    /// 待入职ID
    ///
    /// **示例值**: "154545454"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 入职日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "hire_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hire_date: String,
    /// 雇佣类型
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "employee_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type: EnumSubResp,
    /// 人员编号
    ///
    /// **示例值**: "1245646"
    #[serde(
        rename = "worker_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub worker_id: String,
    /// 雇佣类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "正式"
    #[serde(
        rename = "employee_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type_id: String,
    /// 引用Person ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "656464648662"
    #[serde(
        rename = "person_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub person_id: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
    /// 成本中心分摊信息
    #[serde(
        rename = "cost_center_rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cost_center_rate: Vec<SupportCostCenterItemSubResp>,
    /// 入职状态
    ///
    /// - 待入职(preboarding)
    ///
    /// - 已删除(deleted)
    ///
    /// - 准备就绪(day_one)
    ///
    /// - 已撤销(withdrawn)
    ///
    /// - 已完成(completed)
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "onboarding_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboarding_status: EnumSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubResp {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "type_1"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
    /// 枚举多语展示
    #[serde(
        rename = "display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display: Vec<I18nSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ObjectFieldDataSubResp {
    /// 字段名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(如123, 123.23, "true", [\"id1\",\"id2\"], "2006-01-02 15:04:05")
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\"Sandy\""
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SupportCostCenterItemSubResp {
    /// 支持的成本中心id
    ///
    /// **示例值**: "6950635856373745165"
    #[serde(
        rename = "cost_center_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cost_center_id: String,
    /// 分摊比例
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rate: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 名称信息的语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "刘梓新"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateCoreHrPreHireReq) -> Result<(UpdateCoreHrPreHireResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateCoreHrPreHireReq,
                ) -> Result<(UpdateCoreHrPreHireResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_core_hr_pre_hire<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateCoreHrPreHireReq, UpdateCoreHrPreHireResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_core_hr_pre_hire(
            &self,
            req: &UpdateCoreHrPreHireReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateCoreHrPreHireReq, UpdateCoreHrPreHireResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::update_core_hr_pre_hire::{
            UpdateCoreHrPreHireReq, UpdateCoreHrPreHireResp, UpdateCoreHrPreHireRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_update_core_hr_pre_hire(|_| {
                Ok((
                    UpdateCoreHrPreHireResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .update_core_hr_pre_hire(UpdateCoreHrPreHireReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .update_core_hr_pre_hire(UpdateCoreHrPreHireReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "ats_application_id": "4719168654814483759",
    "hire_date": "2020-01-01",
    "employee_type": {
        "enum_name": "type_1"
    },
    "worker_id": "1245646",
    "employee_type_id": "正式",
    "person_id": "656464648662",
    "custom_fields": [
        {
            "field_name": "name",
            "value": "\"Sandy\""
        }
    ],
    "cost_center_rate": [
        {
            "cost_center_id": "6950635856373745165",
            "rate": 100
        }
    ],
    "onboarding_status": {
        "enum_name": "type_1"
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateCoreHrPreHireReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "pre_hire": {
            "ats_application_id": "4719168654814483759",
            "id": "154545454",
            "hire_date": "2020-01-01",
            "employee_type": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ]
            },
            "worker_id": "1245646",
            "employee_type_id": "正式",
            "person_id": "656464648662",
            "custom_fields": [
                {
                    "field_name": "name",
                    "value": "\"Sandy\""
                }
            ],
            "cost_center_rate": [
                {
                    "cost_center_id": "6950635856373745165",
                    "rate": 100
                }
            ],
            "onboarding_status": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "刘梓新"
                    }
                ]
            }
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateCoreHrPreHireRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
