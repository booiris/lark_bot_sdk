//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_request_history>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-24T07:41:52+00:00**
    ///
    /// ## 批量查询员工请假记录
    ///
    /// 批量获取员工的请假记录数据。
    ///
    /// 仅飞书人事企业版可用
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/leave/leave_request_history>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/corehr-v1/leave/leave_request_history>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fleave%2Fleave_request_history>
    pub async fn get_core_hr_leave_request_history_list(
        &self,
        req: GetCoreHrLeaveRequestHistoryListReq,
    ) -> Result<(GetCoreHrLeaveRequestHistoryListResp, CommonResponse), Error> {
        self.get_core_hr_leave_request_history_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_leave_request_history_list](#method.get_core_hr_leave_request_history_list) 函数
    pub async fn get_core_hr_leave_request_history_list_with_opt(
        &self,
        req: GetCoreHrLeaveRequestHistoryListReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrLeaveRequestHistoryListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_core_hr_leave_request_history_list(&req)
            {
                tracing::info!("[lark] CoreHr#GetCoreHrLeaveRequestHistoryList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrLeaveRequestHistoryList call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrLeaveRequestHistoryList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/leaves/leave_request_history",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrLeaveRequestHistoryListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrLeaveRequestHistoryListReq {
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "[1712932008000,"7356863257632491046"]"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "100"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: String,
    /// 员工 ID 列表，最大 100 个（不传则默认查询全部员工）
    ///
    /// **示例值**: "["6919733291281024526"]"
    #[api(
        kind = "query",
        name = "employment_id_list",
        v_type = "list",
        option = "false"
    )]
    pub employment_id_list: Vec<String>,
    /// 休假发起人 ID 列表，最大 100 个
    ///
    /// **示例值**: "["6919733291281024526"]"
    #[api(
        kind = "query",
        name = "initiator_id_list",
        v_type = "list",
        option = "false"
    )]
    pub initiator_id_list: Vec<String>,
    /// 请假记录的状态
    ///
    /// 可选值有：
    ///
    /// - 1：已通过
    ///
    /// - 2：审批中
    ///
    /// - 3：审批中（更正）
    ///
    /// - 4：审批中（取消休假）
    ///
    /// - 5：审批中（返岗）
    ///
    /// - 6：已返岗
    ///
    /// - 7：已拒绝
    ///
    /// - 8：已取消
    ///
    /// - 9：已撤回
    ///
    /// **示例值**: "["1", "2"]"
    #[api(
        kind = "query",
        name = "leave_request_status",
        v_type = "list",
        option = "false"
    )]
    pub leave_request_status: Vec<String>,
    /// 假期类型 ID 列表，枚举值可通过【获取假期类型列表】接口获取
    ///
    /// **示例值**: "["1"]"
    #[api(
        kind = "query",
        name = "leave_type_id_list",
        v_type = "list",
        option = "false"
    )]
    pub leave_type_id_list: Vec<String>,
    /// 休假开始时间晚于等于的日期
    ///
    /// **示例值**: "2022-07-20"
    #[api(
        kind = "query",
        name = "leave_start_date_min",
        v_type = "var",
        option = "false"
    )]
    pub leave_start_date_min: String,
    /// 休假开始时间早于等于的日期
    ///
    /// **示例值**: "2022-07-20"
    #[api(
        kind = "query",
        name = "leave_start_date_max",
        v_type = "var",
        option = "false"
    )]
    pub leave_start_date_max: String,
    /// 休假结束时间晚于等于的日期
    ///
    /// **示例值**: "2022-07-20"
    #[api(
        kind = "query",
        name = "leave_end_date_min",
        v_type = "var",
        option = "false"
    )]
    pub leave_end_date_min: String,
    /// 休假结束时间早于等于的日期
    ///
    /// **示例值**: "2022-07-20"
    #[api(
        kind = "query",
        name = "leave_end_date_max",
        v_type = "var",
        option = "false"
    )]
    pub leave_end_date_max: String,
    /// 休假发起时间晚于等于的日期
    ///
    /// **示例值**: "2022-07-20"
    #[api(
        kind = "query",
        name = "leave_submit_date_min",
        v_type = "var",
        option = "false"
    )]
    pub leave_submit_date_min: String,
    /// 休假发起时间早于等于的日期
    ///
    /// **示例值**: "2022-07-20"
    #[api(
        kind = "query",
        name = "leave_submit_date_max",
        v_type = "var",
        option = "false"
    )]
    pub leave_submit_date_max: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "people_corehr_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_corehr_id`: 以飞书人事的 ID 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 请假记录更新时间晚于等于的时间
    ///
    /// **示例值**: "2022-10-24 10:00:00"
    #[api(
        kind = "query",
        name = "leave_update_time_min",
        v_type = "var",
        option = "false"
    )]
    pub leave_update_time_min: String,
    /// 请假记录更新时间早于等于的时间
    ///
    /// **示例值**: "2022-10-24 10:00:00"
    #[api(
        kind = "query",
        name = "leave_update_time_max",
        v_type = "var",
        option = "false"
    )]
    pub leave_update_time_max: String,
    /// 是否返回请假详情，若为true，将在每条请假记录的details字段返回请假详情
    ///
    /// **示例值**: "false"
    #[api(
        kind = "query",
        name = "return_detail",
        v_type = "var",
        option = "false"
    )]
    pub return_detail: bool,
    /// 指定过滤长/短假类型，0表示不过滤，1表示仅获取短假，2表示仅获取长假, 默认0
    ///
    /// **示例值**: "1"
    #[api(
        kind = "query",
        name = "leave_term_type",
        v_type = "var",
        option = "false"
    )]
    pub leave_term_type: i64,
    /// 请假记录所在时区
    ///
    /// **示例值**: "Asia/Shanghai"
    #[api(kind = "query", name = "time_zone", v_type = "var", option = "false")]
    pub time_zone: String,
    /// 请假记录数据源，1表示中国大陆休假，2表示海外休假，不传或0表示不过滤
    ///
    /// **示例值**: "1"
    #[api(kind = "query", name = "data_source", v_type = "var", option = "false")]
    pub data_source: i64,
    /// 请假记录DB更新时间晚于等于的时间
    ///
    /// **示例值**: "2022-10-24 10:00:00"
    #[api(
        kind = "query",
        name = "db_update_time_min",
        v_type = "var",
        option = "false"
    )]
    pub db_update_time_min: String,
    /// 请假记录DB更新时间早于等于的时间
    ///
    /// **示例值**: "2022-10-24 10:00:00"
    #[api(
        kind = "query",
        name = "db_update_time_max",
        v_type = "var",
        option = "false"
    )]
    pub db_update_time_max: String,
    /// WorkDay专用 是否返回0值的请假记录，若为true，将返回0值的请假记录
    ///
    /// **示例值**: "false"
    #[api(
        kind = "query",
        name = "wd_need_amount_zero_records",
        v_type = "var",
        option = "false"
    )]
    pub wd_need_amount_zero_records: bool,
    /// WorkDay专用 是否拒绝和取消的请假记录，若为true，将返回拒绝和取消的请假记录
    ///
    /// **示例值**: "false"
    #[api(
        kind = "query",
        name = "wd_need_denied_and_canceled_record",
        v_type = "var",
        option = "false"
    )]
    pub wd_need_denied_and_canceled_record: bool,
    /// WorkDay专用 扣薪类型, 1不参与算薪 2影响算薪 3不影响算薪
    ///
    /// **示例值**: "1"
    #[api(
        kind = "query",
        name = "wd_paid_type",
        v_type = "var",
        option = "false"
    )]
    pub wd_paid_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrLeaveRequestHistoryListRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrLeaveRequestHistoryListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrLeaveRequestHistoryListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 请假记录信息列表
    #[serde(
        rename = "leave_request_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_request_list: Vec<LeaveRequestSubResp>,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "[1712932008000,\"7356863257632491046\"]"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LeaveRequestSubResp {
    /// 请假记录ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "4718803945687580505"
    #[serde(
        rename = "leave_request_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_request_id: String,
    /// 雇佣信息ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "4718803945687580505"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 员工姓名
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "employment_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_name: Vec<I18nSubResp>,
    /// 假期类型ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "leave_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_type_id: String,
    /// 假期类型名称
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "leave_type_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_type_name: Vec<I18nSubResp>,
    /// 假期开始时间，格式可能为：
    ///
    /// - 字符串日期：如 "2022-09-09"
    ///
    /// - 字符串日期加 morning/afternoon：如 "2022-09-09 morning""
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2022-07-06"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 假期结束时间，格式可能为：
    ///
    /// - 字符串日期：如 "2022-09-09"
    ///
    /// - 字符串日期加 morning/afternoon：如 "2022-09-09 morning""
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2023-01-05"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 假期时长
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "leave_duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_duration: String,
    /// 假期时长单位
    ///
    /// 可选值有：
    ///
    /// - 1: 天
    ///
    /// - 2: 小时
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "leave_duration_unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_duration_unit: i64,
    /// 请假记录的状态
    ///
    /// 可选值有：
    ///
    /// - 1：已通过
    ///
    /// - 2：审批中
    ///
    /// - 3：审批中（更正）
    ///
    /// - 4：审批中（取消休假）
    ///
    /// - 5：审批中（返岗）
    ///
    /// - 6：已返岗
    ///
    /// - 7：已拒绝
    ///
    /// - 8：已取消
    ///
    /// - 9：已撤回
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "leave_request_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_request_status: i64,
    /// 数据来源
    ///
    /// 可选值有：
    ///
    /// - "manual"：手动创建
    ///
    /// - "system"：系统创建"
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "manual"
    #[serde(
        rename = "grant_source",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub grant_source: String,
    /// 返岗时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1662134400"
    #[serde(
        rename = "return_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub return_time: String,
    /// 发起时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1659080476"
    #[serde(
        rename = "submitted_at",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub submitted_at: String,
    /// 发起人
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7109664941775241244"
    #[serde(
        rename = "submitted_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub submitted_by: String,
    /// 备注
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "备注"
    #[serde(
        rename = "notes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub notes: String,
    /// 审批通过日期
    ///
    /// **示例值**: "2022-09-09"
    #[serde(
        rename = "approval_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_date: String,
    /// 是否带薪
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_deducted",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_deducted: bool,
    /// 请假详情
    #[serde(
        rename = "details",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub details: Vec<LeaveRequestDetailSubResp>,
    /// 假期类型枚举
    ///
    /// **示例值**: "Annual Leave"
    #[serde(
        rename = "leave_type_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_type_code: String,
    /// 实际结束日期
    ///
    /// **示例值**: "2022-08-02"
    #[serde(
        rename = "actual_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub actual_end_date: String,
    /// 预估结束日期
    ///
    /// **示例值**: "2022-08-02"
    #[serde(
        rename = "estimated_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub estimated_end_date: String,
    /// 时区
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "time_zone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_zone: String,
    /// 请假记录数据来源
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "data_source",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data_source: i64,
    /// 请假申请流程ID。注意：导入的请假不会返回leave_process_id
    #[serde(
        rename = "leave_process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_process_id: Vec<String>,
    /// 请假更正流程ID
    #[serde(
        rename = "leave_correct_process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_correct_process_id: Vec<String>,
    /// 请假取消流程ID
    #[serde(
        rename = "leave_cancel_process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_cancel_process_id: Vec<String>,
    /// 请假返岗流程ID
    #[serde(
        rename = "leave_return_process_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_return_process_id: Vec<String>,
    /// workDay算薪类型
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "wd_paid_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub wd_paid_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 名称信息的语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LeaveRequestDetailSubResp {
    /// 请假记录id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "4718803945687580505"
    #[serde(
        rename = "leave_request_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_request_id: String,
    /// 假期发生日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2022-07-07"
    #[serde(
        rename = "leave_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_date: String,
    /// 假期时长
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "leave_duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_duration: String,
    /// 假期时长单位，1：天，2：小时
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "leave_duration_unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_duration_unit: i64,
    /// 是否影响算薪，1：不参与算薪计算, 非对应的日期类型或者无对应的假期计划，2：影响算薪，3：不影响算薪
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "paid_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub paid_type: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCoreHrLeaveRequestHistoryListReq,
        ) -> Result<(GetCoreHrLeaveRequestHistoryListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrLeaveRequestHistoryListReq,
                )
                    -> Result<(GetCoreHrLeaveRequestHistoryListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_leave_request_history_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrLeaveRequestHistoryListReq,
            GetCoreHrLeaveRequestHistoryListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_leave_request_history_list(
            &self,
            req: &GetCoreHrLeaveRequestHistoryListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCoreHrLeaveRequestHistoryListReq,
                GetCoreHrLeaveRequestHistoryListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_leave_request_history_list::{
            GetCoreHrLeaveRequestHistoryListReq, GetCoreHrLeaveRequestHistoryListResp,
            GetCoreHrLeaveRequestHistoryListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_leave_request_history_list(|_| {
                Ok((
                    GetCoreHrLeaveRequestHistoryListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_leave_request_history_list(GetCoreHrLeaveRequestHistoryListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_leave_request_history_list(GetCoreHrLeaveRequestHistoryListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "leave_request_list": [
            {
                "leave_request_id": "4718803945687580505",
                "employment_id": "4718803945687580505",
                "employment_name": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ],
                "leave_type_id": "0",
                "leave_type_name": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ],
                "start_time": "2022-07-06",
                "end_time": "2023-01-05",
                "leave_duration": "2",
                "leave_duration_unit": 2,
                "leave_request_status": 2,
                "grant_source": "manual",
                "return_time": "1662134400",
                "submitted_at": "1659080476",
                "submitted_by": "7109664941775241244",
                "notes": "备注",
                "approval_date": "2022-09-09",
                "is_deducted": false,
                "details": [
                    {
                        "leave_request_id": "4718803945687580505",
                        "leave_date": "2022-07-07",
                        "leave_duration": "1",
                        "leave_duration_unit": 1,
                        "paid_type": 1
                    }
                ],
                "leave_type_code": "Annual Leave",
                "actual_end_date": "2022-08-02",
                "estimated_end_date": "2022-08-02",
                "time_zone": "Asia/Shanghai",
                "data_source": 1,
                "leave_process_id": [
                    "7304865941202929196"
                ],
                "leave_correct_process_id": [
                    "7304865941202929196"
                ],
                "leave_cancel_process_id": [
                    "7304865941202929196"
                ],
                "leave_return_process_id": [
                    "7304865941202929196"
                ],
                "wd_paid_type": 1
            }
        ],
        "has_more": true,
        "page_token": "[1712932008000,\"7356863257632491046\"]"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrLeaveRequestHistoryListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
