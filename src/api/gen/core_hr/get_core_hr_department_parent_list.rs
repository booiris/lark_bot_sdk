//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/parents>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-02-23T11:56:58+00:00**
    ///
    /// ## 获取父部门信息
    ///
    /// 该接口用来递归获取部门的父部门信息，并按照由子到父的顺序返回有权限的父部门信息列表。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/department/parents>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/corehr-v1/organization-management/department/parents>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Forganization-management%2Fdepartment%2Fparents>
    pub async fn get_core_hr_department_parent_list(
        &self,
        req: GetCoreHrDepartmentParentListReq,
    ) -> Result<(GetCoreHrDepartmentParentListResp, CommonResponse), Error> {
        self.get_core_hr_department_parent_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_department_parent_list](#method.get_core_hr_department_parent_list) 函数
    pub async fn get_core_hr_department_parent_list_with_opt(
        &self,
        req: GetCoreHrDepartmentParentListReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrDepartmentParentListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_core_hr_department_parent_list(&req)
            {
                tracing::info!("[lark] CoreHr#GetCoreHrDepartmentParentList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrDepartmentParentList call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrDepartmentParentList",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v2/departments/parents",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrDepartmentParentListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrDepartmentParentListReq {
    /// 此次调用中使用的部门 ID 类型
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 以 open_department_id 来标识部门
    ///
    /// `department_id`: 以 department_id 来标识部门
    ///
    /// `people_corehr_department_id`: 以 people_corehr_department_id 来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 部门 ID 列表，一次性最多传入 100 个部门 ID
    ///
    /// **是否必填**: 是
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `100` 字符
    #[api(kind = "body", name = "department_id_list")]
    pub department_id_list: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrDepartmentParentListRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrDepartmentParentListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrDepartmentParentListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 父部门查询结果
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<DepartmentParentsSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DepartmentParentsSubResp {
    /// 部门 ID
    ///
    /// **示例值**: "6893014062142064111"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 父部门列表，部门按照至底向上的顺序返回
    #[serde(
        rename = "parent_department_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_department_list: Vec<DepartmentParentInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DepartmentParentInfoSubResp {
    /// 部门 ID
    ///
    /// **示例值**: "4719456877659520852"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 部门名称
    #[serde(
        rename = "department_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_name: Vec<I18nSubResp>,
    /// 上级部门 ID
    ///
    /// **示例值**: "4719456877659520111"
    #[serde(
        rename = "parent_department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_department_id: String,
    /// 是否启用
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "active",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active: bool,
    /// 是否根部门
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_root",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_root: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCoreHrDepartmentParentListReq,
        ) -> Result<(GetCoreHrDepartmentParentListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrDepartmentParentListReq,
                )
                    -> Result<(GetCoreHrDepartmentParentListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_department_parent_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrDepartmentParentListReq,
            GetCoreHrDepartmentParentListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_department_parent_list(
            &self,
            req: &GetCoreHrDepartmentParentListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCoreHrDepartmentParentListReq,
                GetCoreHrDepartmentParentListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_department_parent_list::{
            GetCoreHrDepartmentParentListReq, GetCoreHrDepartmentParentListResp,
            GetCoreHrDepartmentParentListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_department_parent_list(|_| {
                Ok((
                    GetCoreHrDepartmentParentListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_department_parent_list(GetCoreHrDepartmentParentListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_department_parent_list(GetCoreHrDepartmentParentListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "department_id_list": [
        "6893014062142064111"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetCoreHrDepartmentParentListReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "department_id": "6893014062142064111",
                "parent_department_list": [
                    {
                        "department_id": "4719456877659520852",
                        "department_name": [
                            {
                                "lang": "zh-CN",
                                "value": "张三"
                            }
                        ],
                        "parent_department_id": "4719456877659520111",
                        "active": true,
                        "is_root": true
                    }
                ]
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrDepartmentParentListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
