//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-22T08:40:43+00:00**
    ///
    /// ## 创建雇佣信息
    ///
    /// 创建人员的雇佣信息，需要先[创建个人信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/person/create)。
    ///
    /// - 非必填字段，不传时默认为空
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employment/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/employee/employment/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Femployee%2Femployment%2Fcreate>
    pub async fn create_core_hr_employment(
        &self,
        req: CreateCoreHrEmploymentReq,
    ) -> Result<(CreateCoreHrEmploymentResp, CommonResponse), Error> {
        self.create_core_hr_employment_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_core_hr_employment](#method.create_core_hr_employment) 函数
    pub async fn create_core_hr_employment_with_opt(
        &self,
        req: CreateCoreHrEmploymentReq,
        method_option: MethodOption,
    ) -> Result<(CreateCoreHrEmploymentResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_core_hr_employment(&req) {
                tracing::info!("[lark] CoreHr#CreateCoreHrEmployment **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#CreateCoreHrEmployment call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "CreateCoreHrEmployment",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/employments",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateCoreHrEmploymentRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateCoreHrEmploymentReq {
    /// 根据client_token是否一致来判断是否为同一请求
    ///
    /// **示例值**: "12454646"
    #[api(
        kind = "query",
        name = "client_token",
        v_type = "var",
        option = "false"
    )]
    pub client_token: String,
    /// 资历起算日期
    ///
    /// **示例值**: "2020-01-01"
    #[api(kind = "body", name = "seniority_date")]
    pub seniority_date: Option<String>,
    /// 员工编号（工号）
    ///
    /// - 开启自动编码时由系统自动生成，填写值不生效
    ///
    /// - 未开启自动编码，请主动传递：
    ///
    /// - 由数字或字母组成，请勿使用特殊字符
    ///
    /// - 请保证唯一
    ///
    /// **示例值**: "1000000"
    #[api(kind = "body", name = "employee_number")]
    pub employee_number: Option<String>,
    /// 入职日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2020-01-01 00:00:00"
    #[api(kind = "body", name = "effective_time")]
    pub effective_time: String,
    /// 离职日期，不能早于入职日期
    ///
    /// **示例值**: "2020-01-01 00:00:00"
    #[api(kind = "body", name = "expiration_time")]
    pub expiration_time: Option<String>,
    /// 雇佣类型，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)雇佣类型（employment_type）枚举定义获得
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "employment_type")]
    pub employment_type: EnumSubReq,
    /// 个人信息ID，由[【创建个人信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/person/create)时生成
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919733936050406926"
    #[api(kind = "body", name = "person_id")]
    pub person_id: String,
    /// 是否是主雇佣信息
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "primary_employment")]
    pub primary_employment: bool,
    /// 雇员状态，可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)雇员状态（employment_status）枚举定义获得
    #[api(kind = "body", name = "employment_status")]
    pub employment_status: Option<EnumSubReq>,
    /// 自定义字段，不传时为空
    #[api(kind = "body", name = "custom_fields")]
    pub custom_fields: Vec<Option<ObjectFieldDataSubReq>>,
    /// 工作邮箱列表
    ///
    /// - 只有当满足下面所有条件时，才在工作信息页面可见：
    ///
    /// - is_primary = "true"
    ///
    /// - is_public = "true"
    ///
    /// - email_usage = "work"
    #[api(kind = "body", name = "work_email_list")]
    pub work_email_list: Vec<Option<EmailSubReq>>,
    /// 离职原因，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)离职原因（reason_for_offboarding）枚举定义部分获得
    #[api(kind = "body", name = "reason_for_offboarding")]
    pub reason_for_offboarding: Option<EnumSubReq>,
    /// 招聘投递 ID ，详细信息可以通过[【获取投递信息】](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get)接口查询获得
    ///
    /// **示例值**: "6838119494196871234"
    #[api(kind = "body", name = "ats_application_id")]
    pub ats_application_id: Option<String>,
    /// 是否离职重聘
    ///
    /// - `to_be_confirmed`：待确认，系统会判断该员工是否存在历史雇佣记录，如果存在且需要二次确认时会调用失败，并返回历史雇佣记录
    ///
    /// - `no`：否，系统直接标为非离职重聘人员，不再做重复判断
    ///
    /// - `yes`：是，要求历史雇佣信息 ID 必填
    ///
    /// 示例值：`no`
    ///
    /// 默认值：`to_be_confirmed`
    #[api(kind = "body", name = "rehire")]
    pub rehire: Option<EnumSubReq>,
    /// 历史雇佣信息 ID，可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获得；类型不跟随 user_id_type
    ///
    /// **示例值**: "7051837122449425964"
    #[api(kind = "body", name = "rehire_employment_id")]
    pub rehire_employment_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubReq {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ObjectFieldDataSubReq {
    /// 字段名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(如123, 123.23, "true", [\"id1\",\"id2\"], "2006-01-02 15:04:05")
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\"Sandy\""
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmailSubReq {
    /// 邮箱号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "12456@test.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 是否为主要邮箱
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary: Option<bool>,
    /// 是否为公开邮箱
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_public",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_public: Option<bool>,
    /// 邮箱用途，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)邮箱用途（email_usage）枚举定义获得
    ///
    /// - 请勿填写 home 枚举
    #[serde(
        rename = "email_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_usage: Option<EnumSubReq>,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<Option<ObjectFieldDataSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateCoreHrEmploymentRespInner {
    #[serde(flatten)]
    data: Option<CreateCoreHrEmploymentResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateCoreHrEmploymentResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 创建人员的雇佣信息成功返回信息
    #[serde(
        rename = "employment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment: EmploymentCreateSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmploymentCreateSubResp {
    /// 待入职ID，可通过[【查询单个待入职】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/pre_hire/get)获取详细信息
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "prehire_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub prehire_id: String,
    /// 人员类型，可通过[【查询单个人员类型】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/get)获取详细信息
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "employee_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type_id: String,
    /// 司龄
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "tenure",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tenure: String,
    /// 部门 ID，可通过[【查询单个部门】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/department/get)获取详细信息；类型不跟随department_id_type
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 职级 ID，可通过[【查询单个职级】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/get)获取详细信息
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "job_level_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_level_id: String,
    /// 工作地点 ID，可通过[【查询单个地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/get)获取详细信息
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "work_location_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_location_id: String,
    /// 职务序列 ID，可通过[【查询单个序列】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/get)获取详细信息
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "job_family_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_family_id: String,
    /// 职务 ID，可通过[【查询单个职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/get)获取详细信息
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "job_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_id: String,
    /// 法人主体 ID，可通过[【查询单个公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/get)获取详细信息
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "company_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub company_id: String,
    /// 工时制度 ID，可通过[【查询单个工时制度】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/get)获取详细信息
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "working_hours_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub working_hours_type_id: String,
    /// 雇佣ID，实体在CoreHR内部的唯一键；可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获取更多信息
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 资历起算日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "seniority_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub seniority_date: String,
    /// 员工编号
    ///
    /// **示例值**: "1000000"
    #[serde(
        rename = "employee_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_number: String,
    /// 入职日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2020-01-01 00:00:00"
    #[serde(
        rename = "effective_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub effective_time: String,
    /// 离职日期
    ///
    /// **示例值**: "2020-01-01 00:00:00"
    #[serde(
        rename = "expiration_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiration_time: String,
    /// 雇佣类型，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)雇佣类型（employment_type）枚举定义获得
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "employment_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_type: EnumSubResp,
    /// 个人信息ID，可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获取详细信息
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919733936050406926"
    #[serde(
        rename = "person_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub person_id: String,
    /// 试用期时长
    ///
    /// **示例值**: "9999"
    #[serde(
        rename = "probation_period",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_period: i64,
    /// 是否在试用期中
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "on_probation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_probation: String,
    /// 试用期结束日期
    ///
    /// **示例值**: "2022-01-01"
    #[serde(
        rename = "probation_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_end_date: String,
    /// 是否是主雇佣信息
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "primary_employment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub primary_employment: bool,
    /// 雇员状态，可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)雇员状态（employment_status）枚举定义获得
    #[serde(
        rename = "employment_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_status: EnumSubResp,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
    /// 工作邮箱列表，只有当邮箱下面所有条件时，才在个人信息页面可见：
    ///
    /// - is_primary = "true"
    ///
    /// - is_public = "true"
    ///
    /// - email_usage = "work"
    #[serde(
        rename = "work_email_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_email_list: Vec<EmailSubResp>,
    /// 邮箱
    ///
    /// **示例值**: "test@163.com"
    #[serde(
        rename = "email_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_address: String,
    /// 离职原因，可通过[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)离职原因（reason_for_offboarding）枚举定义获得
    #[serde(
        rename = "reason_for_offboarding",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason_for_offboarding: EnumSubResp,
    /// 成本中心id列表
    #[serde(
        rename = "cost_center_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cost_center_list: Vec<JobDataCostCenterSubResp>,
    /// 招聘投递 ID ，详细信息可以通过[【获取投递信息】](https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get)接口查询获得
    ///
    /// **示例值**: "6838119494196871234"
    #[serde(
        rename = "ats_application_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ats_application_id: String,
    /// 是否离职重聘
    ///
    /// - `to_be_confirmed`：待确认
    ///
    /// - `no`：否
    ///
    /// - `yes`：是
    #[serde(
        rename = "rehire",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rehire: EnumSubResp,
    /// 历史雇佣信息 ID，可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)、
    ///
    /// [【搜索员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/search)获取详细信息
    ///
    /// **示例值**: "7051837122449425964"
    #[serde(
        rename = "rehire_employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rehire_employment_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubResp {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "type_1"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
    /// 枚举多语展示
    #[serde(
        rename = "display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display: Vec<I18nSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ObjectFieldDataSubResp {
    /// 字段名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(如123, 123.23, "true", [\"id1\",\"id2\"], "2006-01-02 15:04:05")
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\"Sandy\""
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmailSubResp {
    /// 邮箱号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "12456@test.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 是否为主要邮箱
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary: bool,
    /// 是否为公开邮箱
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_public",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_public: bool,
    /// 邮箱用途，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)邮箱用途（email_usage）枚举定义获得
    #[serde(
        rename = "email_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email_usage: EnumSubResp,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobDataCostCenterSubResp {
    /// 成本中心id，可以通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)获取详细信息
    ///
    /// **示例值**: "6950635856373745165"
    #[serde(
        rename = "cost_center_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cost_center_id: String,
    /// 分摊比例
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rate: i64,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 名称信息的语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateCoreHrEmploymentReq) -> Result<(CreateCoreHrEmploymentResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateCoreHrEmploymentReq,
                ) -> Result<(CreateCoreHrEmploymentResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_core_hr_employment<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateCoreHrEmploymentReq,
            CreateCoreHrEmploymentResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_core_hr_employment(
            &self,
            req: &CreateCoreHrEmploymentReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateCoreHrEmploymentReq,
                CreateCoreHrEmploymentResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::create_core_hr_employment::{
            CreateCoreHrEmploymentReq, CreateCoreHrEmploymentResp, CreateCoreHrEmploymentRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_create_core_hr_employment(|_| {
                Ok((
                    CreateCoreHrEmploymentResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .create_core_hr_employment(CreateCoreHrEmploymentReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .create_core_hr_employment(CreateCoreHrEmploymentReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "seniority_date": "2020-01-01",
    "employee_number": "1000000",
    "effective_time": "2020-01-01 00:00:00",
    "expiration_time": "2020-01-01 00:00:00",
    "employment_type": {
        "enum_name": "employee"
    },
    "person_id": "6919733936050406926",
    "primary_employment": true,
    "employment_status": {
        "enum_name": "hired"
    },
    "custom_fields": [
        {
            "field_name": "name",
            "value": "\"Sandy\""
        }
    ],
    "work_email_list": [
        {
            "email": "12456@test.com",
            "is_primary": true,
            "is_public": true,
            "email_usage": {
                "enum_name": "work"
            },
            "custom_fields": [
                {
                    "field_name": "name",
                    "value": "\"Sandy\""
                }
            ]
        }
    ],
    "reason_for_offboarding": {
        "enum_name": "voluntary"
    },
    "ats_application_id": "6838119494196871234",
    "rehire": {
        "enum_name": "yes"
    },
    "rehire_employment_id": "7051837122449425964"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateCoreHrEmploymentReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "employment": {
            "prehire_id": "1",
            "employee_type_id": "1",
            "tenure": "1",
            "department_id": "6893014062142064135",
            "job_level_id": "6893014062142064135",
            "work_location_id": "6893014062142064135",
            "job_family_id": "6893014062142064135",
            "job_id": "6893014062142064135",
            "company_id": "6893014062142064135",
            "working_hours_type_id": "6893014062142064135",
            "id": "6893014062142064135",
            "seniority_date": "2020-01-01",
            "employee_number": "1000000",
            "effective_time": "2020-01-01 00:00:00",
            "expiration_time": "2020-01-01 00:00:00",
            "employment_type": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ]
            },
            "person_id": "6919733936050406926",
            "probation_period": 9999,
            "on_probation": "true",
            "probation_end_date": "2022-01-01",
            "primary_employment": true,
            "employment_status": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ]
            },
            "custom_fields": [
                {
                    "field_name": "name",
                    "value": "\"Sandy\""
                }
            ],
            "work_email_list": [
                {
                    "email": "12456@test.com",
                    "is_primary": true,
                    "is_public": true,
                    "email_usage": {
                        "enum_name": "type_1",
                        "display": [
                            {
                                "lang": "zh-CN",
                                "value": "张三"
                            }
                        ]
                    },
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "\"Sandy\""
                        }
                    ]
                }
            ],
            "email_address": "test@163.com",
            "reason_for_offboarding": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ]
            },
            "cost_center_list": [
                {
                    "cost_center_id": "6950635856373745165",
                    "rate": 100,
                    "custom_fields": [
                        {
                            "field_name": "name",
                            "value": "\"Sandy\""
                        }
                    ]
                }
            ],
            "ats_application_id": "6838119494196871234",
            "rehire": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ]
            },
            "rehire_employment_id": "7051837122449425964"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateCoreHrEmploymentRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
