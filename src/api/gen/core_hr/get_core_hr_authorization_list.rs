//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/authorization/query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-12T08:34:34+00:00**
    ///
    /// ## 批量查询用户授权
    ///
    /// 批量查询[飞书人事管理后台](https://people.feishu.cn/people/) -「设置」-「权限设置」中的用户授权信息。授权列表信息中包括员工ID、被授权的角色等信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/authorization/query>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/authorization/batch-query-user-authorization>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fauthorization%2Fbatch-query-user-authorization>
    pub async fn get_core_hr_authorization_list(
        &self,
        req: GetCoreHrAuthorizationListReq,
    ) -> Result<(GetCoreHrAuthorizationListResp, CommonResponse), Error> {
        self.get_core_hr_authorization_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_authorization_list](#method.get_core_hr_authorization_list) 函数
    pub async fn get_core_hr_authorization_list_with_opt(
        &self,
        req: GetCoreHrAuthorizationListReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrAuthorizationListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_core_hr_authorization_list(&req) {
                tracing::info!("[lark] CoreHr#GetCoreHrAuthorizationList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrAuthorizationList call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrAuthorizationList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/authorizations/query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrAuthorizationListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrAuthorizationListReq {
    /// 员工ID列表，最大100个（不传则默认查询全部员工）。ID类型与user_id_type的取值意义一致。默认为飞书人事中的 ==employment_id==。
    ///
    /// >
    ///
    /// 如果你需要不同类型的ID进行转换，可以使用 [ID转换服务](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/common_data-id/convert) 换取 ==employment_id==
    #[api(
        kind = "query",
        name = "employment_id_list",
        v_type = "list",
        option = "false"
    )]
    pub employment_id_list: Vec<String>,
    /// 角色 ID 列表，最大 100 个。当传该参数时，会根据rold_id过滤，只返回包含该角色的授权信息。
    ///
    /// >
    ///
    /// 你可以使用 [批量获取角色列表](https://open.larkoffice.com/document/server-docs/corehr-v1/authorization/list) 获取，或者在角色详情中获取（URL 末的数字）。
    #[api(
        kind = "query",
        name = "role_id_list",
        v_type = "list",
        option = "false"
    )]
    pub role_id_list: Vec<String>,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "6969864184272078374"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 每页获取记录数量，最大20(不传该参数，默认为20)
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "people_corehr_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_corehr_id`: 以飞书人事的 ID 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrAuthorizationListRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrAuthorizationListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrAuthorizationListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 查询的用户授权信息
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<RoleAuthorizationSubResp>,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "1234452132"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoleAuthorizationSubResp {
    /// 员工 ID
    ///
    /// >
    ///
    /// 可以使用[搜索员工信息](https://open.larkoffice.com/document/server-docs/corehr-v1/employee/search)接口获取员工其他信息。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6967639606963471902"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 授权列表
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "permission_detail_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub permission_detail_list: Vec<PermissionDetailSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PermissionDetailSubResp {
    /// 角色
    #[serde(
        rename = "role",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub role: SecurityGroupSubResp,
    /// 指定管理对象列表，如果该值为null，则使用设置数据权限(grantor_rule_list)
    #[serde(
        rename = "assigned_organization_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assigned_organization_list: Vec<Vec<AssignedOrganizationSubResp>>,
    /// 设置数据权限，如果该值为null，则使用指定管理对象列表(assigned_organization_list)
    #[serde(
        rename = "grantor_rule_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub grantor_rule_list: Vec<PermissionSecurityGroupSubResp>,
    /// 更新时间(时间戳，单位：s)
    ///
    /// **示例值**: "1720584039"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SecurityGroupSubResp {
    /// 角色ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7034393015968122400"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 角色code
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "department_manager"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 角色名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: NameSubResp,
    /// 角色描述
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: NameSubResp,
    /// 组织管理维度
    #[serde(
        rename = "org_truncation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub org_truncation: Vec<OrgTruncationSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct NameSubResp {
    /// 中文
    ///
    /// **示例值**: "cn"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文
    ///
    /// **示例值**: "en"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PermissionSecurityGroupSubResp {
    /// 管理维度
    #[serde(
        rename = "rule_dimension",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rule_dimension: RuleDimensionSubResp,
    /// 管理类型
    ///
    /// - 0：无数据权限
    ///
    /// - 1：全部数据权限
    ///
    /// - 2：被授权的用户自己
    ///
    /// - 3：按规则指定范围
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "rule_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rule_type: i64,
    /// 规则
    #[serde(
        rename = "expression",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expression: FilterExpressionSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OrgTruncationSubResp {
    /// 组织管理维度名称
    ///
    /// **示例值**: "department"
    #[serde(
        rename = "org_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub org_key: String,
    /// 下钻类型
    ///
    /// - 0 = 对当前管理维度及下级管理维度均有权限
    ///
    /// - 1 = 只对当前管理维度有权限，不包含其下级管理维度
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 下钻深度
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "depth",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub depth: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AssignedOrganizationSubResp {
    /// 管理对象key
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "department"
    #[serde(
        rename = "org_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub org_key: String,
    /// 管理对象名称
    #[serde(
        rename = "org_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub org_name: NameSubResp,
    /// 管理对象id列表
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "org_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub org_id_list: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RuleDimensionSubResp {
    /// 维度的key
    ///
    /// **示例值**: "员工"
    #[serde(
        rename = "entity_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub entity_key: String,
    /// 维度名称
    #[serde(
        rename = "entity_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub entity_name: NameSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FilterExpressionSubResp {
    /// 规则
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `100` 字符
    #[serde(
        rename = "conditions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conditions: Vec<FilterConditionSubResp>,
    /// 表达式
    ///
    /// **示例值**: "1 and 2"
    #[serde(
        rename = "expression",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expression: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FilterConditionSubResp {
    /// 左值
    #[serde(
        rename = "left",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub left: FilterRuleValueSubResp,
    /// 右值
    #[serde(
        rename = "right",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub right: FilterRuleValueSubResp,
    /// 操作符
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "operator",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operator: i64,
    /// 右值类型
    ///
    /// - 1 = 指定值
    ///
    /// - 2 = 引用
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "right_value_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub right_value_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FilterRuleValueSubResp {
    /// 规则值类型（value的类型）
    ///
    /// - 0 = 字符串
    ///
    /// - 1 = 数字
    ///
    /// - 2 = 字符串数组
    ///
    /// - 3 = 数字数组
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 规则值
    ///
    /// **示例值**: "a"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
    /// 下钻值
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "lookup_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lookup_value: String,
    /// 下钻类型
    ///
    /// **示例值**: "user"
    #[serde(
        rename = "lookup_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lookup_type: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCoreHrAuthorizationListReq,
        ) -> Result<(GetCoreHrAuthorizationListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrAuthorizationListReq,
                )
                    -> Result<(GetCoreHrAuthorizationListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_authorization_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrAuthorizationListReq,
            GetCoreHrAuthorizationListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_authorization_list(
            &self,
            req: &GetCoreHrAuthorizationListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCoreHrAuthorizationListReq,
                GetCoreHrAuthorizationListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_authorization_list::{
            GetCoreHrAuthorizationListReq, GetCoreHrAuthorizationListResp,
            GetCoreHrAuthorizationListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_authorization_list(|_| {
                Ok((
                    GetCoreHrAuthorizationListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_authorization_list(GetCoreHrAuthorizationListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_authorization_list(GetCoreHrAuthorizationListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "employment_id": "6967639606963471902",
                "permission_detail_list": [
                    {
                        "role": {
                            "id": "7034393015968122400",
                            "code": "department_manager",
                            "name": {
                                "zh_cn": "cn",
                                "en_us": "en"
                            },
                            "description": {
                                "zh_cn": "cn",
                                "en_us": "en"
                            },
                            "org_truncation": [
                                {
                                    "org_key": "department",
                                    "type": 0,
                                    "depth": 0
                                }
                            ]
                        },
                        "assigned_organization_list": [
                            [
                                {
                                    "org_key": "department",
                                    "org_name": {
                                        "zh_cn": "cn",
                                        "en_us": "en"
                                    },
                                    "org_id_list": [
                                        "6967639606963471902"
                                    ]
                                }
                            ]
                        ],
                        "grantor_rule_list": [
                            {
                                "rule_dimension": {
                                    "entity_key": "员工",
                                    "entity_name": {
                                        "zh_cn": "cn",
                                        "en_us": "en"
                                    }
                                },
                                "rule_type": 1,
                                "expression": {
                                    "conditions": [
                                        {
                                            "left": {
                                                "type": 1,
                                                "value": "a",
                                                "lookup_value": "1",
                                                "lookup_type": "user"
                                            },
                                            "right": {
                                                "type": 1,
                                                "value": "a",
                                                "lookup_value": "1",
                                                "lookup_type": "user"
                                            },
                                            "operator": 1,
                                            "right_value_type": 1
                                        }
                                    ],
                                    "expression": "1 and 2"
                                }
                            }
                        ],
                        "update_time": "1720584039"
                    }
                ]
            }
        ],
        "has_more": true,
        "page_token": "1234452132"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrAuthorizationListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
