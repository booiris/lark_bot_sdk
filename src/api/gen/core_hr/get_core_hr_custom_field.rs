//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-29T10:19:36+00:00**
    ///
    /// ## 获取字段详情
    ///
    /// 获取「飞书人事」对象下某字段的详细信息，支持系统预置字段和自定义字段。可通过该接口获取某个选项字段包含的选项列表，某个自定义分组中包含的字段列表等。使用方式可参考[【操作手册】如何通过 OpenAPI 维护自定义字段](https://feishu.feishu.cn/docx/QlUudBfCtosWMbxx3vxcOFDknn7)
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/custom_field/get_by_param>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fbasic-infomation%2Fcustom_field%2Fget_by_param>
    pub async fn get_core_hr_custom_field(
        &self,
        req: GetCoreHrCustomFieldReq,
    ) -> Result<(GetCoreHrCustomFieldResp, CommonResponse), Error> {
        self.get_core_hr_custom_field_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_custom_field](#method.get_core_hr_custom_field) 函数
    pub async fn get_core_hr_custom_field_with_opt(
        &self,
        req: GetCoreHrCustomFieldReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrCustomFieldResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_core_hr_custom_field(&req) {
                tracing::info!("[lark] CoreHr#GetCoreHrCustomField **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrCustomField call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrCustomField",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/custom_fields/get_by_param",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrCustomFieldRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrCustomFieldReq {
    /// 所属对象 API name
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "offboarding_info"
    #[api(
        kind = "query",
        name = "object_api_name",
        v_type = "var",
        option = "false"
    )]
    pub object_api_name: String,
    /// 字段 API name
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "custom_field_33__c"
    #[api(
        kind = "query",
        name = "custom_api_name",
        v_type = "var",
        option = "false"
    )]
    pub custom_api_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrCustomFieldRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrCustomFieldResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrCustomFieldResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 字段详情
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: CustomFieldSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomFieldSubResp {
    /// 字段 API name，即字段的唯一标识
    ///
    /// **示例值**: "custom_field_33__c"
    #[serde(
        rename = "custom_api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_api_name: String,
    /// 字段名称
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: NameSubResp,
    /// 描述
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: NameSubResp,
    /// 是否启用
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_open",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_open: bool,
    /// 是否必填
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_required",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_required: bool,
    /// 是否唯一
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_unique",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_unique: bool,
    /// 所属对象 apiname
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "offboarding_info"
    #[serde(
        rename = "object_api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_api_name: String,
    /// 字段类型
    ///
    /// **可选值有：**
    ///
    /// - 1：文本 Text，“文本”和“超链接”属于该类型
    ///
    /// - 2：布尔 Boolean
    ///
    /// - 3：数字 Number
    ///
    /// - 4：枚举 Enum，“单选”和“单选”属于该类型
    ///
    /// - 5：查找 Lookup，“人员（单选）”、“人员（多选）”及“人员档案管理”页面中用户添加的自定义分组属于该类型
    ///
    /// - 6：自动编码 Auto Number
    ///
    /// - 7：日期时间 Date Time
    ///
    /// - 8：附件 Attachment，“附件单选”和“附件多选”为该类型
    ///
    /// - 9：图片 Image
    ///
    /// - 10：计算字段 Calculated
    ///
    /// - 11：反向查找 Back Lookup
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 字段类型配置信息，可以用来区分同一字段类型下的不同子类型。当前仅字段类型为「文本」「布尔」「数字」「枚举」「日期时间」「附件」「图片」时返回相应的配置信息，其余类型暂不返回
    #[serde(
        rename = "common_schema_config",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub common_schema_config: CommonSchemaConfigSubResp,
    /// 创建时间，秒级时间戳
    ///
    /// **示例值**: "1625542287"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 更新时间，秒级时间戳
    ///
    /// **示例值**: "1625542639"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct NameSubResp {
    /// 中文
    ///
    /// **示例值**: "cn"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 英文
    ///
    /// **示例值**: "en"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CommonSchemaConfigSubResp {
    /// 文本配置信息
    #[serde(
        rename = "text_field_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_field_setting: TextFieldSettingSubResp,
    /// 数字配置信息
    #[serde(
        rename = "number_field_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number_field_setting: NumberFieldSettingSubResp,
    /// 选项配置信息
    #[serde(
        rename = "enum_field_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_field_setting: EnumFieldSettingSubResp,
    /// 查找字段配置信息
    #[serde(
        rename = "lookup_field_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lookup_field_setting: LookupFieldSettingSubResp,
    /// 日期时间配置信息
    #[serde(
        rename = "date_time_field_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_time_field_setting: DateTimeFieldSettingSubResp,
    /// 附件配置信息
    #[serde(
        rename = "attachment_field_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub attachment_field_setting: AttachmentFieldSettingSubResp,
    /// 图片配置信息
    #[serde(
        rename = "image_field_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub image_field_setting: ImageFieldSettingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TextFieldSettingSubResp {
    /// 是否多语言
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_multilingual",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_multilingual: bool,
    /// 是否多行
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_multiline",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_multiline: bool,
    /// 最大长度
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "max_length",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max_length: i64,
    /// 是否是“超链接”类型
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_url_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_url_type: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct NumberFieldSettingSubResp {
    /// 数字类型
    ///
    /// **可选值有：**
    ///
    /// - `1`：Percent 百分比（定点小数）
    ///
    /// - `2`：Integer 整数
    ///
    /// - `3`：Value 数值（定点小数）
    ///
    /// - `4`：Money 金额（定点小数）
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "number_field_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number_field_type: i64,
    /// 小数点后的位数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "decimal_places",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub decimal_places: i64,
    /// 四舍五入规则
    ///
    /// **可选值有：**
    ///
    /// - `0`：Round 四舍五入
    ///
    /// - `1`：Ceil 向上舍入
    ///
    /// - `2`：Floor 向下舍入
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "round_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub round_type: i64,
    /// 整数+小数的最大总位数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "decimal_total_places",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub decimal_total_places: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumFieldSettingSubResp {
    /// 选项信息
    #[serde(
        rename = "enum_field_option_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_field_option_list: Vec<CommonSchemaOptionSubResp>,
    /// 是否为多选
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_multiple",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_multiple: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LookupFieldSettingSubResp {
    /// 查找字段所引用对象的 API name。对于“人员（单选）”和“人员（多选）”，其值为 `employment`。可通过[获取自定义字段列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/query)接口传入此参数的值来查询自定义分组中定义的自定义字段
    ///
    /// **示例值**: "employment"
    #[serde(
        rename = "lookup_obj_api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lookup_obj_api_name: String,
    /// 是否为多值。例如“人员（单选）字段”此属性为 false，而“人员（多选）”字段此属性为 true。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_multiple",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_multiple: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DateTimeFieldSettingSubResp {
    /// 时间类型枚举
    ///
    /// **可选值有：**
    ///
    /// - `1`：Date 日期，如 2020-01-01
    ///
    /// - `2`：Time  时间，如 11:52:00
    ///
    /// - `3`：DateTime 日期时间，如 2020-01-01 11:52:00
    ///
    /// - `4`：CusDateTime 时间戳
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "date_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_time_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AttachmentFieldSettingSubResp {
    /// 是否支持多个文件
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_multiple",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_multiple: bool,
    /// 废弃属性，不建议使用，通常为空值
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "file_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ImageFieldSettingSubResp {
    /// 图片类型枚举
    ///
    /// **可选值有：**
    ///
    /// - `1`：Avatar 头像
    ///
    /// - `2`：BadgePhoto 工卡照片
    ///
    /// - `3`：Logo 标志
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "image_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub image_type: i64,
    /// 显示样式枚举
    ///
    /// **可选值有：**
    ///
    /// - `1`：SquareImage 方形
    ///
    /// - `2`：RoundImage  圆形
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "display_style",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_style: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CommonSchemaOptionSubResp {
    /// 枚举常量集 API name，即一组选项集合的唯一标识。系统预置的枚举常量集可在[枚举常量介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)文档中查询到
    ///
    /// **示例值**: "custom_enum_option_33"
    #[serde(
        rename = "api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub api_name: String,
    /// 选项名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: NameSubResp,
    /// 选项描述
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: NameSubResp,
    /// 是否启用
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_open",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_open: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetCoreHrCustomFieldReq) -> Result<(GetCoreHrCustomFieldResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrCustomFieldReq,
                ) -> Result<(GetCoreHrCustomFieldResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_custom_field<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrCustomFieldReq,
            GetCoreHrCustomFieldResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_custom_field(
            &self,
            req: &GetCoreHrCustomFieldReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetCoreHrCustomFieldReq, GetCoreHrCustomFieldResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_custom_field::{
            GetCoreHrCustomFieldReq, GetCoreHrCustomFieldResp, GetCoreHrCustomFieldRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_custom_field(|_| {
                Ok((
                    GetCoreHrCustomFieldResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_custom_field(GetCoreHrCustomFieldReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_custom_field(GetCoreHrCustomFieldReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "data": {
            "custom_api_name": "custom_field_33__c",
            "name": {
                "zh_cn": "cn",
                "en_us": "en"
            },
            "description": {
                "zh_cn": "cn",
                "en_us": "en"
            },
            "is_open": true,
            "is_required": true,
            "is_unique": true,
            "object_api_name": "offboarding_info",
            "type": 1,
            "common_schema_config": {
                "text_field_setting": {
                    "is_multilingual": true,
                    "is_multiline": true,
                    "max_length": 1,
                    "is_url_type": true
                },
                "number_field_setting": {
                    "number_field_type": 1,
                    "decimal_places": 1,
                    "round_type": 1,
                    "decimal_total_places": 1
                },
                "enum_field_setting": {
                    "enum_field_option_list": [
                        {
                            "api_name": "custom_enum_option_33",
                            "name": {
                                "zh_cn": "cn",
                                "en_us": "en"
                            },
                            "description": {
                                "zh_cn": "cn",
                                "en_us": "en"
                            },
                            "is_open": true
                        }
                    ],
                    "is_multiple": false
                },
                "lookup_field_setting": {
                    "lookup_obj_api_name": "employment",
                    "is_multiple": false
                },
                "date_time_field_setting": {
                    "date_time_type": 1
                },
                "attachment_field_setting": {
                    "is_multiple": false,
                    "file_type": 1
                },
                "image_field_setting": {
                    "image_type": 1,
                    "display_style": 1
                }
            },
            "create_time": "1625542287",
            "update_time": "1625542639"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrCustomFieldRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
