//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-17T08:42:38+00:00**
    ///
    /// ## 创建公司
    ///
    /// 创建公司。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/company/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Forganization-management%2Fcompany%2Fcreate>
    pub async fn create_core_hr_company(
        &self,
        req: CreateCoreHrCompanyReq,
    ) -> Result<(CreateCoreHrCompanyResp, CommonResponse), Error> {
        self.create_core_hr_company_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_core_hr_company](#method.create_core_hr_company) 函数
    pub async fn create_core_hr_company_with_opt(
        &self,
        req: CreateCoreHrCompanyReq,
        method_option: MethodOption,
    ) -> Result<(CreateCoreHrCompanyResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_core_hr_company(&req) {
                tracing::info!("[lark] CoreHr#CreateCoreHrCompany **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#CreateCoreHrCompany call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "CreateCoreHrCompany",
            method: http::Method::POST,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/corehr/v1/companies",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateCoreHrCompanyRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateCoreHrCompanyReq {
    /// 根据client_token是否一致来判断是否为同一请求
    ///
    /// **示例值**: "12454646"
    #[api(
        kind = "query",
        name = "client_token",
        v_type = "var",
        option = "false"
    )]
    pub client_token: String,
    /// 层级关系，内层字段见实体
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "hiberarchy_common")]
    pub hiberarchy_common: HiberarchyCommonSubReq,
    /// 性质，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)公司类型（company_type）枚举定义部分获得。
    #[api(kind = "body", name = "type")]
    pub body_type: Option<EnumSubReq>,
    /// 行业，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)行业（industry）枚举定义部分获得
    #[api(kind = "body", name = "industry_list")]
    pub industry_list: Vec<Option<EnumSubReq>>,
    /// 法定代表人。
    ///
    /// 仅注册地址中的 国家 / 地区为中国大陆时，法人字段填入才有效。
    ///
    /// 若注册地址中的 国家 / 地区 不为中国大陆时，则填入法人字段无效。
    #[api(kind = "body", name = "legal_representative")]
    pub legal_representative: Vec<Option<I18nSubReq>>,
    /// 邮编
    ///
    /// **示例值**: "邮编"
    #[api(kind = "body", name = "post_code")]
    pub post_code: Option<String>,
    /// 纳税人识别号
    ///
    /// **示例值**: "123456840"
    #[api(kind = "body", name = "tax_payer_id")]
    pub tax_payer_id: Option<String>,
    /// 是否保密
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "confidential")]
    pub confidential: Option<bool>,
    /// 主体类型，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)主体类型（company_sub_type）枚举定义部分获得
    #[api(kind = "body", name = "sub_type_list")]
    pub sub_type_list: Vec<Option<EnumSubReq>>,
    /// 是否为分公司
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "branch_company")]
    pub branch_company: Option<bool>,
    /// 主要负责人
    #[api(kind = "body", name = "primary_manager")]
    pub primary_manager: Vec<Option<I18nSubReq>>,
    /// 自定义字段
    #[api(kind = "body", name = "custom_fields")]
    pub custom_fields: Vec<Option<ObjectFieldDataSubReq>>,
    /// 默认币种
    #[api(kind = "body", name = "currency")]
    pub currency: Option<CurrencySubReq>,
    /// 电话
    #[api(kind = "body", name = "phone")]
    pub phone: Option<PhoneNumberAndAreaCodeSubReq>,
    /// 传真
    #[api(kind = "body", name = "fax")]
    pub fax: Option<PhoneNumberAndAreaCodeSubReq>,
    /// 注册地址详细信息。公共字段，若请求对象为公司，则该字段必填。
    #[api(kind = "body", name = "registered_office_address_info")]
    pub registered_office_address_info: Option<AddressSubReq>,
    /// 办公地址详细信息。公共字段，若请求对象为公司，则该字段必填。
    #[api(kind = "body", name = "office_address_info")]
    pub office_address_info: Option<AddressSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct HiberarchyCommonSubReq {
    /// 上级组织 ID
    ///
    /// **示例值**: "4719168654814483759"
    #[serde(
        rename = "parent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_id: Option<String>,
    /// 名称
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Vec<Option<I18nSubReq>>,
    /// 组织类型，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)组织类型（organization_type）枚举定义部分获得。该字段为通用字段，若为公司维度则为必填。
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: Option<EnumSubReq>,
    /// 是否启用该公司
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "active",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active: bool,
    /// 生效时间。该参数为公共参数，若对象为公司则为必填。
    ///
    /// **示例值**: "2020-05-01 00:00:00"
    #[serde(
        rename = "effective_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub effective_time: Option<String>,
    /// 失效时间
    ///
    /// **示例值**: "2020-05-02 00:00:00"
    #[serde(
        rename = "expiration_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiration_time: Option<String>,
    /// 公司编码
    ///
    /// **示例值**: "12456"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: Option<String>,
    /// 描述
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: Vec<Option<I18nSubReq>>,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<Option<ObjectFieldDataSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubReq {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "type_1"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CurrencySubReq {
    /// 货币名称
    #[serde(
        rename = "currency_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_name: Vec<Option<I18nSubReq>>,
    /// 对应币种的指代代码，通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)查询获取。
    ///
    /// **示例值**: "12"
    #[serde(
        rename = "numeric_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub numeric_code: Option<i64>,
    /// 法定货币对应代码，如CNY	、USD等，通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)查询获取。
    ///
    /// **示例值**: "CNY"
    #[serde(
        rename = "currency_alpha_3_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_alpha_3_code: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PhoneNumberAndAreaCodeSubReq {
    /// 区号对应的数字，可通过
    ///
    /// [请求接口](https://open.larkoffice.com/document/server-docs/corehr-v1/basic-infomation/custom_field/get_by_param)查询获取。请求参数：object_api_name=phone；custom_api_name=international_area_code
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "123123"
    #[serde(
        rename = "area_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub area_code: EnumSubReq,
    /// 号码
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18812341234"
    #[serde(
        rename = "phone_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_number: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AddressSubReq {
    /// 国家 / 地区id。各国家/地区填写字段可参考[地址填写规则](https://bytedance.larkoffice.com/wiki/GoL4wAKAXis3OWku72YcEjTxnKe?sheet=0sMjoP)查询。
    ///
    /// 国家/地区id可通过[请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-country_region/search)查询获取。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6862995757234914824"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 主要行政区id。
    ///
    /// 可通过
    ///
    /// [请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-country_region_subdivision/search)查询获取。
    ///
    /// **示例值**: "6863326815667095047"
    #[serde(
        rename = "region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub region_id: Option<String>,
    /// 城市id，可通过
    ///
    /// [请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-city/search)查询获取。
    ///
    /// **示例值**: "6863333254578046471"
    #[serde(
        rename = "city_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city_id: Option<String>,
    /// 区/县id，可通过
    ///
    /// [请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-district/search)查询获取。
    ///
    /// **示例值**: "6863333516579440141"
    #[serde(
        rename = "distinct_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub distinct_id: Option<String>,
    /// 地址行 1
    ///
    /// **示例值**: "丹佛测试地址-纽埃时区"
    #[serde(
        rename = "address_line1",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line1: Option<String>,
    /// 地址行 2
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "address_line2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line2: Option<String>,
    /// 地址行 3
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "address_line3",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line3: Option<String>,
    /// 地址行 4
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line4",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line4: Option<String>,
    /// 地址行 5
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line5: Option<String>,
    /// 地址行 6
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line6",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line6: Option<String>,
    /// 地址行 7
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line7",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line7: Option<String>,
    /// 地址行 8
    ///
    /// **示例值**: "rafSu"
    #[serde(
        rename = "address_line8",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line8: Option<String>,
    /// 地址行 9
    ///
    /// **示例值**: "McPRG"
    #[serde(
        rename = "address_line9",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line9: Option<String>,
    /// 地址行 1（非拉丁语系的本地文字）
    ///
    /// **示例值**: "丹佛测试地址-纽埃时区"
    #[serde(
        rename = "local_address_line1",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line1: Option<String>,
    /// 地址行 2（非拉丁语系的本地文字）
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "local_address_line2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line2: Option<String>,
    /// 地址行 3（非拉丁语系的本地文字）
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "local_address_line3",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line3: Option<String>,
    /// 地址行 4（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line4",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line4: Option<String>,
    /// 地址行 5（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line5: Option<String>,
    /// 地址行 6（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line6",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line6: Option<String>,
    /// 地址行 7（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line7",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line7: Option<String>,
    /// 地址行 8（非拉丁语系的本地文字）
    ///
    /// **示例值**: "rafSu"
    #[serde(
        rename = "local_address_line8",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line8: Option<String>,
    /// 地址行 9（非拉丁语系的本地文字）
    ///
    /// **示例值**: "McPRG"
    #[serde(
        rename = "local_address_line9",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line9: Option<String>,
    /// 邮政编码
    ///
    /// **示例值**: "611530"
    #[serde(
        rename = "postal_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub postal_code: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubReq {
    /// 名称信息的语言，支持中文和英文。中文用zh-CN；英文用en-US。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容，支持中文和英文
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ObjectFieldDataSubReq {
    /// 字段名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(如123, 123.23, "true", [\"id1\",\"id2\"], "2006-01-02 15:04:05")
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\"Sandy\""
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateCoreHrCompanyRespInner {
    #[serde(flatten)]
    data: Option<CreateCoreHrCompanyResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateCoreHrCompanyResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 创建成功的公司信息
    #[serde(
        rename = "company",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub company: CompanySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CompanySubResp {
    /// 公司 ID
    ///
    /// **示例值**: "4692472714243080020"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 层级关系，内层字段见实体
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "hiberarchy_common",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hiberarchy_common: HiberarchyCommonSubResp,
    /// 性质，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)公司类型（company_type）枚举定义部分获得。
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: EnumSubResp,
    /// 行业，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)行业（industry）枚举定义部分获得
    #[serde(
        rename = "industry_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub industry_list: Vec<EnumSubResp>,
    /// 法定代表人。
    ///
    /// 仅注册地址中的 国家 / 地区为中国大陆时，法人字段填入才有效。
    ///
    /// 若注册地址中的 国家 / 地区 不为中国大陆时，则填入法人字段无效。
    #[serde(
        rename = "legal_representative",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub legal_representative: Vec<I18nSubResp>,
    /// 邮编
    ///
    /// **示例值**: "邮编"
    #[serde(
        rename = "post_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub post_code: String,
    /// 纳税人识别号
    ///
    /// **示例值**: "123456840"
    #[serde(
        rename = "tax_payer_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tax_payer_id: String,
    /// 是否保密
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "confidential",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub confidential: bool,
    /// 主体类型，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)主体类型（company_sub_type）枚举定义部分获得
    #[serde(
        rename = "sub_type_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sub_type_list: Vec<EnumSubResp>,
    /// 是否为分公司
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "branch_company",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub branch_company: bool,
    /// 主要负责人
    #[serde(
        rename = "primary_manager",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub primary_manager: Vec<I18nSubResp>,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
    /// 默认币种
    #[serde(
        rename = "currency",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency: CurrencySubResp,
    /// 电话
    #[serde(
        rename = "phone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone: PhoneNumberAndAreaCodeSubResp,
    /// 传真
    #[serde(
        rename = "fax",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fax: PhoneNumberAndAreaCodeSubResp,
    /// 完整注册地址
    #[serde(
        rename = "registered_office_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub registered_office_address: Vec<I18nSubResp>,
    /// 完整办公地址
    #[serde(
        rename = "office_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub office_address: Vec<I18nSubResp>,
    /// 注册地址详细信息。公共字段，若请求对象为公司，则该字段必填。
    #[serde(
        rename = "registered_office_address_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub registered_office_address_info: AddressSubResp,
    /// 办公地址详细信息。公共字段，若请求对象为公司，则该字段必填。
    #[serde(
        rename = "office_address_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub office_address_info: AddressSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct HiberarchyCommonSubResp {
    /// 上级组织 ID
    ///
    /// **示例值**: "4719168654814483759"
    #[serde(
        rename = "parent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_id: String,
    /// 名称
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Vec<I18nSubResp>,
    /// 组织类型，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)组织类型（organization_type）枚举定义部分获得。该字段为通用字段，若为公司维度则为必填。
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: EnumSubResp,
    /// 是否启用
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "active",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active: bool,
    /// 生效时间
    ///
    /// **示例值**: "2020-05-01 00:00:00"
    #[serde(
        rename = "effective_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub effective_time: String,
    /// 失效时间
    ///
    /// **示例值**: "2020-05-02 00:00:00"
    #[serde(
        rename = "expiration_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiration_time: String,
    /// 编码
    ///
    /// **示例值**: "12456"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 描述
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: Vec<I18nSubResp>,
    /// 树形排序，代表同层级的部门排序序号
    ///
    /// **示例值**: "001000"
    #[serde(
        rename = "tree_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tree_order: String,
    /// 列表排序，代表所有部门的混排序号
    ///
    /// **示例值**: "001000-001000"
    #[serde(
        rename = "list_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub list_order: String,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<ObjectFieldDataSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubResp {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "type_1"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
    /// 枚举多语展示
    #[serde(
        rename = "display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display: Vec<I18nSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CurrencySubResp {
    /// 货币id
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 货币所属国家/地区id，详细信息可通过[【查询国家/地区信息】](https://open.feishu.cn/document/server-docs/corehr-v1/basic-infomation/location_data/list)接口查询获得
    ///
    /// **示例值**: "12"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 货币名称
    #[serde(
        rename = "currency_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_name: Vec<I18nSubResp>,
    /// 对应币种的指代代码，通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)查询获取。
    ///
    /// **示例值**: "12"
    #[serde(
        rename = "numeric_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub numeric_code: i64,
    /// 法定货币对应代码，如CNY	、USD等，通过[查询货币信息v2](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-currency/search)查询获取。
    ///
    /// **示例值**: "CNY"
    #[serde(
        rename = "currency_alpha_3_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_alpha_3_code: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PhoneNumberAndAreaCodeSubResp {
    /// 区号对应的数字，可通过
    ///
    /// [请求接口](https://open.larkoffice.com/document/server-docs/corehr-v1/basic-infomation/custom_field/get_by_param)查询获取。请求参数：object_api_name=phone；custom_api_name=international_area_code
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "123123"
    #[serde(
        rename = "area_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub area_code: EnumSubResp,
    /// 号码
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18812341234"
    #[serde(
        rename = "phone_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_number: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AddressSubResp {
    /// 国家 / 地区id。各国家/地区填写字段可参考[地址填写规则](https://bytedance.larkoffice.com/wiki/GoL4wAKAXis3OWku72YcEjTxnKe?sheet=0sMjoP)查询。
    ///
    /// 国家/地区id可通过[请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-country_region/search)查询获取。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6862995757234914824"
    #[serde(
        rename = "country_region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region_id: String,
    /// 主要行政区id。可通过[请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-country_region_subdivision/search)查询获取。
    ///
    /// **示例值**: "6863326815667095047"
    #[serde(
        rename = "region_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub region_id: String,
    /// 城市id。可通过[请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-city/search)查询获取。
    ///
    /// **示例值**: "6863333254578046471"
    #[serde(
        rename = "city_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city_id: String,
    /// 区/县id，可通过[请求接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/basic_info-district/search)查询获取。
    ///
    /// **示例值**: "6863333516579440141"
    #[serde(
        rename = "distinct_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub distinct_id: String,
    /// 地址行 1
    ///
    /// **示例值**: "丹佛测试地址-纽埃时区"
    #[serde(
        rename = "address_line1",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line1: String,
    /// 地址行 2
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "address_line2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line2: String,
    /// 地址行 3
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "address_line3",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line3: String,
    /// 地址行 4
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line4",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line4: String,
    /// 地址行 5
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line5: String,
    /// 地址行 6
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line6",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line6: String,
    /// 地址行 7
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "address_line7",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line7: String,
    /// 地址行 8
    ///
    /// **示例值**: "rafSu"
    #[serde(
        rename = "address_line8",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line8: String,
    /// 地址行 9
    ///
    /// **示例值**: "McPRG"
    #[serde(
        rename = "address_line9",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address_line9: String,
    /// 地址行 1（非拉丁语系的本地文字）
    ///
    /// **示例值**: "丹佛测试地址-纽埃时区"
    #[serde(
        rename = "local_address_line1",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line1: String,
    /// 地址行 2（非拉丁语系的本地文字）
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "local_address_line2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line2: String,
    /// 地址行 3（非拉丁语系的本地文字）
    ///
    /// **示例值**: "PoewH"
    #[serde(
        rename = "local_address_line3",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line3: String,
    /// 地址行 4（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line4",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line4: String,
    /// 地址行 5（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line5: String,
    /// 地址行 6（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line6",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line6: String,
    /// 地址行 7（非拉丁语系的本地文字）
    ///
    /// **示例值**: "jmwJc"
    #[serde(
        rename = "local_address_line7",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line7: String,
    /// 地址行 8（非拉丁语系的本地文字）
    ///
    /// **示例值**: "rafSu"
    #[serde(
        rename = "local_address_line8",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line8: String,
    /// 地址行 9（非拉丁语系的本地文字）
    ///
    /// **示例值**: "McPRG"
    #[serde(
        rename = "local_address_line9",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub local_address_line9: String,
    /// 邮政编码
    ///
    /// **示例值**: "611530"
    #[serde(
        rename = "postal_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub postal_code: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 名称信息的语言，支持中文和英文。中文用zh-CN；英文用en-US。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容，支持中文和英文
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ObjectFieldDataSubResp {
    /// 字段名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 字段值，是json转义后的字符串，根据元数据定义不同，字段格式不同(如123, 123.23, "true", [\"id1\",\"id2\"], "2006-01-02 15:04:05")
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\"Sandy\""
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateCoreHrCompanyReq) -> Result<(CreateCoreHrCompanyResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateCoreHrCompanyReq,
                ) -> Result<(CreateCoreHrCompanyResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_core_hr_company<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, CreateCoreHrCompanyReq, CreateCoreHrCompanyResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_core_hr_company(
            &self,
            req: &CreateCoreHrCompanyReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateCoreHrCompanyReq, CreateCoreHrCompanyResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::create_core_hr_company::{
            CreateCoreHrCompanyReq, CreateCoreHrCompanyResp, CreateCoreHrCompanyRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_create_core_hr_company(|_| {
                Ok((
                    CreateCoreHrCompanyResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .create_core_hr_company(CreateCoreHrCompanyReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .create_core_hr_company(CreateCoreHrCompanyReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "hiberarchy_common": {
        "parent_id": "4719168654814483759",
        "name": [
            {
                "lang": "zh-CN",
                "value": "xx有限科技公司"
            }
        ],
        "type": {
            "enum_name": "type_1"
        },
        "active": true,
        "effective_time": "2020-05-01 00:00:00",
        "expiration_time": "2020-05-02 00:00:00",
        "code": "12456",
        "description": [
            {
                "lang": "zh-CN",
                "value": "xx有限科技公司"
            }
        ],
        "custom_fields": [
            {
                "field_name": "name",
                "value": "\"Sandy\""
            }
        ]
    },
    "type": {
        "enum_name": "type_1"
    },
    "industry_list": [
        {
            "enum_name": "type_1"
        }
    ],
    "legal_representative": [
        {
            "lang": "zh-CN",
            "value": "张三"
        }
    ],
    "post_code": "邮编",
    "tax_payer_id": "123456840",
    "confidential": true,
    "sub_type_list": [
        {
            "enum_name": "type_1"
        }
    ],
    "branch_company": true,
    "primary_manager": [
        {
            "lang": "zh-CN",
            "value": "张三"
        }
    ],
    "custom_fields": [
        {
            "field_name": "name",
            "value": "\"Sandy\""
        }
    ],
    "currency": {
        "currency_name": [
            {
                "lang": "zh-CN",
                "value": "张三"
            }
        ],
        "numeric_code": 12,
        "currency_alpha_3_code": "CNY"
    },
    "phone": {
        "area_code": {
            "enum_name": "86_china"
        },
        "phone_number": "18812341234"
    },
    "fax": {
        "area_code": {
            "enum_name": "86_china"
        },
        "phone_number": "18812341234"
    },
    "registered_office_address_info": {
        "country_region_id": "6862995757234914824",
        "region_id": "6863326815667095047",
        "city_id": "6863333254578046471",
        "distinct_id": "6863333516579440141",
        "address_line1": "丹佛测试地址-纽埃时区",
        "address_line2": "PoewH",
        "address_line3": "PoewH",
        "address_line4": "jmwJc",
        "address_line5": "jmwJc",
        "address_line6": "jmwJc",
        "address_line7": "jmwJc",
        "address_line8": "rafSu",
        "address_line9": "McPRG",
        "local_address_line1": "丹佛测试地址-纽埃时区",
        "local_address_line2": "PoewH",
        "local_address_line3": "PoewH",
        "local_address_line4": "jmwJc",
        "local_address_line5": "jmwJc",
        "local_address_line6": "jmwJc",
        "local_address_line7": "jmwJc",
        "local_address_line8": "rafSu",
        "local_address_line9": "McPRG",
        "postal_code": "611530"
    },
    "office_address_info": {
        "country_region_id": "6862995757234914824",
        "region_id": "6863326815667095047",
        "city_id": "6863333254578046471",
        "distinct_id": "6863333516579440141",
        "address_line1": "丹佛测试地址-纽埃时区",
        "address_line2": "PoewH",
        "address_line3": "PoewH",
        "address_line4": "jmwJc",
        "address_line5": "jmwJc",
        "address_line6": "jmwJc",
        "address_line7": "jmwJc",
        "address_line8": "rafSu",
        "address_line9": "McPRG",
        "local_address_line1": "丹佛测试地址-纽埃时区",
        "local_address_line2": "PoewH",
        "local_address_line3": "PoewH",
        "local_address_line4": "jmwJc",
        "local_address_line5": "jmwJc",
        "local_address_line6": "jmwJc",
        "local_address_line7": "jmwJc",
        "local_address_line8": "rafSu",
        "local_address_line9": "McPRG",
        "postal_code": "611530"
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateCoreHrCompanyReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "company": {
            "id": "4692472714243080020",
            "hiberarchy_common": {
                "parent_id": "4719168654814483759",
                "name": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ],
                "type": {
                    "enum_name": "type_1",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "active": true,
                "effective_time": "2020-05-01 00:00:00",
                "expiration_time": "2020-05-02 00:00:00",
                "code": "12456",
                "description": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ],
                "tree_order": "001000",
                "list_order": "001000-001000",
                "custom_fields": [
                    {
                        "field_name": "name",
                        "value": "\"Sandy\""
                    }
                ]
            },
            "type": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ]
            },
            "industry_list": [
                {
                    "enum_name": "type_1",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                }
            ],
            "legal_representative": [
                {
                    "lang": "zh-CN",
                    "value": "张三"
                }
            ],
            "post_code": "邮编",
            "tax_payer_id": "123456840",
            "confidential": true,
            "sub_type_list": [
                {
                    "enum_name": "type_1",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                }
            ],
            "branch_company": true,
            "primary_manager": [
                {
                    "lang": "zh-CN",
                    "value": "张三"
                }
            ],
            "custom_fields": [
                {
                    "field_name": "name",
                    "value": "\"Sandy\""
                }
            ],
            "currency": {
                "id": "1",
                "country_region_id": "12",
                "currency_name": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ],
                "numeric_code": 12,
                "currency_alpha_3_code": "CNY"
            },
            "phone": {
                "area_code": {
                    "enum_name": "86_china",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "phone_number": "18812341234"
            },
            "fax": {
                "area_code": {
                    "enum_name": "86_china",
                    "display": [
                        {
                            "lang": "zh-CN",
                            "value": "张三"
                        }
                    ]
                },
                "phone_number": "18812341234"
            },
            "registered_office_address": [
                {
                    "lang": "zh-CN",
                    "value": "张三"
                }
            ],
            "office_address": [
                {
                    "lang": "zh-CN",
                    "value": "张三"
                }
            ],
            "registered_office_address_info": {
                "country_region_id": "6862995757234914824",
                "region_id": "6863326815667095047",
                "city_id": "6863333254578046471",
                "distinct_id": "6863333516579440141",
                "address_line1": "丹佛测试地址-纽埃时区",
                "address_line2": "PoewH",
                "address_line3": "PoewH",
                "address_line4": "jmwJc",
                "address_line5": "jmwJc",
                "address_line6": "jmwJc",
                "address_line7": "jmwJc",
                "address_line8": "rafSu",
                "address_line9": "McPRG",
                "local_address_line1": "丹佛测试地址-纽埃时区",
                "local_address_line2": "PoewH",
                "local_address_line3": "PoewH",
                "local_address_line4": "jmwJc",
                "local_address_line5": "jmwJc",
                "local_address_line6": "jmwJc",
                "local_address_line7": "jmwJc",
                "local_address_line8": "rafSu",
                "local_address_line9": "McPRG",
                "postal_code": "611530"
            },
            "office_address_info": {
                "country_region_id": "6862995757234914824",
                "region_id": "6863326815667095047",
                "city_id": "6863333254578046471",
                "distinct_id": "6863333516579440141",
                "address_line1": "丹佛测试地址-纽埃时区",
                "address_line2": "PoewH",
                "address_line3": "PoewH",
                "address_line4": "jmwJc",
                "address_line5": "jmwJc",
                "address_line6": "jmwJc",
                "address_line7": "jmwJc",
                "address_line8": "rafSu",
                "address_line9": "McPRG",
                "local_address_line1": "丹佛测试地址-纽埃时区",
                "local_address_line2": "PoewH",
                "local_address_line3": "PoewH",
                "local_address_line4": "jmwJc",
                "local_address_line5": "jmwJc",
                "local_address_line6": "jmwJc",
                "local_address_line7": "jmwJc",
                "local_address_line8": "rafSu",
                "local_address_line9": "McPRG",
                "postal_code": "611530"
            }
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateCoreHrCompanyRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
