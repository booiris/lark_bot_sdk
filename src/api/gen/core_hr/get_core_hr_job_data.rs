//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-25T02:14:22+00:00**
    ///
    /// ## 查询单个任职信息
    ///
    /// 根据 ID 查询单任职信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/employee/job_data/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Femployee%2Fjob_data%2Fget>
    pub async fn get_core_hr_job_data(
        &self,
        req: GetCoreHrJobDataReq,
    ) -> Result<(GetCoreHrJobDataResp, CommonResponse), Error> {
        self.get_core_hr_job_data_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_job_data](#method.get_core_hr_job_data) 函数
    pub async fn get_core_hr_job_data_with_opt(
        &self,
        req: GetCoreHrJobDataReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrJobDataResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_core_hr_job_data(&req) {
                tracing::info!("[lark] CoreHr#GetCoreHrJobData **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrJobData call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrJobData",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/job_datas/:job_data_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrJobDataRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrJobDataReq {
    /// 任职信息 ID，可通过[【创建任职信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_data/create)、[【批量查询员工任职信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employees-job_data/batch_get)等接口获取
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "151515"
    #[api(kind = "path", name = "job_data_id")]
    pub job_data_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "people_corehr_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_corehr_id`: 以飞书人事的 ID 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的部门 ID 类型
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `open_department_id`: 以 open_department_id 来标识部门
    ///
    /// `department_id`: 以 department_id 来标识部门
    ///
    /// `people_corehr_department_id`: 以 people_corehr_department_id 来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrJobDataRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrJobDataResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrJobDataResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 任职信息
    #[serde(
        rename = "job_data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_data: JobDataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobDataSubResp {
    /// 任职信息 ID
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 职务级别 ID，枚举值及详细信息可通过[【查询单个职级】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_level/get)接口查询获得
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "job_level_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_level_id: String,
    /// 职等 ID，枚举值及详细信息可通过[【查询职等】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/job_grade/query)接口查询获得
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "job_grade_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_grade_id: String,
    /// 人员类型 ID，枚举值及详细信息可通过[【查询单个人员类型】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/employee_type/get)接口查询获得
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "employee_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type_id: String,
    /// 工时制度 ID，枚举值及详细信息可通过[【查询单个工时制度】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/working_hours_type/get)接口查询获得
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "working_hours_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub working_hours_type_id: String,
    /// 工作地点 ID，枚举值及详细信息可通过[【查询单个地点】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/location/get)接口查询获得
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "work_location_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_location_id: String,
    /// 部门 ID，枚举值及详细信息可通过[查询单个部门](https://open.feishu.cn/document/server-docs/corehr-v1/organization-management/department/get)接口查询获得
    ///
    /// 与 department_id_type 类型一致
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 职务 ID，枚举值及详细信息可通过[【查询单个职务】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job/get)接口查询获得
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "job_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_id: String,
    /// 试用期开始日期
    ///
    /// **示例值**: "2018-03-16"
    #[serde(
        rename = "probation_start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_start_date: String,
    /// 试用期结束日期（实际结束日期）
    ///
    /// **示例值**: "2019-05-24"
    #[serde(
        rename = "probation_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_end_date: String,
    /// 是否为主任职
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "primary_job_data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub primary_job_data: bool,
    /// 雇佣 ID，可通过[【批量查询员工信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/employee/batch_get)获取详细信息
    ///
    /// 与 user_id_type 类型一致
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 生效时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2020-05-01 00:00:00"
    #[serde(
        rename = "effective_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub effective_time: String,
    /// 失效时间
    ///
    /// **示例值**: "2020-05-02 00:00:00"
    #[serde(
        rename = "expiration_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiration_time: String,
    /// 职务序列 ID，枚举值及详细信息可通过[【查询单个序列】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/job_family/get)接口查询获得
    ///
    /// **示例值**: "1245678"
    #[serde(
        rename = "job_family_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_family_id: String,
    /// 任职原因，枚举值可通过文档[【飞书人事枚举常量】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/feishu-people-enum-constant)任职原因（assignment_start_reason）枚举定义部分获得
    ///
    /// **示例值**: "onboarding"
    #[serde(
        rename = "assignment_start_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assignment_start_reason: EnumSubResp,
    /// 预计试用期结束日期
    ///
    /// **示例值**: "2006-01-02"
    #[serde(
        rename = "probation_expected_end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_expected_end_date: String,
    /// 周工作时长
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "weekly_working_hours",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub weekly_working_hours: i64,
    /// 实线主管的任职记录ID，可通过[【批量查询员工任职信息】](/ssl:ttdoc%2FuAjLw4CM%2FukTMukTMukTM%2Fcorehr-v2%2Femployees-job_data%2Fbatch_get)获取
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "direct_manager_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub direct_manager_id: String,
    /// 虚线主管的任职记录ID，可通过[【批量查询员工任职信息】](/ssl:ttdoc%2FuAjLw4CM%2FukTMukTMukTM%2Fcorehr-v2%2Femployees-job_data%2Fbatch_get)获取
    #[serde(
        rename = "dotted_line_manager_id_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub dotted_line_manager_id_list: Vec<String>,
    /// 第二实线主管的任职记录ID，可通过[【批量查询员工任职信息】](/ssl:ttdoc%2FuAjLw4CM%2FukTMukTMukTM%2Fcorehr-v2%2Femployees-job_data%2Fbatch_get)获取
    ///
    /// **示例值**: "6890452208593372679"
    #[serde(
        rename = "second_direct_manager_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub second_direct_manager_id: String,
    /// 成本中心分摊信息
    #[serde(
        rename = "cost_center_rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cost_center_rate: Vec<SupportCostCenterItemSubResp>,
    /// 周工作时长v2
    ///
    /// **示例值**: "37.5"
    #[serde(
        rename = "weekly_working_hours_v2",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub weekly_working_hours_v2: f64,
    /// 排班类型，可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "job_data"
    ///
    /// - custom_api_name = "work_shift"
    #[serde(
        rename = "work_shift",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_shift: EnumSubResp,
    /// 薪资类型，可通过[【获取字段详情】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/custom_field/get_by_param)接口查询，查询参数如下：
    ///
    /// - object_api_name = "job_data"
    ///
    /// - custom_api_name = "compensation_type"
    #[serde(
        rename = "compensation_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub compensation_type: EnumSubResp,
    /// 任职公司，枚举值及详细信息可通过[【查询单个公司】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/company/get)接口查询获得
    ///
    /// **示例值**: "6890452208593372680"
    #[serde(
        rename = "service_company",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub service_company: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EnumSubResp {
    /// 枚举值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "type_1"
    #[serde(
        rename = "enum_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_name: String,
    /// 枚举多语展示
    #[serde(
        rename = "display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display: Vec<I18nSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SupportCostCenterItemSubResp {
    /// 支持的成本中心 ID，详细信息可通过[【搜索成本中心信息】](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/cost_center/search)接口查询获得
    ///
    /// **示例值**: "6950635856373745165"
    #[serde(
        rename = "cost_center_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cost_center_id: String,
    /// 分摊比例
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "rate",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rate: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 名称信息的语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetCoreHrJobDataReq) -> Result<(GetCoreHrJobDataResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetCoreHrJobDataReq) -> Result<(GetCoreHrJobDataResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_job_data<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetCoreHrJobDataReq, GetCoreHrJobDataResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_job_data(
            &self,
            req: &GetCoreHrJobDataReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetCoreHrJobDataReq, GetCoreHrJobDataResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_job_data::{
            GetCoreHrJobDataReq, GetCoreHrJobDataResp, GetCoreHrJobDataRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_job_data(|_| {
                Ok((GetCoreHrJobDataResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_job_data(GetCoreHrJobDataReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_job_data(GetCoreHrJobDataReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "job_data": {
            "id": "6890452208593372679",
            "job_level_id": "6890452208593372679",
            "job_grade_id": "6890452208593372679",
            "employee_type_id": "6890452208593372679",
            "working_hours_type_id": "6890452208593372679",
            "work_location_id": "6890452208593372679",
            "department_id": "6890452208593372679",
            "job_id": "6890452208593372679",
            "probation_start_date": "2018-03-16",
            "probation_end_date": "2019-05-24",
            "primary_job_data": true,
            "employment_id": "6893014062142064135",
            "effective_time": "2020-05-01 00:00:00",
            "expiration_time": "2020-05-02 00:00:00",
            "job_family_id": "1245678",
            "assignment_start_reason": {
                "enum_name": "type_1",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ]
            },
            "probation_expected_end_date": "2006-01-02",
            "weekly_working_hours": 30,
            "direct_manager_id": "6890452208593372679",
            "dotted_line_manager_id_list": [
                "6890452208593372681"
            ],
            "second_direct_manager_id": "6890452208593372679",
            "cost_center_rate": [
                {
                    "cost_center_id": "6950635856373745165",
                    "rate": 100
                }
            ],
            "weekly_working_hours_v2": 37.5,
            "work_shift": {
                "enum_name": "example",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "example"
                    }
                ]
            },
            "compensation_type": {
                "enum_name": "example",
                "display": [
                    {
                        "lang": "zh-CN",
                        "value": "example"
                    }
                ]
            },
            "service_company": "6890452208593372680"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrJobDataRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
