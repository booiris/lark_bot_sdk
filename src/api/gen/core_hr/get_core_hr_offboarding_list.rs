//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-15T11:21:53+00:00**
    ///
    /// ## 查询员工离职原因列表
    ///
    /// 该接口用于查询[离职配置](https://people.feishu.cn/people/hr-settings/dimission/setting)> 离职原因的选项信息，包括离职原因选项的唯一标识、名称和启用状态等信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/query>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/corehr-v1/offboarding/query>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Foffboarding%2Fquery>
    pub async fn get_core_hr_offboarding_list(
        &self,
        req: GetCoreHrOffboardingListReq,
    ) -> Result<(GetCoreHrOffboardingListResp, CommonResponse), Error> {
        self.get_core_hr_offboarding_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_offboarding_list](#method.get_core_hr_offboarding_list) 函数
    pub async fn get_core_hr_offboarding_list_with_opt(
        &self,
        req: GetCoreHrOffboardingListReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrOffboardingListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_core_hr_offboarding_list(&req) {
                tracing::info!("[lark] CoreHr#GetCoreHrOffboardingList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrOffboardingList call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrOffboardingList",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/offboardings/query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrOffboardingListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrOffboardingListReq {
    /// 离职原因状态，为空时默认搜索所有状态的离职原因。可选项有:
    ///
    /// -true: 启用
    ///
    /// -false: 停用
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "active")]
    pub active: Option<bool>,
    /// 离职原因唯一标识列表，用于过滤离职原因，为空时默认搜索所有离职原因，最多支持20个
    ///
    /// **示例值**: "["reason_for_offboarding_option"]"
    #[api(kind = "body", name = "offboarding_reason_unique_identifier")]
    pub offboarding_reason_unique_identifier: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrOffboardingListRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrOffboardingListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrOffboardingListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 离职原因列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<OffboardingReasonSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OffboardingReasonSubResp {
    /// 离职原因唯一标识，可用于开放平台[操作员工离职](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/submit)、[搜索离职信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/offboarding/search)等接口入参中的离职原因。
    ///
    /// **示例值**: "reason_for_offboarding_option8"
    #[serde(
        rename = "offboarding_reason_unique_identifier",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_reason_unique_identifier: String,
    /// 名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Vec<I18nSubResp>,
    /// 是否启用，可选项有：
    ///
    /// - true
    ///
    /// - false
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "active",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub active: bool,
    /// 当前离职原因的父级原因唯一标识
    ///
    /// **示例值**: "offboarding_reason_1"
    #[serde(
        rename = "parent_offboarding_reason_unique_identifier",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_offboarding_reason_unique_identifier: String,
    /// 创建时间，格式："YYYY-MM-DD HH-mm-ss"
    ///
    /// **示例值**: "2021-08-20 20:28:23"
    #[serde(
        rename = "created_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_time: String,
    /// 更新时间，格式："YYYY-MM-DD HH-mm-ss"
    ///
    /// **示例值**: "2022-01-07 17:21:06"
    #[serde(
        rename = "updated_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub updated_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 名称信息的语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 名称信息的内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCoreHrOffboardingListReq,
        ) -> Result<(GetCoreHrOffboardingListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrOffboardingListReq,
                ) -> Result<(GetCoreHrOffboardingListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_offboarding_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrOffboardingListReq,
            GetCoreHrOffboardingListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_offboarding_list(
            &self,
            req: &GetCoreHrOffboardingListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCoreHrOffboardingListReq,
                GetCoreHrOffboardingListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_offboarding_list::{
            GetCoreHrOffboardingListReq, GetCoreHrOffboardingListResp,
            GetCoreHrOffboardingListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_offboarding_list(|_| {
                Ok((
                    GetCoreHrOffboardingListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_offboarding_list(GetCoreHrOffboardingListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_offboarding_list(GetCoreHrOffboardingListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "active": true,
    "offboarding_reason_unique_identifier": [
        "offboarding_reason_unique_identifier"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetCoreHrOffboardingListReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "offboarding_reason_unique_identifier": "reason_for_offboarding_option8",
                "name": [
                    {
                        "lang": "zh-CN",
                        "value": "张三"
                    }
                ],
                "active": true,
                "parent_offboarding_reason_unique_identifier": "offboarding_reason_1",
                "created_time": "2021-08-20 20:28:23",
                "updated_time": "2022-01-07 17:21:06"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrOffboardingListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
