//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/process-form_variable_data/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::core_hr::CoreHrService;

impl<'c, IStore: Store, IClient: HttpClient> CoreHrService<'c, IStore, IClient> {
    /// **api 版本: 2024-04-26T09:13:58+00:00**
    ///
    /// ## 获取流程表单数据
    ///
    /// 根据流程实例 id（process_id）获取流程表单字段数据，包括表单里的业务字段和自定义字段。仅支持飞书人事、假勤相关业务流程。
    ///
    /// 建议使用新版本 API 文档。详情参见[获取流程表单数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/corehr-v2/process-form_variable_data/get)。
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/corehr-v1/process-form_variable_data/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/corehr-v1/process-form_variable_data/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcorehr-v1%2Fprocess-form_variable_data%2Fget>
    pub async fn get_core_hr_process_form_variable_data(
        &self,
        req: GetCoreHrProcessFormVariableDataReq,
    ) -> Result<(GetCoreHrProcessFormVariableDataResp, CommonResponse), Error> {
        self.get_core_hr_process_form_variable_data_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_core_hr_process_form_variable_data](#method.get_core_hr_process_form_variable_data) 函数
    pub async fn get_core_hr_process_form_variable_data_with_opt(
        &self,
        req: GetCoreHrProcessFormVariableDataReq,
        method_option: MethodOption,
    ) -> Result<(GetCoreHrProcessFormVariableDataResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_core_hr_process_form_variable_data(&req)
            {
                tracing::info!("[lark] CoreHr#GetCoreHrProcessFormVariableData **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] CoreHr#GetCoreHrProcessFormVariableData call api");

        let req = ApiRequest {
            scope: "CoreHr",
            api: "GetCoreHrProcessFormVariableData",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/corehr/v1/processes/:process_id/form_variable_data",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetCoreHrProcessFormVariableDataRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetCoreHrProcessFormVariableDataReq {
    /// 流程实例 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "123456987"
    #[api(kind = "path", name = "process_id")]
    pub process_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetCoreHrProcessFormVariableDataRespInner {
    #[serde(flatten)]
    data: Option<GetCoreHrProcessFormVariableDataResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetCoreHrProcessFormVariableDataResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 流程变量
    #[serde(
        rename = "field_variable_values",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_variable_values: Vec<FormFieldVariableSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableSubResp {
    /// 变量api名称
    ///
    /// **示例值**: "reason"
    #[serde(
        rename = "variable_api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub variable_api_name: String,
    /// 变量名称的i18n描述
    #[serde(
        rename = "variable_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub variable_name: BpmDataengineI18nSubResp,
    /// 变量值的对象
    #[serde(
        rename = "variable_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub variable_value: FormVariableValueInfoSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BpmDataengineI18nSubResp {
    /// （基于系统兼容性，该参数名称在文档中展示为zh_cn，但在实际返回的 JSON Key 中展示为 zh-CN）i18n类型字段，中文值
    ///
    /// **示例值**: "离职原因"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// （基于系统兼容性，该参数名称在文档中展示为en_us，但在实际返回的 JSON Key 中展示为 en-US）i18n类型字段，英文值
    ///
    /// **示例值**: "Reason"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormVariableValueInfoSubResp {
    /// 文本变量对象
    #[serde(
        rename = "text_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_value: FormFieldVariableTextValueSubResp,
    /// 数值变量对象
    #[serde(
        rename = "number_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number_value: FormFieldVariableNumberValueSubResp,
    /// 日期变量对象
    #[serde(
        rename = "date_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_value: FormFieldVariableDateValueSubResp,
    /// 员工变量对象
    #[serde(
        rename = "employment_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_value: FormFieldVariableEmploymentValueSubResp,
    /// 日期时间变量对象
    #[serde(
        rename = "date_time_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_time_value: FormFieldVariableDatetimeValueSubResp,
    /// 枚举变量对象
    #[serde(
        rename = "enum_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_value: FormFieldVariableEnumValueSubResp,
    /// 空变量对象
    #[serde(
        rename = "null_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub null_value: serde_json::Value,
    /// 布尔变量对象
    #[serde(
        rename = "bool_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bool_value: FormFieldVariableBoolValueSubResp,
    /// 部门变量对象
    #[serde(
        rename = "department_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_value: FormFieldVariableDepartmentValueSubResp,
    /// 文件变量对象
    #[serde(
        rename = "file_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_value: FormFieldVariableFileValueSubResp,
    /// i18n变量对象
    #[serde(
        rename = "i18n_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_value: FormFieldVariableI18nValueSubResp,
    /// 对象变量
    #[serde(
        rename = "object_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_value: FormFieldVariableObjectValueSubResp,
    /// 列表对象
    #[serde(
        rename = "list_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub list_value: FormFieldVariableListValueSubResp,
    /// 记录对象
    #[serde(
        rename = "record_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_value: FormFieldVariableRecordValueSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableTextValueSubResp {
    /// 文本类型变量的值
    ///
    /// **示例值**: "文本"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableNumberValueSubResp {
    /// 数值类型变量的值
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableDateValueSubResp {
    /// 日期变量的值，从1970起的天数
    ///
    /// **示例值**: "10000"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableEmploymentValueSubResp {
    /// employmentID
    ///
    /// **示例值**: "6893014062142064134"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
    /// 员工ID 如3158117
    ///
    /// **示例值**: "3158117"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableDatetimeValueSubResp {
    /// 毫秒的时间戳。注：此字段数据类型为 int64
    ///
    /// **示例值**: "1670227428803"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: i64,
    /// 时区，+08:00
    ///
    /// **示例值**: "+08:00"
    #[serde(
        rename = "zone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zone: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableEnumValueSubResp {
    /// 枚举值
    ///
    /// **示例值**: "enum_value"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
    /// 枚举的名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: BpmDataengineI18nSubResp,
    /// 枚举的描述
    #[serde(
        rename = "desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub desc: BpmDataengineI18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableBoolValueSubResp {
    /// 布尔变量的值
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableDepartmentValueSubResp {
    /// 部门ID
    ///
    /// **示例值**: "201933311"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableFileValueSubResp {
    /// 文件源类型（1BPM; 2主数据）
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "source_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub source_type: i64,
    /// 文件id
    ///
    /// **示例值**: "abc_file_xyz"
    #[serde(
        rename = "file_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_id: String,
    /// 文件名称
    ///
    /// **示例值**: "a"
    #[serde(
        rename = "file_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_name: String,
    /// 文件长度
    ///
    /// **示例值**: "1024"
    #[serde(
        rename = "length",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub length: i64,
    /// 扩展类型
    ///
    /// **示例值**: "text/plain"
    #[serde(
        rename = "mime_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mime_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableI18nValueSubResp {
    /// i18n值
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: BpmDataengineI18nSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableObjectValueSubResp {
    /// 对象ID
    ///
    /// **示例值**: "203948191"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
    /// 主数据apiName
    ///
    /// **示例值**: "object1"
    #[serde(
        rename = "wk_api_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub wk_api_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableListValueSubResp {
    /// 列表值
    #[serde(
        rename = "values",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub values: Vec<FormFieldVariableListObjectSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableRecordValueSubResp {
    /// 注：该参数实际为 Map 数据类型，Key 是变量唯一标识，Value 是变量值。
    #[serde(
        rename = "values",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub values: FormFieldVariableRecordValueExampleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableRecordValueExampleSubResp {
    /// 这个属性名称是map的key的示例，属性值是map的value的示例，值和外层的variable_value是的一样的结构。
    #[serde(
        rename = "country_region",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_region: FormVariableValueInfoExampleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormFieldVariableListObjectSubResp {
    /// 文本变量对象
    #[serde(
        rename = "text_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_value: FormFieldVariableTextValueSubResp,
    /// 数值变量对象
    #[serde(
        rename = "number_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number_value: FormFieldVariableNumberValueSubResp,
    /// 日期变量对象
    #[serde(
        rename = "date_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_value: FormFieldVariableDateValueSubResp,
    /// 员工变量对象
    #[serde(
        rename = "employment_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_value: FormFieldVariableEmploymentValueSubResp,
    /// 日期时间变量对象
    #[serde(
        rename = "date_time_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_time_value: FormFieldVariableDatetimeValueSubResp,
    /// 枚举变量对象
    #[serde(
        rename = "enum_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enum_value: FormFieldVariableEnumValueSubResp,
    /// 空变量对象
    #[serde(
        rename = "null_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub null_value: serde_json::Value,
    /// 布尔变量对象
    #[serde(
        rename = "bool_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bool_value: FormFieldVariableBoolValueSubResp,
    /// 部门变量对象
    #[serde(
        rename = "department_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_value: FormFieldVariableDepartmentValueSubResp,
    /// 文件变量对象
    #[serde(
        rename = "file_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_value: FormFieldVariableFileValueSubResp,
    /// i18n变量对象
    #[serde(
        rename = "i18n_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_value: FormFieldVariableI18nValueSubResp,
    /// 对象变量
    #[serde(
        rename = "object_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_value: FormFieldVariableObjectValueSubResp,
    /// 记录对象
    #[serde(
        rename = "record_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_value: FormFieldVariableRecordValueSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FormVariableValueInfoExampleSubResp {
    /// 文本变量对象
    #[serde(
        rename = "object_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub object_value: FormFieldVariableObjectValueSubResp,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::core_hr::CoreHrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetCoreHrProcessFormVariableDataReq,
        ) -> Result<(GetCoreHrProcessFormVariableDataResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetCoreHrProcessFormVariableDataReq,
                )
                    -> Result<(GetCoreHrProcessFormVariableDataResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> CoreHrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_core_hr_process_form_variable_data<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetCoreHrProcessFormVariableDataReq,
            GetCoreHrProcessFormVariableDataResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_core_hr_process_form_variable_data(
            &self,
            req: &GetCoreHrProcessFormVariableDataReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetCoreHrProcessFormVariableDataReq,
                GetCoreHrProcessFormVariableDataResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::core_hr::get_core_hr_process_form_variable_data::{
            GetCoreHrProcessFormVariableDataReq, GetCoreHrProcessFormVariableDataResp,
            GetCoreHrProcessFormVariableDataRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .core_hr()
            .mock()
            .mock_get_core_hr_process_form_variable_data(|_| {
                Ok((
                    GetCoreHrProcessFormVariableDataResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .core_hr()
            .get_core_hr_process_form_variable_data(GetCoreHrProcessFormVariableDataReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .core_hr()
            .get_core_hr_process_form_variable_data(GetCoreHrProcessFormVariableDataReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data":
    {
        "field_variable_values":
        [
            {
                "variable_api_name": "reason",
                "variable_name":
                {
                    "en-US": "Reason",
                    "zh-CN": "离职原因"
                },
                "variable_value":
                {
                    "enum_value":
                    {
                        "desc": null,
                        "enum_source_id": 123,
                        "enum_source_type": 2,
                        "name":
                        {
                            "en-US": "",
                            "zh-CN": "测试"
                        },
                        "value": "reason_for_offboarding_option96",
                        "wk_api_name": "reason_for_offboarding"
                    }
                }
            },
            {
                "variable_api_name": "offboarding_date",
                "variable_name":
                {
                    "en-US": "Offboarding date",
                    "zh-CN": "离职日期"
                },
                "variable_value":
                {
                    "date_value":
                    {
                        "value": 19265
                    }
                }
            },
            {
                "variable_api_name": "employment",
                "variable_name":
                {
                    "en-US": "Employment",
                    "zh-CN": "员工"
                },
                "variable_value":
                {
                    "employment_value":
                    {
                        "user_id": "123321",
                        "value": "123321"
                    }
                }
            }
        ],
        "process_id": "123321"
    },
    "msg": "",
    "success": true
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetCoreHrProcessFormVariableDataRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
