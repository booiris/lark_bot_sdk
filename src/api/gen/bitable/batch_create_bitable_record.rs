//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-07T11:57:23+00:00**
    ///
    /// ## 新增多条记录
    ///
    /// 该接口用于在数据表中新增多条记录，单次调用最多新增 500 条记录。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/batch_create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fapp-table-record%2Fbatch_create>
    pub async fn batch_create_bitable_record(
        &self,
        req: BatchCreateBitableRecordReq,
    ) -> Result<(BatchCreateBitableRecordResp, CommonResponse), Error> {
        self.batch_create_bitable_record_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_create_bitable_record](#method.batch_create_bitable_record) 函数
    pub async fn batch_create_bitable_record_with_opt(
        &self,
        req: BatchCreateBitableRecordReq,
        method_option: MethodOption,
    ) -> Result<(BatchCreateBitableRecordResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_batch_create_bitable_record(&req) {
                tracing::info!("[lark] Bitable#BatchCreateBitableRecord **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#BatchCreateBitableRecord call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "BatchCreateBitableRecord",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchCreateBitableRecordRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchCreateBitableRecordReq {
    /// 多维表格的唯一标识符 [app_token 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "appbcbWCzen6D8dezhoCH2RpMAh"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// 多维表格数据表的唯一标识符 [table_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#735fe883)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tblsRc9GRRXKqhvW"
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 格式为标准的 uuidv4，操作的唯一标识，用于幂等的进行更新操作。此值为空表示将发起一次新的请求，此值非空表示幂等的进行更新操作。
    ///
    /// **示例值**: "fe599b60-450f-46ff-b2ef-9f6675625b97"
    #[api(
        kind = "query",
        name = "client_token",
        v_type = "var",
        option = "false"
    )]
    pub client_token: String,
    /// 本次请求将要新增的记录列表
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "records")]
    pub records: Vec<Option<AppTableRecordSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableRecordSubReq {
    /// 数据表的字段，即数据表的列
    ///
    /// 当前接口支持的字段类型请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#31f78a3c)
    ///
    /// 不同类型字段的数据结构请参考[数据结构概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{"多行文本":"HelloWorld"}"
    #[serde(
        rename = "fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fields: std::collections::HashMap<String, serde_json::Value>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchCreateBitableRecordRespInner {
    #[serde(flatten)]
    data: Option<BatchCreateBitableRecordResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchCreateBitableRecordResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 本次请求新增的记录列表
    #[serde(
        rename = "records",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub records: Vec<AppTableRecordSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableRecordSubResp {
    /// 一条记录的唯一标识 id [record_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#15d8db94)
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_id: String,
    /// 该记录的创建人
    #[serde(
        rename = "created_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_by: PersonSubResp,
    /// 该记录的创建时间
    ///
    /// **示例值**: "1610281603"
    #[serde(
        rename = "created_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_time: i64,
    /// 该记录最新一次更新的修改人
    #[serde(
        rename = "last_modified_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_by: PersonSubResp,
    /// 该记录最近一次的更新时间
    ///
    /// **示例值**: "1610281603"
    #[serde(
        rename = "last_modified_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_time: i64,
    /// 数据表的字段，即数据表的列
    ///
    /// 当前接口支持的字段类型请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#31f78a3c)
    ///
    /// 不同类型字段的数据结构请参考[数据结构概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fields: std::collections::HashMap<String, serde_json::Value>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonSubResp {
    /// 用户id，id类型等于user_id_type所指定的类型。
    ///
    /// **示例值**: "testesttest"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户的中文名称
    ///
    /// **示例值**: "黄泡泡"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 用户的英文名称
    ///
    /// **示例值**: "Paopao Huang"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 用户的邮箱
    ///
    /// **示例值**: "huangpaopao@feishu.cn"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 头像链接
    ///
    /// **示例值**: "https://example.com/avatar"
    #[serde(
        rename = "avatar_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            BatchCreateBitableRecordReq,
        ) -> Result<(BatchCreateBitableRecordResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    BatchCreateBitableRecordReq,
                ) -> Result<(BatchCreateBitableRecordResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_create_bitable_record<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            BatchCreateBitableRecordReq,
            BatchCreateBitableRecordResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_create_bitable_record(
            &self,
            req: &BatchCreateBitableRecordReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                BatchCreateBitableRecordReq,
                BatchCreateBitableRecordResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::batch_create_bitable_record::{
            BatchCreateBitableRecordReq, BatchCreateBitableRecordResp,
            BatchCreateBitableRecordRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_batch_create_bitable_record(|_| {
                Ok((
                    BatchCreateBitableRecordResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .bitable()
            .batch_create_bitable_record(BatchCreateBitableRecordReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .batch_create_bitable_record(BatchCreateBitableRecordReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "records": [
        {
            "fields": {
                "多行文本": "多行文本内容",
                "条码": "qawqe",
                "数字": 100,
                "货币": 3,
                "评分": 3,
                "进度": 0.25,
                "单选": "选项1",
                "多选": ["选项1", "选项2"],
                "日期": 1674206443000,
                "复选框": true,
                "人员": [
                    {
                        "id": "ou_2910013f1e6456f16a0ce75ede950a0a"
                    }, 
                    {
                        "id": "ou_e04138c9633dd0d2ea166d79f548ab5d"
                    }
                ],
                "群组": [
                    {
                        "id": "oc_cd07f55f14d6f4a4f1b51504e7e97f48"
                    }
                ],
                "电话号码": "13026162666",
                "超链接": {
                    "text": "飞书多维表格官网",
                    "link": "https://www.feishu.cn/product/base"
                },
                "附件": [
                    {
                        "file_token": "Vl3FbVkvnowlgpxpqsAbBrtFcrd"
                    }
                ],
                "单向关联": ["recHTLvO7x", "recbS8zb2m"],
                "双向关联": ["recHTLvO7x", "recbS8zb2m"],
                "地理位置": "116.397755,39.903179"
            }
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::BatchCreateBitableRecordReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "records": [
            {
                "fields": {
                    "人员": [
                        {
                            "id": "ou_2910013f1e6456f16a0ce75ede950a0a"
                        },
                        {
                            "id": "ou_e04138c9633dd0d2ea166d79f548ab5d"
                        }
                    ],
                    "群组": [
                        {
                            "id": "oc_cd07f55f14d6f4a4f1b51504e7e97f48"
                        }
                    ],
                    "单向关联": [
                        "recHTLvO7x",
                        "recbS8zb2m"
                    ],
                    "单选": "选项3",
                    "双向关联": [
                        "recHTLvO7x",
                        "recbS8zb2m"
                    ],
                    "地理位置": "116.397755,39.903179",
                    "复选框": true,
                    "多行文本": "多行文本内容",
                    "多选": [
                        "选项1",
                        "选项2"
                    ],
                    "数字": 100,
                    "日期": 1674206443000,
                    "条码": "qawqe",
                    "电话号码": "13026162666",
                    "索引": "索引列多行文本类型",
                    "超链接": {
                        "link": "https://www.feishu.cn/product/base",
                        "text": "飞书多维表格官网"
                    },
                    "附件": [
                        {
                            "file_token": "Vl3FbVkvnowlgpxpqsAbBrtFcrd"
                        }
                    ],
                    "评分": 3,
                    "货币": 3,
                    "进度": 0.25
                },
                "id": "recB8s1jUB",
                "record_id": "recB8s1jUB"
            }
        ]
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchCreateBitableRecordRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
