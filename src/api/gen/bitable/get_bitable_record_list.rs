//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T06:46:30+00:00**
    ///
    /// ## 列出记录
    ///
    /// 该接口用于列出数据表中的现有记录，单次最多列出 500 行记录，支持分页获取。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fapp-table-record%2Flist>
    pub async fn get_bitable_record_list(
        &self,
        req: GetBitableRecordListReq,
    ) -> Result<(GetBitableRecordListResp, CommonResponse), Error> {
        self.get_bitable_record_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_bitable_record_list](#method.get_bitable_record_list) 函数
    pub async fn get_bitable_record_list_with_opt(
        &self,
        req: GetBitableRecordListReq,
        method_option: MethodOption,
    ) -> Result<(GetBitableRecordListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_bitable_record_list(&req) {
                tracing::info!("[lark] Bitable#GetBitableRecordList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#GetBitableRecordList call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "GetBitableRecordList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetBitableRecordListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetBitableRecordListReq {
    /// 多维表格的唯一标识符 [app_token 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "bascnCMII2ORej2RItqpZZUNMIe"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// 多维表格数据表的唯一标识符 [table_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#735fe883)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tblxI2tWaxP5dG7p"
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,
    /// 视图的唯一标识符，获取指定视图下的记录[view_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)
    ///
    /// 注意：
    ///
    /// 当 filter 参数 或 sort 参数不为空时，请求视为对数据表中的全部数据做条件过滤，指定的view_id 会被忽略。
    ///
    /// **示例值**: "vewqhz51lk"
    #[api(kind = "query", name = "view_id", v_type = "var", option = "false")]
    pub view_id: String,
    /// 筛选参数，用于指定本次查询的筛选条件
    ///
    /// 注意：
    ///
    /// 1.不支持对“人员”以及“关联字段”的属性进行过滤筛选，如人员的 OpenID。
    ///
    /// 2.指定筛选条件时，参数长度不超过2000个字符。
    ///
    /// 详细请参考[筛选条件支持的公式](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/filter)
    ///
    /// **示例值**: "AND(CurrentValue.[身高]>180, CurrentValue.[体重]>150)"
    #[api(kind = "query", name = "filter", v_type = "var", option = "false")]
    pub filter: String,
    /// 排序参数，用于指定本次查询返回结果的顺序
    ///
    /// 注意：
    ///
    /// 1.不支持对带“公式”和“关联字段”的表的使用。
    ///
    /// 2.指定排序条件时，参数长度不超过1000字符。
    ///
    /// 3.当存在多个排序条件时，数据将根据条件顺序逐层排序
    ///
    /// **示例值**: "["字段1 DESC","字段2 ASC"]"
    #[api(kind = "query", name = "sort", v_type = "var", option = "false")]
    pub sort: String,
    /// 字段名称，用于指定本次查询返回记录中包含的字段
    ///
    /// **示例值**: "["字段1","字段2"]"
    #[api(kind = "query", name = "field_names", v_type = "var", option = "false")]
    pub field_names: String,
    /// 控制多行文本字段数据的返回格式，true 表示以数组形式返回。
    ///
    /// 注意：
    ///
    /// 1.多行文本中如果有超链接部分，则会返回链接的 URL。
    ///
    /// 2.目前可以返回多行文本中 URL 类型为多维表格链接、飞书 doc、飞书 sheet的URL类型以及@人员的数据结构。
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "text_field_as_array",
        v_type = "var",
        option = "false"
    )]
    pub text_field_as_array: bool,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 默认值为false，返回当前字段的默认类型和结果；当该参数的值为true时，公式 和 查找引用 类型的字段，将会以 被引用字段 的格式返回
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "display_formula_ref",
        v_type = "var",
        option = "false"
    )]
    pub display_formula_ref: bool,
    /// 控制是否返回自动计算的字段，例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`，true 表示返回
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "automatic_fields",
        v_type = "var",
        option = "false"
    )]
    pub automatic_fields: bool,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "recn0hoyXL"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetBitableRecordListRespInner {
    #[serde(flatten)]
    data: Option<GetBitableRecordListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetBitableRecordListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 总记录数
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "total",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub total: i64,
    /// 本次请求返回的全部记录列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<AppTableRecordSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableRecordSubResp {
    /// 一条记录的唯一标识 id [record_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#15d8db94)
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_id: String,
    /// 该记录的创建人
    #[serde(
        rename = "created_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_by: PersonSubResp,
    /// 该记录的创建时间
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "created_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_time: i64,
    /// 该记录最新一次更新的修改人
    #[serde(
        rename = "last_modified_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_by: PersonSubResp,
    /// 该记录最近一次的更新时间
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "last_modified_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_time: i64,
    /// 数据表的字段，即数据表的列
    ///
    /// 当前接口支持的字段类型请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#31f78a3c)
    ///
    /// 不同类型字段的数据结构请参考[数据结构概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fields: std::collections::HashMap<String, serde_json::Value>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonSubResp {
    /// 用户id，id类型等于user_id_type所指定的类型。
    ///
    /// **示例值**: "ou_9a971ded01b4ca66f4798549878abcef"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户的中文名称
    ///
    /// **示例值**: "黄小豆"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 用户的英文名称
    ///
    /// **示例值**: "Xiaodou Huang"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 用户的邮箱
    ///
    /// **示例值**: "email@example.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 头像链接
    ///
    /// **示例值**: "https://example.com/avatar"
    #[serde(
        rename = "avatar_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetBitableRecordListReq) -> Result<(GetBitableRecordListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetBitableRecordListReq,
                ) -> Result<(GetBitableRecordListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_bitable_record_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetBitableRecordListReq,
            GetBitableRecordListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_bitable_record_list(
            &self,
            req: &GetBitableRecordListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetBitableRecordListReq, GetBitableRecordListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::get_bitable_record_list::{
            GetBitableRecordListReq, GetBitableRecordListResp, GetBitableRecordListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_get_bitable_record_list(|_| {
                Ok((
                    GetBitableRecordListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .bitable()
            .get_bitable_record_list(GetBitableRecordListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .get_bitable_record_list(GetBitableRecordListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
	"fields": {
		"索引": "索引列多行文本类型",
		"多行文本": "多行文本内容1",
		"数字": "100",
		"单选": "选项1",
		"多选": ["选项1", "选项2"],
		"日期": 1674206443000,
		"复选框": true,
		"人员": [{
			"avatar_url": "https://internal-api-lark-file.feishu.cn/static-resource/v1/b2-7619-4b8a-b27b-c72d90b06a2j~?image_size=72x72&cut_type=default-face&quality=&format=jpeg&sticker_format=.webp",
			"email": "zhangsan.leben@bytedance.com",
			"en_name": "ZhangSan",
			"id": "ou_2910013f1e6456f16a0ce75ede950a0a",
			"name": "张三"
		}, {
			"avatar_url": "https://internal-api-lark-file.feishu.cn/static-resource/v1/v2_q86-fcb6-4f18-85c7-87ca8881e50j~?image_size=72x72&cut_type=default-face&quality=&format=jpeg&sticker_format=.webp",
			"email": "lisi.00@bytedance.com",
			"en_name": "LiSi",
			"id": "ou_e04138c9633dd0d2ea166d79f548ab5d",
			"name": "李四"
		}],
        "群组": [{
            "avatar_url": "https://internal-api-lark-file.feishu-boe.cn/static-resource/v1/v2_c8d2cd50-ba29-476f-b7f1-5b5917cb18ej~?image_size=72x72&cut_type=&quality=&format=jpeg&sticker_format=.webp",
            "id": "oc_cd07f55f14d6f4a4f1b51504e7e97f48",
            "name": "武侠聊天组"
        }],
		"电话号码": "131xxxx6666",
		"超链接": {
			"link": "https://bitable.feishu.cn",
			"text": "飞书多维表格官网"
		},
		"附件": [{
			"file_token": "Vl3FbVkvnowlgpxpqsAbBrtFcrd",
			"name": "飞书.jpeg",
			"size": 32975,
			"tmp_url": "https://open.feishu.cn/open-apis/drive/v1/medias/batch_get_tmp_download_url?file_tokens=Vl3FbVk11owlgpxpqsAbBrtFcrd&extra=%7B%22bitablePerm%22%3A%7B%22tableId%22%3A%22tblBJyX6jZteblYv%22%2C%22rev%22%3A90%7D%7D",
			"type": "image/jpeg",
			"url": "https://open.feishu.cn/open-apis/drive/v1/medias/Vl3FbVk11owlgpxpqsAbBrtFcrd/download?extra=%7B%22bitablePerm%22%3A%7B%22tableId%22%3A%22tblBJyX6jZteblYv%22%2C%22rev%22%3A90%7D%7D"
		}],
		"单向关联": [{
			"record_ids": ["recnVYsuqV"],
			"table_id": "tblBJyX6jZteblYv",
			"text": "索引列多行文本类型",
			"text_arr": ["索引列多行文本类型"],
			"type": "text"
		}],
		"双向关联": [{
			"record_ids": ["recG70uhxh"],
			"table_id": "tblBJyX6jZteblYv",
			"text": "索引列多行文本类型",
			"text_arr": ["索引列多行文本类型"],
			"type": "text"
		}],
		"地理位置": {
			"address": "东长安街",
			"adname": "东城区",
			"cityname": "北京市",
			"full_address": "天安门广场，北京市东城区东长安街",
			"location": "116.397755,39.903179",
			"name": "天安门广场",
			"pname": "北京市"
		},
		"公式": [{
			"text": "false",
			"type": "text"
		}],
		"创建时间": 1675244156000,
		"更新时间": 1677556020000,
		"修改人": {
			"avatar_url": "https://internal-api-lark-file.feishu.cn/static-resource/v1/06d568cb-f464-4c2e-bd03-76512c545c5j~?image_size=72x72&cut_type=default-face&quality=&format=jpeg&sticker_format=.webp",
			"email": "",
			"en_name": "测试1",
			"id": "ou_92945f86a98bba075174776959c90eda",
			"name": "测试1"
		},
		"创建人": {
			"avatar_url": "https://internal-api-lark-file.feishu.cn/static-resource/v1/06d568cb-f464-4c2e-bd03-76512c545c5j~?image_size=72x72&cut_type=default-face&quality=&format=jpeg&sticker_format=.webp",
			"email": "",
			"en_name": "测试1",
			"id": "ou_92945f86a98bba075174776959c90eda",
			"name": "测试1"
		},
		"条码": "123",
		"查找引用": [{
		    "text": "多行文本内容1",
			"type": "text"
		}],
		"自动编号-自定义": "017no20230201",
		"自动编号-默认": "17",
		"货币": "1",
		"进度": "0.66",
        "评分":"3"
	}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetBitableRecordListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
