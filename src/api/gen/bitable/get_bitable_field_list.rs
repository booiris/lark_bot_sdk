//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2023-08-03T07:18:16+00:00**
    ///
    /// ## 列出字段
    ///
    /// 根据 app_token 和 table_id，获取数据表的所有字段
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/bitable-v1/app-table-field/list>
    ///
    /// api url: <https://open.larkoffice.com/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fapp-table-field%2Flist>
    pub async fn get_bitable_field_list(
        &self,
        req: GetBitableFieldListReq,
    ) -> Result<(GetBitableFieldListResp, CommonResponse), Error> {
        self.get_bitable_field_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_bitable_field_list](#method.get_bitable_field_list) 函数
    pub async fn get_bitable_field_list_with_opt(
        &self,
        req: GetBitableFieldListReq,
        method_option: MethodOption,
    ) -> Result<(GetBitableFieldListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_bitable_field_list(&req) {
                tracing::info!("[lark] Bitable#GetBitableFieldList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#GetBitableFieldList call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "GetBitableFieldList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetBitableFieldListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetBitableFieldListReq {
    /// Base app token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "appbcbWCzen6D8dezhoCH2RpMAh"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// table id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tblsRc9GRRXKqhvW"
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,
    /// 视图 ID
    ///
    /// **示例值**: "vewOVMEXPF"
    #[api(kind = "query", name = "view_id", v_type = "var", option = "false")]
    pub view_id: String,
    /// 控制字段描述（多行文本格式）数据的返回格式, true 表示以数组富文本形式返回
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "text_field_as_array",
        v_type = "var",
        option = "false"
    )]
    pub text_field_as_array: bool,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "fldwJ4YrtB"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetBitableFieldListRespInner {
    #[serde(flatten)]
    data: Option<GetBitableFieldListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetBitableFieldListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 总数
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "total",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub total: i64,
    /// 字段信息
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<AppTableFieldSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldSubResp {
    /// 多维表格字段名
    ///
    /// 请注意：
    ///
    /// 1. 名称中的首尾空格将会被去除。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "字段名称"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 多维表格字段类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1（type值相同的时候，加上ui_type区分）"
    ///
    /// **可选值**:
    ///
    /// `Text`: 多行文本
    ///
    /// `Number`: 数字
    ///
    /// `SingleSelect`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateTime`: 日期
    ///
    /// `Checkbox`: 复选框
    ///
    /// `User`: 人员
    ///
    /// `PhoneNumber`: 电话号码
    ///
    /// `Url`: 超链接
    ///
    /// `Attachment`: 附件
    ///
    /// `Link`: 关联
    ///
    /// `Formula`: 公式
    ///
    /// `DuplexLink`: 双向关联
    ///
    /// `Location`: 地理位置
    ///
    /// `GroupChat`: 群组
    ///
    /// `CreatedTime`: 创建时间
    ///
    /// `ModifiedTime`: 最后更新时间
    ///
    /// `CreatedUser`: 创建人
    ///
    /// `ModifiedUser`: 修改人
    ///
    /// `AutoSerial`: 自动编号
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 字段属性，具体参考：[字段编辑指南](https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
    #[serde(
        rename = "property",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub property: AppTableFieldPropertySubResp,
    /// 字段的描述
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: AppTableFieldDescriptionSubResp,
    /// 是否是索引列
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary: bool,
    /// 多维表格字段 id
    ///
    /// **示例值**: "fldWJyCkFQ"
    #[serde(
        rename = "field_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_id: String,
    /// 字段在界面上的展示类型，例如进度字段是数字的一种展示形态
    ///
    /// **示例值**: "Progress"
    ///
    /// **可选值**:
    ///
    /// `Text`: 多行文本
    ///
    /// `Barcode`: 条码
    ///
    /// `Number`: 数字
    ///
    /// `Progress`: 进度
    ///
    /// `Currency`: 货币
    ///
    /// `Rating`: 评分
    ///
    /// `SingleSelect`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateTime`: 日期
    ///
    /// `Checkbox`: 复选框
    ///
    /// `User`: 人员
    ///
    /// `GroupChat`: 群组
    ///
    /// `Phone`: 电话号码
    ///
    /// `URL`: 超链接
    ///
    /// `Attachment`: 附件
    ///
    /// `SingleLink`: 单向关联
    ///
    /// `Formula`: 公式
    ///
    /// `DuplexLink`: 双向关联
    ///
    /// `Location`: 地理位置
    ///
    /// `CreatedTime`: 创建时间
    ///
    /// `ModifiedTime`: 最后更新时间
    ///
    /// `CreatedUser`: 创建人
    ///
    /// `ModifiedUser`: 修改人
    ///
    /// `AutoNumber`: 自动编号
    #[serde(
        rename = "ui_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ui_type: String,
    /// 是否是隐藏字段
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_hidden",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_hidden: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldPropertySubResp {
    /// 单选、多选字段的选项信息
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<AppTableFieldPropertyOptionSubResp>,
    /// 数字、公式字段的显示格式
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "formatter",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub formatter: String,
    /// 日期、创建时间、最后更新时间字段的显示格式
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "date_formatter",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_formatter: String,
    /// 日期字段中新纪录自动填写创建时间
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "auto_fill",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_fill: bool,
    /// 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "multiple",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub multiple: bool,
    /// 单向关联、双向关联字段中关联的数据表的id
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "table_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_id: String,
    /// 单向关联、双向关联字段中关联的数据表的名字
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "table_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_name: String,
    /// 双向关联字段中关联的数据表中对应的双向关联字段的名字
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "back_field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub back_field_name: String,
    /// 自动编号类型
    #[serde(
        rename = "auto_serial",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_serial: AppFieldPropertyAutoSerialSubResp,
    /// 地理位置输入方式
    #[serde(
        rename = "location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location: AppFieldPropertyLocationSubResp,
    /// 公式字段的表达式
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "formula_expression",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub formula_expression: String,
    /// 字段支持的编辑模式
    #[serde(
        rename = "allowed_edit_modes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allowed_edit_modes: AllowedEditModesSubResp,
    /// 进度、评分等字段的数据范围最小值
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "min",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min: f64,
    /// 进度、评分等字段的数据范围最大值
    ///
    /// **示例值**: "10"
    #[serde(
        rename = "max",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max: f64,
    /// 进度等字段是否支持自定义范围
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "range_customize",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub range_customize: bool,
    /// 货币币种
    ///
    /// **示例值**: "CNY"
    #[serde(
        rename = "currency_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_code: String,
    /// 评分字段的相关设置
    #[serde(
        rename = "rating",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rating: RatingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldDescriptionSubResp {
    /// 是否禁止同步，如果为true，表示禁止同步该描述内容到表单的问题描述（只在新增、修改字段时生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "disable_sync",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_sync: bool,
    /// 字段描述内容
    ///
    /// **示例值**: "请按 name_id 格式填写\n例如：“Alice_20202020”"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyAutoSerialSubResp {
    /// 自动编号类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "auto_increment_number"
    ///
    /// **可选值**:
    ///
    /// `Custom`: 自定义编号
    ///
    /// `AutoIncrementNumber`: 自增数字
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 自动编号规则列表
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<AppFieldPropertyAutoSerialOptionsSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyLocationSubResp {
    /// 地理位置输入限制
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "not_limit"
    ///
    /// **可选值**:
    ///
    /// `OnlyMobile`: 只允许移动端上传
    ///
    /// `NotLimit`: 无限制
    #[serde(
        rename = "input_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub input_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AllowedEditModesSubResp {
    /// 是否允许手动录入
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "manual",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub manual: bool,
    /// 是否允许移动端录入
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "scan",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scan: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RatingSubResp {
    /// 评分字段的符号展示
    ///
    /// **示例值**: "star"
    #[serde(
        rename = "symbol",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub symbol: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldPropertyOptionSubResp {
    /// 选项名
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 选项 ID，创建时不允许指定 ID
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 选项颜色
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub color: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyAutoSerialOptionsSubResp {
    /// 自动编号的可选规则项类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "created_time"
    ///
    /// **可选值**:
    ///
    /// `SystemNumber`: 自增数字位,value范围1-9
    ///
    /// `FixedText`: 固定字符，最大长度：20
    ///
    /// `CreatedTime`: 创建时间，支持格式 "yyyyMMdd"、"yyyyMM"、"yyyy"、"MMdd"、"MM"、"dd"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 与自动编号的可选规则项类型相对应的取值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "yyyyMMdd"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetBitableFieldListReq) -> Result<(GetBitableFieldListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetBitableFieldListReq,
                ) -> Result<(GetBitableFieldListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_bitable_field_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetBitableFieldListReq, GetBitableFieldListResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_bitable_field_list(
            &self,
            req: &GetBitableFieldListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetBitableFieldListReq, GetBitableFieldListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::get_bitable_field_list::{
            GetBitableFieldListReq, GetBitableFieldListResp, GetBitableFieldListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_get_bitable_field_list(|_| {
                Ok((
                    GetBitableFieldListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .bitable()
            .get_bitable_field_list(GetBitableFieldListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .get_bitable_field_list(GetBitableFieldListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "has_more": false,
        "items": [
            {
                "field_id": "fldYWaldeW",
                "field_name": "多行文本",
                "is_primary": true,
                "property": null,
                "type": 1,
                "ui_type": "Text"
            },
            {
                "field_id": "fldctOury6",
                "field_name": "人员",
                "is_primary": false,
                "property": {
                    "multiple": true
                },
                "type": 11,
                "ui_type": "User"
            },
            {
                "field_id": "fldhAppMQX",
                "field_name": "单选",
                "is_primary": false,
                "property": {
                    "options": [
                        {
                            "color": 0,
                            "id": "opt5XoXIB0",
                            "name": "选项1"
                        }
                    ]
                },
                "type": 3,
                "ui_type": "SingleSelect"
            },
            {
                "field_id": "fldmeqmpVA",
                "field_name": "多选",
                "is_primary": false,
                "property": {
                    "options": [
                        {
                            "color": 0,
                            "id": "opt5XoXIB0",
                            "name": "选项1"
                        },
                        {
                            "color": 1,
                            "id": "optCvWAQfP",
                            "name": "选项2"
                        }
                    ]
                },
                "type": 4,
                "ui_type": "MultiSelect"
            },
            {
                "field_id": "fldXhExGte",
                "field_name": "群组",
                "is_primary": false,
                "property": {
                    "multiple": true
                },
                "type": 23,
                "ui_type": "GroupChat"
            },
            {
                "field_id": "fldUeGSYKO",
                "field_name": "日期",
                "is_primary": false,
                "property": {
                    "auto_fill": false,
                    "date_formatter": "yyyy/MM/dd"
                },
                "type": 5,
                "ui_type": "DateTime"
            },
            {
                "field_id": "fldQfY0kQq",
                "field_name": "附件",
                "is_primary": false,
                "property": null,
                "type": 17,
                "ui_type": "Attachment"
            },
            {
                "field_id": "fldPlbgodf",
                "field_name": "索引",
                "is_primary": false,
                "property": null,
                "type": 1,
                "ui_type": "Text"
            },
            {
                "field_id": "fldJU9aVuL",
                "field_name": "复选框",
                "is_primary": false,
                "property": null,
                "type": 7,
                "ui_type": "Checkbox"
            },
            {
                "field_id": "fldM2XDZx6",
                "field_name": "超链接",
                "is_primary": false,
                "property": null,
                "type": 15,
                "ui_type": "Url"
            },
            {
                "field_id": "fld6oN4ILr",
                "field_name": "电话号码",
                "is_primary": false,
                "property": null,
                "type": 13,
                "ui_type": "Phone"
            },
            {
                "field_id": "fldaQAG9aL",
                "field_name": "数据表",
                "is_primary": false,
                "property": {
                    "multiple": true,
                    "table_id": "tbltDA6cN3ou5r43",
                    "table_name": "数据表"
                },
                "type": 18,
                "ui_type": "SingleLink"
            },
            {
                "field_id": "fldNubyO2U",
                "field_name": "数据表 2",
                "is_primary": false,
                "property": {
                    "back_field_id": "fld0poyvPk",
                    "back_field_name": "数据表 6",
                    "multiple": true,
                    "table_id": "tbltDA6cN3ou5r43",
                    "table_name": "数据表"
                },
                "type": 21,
                "ui_type": "DuplexLink"
            },
            {
                "field_id": "fld2VT2n9r",
                "field_name": "地理位置",
                "is_primary": false,
                "property": {
                    "location": {
                        "input_type": "not_limit"
                    }
                },
                "type": 22,
                "ui_type": "Location"
            },
            {
                "field_id": "fldRITHRhg",
                "field_name": "公式",
                "is_primary": false,
                "property": {
                    "formatter": ""
                },
                "type": 20,
                "ui_type": "Formula"
            },
            {
                "field_id": "fldNM5yXpL",
                "field_name": "创建时间",
                "is_primary": false,
                "property": {
                    "date_formatter": "yyyy/MM/dd"
                },
                "type": 1001,
                "ui_type": "CreatedTime"
            },
            {
                "field_id": "fldhSAWlAT",
                "field_name": "创建人",
                "is_primary": false,
                "property": null,
                "type": 1003,
                "ui_type": "CreatedUser"
            },
            {
                "field_id": "fldksdalhG",
                "field_name": "修改人",
                "is_primary": false,
                "property": null,
                "type": 1004,
                "ui_type": "ModifiedUser"
            },
            {
                "field_id": "fldAXRUmB4",
                "field_name": "最后更新时间",
                "is_primary": false,
                "property": {
                    "date_formatter": "yyyy/MM/dd"
                },
                "type": 1002,
                "ui_type": "ModifiedTime"
            },
            {
                "field_id": "fldfujMlXf",
                "field_name": "条码",
                "is_primary": false,
                "property": {
                    "allowed_edit_modes": {
                        "manual": true,
                        "scan": true
                    }
                },
                "type": 1,
                "ui_type": "Barcode"
            },
            {
                "field_id": "fldiVqhh9r",
                "field_name": "查找引用",
                "is_primary": false,
                "property": null,
                "type": 19,
                "ui_type": "Lookup"
            },
            {
                "field_id": "fld4WsysqF",
                "field_name": "自动编号",
                "is_primary": false,
                "property": {
                    "auto_serial": {
                        "type": "auto_increment_number"
                    }
                },
                "type": 1005,
                "ui_type": "AutoNumber"
            },
            {
                "field_id": "fldMy4SfrI",
                "field_name": "货币",
                "is_primary": false,
                "property": {
                    "currency_code": "CNY",
                    "formatter": "0.00"
                },
                "type": 2,
                "ui_type": "Currency"
            },
            {
                "field_id": "fldj1QnQXO",
                "field_name": "进度",
                "is_primary": false,
                "property": {
                    "formatter": "0%",
                    "max": 1,
                    "min": 0,
                    "range_customize": false
                },
                "type": 2,
                "ui_type": "Progress"
            },
            {
                "field_id": "fldQhSzWbx",
                "field_name": "评分",
                "is_primary": false,
                "property": {
                    "formatter": "0",
                    "max": 5,
                    "min": 1,
                    "rating": {
                        "symbol": "star"
                    }
                },
                "type": 2,
                "ui_type": "Rating"
            }
        ],
        "page_token": "fldQhSzWbx",
        "total": 25
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetBitableFieldListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
