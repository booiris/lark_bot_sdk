//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2023-08-03T07:18:14+00:00**
    ///
    /// ## 更新数据表
    ///
    /// 该接口用于更新数据表的基本信息，包括数据表的名称等。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/patch>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fapp-table%2Fpatch>
    pub async fn update_bitable_table(
        &self,
        req: UpdateBitableTableReq,
    ) -> Result<(UpdateBitableTableResp, CommonResponse), Error> {
        self.update_bitable_table_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_bitable_table](#method.update_bitable_table) 函数
    pub async fn update_bitable_table_with_opt(
        &self,
        req: UpdateBitableTableReq,
        method_option: MethodOption,
    ) -> Result<(UpdateBitableTableResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_bitable_table(&req) {
                tracing::info!("[lark] Bitable#UpdateBitableTable **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#UpdateBitableTable call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "UpdateBitableTable",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateBitableTableRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateBitableTableReq {
    /// 多维表格的唯一标识符 [app_token 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "XrgTb4y1haKYnasu0xXb1g7lcSg"
    ///
    /// **数据校验规则**：
    ///
    /// - **最小长度**: `1` 字符
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// 多维表格数据表的唯一标识符 [table_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#735fe883)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tbl1TkhyTWDkSoZ3"
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,

    /// 数据表的新名称。
    ///
    /// 请注意：
    ///
    /// 1. 名称中的首尾空格将会被去除。
    ///
    /// 2. 如果名称为空或和旧名称相同，接口仍然会返回成功，但是名称不会被更改。
    ///
    /// **示例值**: "数据表的新名称"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `100` 字符
    #[api(kind = "body", name = "name")]
    pub name: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateBitableTableRespInner {
    #[serde(flatten)]
    data: Option<UpdateBitableTableResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateBitableTableResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 数据表的名称
    ///
    /// **示例值**: "数据表的新名称"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateBitableTableReq) -> Result<(UpdateBitableTableResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(UpdateBitableTableReq) -> Result<(UpdateBitableTableResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_bitable_table<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateBitableTableReq, UpdateBitableTableResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_bitable_table(
            &self,
            req: &UpdateBitableTableReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateBitableTableReq, UpdateBitableTableResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::update_bitable_table::{
            UpdateBitableTableReq, UpdateBitableTableResp, UpdateBitableTableRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_update_bitable_table(|_| {
                Ok((UpdateBitableTableResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .bitable()
            .update_bitable_table(UpdateBitableTableReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .update_bitable_table(UpdateBitableTableReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "name": "数据表的新名称"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateBitableTableReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "name": "数据表的新名称"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateBitableTableRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
