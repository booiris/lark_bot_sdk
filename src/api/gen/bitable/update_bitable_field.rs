//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/update>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-14T02:41:27+00:00**
    ///
    /// ## 更新字段
    ///
    /// 该接口用于在数据表中更新一个字段
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/update>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/bitable-v1/app-table-field/update>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fapp-table-field%2Fupdate>
    pub async fn update_bitable_field(
        &self,
        req: UpdateBitableFieldReq,
    ) -> Result<(UpdateBitableFieldResp, CommonResponse), Error> {
        self.update_bitable_field_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_bitable_field](#method.update_bitable_field) 函数
    pub async fn update_bitable_field_with_opt(
        &self,
        req: UpdateBitableFieldReq,
        method_option: MethodOption,
    ) -> Result<(UpdateBitableFieldResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_bitable_field(&req) {
                tracing::info!("[lark] Bitable#UpdateBitableField **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#UpdateBitableField call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "UpdateBitableField",
            method: http::Method::PUT,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateBitableFieldRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateBitableFieldReq {
    /// base app token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "appbcbWCzen6D8dezhoCH2RpMAh"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// table id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tblsRc9GRRXKqhvW"
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,
    /// field id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "fldPTb0U2y"
    #[api(kind = "path", name = "field_id")]
    pub field_id: String,

    /// 多维表格字段名
    ///
    /// 请注意：
    ///
    /// 1. 名称中的首尾空格将会被去除。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "多行文本"
    #[api(kind = "body", name = "field_name")]
    pub field_name: String,
    /// 多维表格字段类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Text`: 多行文本
    ///
    /// `Number`: 数字
    ///
    /// `SingleSelect`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateTime`: 日期
    ///
    /// `Checkbox`: 复选框
    ///
    /// `User`: 人员
    ///
    /// `PhoneNumber`: 电话号码
    ///
    /// `Url`: 超链接
    ///
    /// `Attachment`: 附件
    ///
    /// `Link`: 关联
    ///
    /// `Formula`: 公式
    ///
    /// `DuplexLink`: 双向关联
    ///
    /// `Location`: 地理位置
    ///
    /// `GroupChat`: 群组
    ///
    /// `CreatedTime`: 创建时间
    ///
    /// `ModifiedTime`: 最后更新时间
    ///
    /// `CreatedUser`: 创建人
    ///
    /// `ModifiedUser`: 修改人
    ///
    /// `AutoSerial`: 自动编号
    #[api(kind = "body", name = "type")]
    pub body_type: i64,
    /// 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
    #[api(kind = "body", name = "property")]
    pub property: Option<AppTableFieldPropertySubReq>,
    /// 字段的描述
    #[api(kind = "body", name = "description")]
    pub description: Option<AppTableFieldDescriptionSubReq>,
    /// 字段在界面上的展示类型，例如进度字段是数字的一种展示形态
    ///
    /// **示例值**: "Progress"
    ///
    /// **可选值**:
    ///
    /// `Text`: 多行文本
    ///
    /// `Email`: 邮箱地址
    ///
    /// `Barcode`: 条码
    ///
    /// `Number`: 数字
    ///
    /// `Progress`: 进度
    ///
    /// `Currency`: 货币
    ///
    /// `Rating`: 评分
    ///
    /// `SingleSelect`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateTime`: 日期
    ///
    /// `Checkbox`: 复选框
    ///
    /// `User`: 人员
    ///
    /// `GroupChat`: 群组
    ///
    /// `Phone`: 电话号码
    ///
    /// `URL`: 超链接
    ///
    /// `Attachment`: 附件
    ///
    /// `SingleLink`: 单向关联
    ///
    /// `Formula`: 公式
    ///
    /// `DuplexLink`: 双向关联
    ///
    /// `Location`: 地理位置
    ///
    /// `CreatedTime`: 创建时间
    ///
    /// `ModifiedTime`: 最后更新时间
    ///
    /// `CreatedUser`: 创建人
    ///
    /// `ModifiedUser`: 修改人
    ///
    /// `AutoNumber`: 自动编号
    #[api(kind = "body", name = "ui_type")]
    pub ui_type: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldPropertySubReq {
    /// 单选、多选字段的选项信息
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<Option<AppTableFieldPropertyOptionSubReq>>,
    /// 数字、公式字段的显示格式
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "formatter",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub formatter: Option<String>,
    /// 日期、创建时间、最后更新时间字段的显示格式
    ///
    /// **示例值**: "日期格式"
    #[serde(
        rename = "date_formatter",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_formatter: Option<String>,
    /// 日期字段中新纪录自动填写创建时间
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "auto_fill",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_fill: Option<bool>,
    /// 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "multiple",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub multiple: Option<bool>,
    /// 单向关联、双向关联字段中关联的数据表的id
    ///
    /// **示例值**: "tblsRc9GRRXKqhvW"
    #[serde(
        rename = "table_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_id: Option<String>,
    /// 单向关联、双向关联字段中关联的数据表的名字
    ///
    /// **示例值**: ""table2""
    #[serde(
        rename = "table_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_name: Option<String>,
    /// 双向关联字段中关联的数据表中对应的双向关联字段的名字
    ///
    /// **示例值**: ""table1-双向关联""
    #[serde(
        rename = "back_field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub back_field_name: Option<String>,
    /// 自动编号类型
    #[serde(
        rename = "auto_serial",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_serial: Option<AppFieldPropertyAutoSerialSubReq>,
    /// 地理位置输入方式
    #[serde(
        rename = "location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location: Option<AppFieldPropertyLocationSubReq>,
    /// 公式字段的表达式
    ///
    /// **示例值**: "bitable::$table[tblNj92WQBAasdEf].$field[fldMV60rYs]*2"
    #[serde(
        rename = "formula_expression",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub formula_expression: Option<String>,
    /// 字段支持的编辑模式
    #[serde(
        rename = "allowed_edit_modes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allowed_edit_modes: Option<AllowedEditModesSubReq>,
    /// 进度、评分等字段的数据范围最小值
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "min",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min: Option<f64>,
    /// 进度、评分等字段的数据范围最大值
    ///
    /// **示例值**: "10"
    #[serde(
        rename = "max",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max: Option<f64>,
    /// 进度等字段是否支持自定义范围
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "range_customize",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub range_customize: Option<bool>,
    /// 货币币种
    ///
    /// **示例值**: "CNY"
    #[serde(
        rename = "currency_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_code: Option<String>,
    /// 评分字段的相关设置
    #[serde(
        rename = "rating",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rating: Option<RatingSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldDescriptionSubReq {
    /// 是否禁止同步，如果为true，表示禁止同步该描述内容到表单的问题描述（只在新增、修改字段时生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "disable_sync",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_sync: Option<bool>,
    /// 字段描述内容
    ///
    /// **示例值**: "这是一个字段描述"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyAutoSerialSubReq {
    /// 自动编号类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "auto_increment_number"
    ///
    /// **可选值**:
    ///
    /// `Custom`: 自定义编号
    ///
    /// `AutoIncrementNumber`: 自增数字
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 自动编号规则列表
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<Option<AppFieldPropertyAutoSerialOptionsSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyLocationSubReq {
    /// 地理位置输入限制
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "not_limit"
    ///
    /// **可选值**:
    ///
    /// `OnlyMobile`: 只允许移动端上传
    ///
    /// `NotLimit`: 无限制
    #[serde(
        rename = "input_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub input_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AllowedEditModesSubReq {
    /// 是否允许手动录入
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "manual",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub manual: Option<bool>,
    /// 是否允许移动端录入
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "scan",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scan: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RatingSubReq {
    /// 评分字段的符号展示
    ///
    /// **示例值**: "star"
    #[serde(
        rename = "symbol",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub symbol: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldPropertyOptionSubReq {
    /// 选项名
    ///
    /// **示例值**: "红色"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Option<String>,
    /// 选项 ID，创建时不允许指定 ID
    ///
    /// **示例值**: "optKl35lnG"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: Option<String>,
    /// 选项颜色
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub color: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyAutoSerialOptionsSubReq {
    /// 自动编号的可选规则项类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "created_time"
    ///
    /// **可选值**:
    ///
    /// `SystemNumber`: 自增数字位,value范围1-9
    ///
    /// `FixedText`: 固定字符，最大长度：20
    ///
    /// `CreatedTime`: 创建时间，支持格式 "yyyyMMdd"、"yyyyMM"、"yyyy"、"MMdd"、"MM"、"dd"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 与自动编号的可选规则项类型相对应的取值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "yyyyMMdd"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateBitableFieldRespInner {
    #[serde(flatten)]
    data: Option<UpdateBitableFieldResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateBitableFieldResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 字段
    #[serde(
        rename = "field",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field: AppTableFieldSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldSubResp {
    /// 多维表格字段名
    ///
    /// 请注意：
    ///
    /// 1. 名称中的首尾空格将会被去除。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "多行文本"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 多维表格字段类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Text`: 多行文本
    ///
    /// `Number`: 数字
    ///
    /// `SingleSelect`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateTime`: 日期
    ///
    /// `Checkbox`: 复选框
    ///
    /// `User`: 人员
    ///
    /// `PhoneNumber`: 电话号码
    ///
    /// `Url`: 超链接
    ///
    /// `Attachment`: 附件
    ///
    /// `Link`: 关联
    ///
    /// `Formula`: 公式
    ///
    /// `DuplexLink`: 双向关联
    ///
    /// `Location`: 地理位置
    ///
    /// `GroupChat`: 群组
    ///
    /// `CreatedTime`: 创建时间
    ///
    /// `ModifiedTime`: 最后更新时间
    ///
    /// `CreatedUser`: 创建人
    ///
    /// `ModifiedUser`: 修改人
    ///
    /// `AutoSerial`: 自动编号
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
    #[serde(
        rename = "property",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub property: AppTableFieldPropertySubResp,
    /// 字段的描述
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: AppTableFieldDescriptionSubResp,
    /// 是否是索引列
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary: bool,
    /// 多维表格字段 id
    ///
    /// **示例值**: "fldWJyCkFQ"
    #[serde(
        rename = "field_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_id: String,
    /// 字段在界面上的展示类型，例如进度字段是数字的一种展示形态
    ///
    /// **示例值**: "Progress"
    ///
    /// **可选值**:
    ///
    /// `Text`: 多行文本
    ///
    /// `Email`: 邮箱地址
    ///
    /// `Barcode`: 条码
    ///
    /// `Number`: 数字
    ///
    /// `Progress`: 进度
    ///
    /// `Currency`: 货币
    ///
    /// `Rating`: 评分
    ///
    /// `SingleSelect`: 单选
    ///
    /// `MultiSelect`: 多选
    ///
    /// `DateTime`: 日期
    ///
    /// `Checkbox`: 复选框
    ///
    /// `User`: 人员
    ///
    /// `GroupChat`: 群组
    ///
    /// `Phone`: 电话号码
    ///
    /// `URL`: 超链接
    ///
    /// `Attachment`: 附件
    ///
    /// `SingleLink`: 单向关联
    ///
    /// `Formula`: 公式
    ///
    /// `DuplexLink`: 双向关联
    ///
    /// `Location`: 地理位置
    ///
    /// `CreatedTime`: 创建时间
    ///
    /// `ModifiedTime`: 最后更新时间
    ///
    /// `CreatedUser`: 创建人
    ///
    /// `ModifiedUser`: 修改人
    ///
    /// `AutoNumber`: 自动编号
    #[serde(
        rename = "ui_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ui_type: String,
    /// 是否是隐藏字段
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_hidden",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_hidden: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldPropertySubResp {
    /// 单选、多选字段的选项信息
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<AppTableFieldPropertyOptionSubResp>,
    /// 数字、公式字段的显示格式
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "formatter",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub formatter: String,
    /// 日期、创建时间、最后更新时间字段的显示格式
    ///
    /// **示例值**: "日期格式"
    #[serde(
        rename = "date_formatter",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_formatter: String,
    /// 日期字段中新纪录自动填写创建时间
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "auto_fill",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_fill: bool,
    /// 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "multiple",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub multiple: bool,
    /// 单向关联、双向关联字段中关联的数据表的id
    ///
    /// **示例值**: "tblsRc9GRRXKqhvW"
    #[serde(
        rename = "table_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_id: String,
    /// 单向关联、双向关联字段中关联的数据表的名字
    ///
    /// **示例值**: ""table2""
    #[serde(
        rename = "table_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_name: String,
    /// 双向关联字段中关联的数据表中对应的双向关联字段的名字
    ///
    /// **示例值**: ""table1-双向关联""
    #[serde(
        rename = "back_field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub back_field_name: String,
    /// 自动编号类型
    #[serde(
        rename = "auto_serial",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub auto_serial: AppFieldPropertyAutoSerialSubResp,
    /// 地理位置输入方式
    #[serde(
        rename = "location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location: AppFieldPropertyLocationSubResp,
    /// 公式字段的表达式
    ///
    /// **示例值**: "bitable::$table[tblNj92WQBAasdEf].$field[fldMV60rYs]*2"
    #[serde(
        rename = "formula_expression",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub formula_expression: String,
    /// 字段支持的编辑模式
    #[serde(
        rename = "allowed_edit_modes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allowed_edit_modes: AllowedEditModesSubResp,
    /// 进度、评分等字段的数据范围最小值
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "min",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min: f64,
    /// 进度、评分等字段的数据范围最大值
    ///
    /// **示例值**: "10"
    #[serde(
        rename = "max",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max: f64,
    /// 进度等字段是否支持自定义范围
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "range_customize",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub range_customize: bool,
    /// 货币币种
    ///
    /// **示例值**: "CNY"
    #[serde(
        rename = "currency_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_code: String,
    /// 评分字段的相关设置
    #[serde(
        rename = "rating",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rating: RatingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldDescriptionSubResp {
    /// 是否禁止同步，如果为true，表示禁止同步该描述内容到表单的问题描述（只在新增、修改字段时生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "disable_sync",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_sync: bool,
    /// 字段描述内容
    ///
    /// **示例值**: "这是一个字段描述"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyAutoSerialSubResp {
    /// 自动编号类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "auto_increment_number"
    ///
    /// **可选值**:
    ///
    /// `Custom`: 自定义编号
    ///
    /// `AutoIncrementNumber`: 自增数字
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 自动编号规则列表
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<AppFieldPropertyAutoSerialOptionsSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyLocationSubResp {
    /// 地理位置输入限制
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "not_limit"
    ///
    /// **可选值**:
    ///
    /// `OnlyMobile`: 只允许移动端上传
    ///
    /// `NotLimit`: 无限制
    #[serde(
        rename = "input_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub input_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AllowedEditModesSubResp {
    /// 是否允许手动录入
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "manual",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub manual: bool,
    /// 是否允许移动端录入
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "scan",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scan: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RatingSubResp {
    /// 评分字段的符号展示
    ///
    /// **示例值**: "star"
    #[serde(
        rename = "symbol",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub symbol: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFieldPropertyOptionSubResp {
    /// 选项名
    ///
    /// **示例值**: "红色"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 选项 ID，创建时不允许指定 ID
    ///
    /// **示例值**: "optKl35lnG"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 选项颜色
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "color",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub color: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppFieldPropertyAutoSerialOptionsSubResp {
    /// 自动编号的可选规则项类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "created_time"
    ///
    /// **可选值**:
    ///
    /// `SystemNumber`: 自增数字位,value范围1-9
    ///
    /// `FixedText`: 固定字符，最大长度：20
    ///
    /// `CreatedTime`: 创建时间，支持格式 "yyyyMMdd"、"yyyyMM"、"yyyy"、"MMdd"、"MM"、"dd"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 与自动编号的可选规则项类型相对应的取值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "yyyyMMdd"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateBitableFieldReq) -> Result<(UpdateBitableFieldResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(UpdateBitableFieldReq) -> Result<(UpdateBitableFieldResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_bitable_field<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateBitableFieldReq, UpdateBitableFieldResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_bitable_field(
            &self,
            req: &UpdateBitableFieldReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateBitableFieldReq, UpdateBitableFieldResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::update_bitable_field::{
            UpdateBitableFieldReq, UpdateBitableFieldResp, UpdateBitableFieldRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_update_bitable_field(|_| {
                Ok((UpdateBitableFieldResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .bitable()
            .update_bitable_field(UpdateBitableFieldReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .update_bitable_field(UpdateBitableFieldReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "field_name": "人员",
    "type": 11,
    "property": {
        "multiple": true
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateBitableFieldReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "field": {
            "field_id": "fldEPIQAXw",
            "field_name": "人员",
            "is_primary": false,
            "property": {
                "multiple": true
            },
            "type": 11
        }
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateBitableFieldRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
