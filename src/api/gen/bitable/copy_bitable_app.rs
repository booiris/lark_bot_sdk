//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/copy>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2023-11-07T03:51:37+00:00**
    ///
    /// ## 复制多维表格
    ///
    /// 复制一个多维表格，可以指定复制到某个有权限的文件夹下
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/copy>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/bitable-v1/app/copy>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fapp%2Fcopy>
    pub async fn copy_bitable_app(
        &self,
        req: CopyBitableAppReq,
    ) -> Result<(CopyBitableAppResp, CommonResponse), Error> {
        self.copy_bitable_app_with_opt(req, Default::default())
            .await
    }

    /// 参见 [copy_bitable_app](#method.copy_bitable_app) 函数
    pub async fn copy_bitable_app_with_opt(
        &self,
        req: CopyBitableAppReq,
        method_option: MethodOption,
    ) -> Result<(CopyBitableAppResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_copy_bitable_app(&req) {
                tracing::info!("[lark] Bitable#CopyBitableApp **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#CopyBitableApp call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "CopyBitableApp",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/copy",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CopyBitableAppRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CopyBitableAppReq {
    /// [多维表格 App token](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "S404b*****e9PQsYDWYcNryFn0g"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,

    /// 多维表格 App 名字
    ///
    /// **示例值**: "一篇新的多维表格"
    #[api(kind = "body", name = "name")]
    pub name: Option<String>,
    /// [多维表格 App 归属文件夹 ](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#08bb5df)
    ///
    /// **示例值**: "fldbco*****CIMltVc"
    #[api(kind = "body", name = "folder_token")]
    pub folder_token: Option<String>,
    /// 是否复制多维表格内容，取值：
    ///
    /// * true：不复制
    ///
    /// * false：复制
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "without_content")]
    pub without_content: Option<bool>,
    /// 文档时区，[详见](https://feishu.feishu.cn/docx/YKRndTM7VoyDqpxqqeEcd67MnEf)
    ///
    /// **示例值**: "Asia/Shanghai"
    #[api(kind = "body", name = "time_zone")]
    pub time_zone: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CopyBitableAppRespInner {
    #[serde(flatten)]
    data: Option<CopyBitableAppResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CopyBitableAppResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 返回响应体
    #[serde(
        rename = "app",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app: AppSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppSubResp {
    /// 多维表格的 app_token
    ///
    /// **示例值**: "S404b*****e9PQsYDWYcNryFn0g"
    #[serde(
        rename = "app_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app_token: String,
    /// 多维表格的名字
    ///
    /// **示例值**: "一篇新的多维表格"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 多维表格 App 归属文件夹
    ///
    /// **示例值**: "fldbco*****CIMltVc"
    #[serde(
        rename = "folder_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub folder_token: String,
    /// 多维表格 App URL
    ///
    /// **示例值**: "https://example.feishu.cn/base/S404b*****e9PQsYDWYcNryFn0g"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 默认的表格id
    ///
    /// **示例值**: """ //只有创建才返回默认表Id"
    #[serde(
        rename = "default_table_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub default_table_id: String,
    /// 文档时区
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "time_zone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_zone: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CopyBitableAppReq) -> Result<(CopyBitableAppResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(CopyBitableAppReq) -> Result<(CopyBitableAppResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_copy_bitable_app<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, CopyBitableAppReq, CopyBitableAppResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_copy_bitable_app(
            &self,
            req: &CopyBitableAppReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CopyBitableAppReq, CopyBitableAppResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::copy_bitable_app::{
            CopyBitableAppReq, CopyBitableAppResp, CopyBitableAppRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_copy_bitable_app(|_| {
                Ok((CopyBitableAppResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .bitable()
            .copy_bitable_app(CopyBitableAppReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .copy_bitable_app(CopyBitableAppReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "name": "一篇新的多维表格",
    "folder_token": "fldbco*****CIMltVc",
    "without_content": false,
    "time_zone": "Asia/Shanghai"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CopyBitableAppReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "app": {
            "app_token": "S404b*****e9PQsYDWYcNryFn0g",
            "name": "一篇新的多维表格",
            "folder_token": "fldbco*****CIMltVc",
            "url": "https://example.feishu.cn/base/S404b*****e9PQsYDWYcNryFn0g",
            "default_table_id": " //只有创建才返回默认表Id",
            "time_zone": "Asia/Shanghai"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CopyBitableAppRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
