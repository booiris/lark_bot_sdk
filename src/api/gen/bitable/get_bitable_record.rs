//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-31T06:46:29+00:00**
    ///
    /// ## 检索记录
    ///
    /// 该接口用于根据 record_id 的值检索现有记录。
    ///
    /// 该接口为历史版本接口，已不推荐使用。你可使用新版[批量获取记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_get)接口。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/bitable-v1/app-table-record/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fapp-table-record%2Fget>
    pub async fn get_bitable_record(
        &self,
        req: GetBitableRecordReq,
    ) -> Result<(GetBitableRecordResp, CommonResponse), Error> {
        self.get_bitable_record_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_bitable_record](#method.get_bitable_record) 函数
    pub async fn get_bitable_record_with_opt(
        &self,
        req: GetBitableRecordReq,
        method_option: MethodOption,
    ) -> Result<(GetBitableRecordResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_bitable_record(&req) {
                tracing::info!("[lark] Bitable#GetBitableRecord **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#GetBitableRecord call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "GetBitableRecord",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetBitableRecordRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetBitableRecordReq {
    /// base app token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "bascnCMII2ORej2RItqpZZUNMIe"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// table id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tblxI2tWaxP5dG7p"
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,
    /// 单条记录的 id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "recn0hoyXL"
    #[api(kind = "path", name = "record_id")]
    pub record_id: String,
    /// 多行文本字段数据是否以数组形式返回。true 表示以数组形式返回。默认为 false
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "text_field_as_array",
        v_type = "var",
        option = "false"
    )]
    pub text_field_as_array: bool,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 控制公式、查找引用是否显示完整原样的返回结果。默认为 false
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "display_formula_ref",
        v_type = "var",
        option = "false"
    )]
    pub display_formula_ref: bool,
    /// 控制是否返回该记录的链接，即 record_url 参数。默认为 false，即不返回
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "with_shared_url",
        v_type = "var",
        option = "false"
    )]
    pub with_shared_url: bool,
    /// 控制是否返回自动计算的字段，例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`，true 表示返回。默认为 false
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "automatic_fields",
        v_type = "var",
        option = "false"
    )]
    pub automatic_fields: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetBitableRecordRespInner {
    #[serde(flatten)]
    data: Option<GetBitableRecordResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetBitableRecordResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 记录
    #[serde(
        rename = "record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record: AppTableRecordSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableRecordSubResp {
    /// 数据表的字段，即数据表的列
    ///
    /// 当前接口支持的字段类型请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#31f78a3c)
    ///
    /// 不同类型字段的数据结构请参考[数据结构概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "\-"
    #[serde(
        rename = "fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fields: std::collections::HashMap<String, serde_json::Value>,
    /// 一条记录的唯一标识 id [record_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#15d8db94)
    ///
    /// **示例值**: "recabcdefg"
    #[serde(
        rename = "record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_id: String,
    /// 该记录的创建人
    #[serde(
        rename = "created_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_by: PersonSubResp,
    /// 该记录的创建时间
    ///
    /// **示例值**: "1678799280000"
    #[serde(
        rename = "created_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_time: i64,
    /// 该记录最新一次更新的修改人
    #[serde(
        rename = "last_modified_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_by: PersonSubResp,
    /// 该记录最近一次的更新时间
    ///
    /// **示例值**: "1678799280000"
    #[serde(
        rename = "last_modified_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_time: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonSubResp {
    /// 用户id，id类型等于user_id_type所指定的类型。
    ///
    /// **示例值**: "ou_9a971ded01b4ca66f4798549878abcef"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户的中文名称
    ///
    /// **示例值**: "黄小豆"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 用户的英文名称
    ///
    /// **示例值**: "Xiaodou Huang"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 用户的邮箱
    ///
    /// **示例值**: "email@example.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 头像链接
    ///
    /// **示例值**: "https://example.com/avatar"
    #[serde(
        rename = "avatar_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetBitableRecordReq) -> Result<(GetBitableRecordResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetBitableRecordReq) -> Result<(GetBitableRecordResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_bitable_record<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetBitableRecordReq, GetBitableRecordResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_bitable_record(
            &self,
            req: &GetBitableRecordReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetBitableRecordReq, GetBitableRecordResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::get_bitable_record::{
            GetBitableRecordReq, GetBitableRecordResp, GetBitableRecordRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_get_bitable_record(|_| {
                Ok((GetBitableRecordResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .bitable()
            .get_bitable_record(GetBitableRecordReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .get_bitable_record(GetBitableRecordReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code":0,
    "data":{
        "record":{
            "fields":{
                "人力耗时":64,
                "人力评估":"8",
                "任务执行人":[
                    {
                        "email":"huangpaopao@feishu.cn",
                        "en_name":"Paopao Huang",
                        "id":"ou_5fb00e0112212cc7012fe3a697336989",
                        "name":"黄泡泡"
                    }
                ],
                "任务描述":"我是最大的功能开发🥕",
                "任务附件":[
                    {
                        "file_token":"boxcnkQWfV4XbHwzDngmezMGzXe",
                        "name":"2.gif",
                        "size":10250625,
                        "tmp_url":"https://open.feishu.cn/open-apis/drive/v1/medias/batch_get_tmp_download_url?file_tokens=boxcnkQWfV4XbHwzDngmezMGzXe",
                        "type":"image/gif",
                        "url":"https://open.feishu.cn/open-apis/drive/v1/medias/boxcnkQWfV4XbHwzDngmezMGzXe/download"
                    }
                ],
                "对应 OKR":[
                    {
                        "text":"新功能评审",
                        "type":"text"
                    }
                ],
                "截止日期":1612108800000,
                "文档地址":{
                    "link":"https://example.feishu.cn/drive/home/",
                    "text":"文档备份"
                },
                "是否完成":false,
                "状态":"开发中",
                "相关部门":[
                    "研发"
                ],
                "多行文本":[
                    {
                        "text":"hello",
                        "type":"text"
                    },
                    {
                        "mentionType":"User",
                        "mentionNotify":false,
                        "name":"test",
                        "text":"@test",
                        "token":"ou_sfsdfsdfsdfsdfdsfsdfdsf",
                        "type":"mention"
                    },
                    {
                        "link":"https://test-sasdfsfsd.feishu-boe.cn/base/basbcq2aFvW8nFJpfOXa1111111",
                        "mentionType":"Bitable",
                        "text":"未命名多维表格",
                        "token":"basbcq2aFvW8nFJpfOXalx57ffb",
                        "type":"mention"
                    },
                    {
                        "text":"测试链接标题",
                        "link":"https://www.baidu.com/",
                        "type":"url"
                    }
                ],
                "单向关联":[
                    {
                        "type":"text",
                        "table_id":"tbltAvx3DYBw7PVj",
                        "record_ids":[
                          "recl1IWVnB"
                        ],
                        "text":"第一行"
                    }
                ],
                "双向关联":[
                    {
                        "table_id":"tbltAvx3DYBw7PVj",
                        "record_ids":[
                          "recl1IWVnB",
                          "recrJk7SXT"
                        ],
                        "text":"第一行,第二行",
                        "type":"text"
                    }
                ]
            },
            "record_id":"recn0hoyXL",
            "record_url": "https://example.feishu.cn/record/1sfvuxxxxxxxxxxxxxKdupE5Q"
        }
    },
    "msg":"Success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetBitableRecordRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
