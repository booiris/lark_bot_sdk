//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2023-07-28T08:21:52+00:00**
    ///
    /// ## 列出表单问题
    ///
    /// 列出表单的所有问题项
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-form-field/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/docs/bitable-v1/form/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fform%2Flist>
    pub async fn get_bitable_table_form_field_list(
        &self,
        req: GetBitableTableFormFieldListReq,
    ) -> Result<(GetBitableTableFormFieldListResp, CommonResponse), Error> {
        self.get_bitable_table_form_field_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_bitable_table_form_field_list](#method.get_bitable_table_form_field_list) 函数
    pub async fn get_bitable_table_form_field_list_with_opt(
        &self,
        req: GetBitableTableFormFieldListReq,
        method_option: MethodOption,
    ) -> Result<(GetBitableTableFormFieldListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_bitable_table_form_field_list(&req) {
                tracing::info!("[lark] Bitable#GetBitableTableFormFieldList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#GetBitableTableFormFieldList call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "GetBitableTableFormFieldList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetBitableTableFormFieldListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetBitableTableFormFieldListReq {
    /// 多维表格文档 Token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "bascnCMII2ORej2RItqpZZUNMIe"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// 表格 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tblxI2tWaxP5dG7p"
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,
    /// 表单 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "vewTpR1urY"
    #[api(kind = "path", name = "form_id")]
    pub form_id: String,
    /// 分页大小
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "vewTpR1urY"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetBitableTableFormFieldListRespInner {
    #[serde(flatten)]
    data: Option<GetBitableTableFormFieldListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetBitableTableFormFieldListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 表单问题信息
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<AppTableFormFieldSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "fld1lAbHh7"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 总数
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "total",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub total: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableFormFieldSubResp {
    /// 表单问题 ID
    ///
    /// **示例值**: "fldjX7dUj5"
    #[serde(
        rename = "field_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_id: String,
    /// 表单问题
    ///
    /// **示例值**: "多行文本"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 问题描述
    ///
    /// **示例值**: "多行文本描述"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 是否必填
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "required",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub required: bool,
    /// 是否可见
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visible: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetBitableTableFormFieldListReq,
        ) -> Result<(GetBitableTableFormFieldListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetBitableTableFormFieldListReq,
                )
                    -> Result<(GetBitableTableFormFieldListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_bitable_table_form_field_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetBitableTableFormFieldListReq,
            GetBitableTableFormFieldListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_bitable_table_form_field_list(
            &self,
            req: &GetBitableTableFormFieldListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetBitableTableFormFieldListReq,
                GetBitableTableFormFieldListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::get_bitable_table_form_field_list::{
            GetBitableTableFormFieldListReq, GetBitableTableFormFieldListResp,
            GetBitableTableFormFieldListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_get_bitable_table_form_field_list(|_| {
                Ok((
                    GetBitableTableFormFieldListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .bitable()
            .get_bitable_table_form_field_list(GetBitableTableFormFieldListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .get_bitable_table_form_field_list(GetBitableTableFormFieldListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "field_id": "fldjX7dUj5",
                "title": "多行文本",
                "description": "多行文本描述",
                "required": true,
                "visible": true
            }
        ],
        "page_token": "fld1lAbHh7",
        "has_more": true,
        "total": 1
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetBitableTableFormFieldListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
