//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-26T11:53:53+00:00**
    ///
    /// ## 查询记录
    ///
    /// 该接口用于查询数据表中的现有记录，单次最多查询 500 行记录，支持分页获取。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search>
    ///
    /// new doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/search>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fbitable-v1%2Fapp-table-record%2Fsearch>
    pub async fn search_bitable_record(
        &self,
        req: SearchBitableRecordReq,
    ) -> Result<(SearchBitableRecordResp, CommonResponse), Error> {
        self.search_bitable_record_with_opt(req, Default::default())
            .await
    }

    /// 参见 [search_bitable_record](#method.search_bitable_record) 函数
    pub async fn search_bitable_record_with_opt(
        &self,
        req: SearchBitableRecordReq,
        method_option: MethodOption,
    ) -> Result<(SearchBitableRecordResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_search_bitable_record(&req) {
                tracing::info!("[lark] Bitable#SearchBitableRecord **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#SearchBitableRecord call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "SearchBitableRecord",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/search",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SearchBitableRecordRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SearchBitableRecordReq {
    /// 表格token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "NQRxbRkBMa6OnZsjtERcxhNWnNh"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `100` 字符
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// 表ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "tbl0xe5g8PP3U3cS"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `50` 字符
    #[api(kind = "path", name = "table_id")]
    pub table_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小。最大值为 500
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 视图的唯一标识符，获取指定视图下的记录[view_id 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)
    ///
    /// 注意：
    ///
    /// 当 filter 参数 或 sort 参数不为空时，请求视为对数据表中的全部数据做条件过滤，指定的view_id 会被忽略。
    ///
    /// **示例值**: "vewqhz51lk"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `50` 字符
    #[api(kind = "body", name = "view_id")]
    pub view_id: Option<String>,
    /// 字段名称，用于指定本次查询返回记录中包含的字段
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `200` 字符
    #[api(kind = "body", name = "field_names")]
    pub field_names: Vec<Option<String>>,
    /// 排序条件
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `100` 字符
    #[api(kind = "body", name = "sort")]
    pub sort: Vec<Option<SortSubReq>>,
    /// 筛选条件
    #[api(kind = "body", name = "filter")]
    pub filter: Option<FilterInfoSubReq>,
    /// 控制是否返回自动计算的字段, true 表示返回
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "automatic_fields")]
    pub automatic_fields: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FilterInfoSubReq {
    /// 条件逻辑连接词
    ///
    /// **示例值**: "and"
    ///
    /// **可选值**:
    ///
    /// `ConjunctionAnd`: 满足全部条件
    ///
    /// `ConjunctionOr`: 满足任一条件
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `10` 字符
    #[serde(
        rename = "conjunction",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conjunction: Option<String>,
    /// 筛选条件集合
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `50` 字符
    #[serde(
        rename = "conditions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conditions: Vec<Option<ConditionSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SortSubReq {
    /// 字段名称
    ///
    /// **示例值**: "多行文本"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: Option<String>,
    /// 是否倒序排序
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub desc: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ConditionSubReq {
    /// 筛选条件的左值，值为字段的名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "字段1"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1000` 字符
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 条件运算符
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "is"
    ///
    /// **可选值**:
    ///
    /// `OperatorIs`: 等于
    ///
    /// `OperatorIsNot`: 不等于
    ///
    /// `OperatorContains`: 包含
    ///
    /// `OperatorDoesNotContain`: 不包含
    ///
    /// `OperatorIsEmpty`: 为空
    ///
    /// `OperatorIsNotEmpty`: 不为空
    ///
    /// `OperatorIsGreater`: 大于
    ///
    /// `OperatorIsGreaterEqual`: 大于等于
    ///
    /// `OperatorIsLess`: 小于
    ///
    /// `OperatorIsLessEqual`: 小于等于
    ///
    /// `OperatorLike`: LIKE 运算符。暂未支持
    ///
    /// `OperatorIn`: IN 运算符。暂未支持
    #[serde(
        rename = "operator",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operator: String,
    /// 目标值
    ///
    /// [目标值填写指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/record-filter-guide)
    ///
    /// **示例值**: "文本内容"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `10` 字符
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SearchBitableRecordRespInner {
    #[serde(flatten)]
    data: Option<SearchBitableRecordResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SearchBitableRecordResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 数组类型。record 结果。了解 record 数据结构，参考[数据结构](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/development-guide/bitable-structure)
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: AppTableRecordSubResp,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "xxx"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 总数
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "total",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub total: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppTableRecordSubResp {
    /// 记录字段[记录数据结构](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/bitable-record-data-structure-overview)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{}"
    #[serde(
        rename = "fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fields: std::collections::HashMap<String, serde_json::Value>,
    /// 记录Id
    ///
    /// **示例值**: "recgcfdzKq"
    #[serde(
        rename = "record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_id: String,
    /// 创建人
    #[serde(
        rename = "created_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_by: PersonSubResp,
    /// 创建时间
    ///
    /// **示例值**: "1675244156000"
    #[serde(
        rename = "created_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_time: i64,
    /// 修改人
    #[serde(
        rename = "last_modified_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_by: PersonSubResp,
    /// 最近更新时间
    ///
    /// **示例值**: "1677556020000"
    #[serde(
        rename = "last_modified_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_modified_time: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PersonSubResp {
    /// 人员Id
    ///
    /// **示例值**: "ou_9a971ded01b4ca66f4798549878abcef"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 中文姓名
    ///
    /// **示例值**: "黄小豆"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 英文姓名
    ///
    /// **示例值**: "Xiaodou Huang"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 邮箱
    ///
    /// **示例值**: "email@example.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 头像链接
    ///
    /// **示例值**: "https://example.com/avatar"
    #[serde(
        rename = "avatar_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_url: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(SearchBitableRecordReq) -> Result<(SearchBitableRecordResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    SearchBitableRecordReq,
                ) -> Result<(SearchBitableRecordResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_search_bitable_record<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, SearchBitableRecordReq, SearchBitableRecordResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_search_bitable_record(
            &self,
            req: &SearchBitableRecordReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, SearchBitableRecordReq, SearchBitableRecordResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::search_bitable_record::{
            SearchBitableRecordReq, SearchBitableRecordResp, SearchBitableRecordRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_search_bitable_record(|_| {
                Ok((
                    SearchBitableRecordResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .bitable()
            .search_bitable_record(SearchBitableRecordReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .search_bitable_record(SearchBitableRecordReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "view_id":"vewqhz51lk",
    "field_names":[
        "字段1",
        "字段2"
    ],
    "sort":[
        {
            "field_name":"多行文本",
            "desc":true
        }
    ],
    "filter":{
        "conjunction":"and",
        "conditions":[
            {
                "field_name":"字段1",
                "operator":"is",
                "value":[
                    "文本内容"
                ]
            }
        ]
    },
    "automatic_fields":false
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::SearchBitableRecordReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code":0,
    "data":{
        "has_more":false,
        "items":[
            {
                "created_by":{
                    "avatar_url":"https://internal-api-lark-file.feishu.cn/static-resource/v1/06d568cb-f464-4c2e-bd03-76512c545c5j~?image_size=72x72&amp;cut_type=default-face&amp;quality=&amp;format=jpeg&amp;sticker_format=.webp",
                    "email":"",
                    "en_name":"测试1",
                    "id":"ou_92945f86a98bba075174776959c90eda",
                    "name":"测试1"
                },
                "created_time":1691049973000,
                "fields":{
                    "人员":[
                        {
                            "avatar_url":"https://internal-api-lark-file.feishu.cn/static-resource/v1/b2-7619-4b8a-b27b-c72d90b06a2j~?image_size=72x72&amp;cut_type=default-face&amp;quality=&amp;format=jpeg&amp;sticker_format=.webp",
                            "email":"zhangsan.leben@bytedance.com",
                            "en_name":"ZhangSan",
                            "id":"ou_2910013f1e6456f16a0ce75ede950a0a",
                            "name":"张三"
                        },
                        {
                            "avatar_url":"https://internal-api-lark-file.feishu.cn/static-resource/v1/v2_q86-fcb6-4f18-85c7-87ca8881e50j~?image_size=72x72&amp;cut_type=default-face&amp;quality=&amp;format=jpeg&amp;sticker_format=.webp",
                            "email":"lisi.00@bytedance.com",
                            "en_name":"LiSi",
                            "id":"ou_e04138c9633dd0d2ea166d79f548ab5d",
                            "name":"李四"
                        }
                    ],
                    "修改人":[
                        {
                            "avatar_url":"https://internal-api-lark-file.feishu.cn/static-resource/v1/06d568cb-f464-4c2e-bd03-76512c545c5j~?image_size=72x72&amp;cut_type=default-face&amp;quality=&amp;format=jpeg&amp;sticker_format=.webp",
                            "email":"",
                            "en_name":"测试1",
                            "id":"ou_92945f86a98bba075174776959c90eda",
                            "name":"测试1"
                        }
                    ],
                    "创建人":[
                        {
                            "avatar_url":"https://internal-api-lark-file.feishu.cn/static-resource/v1/06d568cb-f464-4c2e-bd03-76512c545c5j~?image_size=72x72&amp;cut_type=default-face&amp;quality=&amp;format=jpeg&amp;sticker_format=.webp",
                            "email":"",
                            "en_name":"测试1",
                            "id":"ou_92945f86a98bba075174776959c90eda",
                            "name":"测试1"
                        }
                    ],
                    "创建时间":1691049973000,
                    "单向关联":{
                        "link_record_ids":[
                            "recnVYsuqV"
                        ]
                    },
                    "单选":"选项1",
                    "双向关联":{
                        "link_record_ids":[
                            "recqLvMaXT",
                            "recrdld32q"
                        ]
                    },
                    "地理位置":{
                        "address":"东长安街",
                        "adname":"东城区",
                        "cityname":"北京市",
                        "full_address":"天安门广场，北京市东城区东长安街",
                        "location":"116.397755,39.903179",
                        "name":"天安门广场",
                        "pname":"北京市"
                    },
                    "复选框":true,
                    "多行文本":[
                        {
                            "text":"多行文本内容1",
                            "type":"text"
                        },
                        {
                            "mentionNotify":false,
                            "mentionType":"User",
                            "name":"张三",
                            "text":"@张三",
                            "token":"ou_2910013f1e6456f16a0ce75ede950a0a",
                            "type":"mention"
                        }
                    ],
                    "多选":[
                        "选项1",
                        "选项2"
                    ],
                    "数字":2323.2323,
                    "日期":1690992000000,
                    "最后更新时间":1702455191000,
                    "条码":[
                        {
                            "text":"123",
                            "type":"text"
                        }
                    ],
                    "电话号码":"131xxxx6666",
                    "自动编号":"17",
                    "群组":[
                        {
                            "avatar_url":"https://internal-api-lark-file.feishu-boe.cn/static-resource/v1/v2_c8d2cd50-ba29-476f-b7f1-5b5917cb18ej~?image_size=72x72&amp;cut_type=&amp;quality=&amp;format=jpeg&amp;sticker_format=.webp",
                            "id":"oc_cd07f55f14d6f4a4f1b51504e7e97f48",
                            "name":"武侠聊天组"
                        }
                    ],
                    "评分":3,
                    "货币":1,
                    "超链接":{
                        "link":"https://bitable.feishu.cn",
                        "text":"飞书多维表格官网"
                    },
                    "进度":0.66,
                    "附件":[
                        {
                            "file_token":"Vl3FbVkvnowlgpxpqsAbBrtFcrd",
                            "name":"飞书.jpeg",
                            "size":32975,
                            "tmp_url":"https://open.feishu.cn/open-apis/drive/v1/medias/batch_get_tmp_download_url?file_tokens=Vl3FbVk11owlgpxpqsAbBrtFcrd&amp;extra=%7B%22bitablePerm%22%3A%7B%22tableId%22%3A%22tblBJyX6jZteblYv%22%2C%22rev%22%3A90%7D%7D",
                            "type":"image/jpeg",
                            "url":"https://open.feishu.cn/open-apis/drive/v1/medias/Vl3FbVk11owlgpxpqsAbBrtFcrd/download?extra=%7B%22bitablePerm%22%3A%7B%22tableId%22%3A%22tblBJyX6jZteblYv%22%2C%22rev%22%3A90%7D%7D"
                        }
                    ]
                },
                "last_modified_by":{
                    "avatar_url":"https://internal-api-lark-file.feishu.cn/static-resource/v1/06d568cb-f464-4c2e-bd03-76512c545c5j~?image_size=72x72&amp;cut_type=default-face&amp;quality=&amp;format=jpeg&amp;sticker_format=.webp",
                    "email":"",
                    "en_name":"测试1",
                    "id":"ou_92945f86a98bba075174776959c90eda",
                    "name":"测试1"
                },
                "last_modified_time":1702455191000,
                "record_id":"recyOaMB2F"
            }
        ],
        "total":1
    },
    "msg":"success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SearchBitableRecordRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
