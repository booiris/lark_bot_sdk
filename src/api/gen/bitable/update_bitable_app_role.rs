//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/update>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::bitable::BitableService;

impl<'c, IStore: Store, IClient: HttpClient> BitableService<'c, IStore, IClient> {
    /// **api 版本: 2023-11-23T06:38:07+00:00**
    ///
    /// ## 更新自定义角色
    ///
    /// 更新自定义角色
    ///
    /// 更新自定义角色是增量更新，仅对传值的字段进行更新，不传值则不更新
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/update>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/docs/bitable-v1/advanced-permission/app-role/update>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fdocs%2Fbitable-v1%2Fadvanced-permission%2Fapp-role%2Fupdate>
    pub async fn update_bitable_app_role(
        &self,
        req: UpdateBitableAppRoleReq,
    ) -> Result<(UpdateBitableAppRoleResp, CommonResponse), Error> {
        self.update_bitable_app_role_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_bitable_app_role](#method.update_bitable_app_role) 函数
    pub async fn update_bitable_app_role_with_opt(
        &self,
        req: UpdateBitableAppRoleReq,
        method_option: MethodOption,
    ) -> Result<(UpdateBitableAppRoleResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_bitable_app_role(&req) {
                tracing::info!("[lark] Bitable#UpdateBitableAppRole **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Bitable#UpdateBitableAppRole call api");

        let req = ApiRequest {
            scope: "Bitable",
            api: "UpdateBitableAppRole",
            method: http::Method::PUT,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/bitable/v1/apps/:app_token/roles/:role_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateBitableAppRoleRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateBitableAppRoleReq {
    /// 多维表格的唯一标识符 [app_token 参数说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification#8121eebe)
    ///
    /// **示例值**: "appbcbWCzen6D8dezhoCH2RpMAh"
    #[api(kind = "path", name = "app_token")]
    pub app_token: String,
    /// 自定义角色的id
    ///
    /// **示例值**: "roljRpwIUt"
    #[api(kind = "path", name = "role_id")]
    pub role_id: String,

    /// 自定义角色的名字
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "自定义角色1"
    #[api(kind = "body", name = "role_name")]
    pub role_name: String,
    /// 数据表角色
    ///
    /// **是否必填**: 是
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "table_roles")]
    pub table_roles: Vec<Option<AppRoleTableRoleSubReq>>,
    /// block权限
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "block_roles")]
    pub block_roles: Vec<Option<AppRoleBlockRoleSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleTableRoleSubReq {
    /// 数据表名
    ///
    /// **示例值**: "数据表1"
    #[serde(
        rename = "table_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_name: Option<String>,
    /// 数据表ID
    ///
    /// **示例值**: "tblKz5D60T4JlfcT"
    #[serde(
        rename = "table_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_id: Option<String>,
    /// 数据表权限，`协作者可编辑自己的记录`和`可编辑指定字段`是`可编辑记录`的特殊情况，可通过指定`rec_rule`或`field_perm`参数实现相同的效果
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `NoPerm`: 无权限
    ///
    /// `Read`: 可阅读
    ///
    /// `Edit`: 可编辑记录
    ///
    /// `Admin`: 可编辑字段和记录
    #[serde(
        rename = "table_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_perm: i64,
    /// 记录筛选条件，在table_perm为1或2时有意义，用于指定可编辑或可阅读某些记录
    #[serde(
        rename = "rec_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rec_rule: Option<AppRoleTableRoleRecRuleSubReq>,
    /// 字段权限，仅在table_perm为2时有意义，设置字段可编辑或可阅读。类型为 map，key 是字段名，value 是字段权限
    ///
    /// **value 枚举值有：**
    ///
    /// - `1`：可阅读
    ///
    /// - `2`：可编辑
    ///
    /// **示例值**: "{"姓名": 1, "年龄": 2}"
    #[serde(
        rename = "field_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_perm: Option<serde_json::Value>,
    /// 新增记录权限，仅在table_perm为2时有意义，用于设置记录是否可以新增。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_add_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_add_record: Option<bool>,
    /// 删除记录权限，仅在table_perm为2时有意义，用于设置记录是否可以删除
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_delete_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_delete_record: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleBlockRoleSubReq {
    /// Block 的 ID，例如列出仪表盘接口中的仪表盘 block  id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "blknkqrP3RqUkcAW"
    #[serde(
        rename = "block_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_id: String,
    /// Block权限
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `NoPerm`: 无权限
    ///
    /// `Read`: 可阅读
    #[serde(
        rename = "block_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_perm: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleTableRoleRecRuleSubReq {
    /// 记录筛选条件
    ///
    /// **是否必填**: 是
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[serde(
        rename = "conditions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conditions: Vec<Option<AppRoleTableRoleRecRuleConditionSubReq>>,
    /// 多个筛选条件的关系
    ///
    /// **示例值**: "and"
    ///
    /// **可选值**:
    ///
    /// `And`: 与
    ///
    /// `Or`: 或
    #[serde(
        rename = "conjunction",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conjunction: Option<String>,
    /// 其他记录权限，仅在table_perm为2时有意义
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `NoPerm`: 禁止查看
    ///
    /// `Read`: 仅可阅读
    #[serde(
        rename = "other_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub other_perm: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleTableRoleRecRuleConditionSubReq {
    /// 字段名，记录筛选条件是`创建人包含访问者本人`时，此参数值为""
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "单选"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 运算符
    ///
    /// **示例值**: "is"
    ///
    /// **可选值**:
    ///
    /// `Is`: 等于
    ///
    /// `IsNot`: 不等于
    ///
    /// `Contains`: 包含
    ///
    /// `DoesNotContain`: 不包含
    ///
    /// `IsEmpty`: 为空
    ///
    /// `IsNotEmpty`: 不为空
    #[serde(
        rename = "operator",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operator: Option<String>,
    /// 单选或多选字段的选项id
    ///
    /// **示例值**: "["optbdVHf4q", "optrpd3eIJ"]"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateBitableAppRoleRespInner {
    #[serde(flatten)]
    data: Option<UpdateBitableAppRoleResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateBitableAppRoleResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 自定义角色
    #[serde(
        rename = "role",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub role: AppRoleSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleSubResp {
    /// 自定义角色的名字
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "自定义角色1"
    #[serde(
        rename = "role_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub role_name: String,
    /// 自定义角色的id
    ///
    /// **示例值**: "roljRpwIUt"
    #[serde(
        rename = "role_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub role_id: String,
    /// 数据表角色
    ///
    /// **是否必填**: 是
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[serde(
        rename = "table_roles",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_roles: Vec<AppRoleTableRoleSubResp>,
    /// block权限
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[serde(
        rename = "block_roles",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_roles: Vec<AppRoleBlockRoleSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleTableRoleSubResp {
    /// 数据表名
    ///
    /// **示例值**: "数据表1"
    #[serde(
        rename = "table_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_name: String,
    /// 数据表ID
    ///
    /// **示例值**: "tblKz5D60T4JlfcT"
    #[serde(
        rename = "table_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_id: String,
    /// 数据表权限，`协作者可编辑自己的记录`和`可编辑指定字段`是`可编辑记录`的特殊情况，可通过指定`rec_rule`或`field_perm`参数实现相同的效果
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `NoPerm`: 无权限
    ///
    /// `Read`: 可阅读
    ///
    /// `Edit`: 可编辑记录
    ///
    /// `Admin`: 可编辑字段和记录
    #[serde(
        rename = "table_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub table_perm: i64,
    /// 记录筛选条件，在table_perm为1或2时有意义，用于指定可编辑或可阅读某些记录
    #[serde(
        rename = "rec_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rec_rule: AppRoleTableRoleRecRuleSubResp,
    /// 字段权限，仅在table_perm为2时有意义，设置字段可编辑或可阅读。类型为 map，key 是字段名，value 是字段权限
    ///
    /// **value 枚举值有：**
    ///
    /// - `1`：可阅读
    ///
    /// - `2`：可编辑
    ///
    /// **示例值**: "{"姓名": 1, "年龄": 2}"
    #[serde(
        rename = "field_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_perm: serde_json::Value,
    /// 新增记录权限，仅在table_perm为2时有意义，用于设置记录是否可以新增。
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_add_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_add_record: bool,
    /// 删除记录权限，仅在table_perm为2时有意义，用于设置记录是否可以删除
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_delete_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_delete_record: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleBlockRoleSubResp {
    /// Block 的 ID，例如列出仪表盘接口中的仪表盘 block  id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "blknkqrP3RqUkcAW"
    #[serde(
        rename = "block_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_id: String,
    /// Block类型
    ///
    /// **示例值**: "dashboard"
    ///
    /// **可选值**:
    ///
    /// `Dashboard`: 仪表盘
    #[serde(
        rename = "block_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_type: String,
    /// Block权限
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `NoPerm`: 无权限
    ///
    /// `Read`: 可阅读
    #[serde(
        rename = "block_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub block_perm: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleTableRoleRecRuleSubResp {
    /// 记录筛选条件
    ///
    /// **是否必填**: 是
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[serde(
        rename = "conditions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conditions: Vec<AppRoleTableRoleRecRuleConditionSubResp>,
    /// 多个筛选条件的关系
    ///
    /// **示例值**: "and"
    ///
    /// **可选值**:
    ///
    /// `And`: 与
    ///
    /// `Or`: 或
    #[serde(
        rename = "conjunction",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conjunction: String,
    /// 其他记录权限，仅在table_perm为2时有意义
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `NoPerm`: 禁止查看
    ///
    /// `Read`: 仅可阅读
    #[serde(
        rename = "other_perm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub other_perm: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AppRoleTableRoleRecRuleConditionSubResp {
    /// 字段名，记录筛选条件是`创建人包含访问者本人`时，此参数值为""
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "单选"
    #[serde(
        rename = "field_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_name: String,
    /// 运算符
    ///
    /// **示例值**: "is"
    ///
    /// **可选值**:
    ///
    /// `Is`: 等于
    ///
    /// `IsNot`: 不等于
    ///
    /// `Contains`: 包含
    ///
    /// `DoesNotContain`: 不包含
    ///
    /// `IsEmpty`: 为空
    ///
    /// `IsNotEmpty`: 不为空
    #[serde(
        rename = "operator",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operator: String,
    /// 单选或多选字段的选项id
    ///
    /// **示例值**: "["optbdVHf4q", "optrpd3eIJ"]"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Vec<String>,
    /// 字段类型
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "field_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub field_type: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::bitable::BitableServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateBitableAppRoleReq) -> Result<(UpdateBitableAppRoleResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateBitableAppRoleReq,
                ) -> Result<(UpdateBitableAppRoleResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BitableServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_bitable_app_role<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdateBitableAppRoleReq,
            UpdateBitableAppRoleResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_bitable_app_role(
            &self,
            req: &UpdateBitableAppRoleReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateBitableAppRoleReq, UpdateBitableAppRoleResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::bitable::update_bitable_app_role::{
            UpdateBitableAppRoleReq, UpdateBitableAppRoleResp, UpdateBitableAppRoleRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .bitable()
            .mock()
            .mock_update_bitable_app_role(|_| {
                Ok((
                    UpdateBitableAppRoleResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .bitable()
            .update_bitable_app_role(UpdateBitableAppRoleReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .bitable()
            .update_bitable_app_role(UpdateBitableAppRoleReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "role_name": "自定义角色1",
    "table_roles": [
        {
            "table_name": "数据表1",
            "table_id": "tblKz5D60T4JlfcT",
            "table_perm": 0,
            "rec_rule": {
                "conditions": [
                    {
                        "field_name": "单选",
                        "operator": "is",
                        "value": [
                            "optbdVHf4q"
                        ]
                    }
                ],
                "conjunction": "and",
                "other_perm": 0
            },
            "field_perm": {},
            "allow_add_record": true,
            "allow_delete_record": true
        }
    ],
    "block_roles": [
        {
            "block_id": "blknkqrP3RqUkcAW",
            "block_perm": 0
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateBitableAppRoleReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "data": {
        "role": {
            "role_name": "role1",
            "table_roles": [
                {
                    "table_name": "table1",
                    "table_id": "tblFIgBzKEq75HSE",
                    "table_perm": 2,
                    "addrecords_perm": false,
                    "deleterecords_perm": true,
                    "rec_rule": {
                        "conjunction": "or",
                        "conditions": [
                            {
                                "field_name": "单选",
                                "operator": "is",
                                "field_type": 3,
                                "value": [
                                    "optbdVHf4q"
                                ]
                            },
                            {
                                "value": null,
                                "field_name": "人员",
                                "operator": "contains",
                                "field_type": 11
                            },
                            {
                                "operator": "contains",
                                "field_type": 1003,
                                "value": null,
                                "field_name": ""
                            }
                        ],
                        "other_perm": 0
                    },
                    "field_perm": {
                        "单选": 1,
                        "年龄": 2
                    }
                },
                {
                    "table_name": "table2",
                    "table_id": "tblMPI6OC1aWvTvs",
                    "table_perm": 1,
                    "rec_rule": {
                        "conditions": [
                            {
                                "field_name": "人员",
                                "operator": "contains",
                                "field_type": 11,
                                "value": null
                            },
                            {
                                "operator": "is",
                                "field_type": 4,
                                "value": [
                                    "opttgKOTSt",
                                    "optWcdXR0W"
                                ],
                                "field_name": "多选"
                            }
                        ],
                        "other_perm": 0,
                        "conjunction": "and"
                    }
                },
                {
                    "table_name": "table3",
                    "table_id": "tblmkLF7Tg6IWbRb",
                    "table_perm": 0
                },
                {
                    "table_name": "table4",
                    "table_id": "tbl5VQHDTms19Qe7",
                    "table_perm": 4
                }
            ],
            "block_roles": [
                {
                    "block_id": "blknkqrP3RqUkcAW",
                    "block_perm": 0
                },
                {
                    "block_id": "blkAjxjWKvbBi7EA", 
                    "block_perm": 1
                }
            ]
        }
    },
    "code": 0,
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateBitableAppRoleRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
