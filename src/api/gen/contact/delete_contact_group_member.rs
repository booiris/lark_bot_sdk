//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/remove>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:10:21+00:00**
    ///
    /// ## 移除用户组成员
    ///
    /// 调用该接口移除指定普通用户组内的某一成员。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/remove>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/contact-v3/group-member/remove>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fgroup-member%2Fremove>
    pub async fn delete_contact_group_member(
        &self,
        req: DeleteContactGroupMemberReq,
    ) -> Result<(DeleteContactGroupMemberResp, CommonResponse), Error> {
        self.delete_contact_group_member_with_opt(req, Default::default())
            .await
    }

    /// 参见 [delete_contact_group_member](#method.delete_contact_group_member) 函数
    pub async fn delete_contact_group_member_with_opt(
        &self,
        req: DeleteContactGroupMemberReq,
        method_option: MethodOption,
    ) -> Result<(DeleteContactGroupMemberResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_delete_contact_group_member(&req) {
                tracing::info!("[lark] Contact#DeleteContactGroupMember **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#DeleteContactGroupMember call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "DeleteContactGroupMember",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/group/:group_id/member/remove",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (DeleteContactGroupMemberRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DeleteContactGroupMemberReq {
    /// 用户组 ID。
    ///
    /// 用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "g198123"
    #[api(kind = "path", name = "group_id")]
    pub group_id: String,

    /// 用户组成员的类型，目前仅支持选择 user。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "user"
    ///
    /// **可选值**:
    ///
    /// `User`: 用户类型。
    #[api(kind = "body", name = "member_type")]
    pub member_type: String,
    /// 移除的用户 ID，ID 类型与 member_id_type 的取值保持一致。
    ///
    /// 你可以调用[查询用户组成员列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/simplelist)接口，获取用户组内的成员 ID，并将需要移除的成员 ID 传入当前参数。注意仅支持移除用户类型的成员，且需要使用相同的用户 ID 类型，否则会报错。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "xj82871k"
    #[api(kind = "body", name = "member_id")]
    pub member_id: String,
    /// 当 `member_type` 取值为 `user`时，通过该参数设置用户 ID 类型。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `OpenID`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。
    ///
    /// `UnionID`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。
    ///
    /// `UserID`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用中都保持一致。User ID 主要用于在不同的应用间打通用户数据。
    #[api(kind = "body", name = "member_id_type")]
    pub member_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct DeleteContactGroupMemberRespInner {
    #[serde(flatten)]
    data: Option<DeleteContactGroupMemberResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct DeleteContactGroupMemberResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            DeleteContactGroupMemberReq,
        ) -> Result<(DeleteContactGroupMemberResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    DeleteContactGroupMemberReq,
                ) -> Result<(DeleteContactGroupMemberResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_delete_contact_group_member<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DeleteContactGroupMemberReq,
            DeleteContactGroupMemberResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_delete_contact_group_member(
            &self,
            req: &DeleteContactGroupMemberReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                DeleteContactGroupMemberReq,
                DeleteContactGroupMemberResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::delete_contact_group_member::{
            DeleteContactGroupMemberReq, DeleteContactGroupMemberResp,
            DeleteContactGroupMemberRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_delete_contact_group_member(|_| {
                Ok((
                    DeleteContactGroupMemberResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .contact()
            .delete_contact_group_member(DeleteContactGroupMemberReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .delete_contact_group_member(DeleteContactGroupMemberReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "member_type": "user",
    "member_id": "xj82871k",
    "member_id_type": "open_id"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::DeleteContactGroupMemberReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {},
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<DeleteContactGroupMemberRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
