//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:08:03+00:00**
    ///
    /// ## 查询用户组列表
    ///
    /// 调用该接口查询当前租户下的用户组列表，列表内包含用户组的 ID、名字、成员数量和类型等信息。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/contact-v3/group/simplelist>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fgroup%2Fsimplelist>
    pub async fn get_contact_group_list(
        &self,
        req: GetContactGroupListReq,
    ) -> Result<(GetContactGroupListResp, CommonResponse), Error> {
        self.get_contact_group_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_contact_group_list](#method.get_contact_group_list) 函数
    pub async fn get_contact_group_list_with_opt(
        &self,
        req: GetContactGroupListReq,
        method_option: MethodOption,
    ) -> Result<(GetContactGroupListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_contact_group_list(&req) {
                tracing::info!("[lark] Contact#GetContactGroupList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#GetContactGroupList call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "GetContactGroupList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/group/simplelist",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetContactGroupListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetContactGroupListReq {
    /// 分页大小，用于限制一次请求所返回的数据条目数。
    ///
    /// **示例值**: "50"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 用户组类型。
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Assign`: 普通用户组
    ///
    /// `Dynamic`: 动态用户组
    #[api(kind = "query", name = "type", v_type = "var", option = "false")]
    pub query_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetContactGroupListRespInner {
    #[serde(flatten)]
    data: Option<GetContactGroupListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetContactGroupListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 用户组列表信息。
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "grouplist",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub grouplist: Vec<GroupSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "AQD9/Rn9556539ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JDTJJDDPw="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct GroupSubResp {
    /// 用户组 ID，该 ID 可用于删除、更新、查询用户组。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "g193821"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户组名字。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "IT 外包组"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 用户组描述。
    ///
    /// **示例值**: "IT 外包组，需要对该组人群进行细颗粒度权限管控。"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 用户组成员中的用户数量。
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "member_user_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_user_count: i64,
    /// 普通用户组成员中的部门数量。
    ///
    /// **说明**：动态用户组成员中没有部门。
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "member_department_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_department_count: i64,
    /// 用户组的类型。
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Assign`: 普通用户组
    ///
    /// `Dynamic`: 动态用户组
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 部门范围，以部门 ID 列表形式展示。
    #[serde(
        rename = "department_scope_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_scope_list: Vec<String>,
    /// 自定义用户组 ID。
    ///
    /// **示例值**: "4ba51ab38648f9cd"
    #[serde(
        rename = "group_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetContactGroupListReq) -> Result<(GetContactGroupListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetContactGroupListReq,
                ) -> Result<(GetContactGroupListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_contact_group_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetContactGroupListReq, GetContactGroupListResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_contact_group_list(
            &self,
            req: &GetContactGroupListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetContactGroupListReq, GetContactGroupListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::get_contact_group_list::{
            GetContactGroupListReq, GetContactGroupListResp, GetContactGroupListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_get_contact_group_list(|_| {
                Ok((
                    GetContactGroupListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .contact()
            .get_contact_group_list(GetContactGroupListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .get_contact_group_list(GetContactGroupListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "grouplist": [
            {
                "id": "g193821",
                "name": "IT 外包组",
                "description": "IT 外包组，需要对该组人群进行细颗粒度权限管控。",
                "member_user_count": 2,
                "member_department_count": 0,
                "type": 1,
                "department_scope_list": [
                    "od-4e6ac4d14bcd5071a37a39de902c7141"
                ],
                "group_id": "4ba51ab38648f9cd"
            }
        ],
        "page_token": "AQD9/Rn9556539ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JDTJJDDPw=",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetContactGroupListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
