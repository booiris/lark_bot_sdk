//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:21:31+00:00**
    ///
    /// ## 创建职级
    ///
    /// 调用该接口创建一个职级。职级是用户属性之一，用于标识用户的职位级别，例如 P1、P2、P3、P4。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/contact-v3/job_level/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fjob_level%2Fcreate>
    pub async fn create_contact_job_level(
        &self,
        req: CreateContactJobLevelReq,
    ) -> Result<(CreateContactJobLevelResp, CommonResponse), Error> {
        self.create_contact_job_level_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_contact_job_level](#method.create_contact_job_level) 函数
    pub async fn create_contact_job_level_with_opt(
        &self,
        req: CreateContactJobLevelReq,
        method_option: MethodOption,
    ) -> Result<(CreateContactJobLevelResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_contact_job_level(&req) {
                tracing::info!("[lark] Contact#CreateContactJobLevel **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#CreateContactJobLevel call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "CreateContactJobLevel",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/job_levels",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateContactJobLevelRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateContactJobLevelReq {
    /// 职级名称。通用名称，如果未设置多语言名称，则默认展示该名称。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "高级专家"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `255` 字符
    #[api(kind = "body", name = "name")]
    pub name: String,
    /// 职级描述。字符长度上限 5,000。通用描述，如果未设置多语言描述，则默认展示该描述。
    ///
    /// **默认值**：空
    ///
    /// **示例值**: "公司内部中高级职称，有一定专业技术能力的人员"
    #[api(kind = "body", name = "description")]
    pub description: Option<String>,
    /// 职级排序。数值越小，排序越靠前。
    ///
    /// **默认值**：空。如果不传入该值，则默认职级排在列表最后位（即 order 取值为当前职级列表内的最大值）。
    ///
    /// **示例值**: "200"
    #[api(kind = "body", name = "order")]
    pub order: Option<i64>,
    /// 是否启用该职级。
    ///
    /// **可选值有**：
    ///
    /// - true：启用
    ///
    /// - false：不启用
    ///
    /// **说明**：只有启用了的职级可以设置为用户属性。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "status")]
    pub status: bool,
    /// 多语言职级名称。
    ///
    /// **默认值**：空，表示不设置多语言名称。
    #[api(kind = "body", name = "i18n_name")]
    pub i18n_name: Vec<Option<I18nContentSubReq>>,
    /// 多语言职级描述。
    ///
    /// **默认值**：空，表示不设置多语言描述。
    #[api(kind = "body", name = "i18n_description")]
    pub i18n_description: Vec<Option<I18nContentSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nContentSubReq {
    /// 语言版本。例如：
    ///
    /// - zh_cn：中文
    ///
    /// - en_us：英语
    ///
    /// - ja_jp：日语
    ///
    /// **示例值**: "zh_cn"
    #[serde(
        rename = "locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub locale: Option<String>,
    /// 语言版本对应的职级名称。
    ///
    /// **示例值**: "多语言内容"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateContactJobLevelRespInner {
    #[serde(flatten)]
    data: Option<CreateContactJobLevelResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateContactJobLevelResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 职级信息。
    #[serde(
        rename = "job_level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_level: JobLevelSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobLevelSubResp {
    /// 职级名称。
    ///
    /// **示例值**: "高级专家"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `255` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 职级描述。
    ///
    /// **示例值**: "公司内部中高级职称，有一定专业技术能力的人员"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
    /// 职级排序，数值越小，排序越靠前。
    ///
    /// **示例值**: "200"
    #[serde(
        rename = "order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub order: i64,
    /// 是否启用职级。
    ///
    /// **可能值有**：
    ///
    /// - true：启用
    ///
    /// - false：不启用
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: bool,
    /// 职级 ID。后续可通过该 ID 删除、更新、查询职级。
    ///
    /// **示例值**: "mga5oa8ayjlp9rb"
    #[serde(
        rename = "job_level_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_level_id: String,
    /// 多语言名称。
    #[serde(
        rename = "i18n_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_name: Vec<I18nContentSubResp>,
    /// 多语言描述。
    #[serde(
        rename = "i18n_description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_description: Vec<I18nContentSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nContentSubResp {
    /// 语言版本。
    ///
    /// **示例值**: "zh_cn"
    #[serde(
        rename = "locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub locale: String,
    /// 语言版本对应的名称。
    ///
    /// **示例值**: "多语言内容"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateContactJobLevelReq) -> Result<(CreateContactJobLevelResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateContactJobLevelReq,
                ) -> Result<(CreateContactJobLevelResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_contact_job_level<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateContactJobLevelReq,
            CreateContactJobLevelResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_contact_job_level(
            &self,
            req: &CreateContactJobLevelReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateContactJobLevelReq, CreateContactJobLevelResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::create_contact_job_level::{
            CreateContactJobLevelReq, CreateContactJobLevelResp, CreateContactJobLevelRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_create_contact_job_level(|_| {
                Ok((
                    CreateContactJobLevelResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .contact()
            .create_contact_job_level(CreateContactJobLevelReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .create_contact_job_level(CreateContactJobLevelReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "name": "高级专家",
    "description": "公司内部中高级职称，有一定专业技术能力的人员",
    "order": 200,
    "status": true,
    "i18n_name": [
        {
            "locale": "zh_cn",
            "value": "多语言内容"
        }
    ],
    "i18n_description": [
        {
            "locale": "zh_cn",
            "value": "多语言内容"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateContactJobLevelReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "job_level": {
            "name": "高级专家",
            "description": "公司内部中高级职称，有一定专业技术能力的人员",
            "order": 200,
            "status": true,
            "job_level_id": "mga5oa8ayjlp9rb",
            "i18n_name": [
                {
                    "locale": "zh_cn",
                    "value": "多语言内容"
                }
            ],
            "i18n_description": [
                {
                    "locale": "zh_cn",
                    "value": "多语言内容"
                }
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateContactJobLevelRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
