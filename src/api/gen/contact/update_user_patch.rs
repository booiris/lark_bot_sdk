//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:05:05+00:00**
    ///
    /// ## 修改用户部分信息
    ///
    /// 调用该接口更新通讯录中指定用户的信息，包括名称、邮箱、手机号、所属部门以及自定义字段等信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/patch>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/contact-v3/user/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fuser%2Fpatch>
    pub async fn update_user_patch(
        &self,
        req: UpdateUserPatchReq,
    ) -> Result<(UpdateUserPatchResp, CommonResponse), Error> {
        self.update_user_patch_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_user_patch](#method.update_user_patch) 函数
    pub async fn update_user_patch_with_opt(
        &self,
        req: UpdateUserPatchReq,
        method_option: MethodOption,
    ) -> Result<(UpdateUserPatchResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_user_patch(&req) {
                tracing::info!("[lark] Contact#UpdateUserPatch **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#UpdateUserPatch call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "UpdateUserPatch",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/users/:user_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateUserPatchRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateUserPatchReq {
    /// 用户 ID，ID 类型需要与查询参数中的 user_id_type 类型保持一致。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "path", name = "user_id")]
    pub user_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的部门 ID 类型。关于部门 ID 的详细介绍，可参见[部门 ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)。
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `department_id`: 支持用户自定义配置的部门 ID。自定义配置时可复用已删除的 department_id，因此在未删除的部门范围内 department_id 具有唯一性。
    ///
    /// `open_department_id`: 由系统自动生成的部门 ID，ID 前缀固定为 od-，在租户内全局唯一。
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 用户名。长度不能超过 255 字符。
    ///
    /// **示例值**: "张三"
    ///
    /// **数据校验规则**：
    ///
    /// - **最小长度**: `1` 字符
    #[api(kind = "body", name = "name")]
    pub name: Option<String>,
    /// 英文名。长度不能超过 255 字符。
    ///
    /// **示例值**: "San Zhang"
    #[api(kind = "body", name = "en_name")]
    pub en_name: Option<String>,
    /// 别名。长度不能超过 255 字符。
    ///
    /// **示例值**: "Alex Zhang"
    #[api(kind = "body", name = "nickname")]
    pub nickname: Option<String>,
    /// 邮箱。
    ///
    /// **注意**：
    ///
    /// - 当设置非中国大陆的手机号时，必须同时设置邮箱。
    ///
    /// - 在当前租户下，邮箱不可重复。
    ///
    /// **示例值**: "zhangsan@gmail.com"
    #[api(kind = "body", name = "email")]
    pub email: Option<String>,
    /// 手机号。
    ///
    /// **注意**：
    ///
    /// - 在当前租户下，手机号不可重复。
    ///
    /// - 未认证企业仅支持添加中国大陆手机号；通过飞书认证的企业允许添加海外手机号。
    ///
    /// - 国际电话区号的前缀中，必须包含加号 **+**。
    ///
    /// 取值示例：
    ///
    /// - 中国大陆手机号：13011111111 或 +8613011111111
    ///
    /// - 非中国大陆手机号：+41446681800
    ///
    /// **示例值**: "13011111111"
    #[api(kind = "body", name = "mobile")]
    pub mobile: Option<String>,
    /// 手机号码是否可见。
    ///
    /// **可选值有**：
    ///
    /// - true：可见。
    ///
    /// - false：不可见。不可见时，企业内的员工将无法查看该用户的手机号码。
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "mobile_visible")]
    pub mobile_visible: Option<bool>,
    /// 性别。
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `unkown`: 保密
    ///
    /// `male`: 男
    ///
    /// `female`: 女
    ///
    /// `others`: 其他
    #[api(kind = "body", name = "gender")]
    pub gender: Option<i64>,
    /// 头像的文件 Key。你可以通过[上传图片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)接口，上传并获取头像文件 Key。
    ///
    /// **示例值**: "2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
    #[api(kind = "body", name = "avatar_key")]
    pub avatar_key: Option<String>,
    /// 用户所属部门的 ID 列表。
    ///
    /// - 一个用户可属于多个部门。最多可归属 50 个部门。
    ///
    /// - 部门 ID 类型与查询参数 `department_id_type` 的取值保持一致。
    ///
    /// - 你可以调用[搜索部门](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search)接口，通过部门名称关键词获取对应的部门 ID。
    ///
    /// **示例值**: "od-4e6ac4d14bcd5071a37a39de902c7141"
    #[api(kind = "body", name = "department_ids")]
    pub department_ids: Vec<Option<String>>,
    /// 用户的直接主管的用户 ID，ID 类型与查询参数 `user_id_type` 的取值保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "leader_user_id")]
    pub leader_user_id: Option<String>,
    /// 工作城市。字符长度上限为 100。
    ///
    /// - 调用[获取租户工作城市列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/work_city/list)获取当前租户内已有的工作城市列表。
    ///
    /// - 如果你传入的工作城市名称不存在，则系统会自动生成该工作城市。
    ///
    /// **示例值**: "杭州"
    #[api(kind = "body", name = "city")]
    pub city: Option<String>,
    /// 国家或地区 Code 缩写。具体写入格式参考 [国家/地区 Code 参照表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description)。
    ///
    /// **示例值**: "CN"
    #[api(kind = "body", name = "country")]
    pub country: Option<String>,
    /// 工位。字符长度上限为 255。
    ///
    /// **示例值**: "北楼-H34"
    #[api(kind = "body", name = "work_station")]
    pub work_station: Option<String>,
    /// 入职时间。秒级时间戳格式，表示从 1970 年 1 月 1 日开始所经过的秒数。
    ///
    /// **示例值**: "2147483647"
    #[api(kind = "body", name = "join_time")]
    pub join_time: Option<i64>,
    /// 工号。字符长度上限为 255。
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "employee_no")]
    pub employee_no: Option<String>,
    /// 员工类型。
    ///
    /// **可选值有**：
    ///
    /// - 1：正式员工
    ///
    /// - 2：实习生
    ///
    /// - 3：外包
    ///
    /// - 4：劳务
    ///
    /// - 5：顾问
    ///
    /// 该参数支持读取自定义的员工类型的 int 值。你可通过[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取到该租户的自定义员工类型的编号值（enum_value）。
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "employee_type")]
    pub employee_type: Option<i64>,
    /// 用户排序信息。该参数用于标记通讯录下组织架构的人员顺序，人员可能存在多个部门中，且有不同的排序。
    #[api(kind = "body", name = "orders")]
    pub orders: Vec<Option<UserOrderSubReq>>,
    /// 自定义字段。设置参数前建议你先了解[自定义字段资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/overview)。
    ///
    /// **注意事项**：当企业管理员在管理后台配置了自定义字段，且开启了 **允许开放平台 API 调用** 功能后，该字段才会生效。
    #[api(kind = "body", name = "custom_attrs")]
    pub custom_attrs: Vec<Option<UserCustomAttrSubReq>>,
    /// 企业邮箱。
    ///
    /// **注意事项**：企业管理员在管理后台启用飞书邮箱服务后，才会生效该参数。如果设置企业邮箱失败，请联系企业管理员确认是否在管理后台启用了相应的企业邮箱域名。
    ///
    /// **示例值**: "demo@mail.com"
    #[api(kind = "body", name = "enterprise_email")]
    pub enterprise_email: Option<String>,
    /// 职务名称。
    ///
    /// - 你可以调用[获取租户职务列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_title/list)接口获取相应的租户名称。
    ///
    /// - 如果传入的职务名称不存在，则系统会自动创建并使用该名称。
    ///
    /// **示例值**: "xxxxx"
    #[api(kind = "body", name = "job_title")]
    pub job_title: Option<String>,
    /// 是否是暂停状态的用户。
    ///
    /// **可选值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "is_frozen")]
    pub is_frozen: Option<bool>,
    /// 职级 ID。你可以调用[获取租户职级列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_level/list)接口查询相应的职级 ID。
    ///
    /// **示例值**: "mga5oa8ayjlp9rb"
    #[api(kind = "body", name = "job_level_id")]
    pub job_level_id: Option<String>,
    /// 序列 ID。你可以调用[获取租户序列列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/job_family/list)接口查询相应的序列 ID。
    ///
    /// **示例值**: "mga5oa8ayjlp9rb"
    #[api(kind = "body", name = "job_family_id")]
    pub job_family_id: Option<String>,
    /// 分配给用户的席位 ID 列表。
    ///
    /// **注意事项**：
    ///
    /// - 该字段需开通 **分配用户席位** 权限。
    ///
    /// - 你可通过[获取企业席位信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/tenant-v2/tenant-product_assign_info/query)接口，获取到当前租户的可用席位 ID。
    ///
    /// **示例值**: "["7179609168571645971"]"
    #[api(kind = "body", name = "subscription_ids")]
    pub subscription_ids: Vec<Option<String>>,
    /// 虚线上级的用户 ID 列表。
    ///
    /// - ID 类型与查询参数 `user_id_type` 的取值保持一致。
    ///
    /// - 如何获取用户 ID 可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    #[api(kind = "body", name = "dotted_line_leader_user_ids")]
    pub dotted_line_leader_user_ids: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserOrderSubReq {
    /// 排序信息对应的部门 ID。表示用户所在的、且需要排序的部门。
    ///
    /// **注意**：
    ///
    /// - 部门 ID 类型与查询参数 department_id_type 的取值保持一致。
    ///
    /// - 该参数所传入的部门 ID 必须在用户所属的部门 ID 列表（department_ids 参数）内。
    ///
    /// **示例值**: "od-4e6ac4d14bcd5071a37a39de902c7141"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: Option<String>,
    /// 用户在其直属部门内的排序，数值越大，排序越靠前。
    ///
    /// **注意**：该参数为 int 类型，取值时不能超出 int 的最大值。
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "user_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_order: Option<i64>,
    /// 用户所属的多个部门间的排序，数值越大，排序越靠前。
    ///
    /// **注意**：该参数为 int 类型，取值时不能超出 int 的最大值。
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "department_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_order: Option<i64>,
    /// 标识是否为用户的唯一主部门，主部门为用户所属部门中排序第一的部门（department_order 最大）。
    ///
    /// **可选值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary_dept",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary_dept: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserCustomAttrSubReq {
    /// 自定义字段类型。
    ///
    /// **可选值有**：
    ///
    /// - TEXT：文本
    ///
    /// - HREF：网页
    ///
    /// - ENUMERATION：枚举
    ///
    /// - PICTURE_ENUM：图片
    ///
    /// - GENERIC_USER：用户
    ///
    /// **示例值**: "TEXT"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: Option<String>,
    /// 自定义字段 ID。
    ///
    /// **示例值**: "DemoId"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: Option<String>,
    /// 自定义字段取值。
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Option<UserCustomAttrValueSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserCustomAttrValueSubReq {
    /// - 字段类型为 TEXT 时，该参数定义字段值，必填。
    ///
    /// - 字段类型为 HREF 时，该参数定义网页标题，必填。
    ///
    /// **示例值**: "DemoText"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: Option<String>,
    /// 字段类型为 HREF 时，该参数定义默认 URL。例如，手机端跳转小程序，PC端跳转网页。
    ///
    /// **示例值**: "http://www.fs.cn"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: Option<String>,
    /// 字段类型为 HREF 时，该参数定义 PC 端 URL。
    ///
    /// **示例值**: "http://www.fs.cn"
    #[serde(
        rename = "pc_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pc_url: Option<String>,
    /// 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项 ID。
    ///
    /// **示例值**: "edcvfrtg"
    #[serde(
        rename = "option_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_id: Option<String>,
    /// 字段类型为 GENERIC_USER 时，该参数定义引用人员。
    #[serde(
        rename = "generic_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub generic_user: Option<CustomAttrGenericUserSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomAttrGenericUserSubReq {
    /// 引用人员的用户 ID。
    ///
    /// - ID 类型与查询参数 `user_id_type` 的取值保持一致。
    ///
    /// - 如何获取用户 ID 可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9b2fabg5"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户类型。
    ///
    /// **可选值有**：
    ///
    /// 1：用户
    ///
    /// **说明**：目前仅支持取值 1，表示用户。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateUserPatchRespInner {
    #[serde(flatten)]
    data: Option<UpdateUserPatchResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateUserPatchResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 用户信息
    #[serde(
        rename = "user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user: UserSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserSubResp {
    /// 用户的 union_id，是应用开发商发布的不同应用中同一用户的标识。不同用户 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。
    ///
    /// **示例值**: "on_94a1ee5551019f18cd73d9f111898cf2"
    #[serde(
        rename = "union_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub union_id: String,
    /// 用户的 user_id，租户内用户的唯一标识。不同用户 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。
    ///
    /// **示例值**: "3e3cf96b"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 用户的 open_id，应用内用户的唯一标识。不同用户 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
    /// 用户名。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    ///
    /// **数据校验规则**：
    ///
    /// - **最小长度**: `1` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 英文名。
    ///
    /// **示例值**: "San Zhang"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 别名。
    ///
    /// **示例值**: "Alex Zhang"
    #[serde(
        rename = "nickname",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub nickname: String,
    /// 邮箱。
    ///
    /// **示例值**: "zhangsan@gmail.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 手机号。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "13011111111"
    #[serde(
        rename = "mobile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile: String,
    /// 手机号码是否可见。
    ///
    /// **可能值有**：
    ///
    /// - true：可见。
    ///
    /// - false：不可见。不可见时，企业内的员工将无法查看该用户的手机号码。
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "mobile_visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile_visible: bool,
    /// 性别。
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `unkown`: 保密
    ///
    /// `male`: 男
    ///
    /// `female`: 女
    ///
    /// `others`: 其他
    #[serde(
        rename = "gender",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gender: i64,
    /// 头像的文件 Key。
    ///
    /// **示例值**: "2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
    #[serde(
        rename = "avatar_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_key: String,
    /// 用户头像信息。
    #[serde(
        rename = "avatar",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar: AvatarInfoSubResp,
    /// 用户状态。通过 is_frozen、is_resigned、is_activated、is_exited 布尔值类型参数进行展示。
    ///
    /// 用户状态的转关逻辑可参见[用户资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/field-overview#4302b5a1)。
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: UserStatusSubResp,
    /// 用户所属部门的 ID 列表，一个用户可属于多个部门。ID 值的类型与查询参数中的 department_id_type 的取值保持一致。
    ///
    /// **示例值**: "od-4e6ac4d14bcd5071a37a39de902c7141"
    #[serde(
        rename = "department_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_ids: Vec<String>,
    /// 用户的直接主管的用户ID。ID 值的类型与查询参数中的user_id_type 的取值保持一致。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[serde(
        rename = "leader_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leader_user_id: String,
    /// 工作城市。
    ///
    /// **示例值**: "杭州"
    #[serde(
        rename = "city",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city: String,
    /// 国家或地区 Code 缩写，具体格式参考 [国家/地区 Code 参照表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description)。
    ///
    /// **示例值**: "CN"
    #[serde(
        rename = "country",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country: String,
    /// 工位。
    ///
    /// **示例值**: "北楼-H34"
    #[serde(
        rename = "work_station",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_station: String,
    /// 入职时间。秒级时间戳格式，表示从 1970 年 1 月 1 日开始所经过的秒数。
    ///
    /// **示例值**: "2147483647"
    #[serde(
        rename = "join_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub join_time: i64,
    /// 用户是否为租户超级管理员。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_tenant_manager",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_tenant_manager: bool,
    /// 工号。
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "employee_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_no: String,
    /// 员工类型。
    ///
    /// **可能值有**：
    ///
    /// - 1：正式员工
    ///
    /// - 2：实习生
    ///
    /// - 3：外包
    ///
    /// - 4：劳务
    ///
    /// - 5：顾问
    ///
    /// 同时支持自定义员工类型的 int 值。你可通过[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)接口获取到当前租户内自定义员工类型的名称。
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "employee_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type: i64,
    /// 用户排序信息。用于标记通讯录下组织架构的人员顺序，人员可能存在多个部门中，且有不同的排序。
    #[serde(
        rename = "orders",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub orders: Vec<UserOrderSubResp>,
    /// 自定义字段。
    ///
    /// **注意事项**：当企业管理员在管理后台配置了自定义字段，且开启了 **允许开放平台 API 调用** 功能后，该字段才会生效。
    #[serde(
        rename = "custom_attrs",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_attrs: Vec<UserCustomAttrSubResp>,
    /// 企业邮箱。
    ///
    /// **注意事项**：企业管理员在管理后台启用飞书邮箱服务后，才会生效该参数。
    ///
    /// **示例值**: "demo@mail.com"
    #[serde(
        rename = "enterprise_email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enterprise_email: String,
    /// 职务。
    ///
    /// **示例值**: "xxxxx"
    #[serde(
        rename = "job_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_title: String,
    /// 是否为暂停状态的用户。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_frozen",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_frozen: bool,
    /// 职级 ID。
    ///
    /// **示例值**: "mga5oa8ayjlp9rb"
    #[serde(
        rename = "job_level_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_level_id: String,
    /// 序列 ID。
    ///
    /// **示例值**: "mga5oa8ayjlp9rb"
    #[serde(
        rename = "job_family_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_family_id: String,
    /// 虚线上级的用户 ID。ID 类型与查询参数 user_id_type 的取值保持一致。
    #[serde(
        rename = "dotted_line_leader_user_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub dotted_line_leader_user_ids: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AvatarInfoSubResp {
    /// 72*72 像素头像链接。
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_72",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_72: String,
    /// 240*240 像素头像链接。
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_240",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_240: String,
    /// 640*640 像素头像链接。
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_640",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_640: String,
    /// 原始头像链接。
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_origin",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_origin: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserStatusSubResp {
    /// 是否为暂停状态。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_frozen",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_frozen: bool,
    /// 是否为离职状态。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_resigned",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_resigned: bool,
    /// 是否为激活状态。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_activated",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_activated: bool,
    /// 是否为主动退出状态。主动退出一段时间后用户状态会自动转为已离职。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_exited",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_exited: bool,
    /// 是否为未加入状态，需要用户自主确认才能加入企业或团队。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_unjoin",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_unjoin: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserOrderSubResp {
    /// 排序信息对应的部门 ID，表示用户所在的、且需要排序的部门。ID 值的类型与查询参数中的 department_id_type 的取值保持一致。
    ///
    /// **示例值**: "od-4e6ac4d14bcd5071a37a39de902c7141"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 用户在其直属部门内的排序。数值越大，排序越靠前。
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "user_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_order: i64,
    /// 用户所属的多个部门间的排序。数值越大，排序越靠前。
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "department_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_order: i64,
    /// 标识是否为用户的唯一主部门。主部门为用户所属部门中排序第一的部门(department_order 最大)。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_primary_dept",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_primary_dept: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserCustomAttrSubResp {
    /// 自定义字段类型。
    ///
    /// **可能值有**：
    ///
    /// - TEXT：文本
    ///
    /// - HREF：网页
    ///
    /// - ENUMERATION：枚举
    ///
    /// - PICTURE_ENUM：图片
    ///
    /// - GENERIC_USER：用户
    ///
    /// **示例值**: "TEXT"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 自定义字段 ID。
    ///
    /// **示例值**: "DemoId"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 自定义字段取值。
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: UserCustomAttrValueSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserCustomAttrValueSubResp {
    /// - 字段类型为 TEXT 时，该参数返回定义的字段值。
    ///
    /// - 字段类型为 HREF 时，该参数返回定义的网页标题。
    ///
    /// **示例值**: "DemoText"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
    /// 字段类型为 HREF 时，该参数返回定义的默认 URL。
    ///
    /// **示例值**: "http://www.fs.cn"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 字段类型为 HREF 时，该参数返回定义的 PC 端 URL。
    ///
    /// **示例值**: "http://www.fs.cn"
    #[serde(
        rename = "pc_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pc_url: String,
    /// 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数返回定义的选项 ID。
    ///
    /// **示例值**: "edcvfrtg"
    #[serde(
        rename = "option_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_id: String,
    /// 枚举类型中选项的选项值。
    ///
    /// **示例值**: "option"
    #[serde(
        rename = "option_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_value: String,
    /// 图片类型中图片选项的名称。
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 图片类型中图片选项的链接。
    ///
    /// **示例值**: "https://xxxxxxxxxxxxxxxxxx"
    #[serde(
        rename = "picture_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub picture_url: String,
    /// 字段类型为 GENERIC_USER 时，该参数返回定义的引用人员。
    #[serde(
        rename = "generic_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub generic_user: CustomAttrGenericUserSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomAttrGenericUserSubResp {
    /// 引用人员的 user_id。ID 类型与查询参数 user_id_type 的取值保持一致。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9b2fabg5"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户类型。目前固定为 1，表示用户类型。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateUserPatchReq) -> Result<(UpdateUserPatchResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(UpdateUserPatchReq) -> Result<(UpdateUserPatchResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_user_patch<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateUserPatchReq, UpdateUserPatchResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_user_patch(
            &self,
            req: &UpdateUserPatchReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateUserPatchReq, UpdateUserPatchResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::update_user_patch::{
            UpdateUserPatchReq, UpdateUserPatchResp, UpdateUserPatchRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_update_user_patch(|_| {
                Ok((UpdateUserPatchResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .contact()
            .update_user_patch(UpdateUserPatchReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .update_user_patch(UpdateUserPatchReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "name": "张三",
    "en_name": "San Zhang",
    "nickname": "Alex Zhang",
    "email": "zhangsan@gmail.com",
    "mobile": "13011111111",
    "mobile_visible": false,
    "gender": 1,
    "avatar_key": "2500c7a9-5fff-4d9a-a2de-3d59614ae28g",
    "department_ids": [
        "od-4e6ac4d14bcd5071a37a39de902c7141"
    ],
    "leader_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
    "city": "杭州",
    "country": "CN",
    "work_station": "北楼-H34",
    "join_time": 2147483647,
    "employee_no": "1",
    "employee_type": 1,
    "orders": [
        {
            "department_id": "od-4e6ac4d14bcd5071a37a39de902c7141",
            "user_order": 100,
            "department_order": 100,
            "is_primary_dept": true
        }
    ],
    "custom_attrs": [
        {
            "type": "TEXT",
            "id": "DemoId",
            "value": {
                "text": "DemoText",
                "url": "http://www.fs.cn",
                "pc_url": "http://www.fs.cn",
                "option_id": "edcvfrtg",
                "generic_user": {
                    "id": "9b2fabg5",
                    "type": 1
                }
            }
        }
    ],
    "enterprise_email": "demo@mail.com",
    "job_title": "xxxxx",
    "is_frozen": false,
    "job_level_id": "mga5oa8ayjlp9rb",
    "job_family_id": "mga5oa8ayjlp9rb",
    "subscription_ids": [
        "23213213213123123"
    ],
    "dotted_line_leader_user_ids": [
        "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateUserPatchReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "user": {
            "union_id": "on_94a1ee5551019f18cd73d9f111898cf2",
            "user_id": "3e3cf96b",
            "open_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
            "name": "张三",
            "en_name": "San Zhang",
            "nickname": "Alex Zhang",
            "email": "zhangsan@gmail.com",
            "mobile": "13011111111",
            "mobile_visible": false,
            "gender": 1,
            "avatar_key": "2500c7a9-5fff-4d9a-a2de-3d59614ae28g",
            "avatar": {
                "avatar_72": "https://foo.icon.com/xxxx",
                "avatar_240": "https://foo.icon.com/xxxx",
                "avatar_640": "https://foo.icon.com/xxxx",
                "avatar_origin": "https://foo.icon.com/xxxx"
            },
            "status": {
                "is_frozen": false,
                "is_resigned": false,
                "is_activated": true,
                "is_exited": false,
                "is_unjoin": false
            },
            "department_ids": [
                "od-4e6ac4d14bcd5071a37a39de902c7141"
            ],
            "leader_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
            "city": "杭州",
            "country": "CN",
            "work_station": "北楼-H34",
            "join_time": 2147483647,
            "is_tenant_manager": false,
            "employee_no": "1",
            "employee_type": 1,
            "orders": [
                {
                    "department_id": "od-4e6ac4d14bcd5071a37a39de902c7141",
                    "user_order": 100,
                    "department_order": 100,
                    "is_primary_dept": true
                }
            ],
            "custom_attrs": [
                {
                    "type": "TEXT",
                    "id": "DemoId",
                    "value": {
                        "text": "DemoText",
                        "url": "http://www.fs.cn",
                        "pc_url": "http://www.fs.cn",
                        "option_id": "edcvfrtg",
                        "option_value": "option",
                        "name": "name",
                        "picture_url": "https://xxxxxxxxxxxxxxxxxx",
                        "generic_user": {
                            "id": "9b2fabg5",
                            "type": 1
                        }
                    }
                }
            ],
            "enterprise_email": "demo@mail.com",
            "job_title": "xxxxx",
            "is_frozen": false,
            "job_level_id": "mga5oa8ayjlp9rb",
            "job_family_id": "mga5oa8ayjlp9rb",
            "dotted_line_leader_user_ids": [
                "ou_7dab8a3d3cdcc9da365777c7ad535d62"
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateUserPatchRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
