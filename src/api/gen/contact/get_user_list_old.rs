//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2023-05-10T03:19:25+00:00**
    ///
    /// ## 获取用户列表
    ///
    /// 基于部门ID获取部门下直属用户列表。
    ///
    /// [常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
    ///
    /// - 使用 user_access_token 情况下根据个人组织架构的通讯录可见范围进行权限过滤，返回个人组织架构通讯录范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内可见的用户数据。
    ///
    /// -  tenant_access_token  基于应用通讯录范围进行权限鉴定。由于 department_id 是非必填参数，填与不填存在<b>两种数据权限校验与返回</b>情况：<br>1、请求设置了 department_id
    ///
    /// （根部门为0），会检验所带部门ID是否具有通讯录权限（如果带上
    ///
    /// department_id=0 会校验是否有全员权限），有则返回部门下直属的成员列表, 否则提示无部门权限的错误码返回。<br>2、请求未带
    ///
    /// department_id 参数，则会返回权限范围内的独立用户（权限范围直接包含了某用户，则该用户视为权限范围内的独立用户）。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/historic-version//user/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhistoric-version%2F%2Fuser%2Flist>
    pub async fn get_user_list_old(
        &self,
        req: GetUserListOldReq,
    ) -> Result<(GetUserListOldResp, CommonResponse), Error> {
        self.get_user_list_old_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_user_list_old](#method.get_user_list_old) 函数
    pub async fn get_user_list_old_with_opt(
        &self,
        req: GetUserListOldReq,
        method_option: MethodOption,
    ) -> Result<(GetUserListOldResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_user_list_old(&req) {
                tracing::info!("[lark] Contact#GetUserListOld **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#GetUserListOld call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "GetUserListOld",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/contact/v3/users",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetUserListOldRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetUserListOldReq {
    /// 此次调用中使用的用户ID的类型
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 此次调用中使用的部门ID的类型
    ///
    /// **示例值**: "open_department_type"
    ///
    /// **可选值**:
    ///
    /// `department_id`: 以自定义department_id来标识部门
    ///
    /// `open_department_id`: 以open_department_id来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 填写该字段表示获取部门下所有用户，选填。
    ///
    /// **示例值**: "od-xxxxxxxxxxxxx"
    #[api(
        kind = "query",
        name = "department_id",
        v_type = "var",
        option = "true"
    )]
    pub department_id: Option<String>,
    /// **示例值**: "AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS%2BJKiSIkdexPw="
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetUserListOldRespInner {
    #[serde(flatten)]
    data: Option<GetUserListOldResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetUserListOldResp {
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否有下一页数据
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 下一页分页的token
    ///
    /// **示例值**: "AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ%2BG8JG6tK7%2BZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// -
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<UserSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserSubResp {
    /// 用户的union_id，应用开发商发布的不同应用中同一用户的标识，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// **示例值**: "on_94a1ee5551019f18cd73d9f111898cf2"
    #[serde(
        rename = "union_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub union_id: String,
    /// 用户的user_id，租户内用户的唯一标识，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// **示例值**: "3e3cf96b"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 用户的open_id，应用内用户的唯一标识，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[serde(
        rename = "open_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub open_id: String,
    /// 用户名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    ///
    /// **数据校验规则**：
    ///
    /// - **最小长度**: `1` 字符
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 英文名
    ///
    /// **示例值**: "San Zhang"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 别名
    ///
    /// **示例值**: "Alex Zhang"
    #[serde(
        rename = "nickname",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub nickname: String,
    /// 邮箱
    ///
    /// 注意：
    ///
    /// 1. 非中国大陆手机号成员必须同时添加邮箱
    ///
    /// 2. 邮箱不可重复
    ///
    /// **示例值**: "zhangsan@gmail.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 手机号
    ///
    /// 注意：
    ///
    /// 1. 在本企业内不可重复
    ///
    /// 2. 未认证企业仅支持添加中国大陆手机号，通过飞书认证的企业允许添加海外手机号
    ///
    /// 3. 国际电话区号前缀中必须包含加号 +
    ///
    /// 4. Lark品牌中`mobile`非必填
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "13011111111 (其他例子，中国大陆手机号: 13011111111 或 +8613011111111, 非中国大陆手机号:  +41446681800)"
    #[serde(
        rename = "mobile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile: Option<String>,
    /// 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "mobile_visible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile_visible: bool,
    /// 性别
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `unkown`: 保密
    ///
    /// `male`: 男
    ///
    /// `female`: 女
    #[serde(
        rename = "gender",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gender: i64,
    /// 用户头像信息
    #[serde(
        rename = "avatar",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar: AvatarInfoSubResp,
    /// 用户状态，枚举类型，包括is_frozen、is_resigned、is_activated、is_exited 。
    ///
    /// 用户状态转移参见：[用户状态图](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/field-overview#4302b5a1)
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: UserStatusSubResp,
    /// 用户所属部门的ID列表，一个用户可属于多个部门。
    ///
    /// ID值的类型与查询参数中的department_id_type 对应。
    ///
    /// 不同 ID 的说明与department_id的获取方式参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0)
    #[serde(
        rename = "department_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_ids: Vec<String>,
    /// 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。
    ///
    /// 不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// 获取方式参见[如何获取user_id](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[serde(
        rename = "leader_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leader_user_id: String,
    /// 工作城市
    ///
    /// **示例值**: "杭州"
    #[serde(
        rename = "city",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city: String,
    /// 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description)
    ///
    /// **示例值**: "CN"
    #[serde(
        rename = "country",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country: String,
    /// 工位
    ///
    /// **示例值**: "北楼-H34"
    #[serde(
        rename = "work_station",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_station: String,
    /// 入职时间，时间戳格式，表示从1970年1月1日开始所经过的秒数
    ///
    /// **示例值**: "2147483647"
    #[serde(
        rename = "join_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub join_time: i64,
    /// 是否是租户超级管理员
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_tenant_manager",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_tenant_manager: bool,
    /// 工号
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "employee_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_no: String,
    /// 员工类型，可选值有：
    ///
    /// - `1`：正式员工
    ///
    /// - `2`：实习生
    ///
    /// - `3`：外包
    ///
    /// - `4`：劳务
    ///
    /// - `5`：顾问
    ///
    /// 同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称，参见[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "employee_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type: i64,
    /// 用户排序信息。
    ///
    /// 用于标记通讯录下组织架构的人员顺序，人员可能存在多个部门中，且有不同的排序。
    #[serde(
        rename = "orders",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub orders: Vec<UserOrderSubResp>,
    /// 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。
    ///
    /// 更多详情参见[用户接口相关问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN#77061525)
    #[serde(
        rename = "custom_attrs",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_attrs: Vec<UserCustomAttrSubResp>,
    /// 企业邮箱，请先确保已在管理后台启用飞书邮箱服务
    ///
    /// 创建用户时，企业邮箱的使用方式参见[用户接口相关问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN#77061525)
    ///
    /// **示例值**: "demo@mail.com"
    #[serde(
        rename = "enterprise_email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enterprise_email: String,
    /// 职务
    ///
    /// **示例值**: "xxxxx"
    #[serde(
        rename = "job_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_title: String,
    /// 职级ID
    ///
    /// **示例值**: "mga5oa8ayjlp9rb"
    #[serde(
        rename = "job_level_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_level_id: String,
    /// 序列ID
    ///
    /// **示例值**: "mga5oa8ayjlp9rb"
    #[serde(
        rename = "job_family_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_family_id: String,
    /// 用户席位列表
    #[serde(
        rename = "assign_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub assign_info: Vec<UserAssignInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AvatarInfoSubResp {
    /// 72*72像素头像链接
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_72",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_72: String,
    /// 240*240像素头像链接
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_240",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_240: String,
    /// 640*640像素头像链接
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_640",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_640: String,
    /// 原始头像链接
    ///
    /// **示例值**: "https://foo.icon.com/xxxx"
    #[serde(
        rename = "avatar_origin",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_origin: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserStatusSubResp {
    /// 是否暂停
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_frozen",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_frozen: bool,
    /// 是否离职
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_resigned",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_resigned: bool,
    /// 是否激活
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_activated",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_activated: bool,
    /// 是否主动退出，主动退出一段时间后用户会自动转为已离职
    #[serde(
        rename = "is_exited",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_exited: bool,
    /// 是否未加入，需要用户自主确认才能加入团队
    #[serde(
        rename = "is_unjoin",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_unjoin: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserOrderSubResp {
    /// 排序信息对应的部门ID， ID值与查询参数中的department_id_type 对应。
    ///
    /// 表示用户所在的、且需要排序的部门。
    ///
    /// 不同 ID 的说明参见及获取方式参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
    ///
    /// **示例值**: "od-4e6ac4d14bcd5071a37a39de902c7141"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 用户在其直属部门内的排序，数值越大，排序越靠前
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "user_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_order: i64,
    /// 用户所属的多个部门间的排序，数值越大，排序越靠前
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "department_order",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_order: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserCustomAttrSubResp {
    /// 自定义字段类型
    ///
    /// - `TEXT`：文本
    ///
    /// - `HREF`：网页
    ///
    /// - `ENUMERATION`：枚举
    ///
    /// - `PICTURE_ENUM`：图片
    ///
    /// - `GENERIC_USER`：用户
    ///
    /// 具体说明参见常见问题的[用户接口相关问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN#77061525)
    ///
    /// **示例值**: "TEXT"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 自定义字段ID
    ///
    /// **示例值**: "DemoId"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 自定义字段取值
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: UserCustomAttrValueSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserAssignInfoSubResp {
    /// 席位id
    ///
    /// **示例值**: "7079609167680782300"
    #[serde(
        rename = "subscription_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub subscription_id: String,
    /// license_plan_key
    ///
    /// **示例值**: "suite_enterprise_e5"
    #[serde(
        rename = "license_plan_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub license_plan_key: String,
    /// 席位名称
    ///
    /// **示例值**: "旗舰版 E5"
    #[serde(
        rename = "product_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub product_name: String,
    /// 国际化名称
    #[serde(
        rename = "i18n_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_name: ProductI18nNameSubResp,
    /// 席位起始时间
    ///
    /// **示例值**: "1674981000"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 席位结束时间
    ///
    /// **示例值**: "1674991000"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserCustomAttrValueSubResp {
    /// 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
    ///
    /// **示例值**: "DemoText"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
    /// 字段类型为 HREF 时，该参数定义默认 URL，例如手机端跳转小程序，PC端跳转网页
    ///
    /// **示例值**: "http://www.fs.cn"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 字段类型为 HREF 时，该参数定义PC端 URL
    ///
    /// **示例值**: "http://www.fs.cn"
    #[serde(
        rename = "pc_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pc_url: String,
    /// 选项类型的值。
    ///
    /// 表示 成员详情/自定义字段 中选项选中的值
    ///
    /// **示例值**: "option"
    #[serde(
        rename = "option_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_value: String,
    /// 选项类型为图片时，表示图片的名称
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 图片链接
    ///
    /// **示例值**: "https://xxxxxxxxxxxxxxxxxx"
    #[serde(
        rename = "picture_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub picture_url: String,
    /// 字段类型为 GENERIC_USER 时，该参数定义引用人员
    #[serde(
        rename = "generic_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub generic_user: CustomAttrGenericUserSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ProductI18nNameSubResp {
    /// 席位中文名
    ///
    /// **示例值**: "zh_cn_name"
    #[serde(
        rename = "zh_cn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 席位日文名
    ///
    /// **示例值**: "ja_jp_name"
    #[serde(
        rename = "ja_jp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja_jp: String,
    /// 席位英文名
    ///
    /// **示例值**: "en_name"
    #[serde(
        rename = "en_us",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomAttrGenericUserSubResp {
    /// 用户的user_id ，具体参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9b2fabg5"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户类型:
    ///
    /// 1：用户
    ///
    /// 目前固定为1，表示用户类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetUserListOldReq) -> Result<(GetUserListOldResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetUserListOldReq) -> Result<(GetUserListOldResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_user_list_old<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetUserListOldReq, GetUserListOldResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_user_list_old(
            &self,
            req: &GetUserListOldReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetUserListOldReq, GetUserListOldResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::get_user_list_old::{
            GetUserListOldReq, GetUserListOldResp, GetUserListOldRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_get_user_list_old(|_| {
                Ok((GetUserListOldResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .contact()
            .get_user_list_old(GetUserListOldReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .get_user_list_old(GetUserListOldReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = "{}";
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetUserListOldRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
