//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/simplelist>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:10:21+00:00**
    ///
    /// ## 查询用户组成员列表
    ///
    /// 调用该接口查询指定用户组内的成员列表，列表内主要包括成员 ID 信息。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/simplelist>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/contact-v3/group-member/simplelist>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fgroup-member%2Fsimplelist>
    pub async fn get_contact_group_member(
        &self,
        req: GetContactGroupMemberReq,
    ) -> Result<(GetContactGroupMemberResp, CommonResponse), Error> {
        self.get_contact_group_member_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_contact_group_member](#method.get_contact_group_member) 函数
    pub async fn get_contact_group_member_with_opt(
        &self,
        req: GetContactGroupMemberReq,
        method_option: MethodOption,
    ) -> Result<(GetContactGroupMemberResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_contact_group_member(&req) {
                tracing::info!("[lark] Contact#GetContactGroupMember **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#GetContactGroupMember call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "GetContactGroupMember",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/group/:group_id/member/simplelist",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetContactGroupMemberRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetContactGroupMemberReq {
    /// 用户组 ID。
    ///
    /// 用户组 ID 可在创建用户组时从返回值中获取，你也可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口，获取用户组的 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "g128187"
    #[api(kind = "path", name = "group_id")]
    pub group_id: String,
    /// 分页大小，用于限制一次请求返回的最大条目数。
    ///
    /// **示例值**: "50"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 用户组成员 ID 类型。
    ///
    /// - 当 `member_type` 取值为 `user`时，该参数表示用户 ID 类型，包括 open_id、union_id、user_id。
    ///
    /// - 当 `member_type` 取值为 `department`时，该参数表示部门 ID 类型，包括 department_id、open_department_id。
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 当 `member_type` 取值为 `user`时，表示用户的 open_id。
    ///
    /// 当 `member_type` 取值为 `department`时，表示部门的 open_department_id。
    ///
    /// `union_id`: 当 `member_type` 取值为 `user`时，表示用户的 union_id。
    ///
    /// `user_id`: 当 `member_type` 取值为 `user`时，表示用户的 user_id。
    ///
    /// `department_id`: 当 `member_type` 取值为 `department`时，表示部门的 department_id。
    #[api(
        kind = "query",
        name = "member_id_type",
        v_type = "var",
        option = "false"
    )]
    pub member_id_type: String,
    /// 用户组成员类型。
    ///
    /// **示例值**: "user"
    ///
    /// **可选值**:
    ///
    /// `user`: 用户，表示仅查询用户组内的用户类型成员。
    ///
    /// `department`: 部门，表示仅查询用户组内的部门类型成员。
    #[api(kind = "query", name = "member_type", v_type = "var", option = "false")]
    pub member_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetContactGroupMemberRespInner {
    #[serde(flatten)]
    data: Option<GetContactGroupMemberResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetContactGroupMemberResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 成员列表。
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "memberlist",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub memberlist: Vec<MemberlistSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "TDRRV9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiJDGexPw="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MemberlistSubResp {
    /// 成员 ID。ID 类型与请求时设置的 member_id_type 取值保持一致。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "u287xj12"
    #[serde(
        rename = "member_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_id: String,
    /// 用户组成员的类型。
    ///
    /// **可能值有：**
    ///
    /// - user：用户类型
    ///
    /// - department：部门类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "user"
    #[serde(
        rename = "member_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_type: String,
    /// 成员 ID 类型。该参数仅在请求参数中有效，作为响应体参数时不会返回。
    ///
    /// **示例值**: "user_id"
    #[serde(
        rename = "member_id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_id_type: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetContactGroupMemberReq) -> Result<(GetContactGroupMemberResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetContactGroupMemberReq,
                ) -> Result<(GetContactGroupMemberResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_contact_group_member<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetContactGroupMemberReq,
            GetContactGroupMemberResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_contact_group_member(
            &self,
            req: &GetContactGroupMemberReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetContactGroupMemberReq, GetContactGroupMemberResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::get_contact_group_member::{
            GetContactGroupMemberReq, GetContactGroupMemberResp, GetContactGroupMemberRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_get_contact_group_member(|_| {
                Ok((
                    GetContactGroupMemberResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .contact()
            .get_contact_group_member(GetContactGroupMemberReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .get_contact_group_member(GetContactGroupMemberReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "memberlist": [
            {
                "member_id": "u287xj12",
                "member_type": "user",
                "member_id_type": "user_id"
            }
        ],
        "page_token": "TDRRV9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiJDGexPw=",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetContactGroupMemberRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
