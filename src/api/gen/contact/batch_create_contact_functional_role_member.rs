//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role-member/batch_create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:17:39+00:00**
    ///
    /// ## 批量添加角色成员
    ///
    /// 调用该接口在指定角色内添加一个或多个成员。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role-member/batch_create>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/contact-v3/functional_role-member/batch_create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Ffunctional_role-member%2Fbatch_create>
    pub async fn batch_create_contact_functional_role_member(
        &self,
        req: BatchCreateContactFunctionalRoleMemberReq,
    ) -> Result<(BatchCreateContactFunctionalRoleMemberResp, CommonResponse), Error> {
        self.batch_create_contact_functional_role_member_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_create_contact_functional_role_member](#method.batch_create_contact_functional_role_member) 函数
    pub async fn batch_create_contact_functional_role_member_with_opt(
        &self,
        req: BatchCreateContactFunctionalRoleMemberReq,
        method_option: MethodOption,
    ) -> Result<(BatchCreateContactFunctionalRoleMemberResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_batch_create_contact_functional_role_member(&req)
            {
                tracing::info!(
                    "[lark] Contact#BatchCreateContactFunctionalRoleMember **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#BatchCreateContactFunctionalRoleMember call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "BatchCreateContactFunctionalRoleMember",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/functional_roles/:role_id/members/batch_create",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchCreateContactFunctionalRoleMemberRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchCreateContactFunctionalRoleMemberReq {
    /// 角色 ID。获取方式：
    ///
    /// - 在[创建角色](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create)时，可从返回结果中获取。
    ///
    /// - 企业管理员可以在 [管理后台](https://feishu.cn/admin) > **组织架构** > **角色管理** 页面，在角色名称右侧获取角色 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7vrj3vk70xk7v5r"
    #[api(kind = "path", name = "role_id")]
    pub role_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 待添加为角色成员的用户 ID 列表，以 `["xxx", "yyy"]` 数组格式进行传值。ID 类型需要和查询参数 user_id_type 的取值保持一致。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "["qwer","qweq"]"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `100` 字符
    #[api(kind = "body", name = "members")]
    pub members: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchCreateContactFunctionalRoleMemberRespInner {
    #[serde(flatten)]
    data: Option<BatchCreateContactFunctionalRoleMemberResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchCreateContactFunctionalRoleMemberResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 添加结果。
    #[serde(
        rename = "results",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub results: Vec<FunctionalRoleMemberResultSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FunctionalRoleMemberResultSubResp {
    /// 用户 ID，ID 类型需要和查询参数 user_id_type 的取值保持一致。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "od-4e6ac4d14bcd5071a37a39de902c7141"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 添加成员的处理结果。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Success`: 处理成功
    ///
    /// `UserIDInvalid`: 用户 ID 无效
    ///
    /// `UserIDHasNoPerm`: 无权限操作该用户 ID
    ///
    /// `UserIsExistedInRole`: 用户已存在该角色中
    ///
    /// `UserIsNotExistedInRole`: 用户不存在该角色中
    ///
    /// `NotHasUserOldScopePerm`: 无权限操作该角色成员旧的管理范围
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            BatchCreateContactFunctionalRoleMemberReq,
        ) -> Result<(BatchCreateContactFunctionalRoleMemberResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    BatchCreateContactFunctionalRoleMemberReq,
                )
                    -> Result<(BatchCreateContactFunctionalRoleMemberResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_create_contact_functional_role_member<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            BatchCreateContactFunctionalRoleMemberReq,
            BatchCreateContactFunctionalRoleMemberResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_create_contact_functional_role_member(
            &self,
            req: &BatchCreateContactFunctionalRoleMemberReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                BatchCreateContactFunctionalRoleMemberReq,
                BatchCreateContactFunctionalRoleMemberResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::batch_create_contact_functional_role_member::{
            BatchCreateContactFunctionalRoleMemberReq, BatchCreateContactFunctionalRoleMemberResp,
            BatchCreateContactFunctionalRoleMemberRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_batch_create_contact_functional_role_member(|_| {
                Ok((
                    BatchCreateContactFunctionalRoleMemberResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .contact()
            .batch_create_contact_functional_role_member(
                BatchCreateContactFunctionalRoleMemberReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .batch_create_contact_functional_role_member(
                BatchCreateContactFunctionalRoleMemberReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "members": [
        "ou-12832197382"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::BatchCreateContactFunctionalRoleMemberReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "results": [
            {
                "user_id": "od-4e6ac4d14bcd5071a37a39de902c7141",
                "reason": 1
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchCreateContactFunctionalRoleMemberRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
