//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:39:31+00:00**
    ///
    /// ## 获取企业自定义用户字段
    ///
    /// 调用该接口查询当前企业内自定义用户字段的配置信息。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/contact-v3/custom_attr/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fcustom_attr%2Flist>
    pub async fn get_contact_custom_attr_list(
        &self,
        req: GetContactCustomAttrListReq,
    ) -> Result<(GetContactCustomAttrListResp, CommonResponse), Error> {
        self.get_contact_custom_attr_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_contact_custom_attr_list](#method.get_contact_custom_attr_list) 函数
    pub async fn get_contact_custom_attr_list_with_opt(
        &self,
        req: GetContactCustomAttrListReq,
        method_option: MethodOption,
    ) -> Result<(GetContactCustomAttrListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_contact_custom_attr_list(&req) {
                tracing::info!("[lark] Contact#GetContactCustomAttrList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#GetContactCustomAttrList call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "GetContactCustomAttrList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/custom_attrs",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetContactCustomAttrListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetContactCustomAttrListReq {
    /// 分页大小，用于限制一次请求所返回的数据条目数。
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "AQD9/Rn9eij9Pm39ED40/RYU5lvOM4s6zgbeeNNaWd%2BVKwAsoreeRWk0J2noGvJy"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetContactCustomAttrListRespInner {
    #[serde(flatten)]
    data: Option<GetContactCustomAttrListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetContactCustomAttrListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 自定义字段信息集合。
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<CustomAttrSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "AQD9/Rn9eij9Pm39ED40/RYU5lvOM4s6zgbeeNNaWd%2BVKwAsoreeRWk0J2noGvJy"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomAttrSubResp {
    /// 自定义字段 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "C-6965457429001748507"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 自定义字段类型。
    ///
    /// **可能值有：**
    ///
    /// - `TEXT`：文本类型
    ///
    /// - `HREF`：网页类型
    ///
    /// - `ENUMERATION`：枚举类型
    ///
    /// - `GENERIC_USER`：用户类型
    ///
    /// - `PICTURE_ENUM`：图片类型
    ///
    /// 关于自定义字段类型的更多信息，可参见[自定义用户字段资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/overview)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "TEXT"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 选项定义，当 type 为 `ENUMERATION` 或者 `PICTURE_ENUM` 时此项有值，将列举所有可选项。
    ///
    /// **示例值**: "{}"
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: CustomAttrOptionsSubResp,
    /// 自定义字段的字段名称。
    ///
    /// **示例值**: "{}"
    #[serde(
        rename = "i18n_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_name: Vec<I18nContentSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomAttrOptionsSubResp {
    /// 默认选项 ID。
    ///
    /// **示例值**: "qasdefgr"
    #[serde(
        rename = "default_option_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub default_option_id: String,
    /// 选项类型。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "TEXT"
    ///
    /// **可选值**:
    ///
    /// `TEXT`: 文本选项
    ///
    /// `PICTURE`: 图片选项
    #[serde(
        rename = "option_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub option_type: String,
    /// 选项列表。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "[]"
    #[serde(
        rename = "options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub options: Vec<CustomAttrOptionSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nContentSubResp {
    /// 语言版本。
    ///
    /// **可能值有：**
    ///
    /// - zh_cn：中文
    ///
    /// - en_us：英文
    ///
    /// - ja_jp：日文
    ///
    /// **示例值**: "zh_cn"
    #[serde(
        rename = "locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub locale: String,
    /// 语言版本对应的字段名称。
    ///
    /// **示例值**: "多语言内容"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomAttrOptionSubResp {
    /// 枚举类型选项 ID。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "qasdefgr"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 选项值。
    ///
    /// - 当 option_type 为 `TEXT` 时，取值为文本值。
    ///
    /// - 当 option_type 为 `PICTURE` 时，取值为图片链接。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "Option"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
    /// 图片名称，仅 option_type 为 PICTURE 时有效。
    ///
    /// **示例值**: "Name"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetContactCustomAttrListReq,
        ) -> Result<(GetContactCustomAttrListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetContactCustomAttrListReq,
                ) -> Result<(GetContactCustomAttrListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_contact_custom_attr_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetContactCustomAttrListReq,
            GetContactCustomAttrListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_contact_custom_attr_list(
            &self,
            req: &GetContactCustomAttrListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetContactCustomAttrListReq,
                GetContactCustomAttrListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::get_contact_custom_attr_list::{
            GetContactCustomAttrListReq, GetContactCustomAttrListResp,
            GetContactCustomAttrListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_get_contact_custom_attr_list(|_| {
                Ok((
                    GetContactCustomAttrListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .contact()
            .get_contact_custom_attr_list(GetContactCustomAttrListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .get_contact_custom_attr_list(GetContactCustomAttrListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "id": "C-6965457429001748507",
                "type": "TEXT",
                "options": {
                    "default_option_id": "qasdefgr",
                    "option_type": "TEXT",
                    "options": [
                        {
                            "id": "qasdefgr",
                            "value": "Option",
                            "name": "Name"
                        }
                    ]
                },
                "i18n_name": [
                    {
                        "locale": "zh_cn",
                        "value": "多语言内容"
                    }
                ]
            }
        ],
        "page_token": "AQD9/Rn9eij9Pm39ED40/RYU5lvOM4s6zgbeeNNaWd%2BVKwAsoreeRWk0J2noGvJy",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetContactCustomAttrListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
