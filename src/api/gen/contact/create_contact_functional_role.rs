//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:17:07+00:00**
    ///
    /// ## 创建角色
    ///
    /// 调用该接口创建一个角色。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/functional_role/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/contact-v3/functional_role/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Ffunctional_role%2Fcreate>
    pub async fn create_contact_functional_role(
        &self,
        req: CreateContactFunctionalRoleReq,
    ) -> Result<(CreateContactFunctionalRoleResp, CommonResponse), Error> {
        self.create_contact_functional_role_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_contact_functional_role](#method.create_contact_functional_role) 函数
    pub async fn create_contact_functional_role_with_opt(
        &self,
        req: CreateContactFunctionalRoleReq,
        method_option: MethodOption,
    ) -> Result<(CreateContactFunctionalRoleResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_contact_functional_role(&req) {
                tracing::info!("[lark] Contact#CreateContactFunctionalRole **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#CreateContactFunctionalRole call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "CreateContactFunctionalRole",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/functional_roles",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateContactFunctionalRoleRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateContactFunctionalRoleReq {
    /// 角色名称。在同一租户下角色名称唯一，不能重复创建。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "考勤管理员"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `50` 字符
    #[api(kind = "body", name = "role_name")]
    pub role_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateContactFunctionalRoleRespInner {
    #[serde(flatten)]
    data: Option<CreateContactFunctionalRoleResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateContactFunctionalRoleResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 角色 ID，是角色在当前租户下的唯一标识。
    ///
    /// **注意**：建议你在本地保存该 ID，后续可通过该 ID 删除、修改角色。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7vrj3vk70xk7v5r"
    #[serde(
        rename = "role_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub role_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateContactFunctionalRoleReq,
        ) -> Result<(CreateContactFunctionalRoleResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateContactFunctionalRoleReq,
                )
                    -> Result<(CreateContactFunctionalRoleResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_contact_functional_role<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateContactFunctionalRoleReq,
            CreateContactFunctionalRoleResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_contact_functional_role(
            &self,
            req: &CreateContactFunctionalRoleReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateContactFunctionalRoleReq,
                CreateContactFunctionalRoleResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::create_contact_functional_role::{
            CreateContactFunctionalRoleReq, CreateContactFunctionalRoleResp,
            CreateContactFunctionalRoleRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_create_contact_functional_role(|_| {
                Ok((
                    CreateContactFunctionalRoleResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .contact()
            .create_contact_functional_role(CreateContactFunctionalRoleReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .create_contact_functional_role(CreateContactFunctionalRoleReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "role_name": "考勤管理员"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateContactFunctionalRoleReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "role_id": "7vrj3vk70xk7v5r"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateContactFunctionalRoleRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
