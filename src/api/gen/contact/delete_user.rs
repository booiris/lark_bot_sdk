//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/delete>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:05:05+00:00**
    ///
    /// ## 删除用户
    ///
    /// 调用该接口从通讯录内删除一个指定用户（该动作可以理解为员工离职），删除时可通过请求参数将用户所有的群组、文档、日程和应用等数据转让至他人。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/delete>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/contact-v3/user/delete>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fuser%2Fdelete>
    pub async fn delete_user(
        &self,
        req: DeleteUserReq,
    ) -> Result<(DeleteUserResp, CommonResponse), Error> {
        self.delete_user_with_opt(req, Default::default()).await
    }

    /// 参见 [delete_user](#method.delete_user) 函数
    pub async fn delete_user_with_opt(
        &self,
        req: DeleteUserReq,
        method_option: MethodOption,
    ) -> Result<(DeleteUserResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_delete_user(&req) {
                tracing::info!("[lark] Contact#DeleteUser **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#DeleteUser call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "DeleteUser",
            method: http::Method::DELETE,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/users/:user_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (DeleteUserRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DeleteUserReq {
    /// 用户 ID。ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "path", name = "user_id")]
    pub user_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 部门群接收者的用户 ID。被删除用户为部门群群主时，转让群主给指定接收者。
    ///
    /// **注意**：
    ///
    /// - ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// - 不指定该参数时，如果被删除用户是部门群群主，则群主会默认转让给群内第一个入群的人。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "department_chat_acceptor_user_id")]
    pub department_chat_acceptor_user_id: Option<String>,
    /// 外部群接收者的用户 ID。被删除用户为外部群群主时，转让群主给指定接收者。
    ///
    /// **注意**：
    ///
    /// - ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// - 不指定该参数时，如果被删除用户是外部群群主，则群主会默认转让给群内与被删除用户在同一组织的第一个入群的人。如果组织内只有被删除用户在群里，则解散外部群。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "external_chat_acceptor_user_id")]
    pub external_chat_acceptor_user_id: Option<String>,
    /// 文档接收者的用户 ID。用户被删除时，其拥有的文档转让给接收者。
    ///
    /// **注意**：
    ///
    /// - ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// - 不指定接收者则默认转让给被删除用户的直属上级。如果被删除用户无直属上级，则将文档资源保留在该用户名下。
    ///
    /// - 文档转让后，只改变文档所有者，其他权限不受影响。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "docs_acceptor_user_id")]
    pub docs_acceptor_user_id: Option<String>,
    /// 日程接收者的用户 ID。用户被删除时，其拥有的日程转让给接收者。
    ///
    /// **注意**：
    ///
    /// - ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// - 不指定接收者则默认转让给被删除用户的直属上级。如果被删除用户无直属上级，则直接删除日程资源。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "calendar_acceptor_user_id")]
    pub calendar_acceptor_user_id: Option<String>,
    /// 应用接受者的用户 ID。用户被删除时，其创建的应用转让给接收者。
    ///
    /// **注意**：
    ///
    /// - ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// - 不指定接收者则默认转让给被删除用户的直属上级。如果被删除用户无直属上级，则保留应用在该用户名下，但该用户无法登录开发者后台进行应用管理。企业管理员可以在管理后台手动转移应用给其他人。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "application_acceptor_user_id")]
    pub application_acceptor_user_id: Option<String>,
    /// 妙记接收者的用户 ID。用户被删除时，其拥有的妙记资源转让给接收者。
    ///
    /// **注意**：
    ///
    /// - ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// - 如果不指定接收者，则默认转让给被删除用户的直属上级。如果被删除用户无直属上级，则将妙记保留在该用户名下。
    ///
    /// - 妙记转让后，只改变妙记所有者，不影响已分享的妙记链接。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "minutes_acceptor_user_id")]
    pub minutes_acceptor_user_id: Option<String>,
    /// 飞书问卷接收者的用户 ID。用户被删除时，其拥有的飞书问卷资源转让给接收者。
    ///
    /// **注意**：
    ///
    /// - ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// - 不指定接收者则默认转让给被删除用户的直属上级。如果被删除用户无直属上级，则直接删除飞书问卷资源。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[api(kind = "body", name = "survey_acceptor_user_id")]
    pub survey_acceptor_user_id: Option<String>,
    /// 用户邮件资源的处理方式。
    ///
    /// 该参数为可选参数，如果未传值，则默认将邮件资源转让给被删除用户的直属上级。如果被删除用户无直属上级，则保留邮件资源在该用户名下。
    #[api(kind = "body", name = "email_acceptor")]
    pub email_acceptor: Option<ResourceAcceptorSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResourceAcceptorSubReq {
    /// 处理方式。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Transfer`: 转移资源
    ///
    /// `Retain`: 保留资源
    ///
    /// `Delete`: 删除资源
    #[serde(
        rename = "processing_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub processing_type: String,
    /// 邮件资源接收者的用户 ID。ID 类型需要与查询参数中的 user_id_type 类型保持一致。用户 ID 获取方式可参见[如何获取不同的用户 ID](https://open.feishu.cn/document/home/user-identity-introduction/open-id)。
    ///
    /// **说明**：仅当 `processing_type` 取值为 `1` 时，需要设置该参数值。
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[serde(
        rename = "acceptor_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub acceptor_user_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct DeleteUserRespInner {
    #[serde(flatten)]
    data: Option<DeleteUserResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct DeleteUserResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(DeleteUserReq) -> Result<(DeleteUserResp, CommonResponse), Error> + Send + Sync + 'static
    {
    }
    impl<
            T: Fn(DeleteUserReq) -> Result<(DeleteUserResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_delete_user<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, DeleteUserReq, DeleteUserResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_delete_user(
            &self,
            req: &DeleteUserReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, DeleteUserReq, DeleteUserResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::delete_user::{DeleteUserReq, DeleteUserResp, DeleteUserRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_delete_user(|_| Ok((DeleteUserResp::default(), CommonResponse::default())))
            .build();
        let res = lark.contact().delete_user(DeleteUserReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.contact().delete_user(DeleteUserReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "department_chat_acceptor_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
    "external_chat_acceptor_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
    "docs_acceptor_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
    "calendar_acceptor_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
    "application_acceptor_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
    "helpdesk_acceptor_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
	"email_acceptor": {
		"processing_type": "1",
		"acceptor_user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62"
	}
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::DeleteUserReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<DeleteUserRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
