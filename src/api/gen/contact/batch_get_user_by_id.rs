//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::contact::ContactService;

impl<'c, IStore: Store, IClient: HttpClient> ContactService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-05T08:05:18+00:00**
    ///
    /// ## 通过手机号或邮箱获取用户 ID
    ///
    /// 调用该接口通过手机号或邮箱获取一个或多个用户的 ID （包括 user_id、open_id、union_id）与状态信息。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/contact-v3/user/batch_get_id>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fcontact-v3%2Fuser%2Fbatch_get_id>
    pub async fn batch_get_user_by_id(
        &self,
        req: BatchGetUserByIdReq,
    ) -> Result<(BatchGetUserByIdResp, CommonResponse), Error> {
        self.batch_get_user_by_id_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_get_user_by_id](#method.batch_get_user_by_id) 函数
    pub async fn batch_get_user_by_id_with_opt(
        &self,
        req: BatchGetUserByIdReq,
        method_option: MethodOption,
    ) -> Result<(BatchGetUserByIdResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_batch_get_user_by_id(&req) {
                tracing::info!("[lark] Contact#BatchGetUserById **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Contact#BatchGetUserById call api");

        let req = ApiRequest {
            scope: "Contact",
            api: "BatchGetUserById",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/contact/v3/users/batch_get_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchGetUserByIdRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchGetUserByIdReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "user_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 要查询的用户邮箱，最多可传入 50 条。
    ///
    /// **注意**：
    ///
    /// - 不支持企业邮箱。
    ///
    /// - emails 与 mobiles 两个参数相互独立，即每个用户邮箱会返回对应的用户信息，每个手机号也会返回对应的用户信息。
    ///
    /// - 本接口返回的用户 ID 数量为 emails 数量与 mobiles 数量之和。
    ///
    /// **默认值**：空
    ///
    /// **示例值**: "sync@a.com"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `50` 字符
    #[api(kind = "body", name = "emails")]
    pub emails: Vec<Option<String>>,
    /// 要查询的用户手机号，最多可传入 50 条。
    ///
    /// **注意**：
    ///
    /// - 非中国大陆地区的手机号需要添加以 “+” 开头的国家或地区代码。
    ///
    /// - emails 与 mobiles 两个参数相互独立，即每个用户邮箱会返回对应的用户信息，每个手机号也会返回对应的用户信息。
    ///
    /// - 本接口返回的用户 ID 数量为 emails 数量与 mobiles 数量之和。
    ///
    /// **默认值**：空
    ///
    /// **示例值**: "17839872039"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `50` 字符
    #[api(kind = "body", name = "mobiles")]
    pub mobiles: Vec<Option<String>>,
    /// 查询结果是否包含离职员工的用户信息。
    ///
    /// **可选值有**：
    ///
    /// - true：包含
    ///
    /// - false：不包含
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "include_resigned")]
    pub include_resigned: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchGetUserByIdRespInner {
    #[serde(flatten)]
    data: Option<BatchGetUserByIdResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchGetUserByIdResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 手机号或者邮箱对应的用户 ID 信息。
    #[serde(
        rename = "user_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_list: Vec<UserContactInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserContactInfoSubResp {
    /// 用户 ID，ID 类型与查询参数 user_id_type 的取值保持一致。
    ///
    /// 例如，user_id_type 取值为 open_id，则该参数的用户 ID 值为用户的 open_id。
    ///
    /// 不同用户 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)。
    ///
    /// **示例值**: "ou_979112345678741d29069abcdef089d4"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 手机号，通过手机号查询时会返回该值。
    ///
    /// **示例值**: "13011111111"
    #[serde(
        rename = "mobile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile: String,
    /// 邮箱，通过邮箱查询时会返回该值。
    ///
    /// **示例值**: "zhangsan@z.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 用户状态。通过 is_frozen、is_resigned、is_activated、is_exited 布尔值类型参数进行展示。
    ///
    /// 用户状态的转关逻辑可参见[用户资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/field-overview#4302b5a1)。
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: UserStatusSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserStatusSubResp {
    /// 是否为冻结状态。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_frozen",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_frozen: bool,
    /// 是否为离职状态。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_resigned",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_resigned: bool,
    /// 是否为激活状态。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_activated",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_activated: bool,
    /// 是否为主动退出状态。主动退出一段时间后用户状态会自动转为已离职。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_exited",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_exited: bool,
    /// 是否为未加入状态，需要用户自主确认才能加入企业或团队。
    ///
    /// **可能值有**：
    ///
    /// - true：是
    ///
    /// - false：否
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_unjoin",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_unjoin: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::contact::ContactServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(BatchGetUserByIdReq) -> Result<(BatchGetUserByIdResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(BatchGetUserByIdReq) -> Result<(BatchGetUserByIdResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ContactServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_get_user_by_id<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, BatchGetUserByIdReq, BatchGetUserByIdResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_get_user_by_id(
            &self,
            req: &BatchGetUserByIdReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, BatchGetUserByIdReq, BatchGetUserByIdResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::contact::batch_get_user_by_id::{
            BatchGetUserByIdReq, BatchGetUserByIdResp, BatchGetUserByIdRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .contact()
            .mock()
            .mock_batch_get_user_by_id(|_| {
                Ok((BatchGetUserByIdResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .contact()
            .batch_get_user_by_id(BatchGetUserByIdReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .contact()
            .batch_get_user_by_id(BatchGetUserByIdReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "emails": [
"zhangsan@z.com","lisi@a.com"
    ],
    "mobiles": [
"13011111111","13022222222"
    ],
"include_resigned":true
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::BatchGetUserByIdReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
	"code": 0,
	"msg": "success",
	"data": {
		"user_list": [{
				"user_id": "ou_979112345678741d29069abcdef01234",
				"email": "zhanxxxxx@a.com",
				"status": {
					"is_frozen": false,
					"is_resigned": false,
					"is_activated": true,
					"is_exited": false,
					"is_unjoin": false
				}
			}, {
				"user_id": "ou_919112245678741d29069abcdef02345",
				"email": "lisixxxx@a.com",
				"status": {
					"is_frozen": false,
					"is_resigned": false,
					"is_activated": true,
					"is_exited": false,
					"is_unjoin": false
				}
			},
			{
				"user_id": "ou_46a087654321a1dc920ffab8fedc3456",
				"mobile": "130xxxx1111",
				"status": {
					"is_frozen": false,
					"is_resigned": false,
					"is_activated": true,
					"is_exited": false,
					"is_unjoin": false
				}
			}, {
				"user_id": "ou_01b081675121a1dc920ffab97cdc4567",
				"mobile": "130xxxx2222",
				"status": {
					"is_frozen": false,
					"is_resigned": false,
					"is_activated": true,
					"is_exited": false,
					"is_unjoin": false
				}
			}
		]
	}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchGetUserByIdRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
