//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-08T06:09:56+00:00**
    ///
    /// ## 通知补卡审批发起
    ///
    /// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书考勤系统中，状态为审批中。写入后可以由[通知审批状态更新](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/approval_info/process) 进行状态更新
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/attendance-v1/user_task_remedy/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_task_remedy%2Fcreate>
    pub async fn create_attendance_user_task_remedy(
        &self,
        req: CreateAttendanceUserTaskRemedyReq,
    ) -> Result<(CreateAttendanceUserTaskRemedyResp, CommonResponse), Error> {
        self.create_attendance_user_task_remedy_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_attendance_user_task_remedy](#method.create_attendance_user_task_remedy) 函数
    pub async fn create_attendance_user_task_remedy_with_opt(
        &self,
        req: CreateAttendanceUserTaskRemedyReq,
        method_option: MethodOption,
    ) -> Result<(CreateAttendanceUserTaskRemedyResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_create_attendance_user_task_remedy(&req)
            {
                tracing::info!("[lark] Attendance#CreateAttendanceUserTaskRemedy **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#CreateAttendanceUserTaskRemedy call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "CreateAttendanceUserTaskRemedy",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_task_remedys",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateAttendanceUserTaskRemedyRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateAttendanceUserTaskRemedyReq {
    /// 请求体和响应体中的 user_id 的员工工号类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 用户 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[api(kind = "body", name = "user_id")]
    pub user_id: String,
    /// 补卡日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20210701"
    #[api(kind = "body", name = "remedy_date")]
    pub remedy_date: i64,
    /// 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    #[api(kind = "body", name = "punch_no")]
    pub punch_no: i64,
    /// 上班 / 下班，1：上班，2：下班，自由班制填 0
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "work_type")]
    pub work_type: i64,
    /// 补卡时间，时间格式为 yyyy-MM-dd HH:mm
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-07-01 08:00"
    #[api(kind = "body", name = "remedy_time")]
    pub remedy_time: String,
    /// 补卡原因
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "忘记打卡"
    #[api(kind = "body", name = "reason")]
    pub reason: String,
    /// 补卡时间，精确到秒的时间戳
    ///
    /// **示例值**: "1611476284"
    #[api(kind = "body", name = "time")]
    pub time: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateAttendanceUserTaskRemedyRespInner {
    #[serde(flatten)]
    data: Option<CreateAttendanceUserTaskRemedyResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateAttendanceUserTaskRemedyResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 补卡审批信息
    #[serde(
        rename = "user_remedy",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_remedy: UserTaskRemedySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserTaskRemedySubResp {
    /// 用户 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 补卡日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20210701"
    #[serde(
        rename = "remedy_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_date: i64,
    /// 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "punch_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_no: i64,
    /// 上班 / 下班，1：上班，2：下班，自由班制填 0
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "work_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_type: i64,
    /// 审批 ID
    ///
    /// **示例值**: "6737202939523236113"
    #[serde(
        rename = "approval_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_id: String,
    /// 补卡时间，时间格式为 yyyy-MM-dd HH:mm
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-07-01 08:00"
    #[serde(
        rename = "remedy_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_time: String,
    /// 补卡状态（默认为审批中）
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `Pending`: 审批中
    ///
    /// `Rejected`: 未通过
    ///
    /// `Pass`: 已通过
    ///
    /// `Cancel`: 已取消
    ///
    /// `Withdraw`: 通过后撤回
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: i64,
    /// 补卡原因
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "忘记打卡"
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: String,
    /// 补卡时间，精确到秒的时间戳
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 补卡时考勤组时区
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "time_zone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_zone: String,
    /// 补卡发起时间，精确到秒的时间戳
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 补卡状态更新时间，精确到秒的时间戳
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CreateAttendanceUserTaskRemedyReq,
        ) -> Result<(CreateAttendanceUserTaskRemedyResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateAttendanceUserTaskRemedyReq,
                )
                    -> Result<(CreateAttendanceUserTaskRemedyResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_attendance_user_task_remedy<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateAttendanceUserTaskRemedyReq,
            CreateAttendanceUserTaskRemedyResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_attendance_user_task_remedy(
            &self,
            req: &CreateAttendanceUserTaskRemedyReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CreateAttendanceUserTaskRemedyReq,
                CreateAttendanceUserTaskRemedyResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::create_attendance_user_task_remedy::{
            CreateAttendanceUserTaskRemedyReq, CreateAttendanceUserTaskRemedyResp,
            CreateAttendanceUserTaskRemedyRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_create_attendance_user_task_remedy(|_| {
                Ok((
                    CreateAttendanceUserTaskRemedyResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .create_attendance_user_task_remedy(CreateAttendanceUserTaskRemedyReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .create_attendance_user_task_remedy(CreateAttendanceUserTaskRemedyReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "user_id": "abd754f7",
    "remedy_date": 20210701,
    "punch_no": 0,
    "work_type": 1,
    "remedy_time": "2021-07-01 08:00",
    "reason": "忘记打卡",
    "time": "1611476284"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateAttendanceUserTaskRemedyReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "user_remedy": {
            "user_id": "abd754f7",
            "remedy_date": 20210701,
            "punch_no": 0,
            "work_type": 1,
            "approval_id": "6737202939523236113",
            "remedy_time": "2021-07-01 08:00",
            "status": 2,
            "reason": "忘记打卡",
            "time": "1611476284",
            "time_zone": "Asia/Shanghai",
            "create_time": "1611476284",
            "update_time": "1611476284"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateAttendanceUserTaskRemedyRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
