//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T09:26:22+00:00**
    ///
    /// ## 获取审批通过数据
    ///
    /// 获取员工在某段时间内的请假、加班、外出和出差四种审批的通过数据。
    ///
    /// 请假的假期时长字段，暂未开放提供，待后续提供。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/query>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/user_approval/query>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_approval%2Fquery>
    pub async fn get_attendance_user_approval(
        &self,
        req: GetAttendanceUserApprovalReq,
    ) -> Result<(GetAttendanceUserApprovalResp, CommonResponse), Error> {
        self.get_attendance_user_approval_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_attendance_user_approval](#method.get_attendance_user_approval) 函数
    pub async fn get_attendance_user_approval_with_opt(
        &self,
        req: GetAttendanceUserApprovalReq,
        method_option: MethodOption,
    ) -> Result<(GetAttendanceUserApprovalResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_attendance_user_approval(&req) {
                tracing::info!("[lark] Attendance#GetAttendanceUserApproval **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#GetAttendanceUserApproval call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "GetAttendanceUserApproval",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_approvals/query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAttendanceUserApprovalRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAttendanceUserApprovalReq {
    /// 请求体中的 user_ids 和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/index) > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即[飞书管理后台](https://example.feishu.cn/admin/index) > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// employee_no 或 employee_id 列表。传入的ID类型需要与employee_type的取值一致
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "["abd754f7"]"
    #[api(kind = "body", name = "user_ids")]
    pub user_ids: Vec<Option<String>>,
    /// 查询的起始日期。格式yyyyMMdd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20190817"
    #[api(kind = "body", name = "check_date_from")]
    pub check_date_from: i64,
    /// 查询的结束日期，与 check_date_from 的时间间隔不超过 30 天。格式yyyyMMdd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20190820"
    #[api(kind = "body", name = "check_date_to")]
    pub check_date_to: i64,
    /// 查询依据的时间类型（不填默认依据PeriodTime）
    ///
    /// **示例值**: "PeriodTime"
    ///
    /// **可选值**:
    ///
    /// `PeriodTime`: 单据作用时间
    ///
    /// `CreateTime`: 单据创建时间
    ///
    /// `UpdateTime`: 单据状态更新时间（灰度中，暂不开放）
    #[api(kind = "body", name = "check_date_type")]
    pub check_date_type: Option<String>,
    /// 查询状态（不填默认查询已通过状态）
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `Todo`: 待审批
    ///
    /// `Rejected`: 未通过
    ///
    /// `Approved`: 已通过
    ///
    /// `Canceled`: 已取消
    ///
    /// `Reverted`: 已撤回
    #[api(kind = "body", name = "status")]
    pub status: Option<i64>,
    /// 查询的起始时间，精确到秒的时间戳（灰度中，暂不开放）
    ///
    /// **示例值**: "1566641088"
    #[api(kind = "body", name = "check_time_from")]
    pub check_time_from: Option<String>,
    /// 查询的结束时间，精确到秒的时间戳（灰度中，暂不开放）
    ///
    /// **示例值**: "1592561088"
    #[api(kind = "body", name = "check_time_to")]
    pub check_time_to: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAttendanceUserApprovalRespInner {
    #[serde(flatten)]
    data: Option<GetAttendanceUserApprovalResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAttendanceUserApprovalResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 审批结果列表
    #[serde(
        rename = "user_approvals",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_approvals: Vec<UserApprovalSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserApprovalSubResp {
    /// 审批用户 ID，类型与employee_type的取值一致
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 审批作用日期，格式yyyyMMdd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20210104"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: String,
    /// 外出信息
    #[serde(
        rename = "outs",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub outs: Vec<UserOutSubResp>,
    /// 请假信息
    #[serde(
        rename = "leaves",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leaves: Vec<UserLeaveSubResp>,
    /// 加班信息
    #[serde(
        rename = "overtime_works",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overtime_works: Vec<UserOvertimeWorkSubResp>,
    /// 出差信息
    #[serde(
        rename = "trips",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub trips: Vec<UserTripSubResp>,
    /// 计算时间所用的时区信息，为空是0时区
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "time_zone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_zone: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserOutSubResp {
    /// 审批实例 ID
    ///
    /// **示例值**: "6737202939523236113"
    #[serde(
        rename = "approval_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_id: String,
    /// 外出类型唯一 ID，代表一种假期类型，长度小于 14
    ///
    /// * 此ID对应外出类型(即: i18n_names)，因此需要保证唯一
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9496E43696967658A512969523E89870"
    #[serde(
        rename = "uniq_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub uniq_id: String,
    /// 外出时长单位
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Day`: 天
    ///
    /// `Hour`: 小时
    ///
    /// `HalfDay`: 半天
    ///
    /// `HalfHour`: 半小时
    #[serde(
        rename = "unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub unit: i64,
    /// 外出时长
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "8"
    #[serde(
        rename = "interval",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub interval: i64,
    /// 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 09:00:00"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 19:00:00"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 外出多语言展示，格式为 map，key 为 ["ch"、"en"、"ja"]，其中 ch 代表中文、en 代表英语、ja 代表日语
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "i18n_names",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_names: I18nNamesSubResp,
    /// 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应的语言，会使用默认语言的名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ch"
    #[serde(
        rename = "default_locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub default_locale: String,
    /// 外出理由
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "外出办事"
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: String,
    /// 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
    ///
    /// **示例值**: "2021-01-04 12:00:00"
    #[serde(
        rename = "approve_pass_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approve_pass_time: String,
    /// 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
    ///
    /// **示例值**: "2021-01-04 11:00:00"
    #[serde(
        rename = "approve_apply_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approve_apply_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserLeaveSubResp {
    /// 审批实例 ID
    ///
    /// **示例值**: "6737202939523236113"
    #[serde(
        rename = "approval_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_id: String,
    /// 假期类型唯一 ID，代表一种假期类型，长度小于 14
    ///
    /// * 此ID对应假期类型(即: i18n_names)，因此需要保证唯一
    ///
    /// **示例值**: "6852582717813440527"
    #[serde(
        rename = "uniq_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub uniq_id: String,
    /// 假期时长单位
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Day`: 天
    ///
    /// `Hour`: 小时
    ///
    /// `HalfDay`: 半天
    ///
    /// `HalfHour`: 半小时
    #[serde(
        rename = "unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub unit: i64,
    /// 假期时长
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "8"
    #[serde(
        rename = "interval",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub interval: i64,
    /// 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 09:00:00"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 19:00:00"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 假期多语言展示，格式为 map，key 为 ["ch"、"en"、"ja"]，其中 ch 代表中文、en 代表英语、ja 代表日语
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "i18n_names",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub i18n_names: I18nNamesSubResp,
    /// 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应的语言，会使用默认语言的名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ch"
    ///
    /// **可选值**:
    ///
    /// `Ch`: 中文
    ///
    /// `En`: 英文
    ///
    /// `Ja`: 日文
    #[serde(
        rename = "default_locale",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub default_locale: String,
    /// 请假理由，必选字段
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "家里有事"
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: String,
    /// 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
    ///
    /// **示例值**: "2021-01-04 12:00:00"
    #[serde(
        rename = "approve_pass_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approve_pass_time: String,
    /// 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
    ///
    /// **示例值**: "2021-01-04 11:00:00"
    #[serde(
        rename = "approve_apply_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approve_apply_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserOvertimeWorkSubResp {
    /// 审批实例 ID
    ///
    /// **示例值**: "6737202939523236113"
    #[serde(
        rename = "approval_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_id: String,
    /// 加班时长
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1.5"
    #[serde(
        rename = "duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub duration: f64,
    /// 加班时长单位
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Day`: 天
    ///
    /// `Hour`: 小时
    ///
    /// `HalfDay`: 半天
    ///
    /// `HalfHour`: 半小时
    #[serde(
        rename = "unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub unit: i64,
    /// 加班日期类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `Workday`: 工作日
    ///
    /// `Weekend`: 休息日
    ///
    /// `Holiday`: 节假日
    #[serde(
        rename = "category",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub category: i64,
    /// 加班规则类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `None`: 不关联加班规则
    ///
    /// `DaysOff`: 调休
    ///
    /// `Fee`: 加班费
    ///
    /// `Bind`: 关联加班规则，没有调休或加班费
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-09 09:00:00"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-10 13:00:00"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 加班事由
    ///
    /// **示例值**: "推进项目进度"
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserTripSubResp {
    /// 审批实例 ID
    ///
    /// **示例值**: "6737202939523236113"
    #[serde(
        rename = "approval_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approval_id: String,
    /// 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 09:00:00"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss。
    ///
    /// 时间按照审批发起人当前考勤组的时区进行取值，如果发起人已离职，则默认为 0 时区。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 19:00:00"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 出差理由
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "培训"
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: String,
    /// 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 12:00:00"
    #[serde(
        rename = "approve_pass_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approve_pass_time: String,
    /// 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-01-04 11:00:00"
    #[serde(
        rename = "approve_apply_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub approve_apply_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nNamesSubResp {
    /// 中文描述
    ///
    /// **示例值**: "中文描述"
    #[serde(
        rename = "ch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ch: String,
    /// 英语描述
    ///
    /// **示例值**: "English description"
    #[serde(
        rename = "en",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en: String,
    /// 日语描述
    ///
    /// **示例值**: "日本語の説明"
    #[serde(
        rename = "ja",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ja: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetAttendanceUserApprovalReq,
        ) -> Result<(GetAttendanceUserApprovalResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetAttendanceUserApprovalReq,
                )
                    -> Result<(GetAttendanceUserApprovalResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_attendance_user_approval<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetAttendanceUserApprovalReq,
            GetAttendanceUserApprovalResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_attendance_user_approval(
            &self,
            req: &GetAttendanceUserApprovalReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetAttendanceUserApprovalReq,
                GetAttendanceUserApprovalResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::get_attendance_user_approval::{
            GetAttendanceUserApprovalReq, GetAttendanceUserApprovalResp,
            GetAttendanceUserApprovalRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_get_attendance_user_approval(|_| {
                Ok((
                    GetAttendanceUserApprovalResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .get_attendance_user_approval(GetAttendanceUserApprovalReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .get_attendance_user_approval(GetAttendanceUserApprovalReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "user_ids": [
        "abd754f7"
    ],
    "check_date_from": 20190817,
    "check_date_to": 20190820,
    "check_date_type": "PeriodTime",
    "status": 2,
    "check_time_from": "1566641088",
    "check_time_to": "1592561088"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetAttendanceUserApprovalReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "user_approvals": [
            {
                "user_id": "abd754f7",
                "date": "20210104",
                "outs": [
                    {
                        "approval_id": "6737202939523236113",
                        "uniq_id": "9496E43696967658A512969523E89870",
                        "unit": 1,
                        "interval": 8,
                        "start_time": "2021-01-04 09:00:00",
                        "end_time": "2021-01-04 19:00:00",
                        "i18n_names": {
                            "ch": "中文描述",
                            "en": "English description",
                            "ja": "日本語の説明"
                        },
                        "default_locale": "ch",
                        "reason": "外出办事",
                        "approve_pass_time": "2021-01-04 12:00:00",
                        "approve_apply_time": "2021-01-04 11:00:00"
                    }
                ],
                "leaves": [
                    {
                        "approval_id": "6737202939523236113",
                        "uniq_id": "6852582717813440527",
                        "unit": 1,
                        "interval": 8,
                        "start_time": "2021-01-04 09:00:00",
                        "end_time": "2021-01-04 19:00:00",
                        "i18n_names": {
                            "ch": "中文描述",
                            "en": "English description",
                            "ja": "日本語の説明"
                        },
                        "default_locale": "ch",
                        "reason": "家里有事",
                        "approve_pass_time": "2021-01-04 12:00:00",
                        "approve_apply_time": "2021-01-04 11:00:00"
                    }
                ],
                "overtime_works": [
                    {
                        "approval_id": "6737202939523236113",
                        "duration": 1.5,
                        "unit": 1,
                        "category": 2,
                        "type": 1,
                        "start_time": "2021-01-09 09:00:00",
                        "end_time": "2021-01-10 13:00:00",
                        "reason": "推进项目进度"
                    }
                ],
                "trips": [
                    {
                        "approval_id": "6737202939523236113",
                        "start_time": "2021-01-04 09:00:00",
                        "end_time": "2021-01-04 19:00:00",
                        "reason": "培训",
                        "approve_pass_time": "2021-01-04 12:00:00",
                        "approve_apply_time": "2021-01-04 11:00:00"
                    }
                ],
                "time_zone": "Asia/Shanghai"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetAttendanceUserApprovalRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
