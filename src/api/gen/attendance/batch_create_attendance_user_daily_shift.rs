//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/batch_create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-24T02:11:25+00:00**
    ///
    /// ## 创建或修改排班表
    ///
    /// 排班表是用来描述考勤组内人员每天按哪个班次进行上班。目前排班表支持按一个整月对一位或多位人员进行排班。当用户的排班数据不存在时会进行创建，当用户的排班数据存在时会按照入参信息进行修改。注意：每人每天只能在一个考勤组中。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/batch_create>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/attendance-v1/user_daily_shift/batch_create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_daily_shift%2Fbatch_create>
    pub async fn batch_create_attendance_user_daily_shift(
        &self,
        req: BatchCreateAttendanceUserDailyShiftReq,
    ) -> Result<(BatchCreateAttendanceUserDailyShiftResp, CommonResponse), Error> {
        self.batch_create_attendance_user_daily_shift_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_create_attendance_user_daily_shift](#method.batch_create_attendance_user_daily_shift) 函数
    pub async fn batch_create_attendance_user_daily_shift_with_opt(
        &self,
        req: BatchCreateAttendanceUserDailyShiftReq,
        method_option: MethodOption,
    ) -> Result<(BatchCreateAttendanceUserDailyShiftResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_batch_create_attendance_user_daily_shift(&req)
            {
                tracing::info!(
                    "[lark] Attendance#BatchCreateAttendanceUserDailyShift **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#BatchCreateAttendanceUserDailyShift call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "BatchCreateAttendanceUserDailyShift",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_daily_shifts/batch_create",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchCreateAttendanceUserDailyShiftRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchCreateAttendanceUserDailyShiftReq {
    /// 请求体和响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 排班表信息列表（数量限制50以内）
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "user_daily_shifts")]
    pub user_daily_shifts: Vec<Option<UserDailyShiftSubReq>>,
    /// 操作人uid，与employee_type对应。如果您未操作[考勤管理后台“API 接入”流程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/attendance-development-guidelines)，则此字段为必填字段
    ///
    /// **示例值**: "dd31248a"
    #[api(kind = "body", name = "operator_id")]
    pub operator_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserDailyShiftSubReq {
    /// 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6737202939523236110"
    #[serde(
        rename = "group_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_id: String,
    /// 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)。传入0代表休息。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6753520403404030215"
    #[serde(
        rename = "shift_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_id: String,
    /// 月份，格式yyyyMM
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "202101"
    #[serde(
        rename = "month",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub month: i64,
    /// 用户 ID，与employee_type对应
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "21"
    #[serde(
        rename = "day_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub day_no: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchCreateAttendanceUserDailyShiftRespInner {
    #[serde(flatten)]
    data: Option<BatchCreateAttendanceUserDailyShiftResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchCreateAttendanceUserDailyShiftResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 班表信息列表
    #[serde(
        rename = "user_daily_shifts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_daily_shifts: Vec<UserDailyShiftSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserDailyShiftSubResp {
    /// 考勤组 ID，可用于[按 ID 查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6737202939523236110"
    #[serde(
        rename = "group_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_id: String,
    /// 班次 ID，可用于[按 ID 查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6753520403404030215"
    #[serde(
        rename = "shift_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_id: String,
    /// 月份
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "202101"
    #[serde(
        rename = "month",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub month: i64,
    /// 用户 ID，与employee_type对应
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "21"
    #[serde(
        rename = "day_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub day_no: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            BatchCreateAttendanceUserDailyShiftReq,
        ) -> Result<(BatchCreateAttendanceUserDailyShiftResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    BatchCreateAttendanceUserDailyShiftReq,
                )
                    -> Result<(BatchCreateAttendanceUserDailyShiftResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_create_attendance_user_daily_shift<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            BatchCreateAttendanceUserDailyShiftReq,
            BatchCreateAttendanceUserDailyShiftResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_create_attendance_user_daily_shift(
            &self,
            req: &BatchCreateAttendanceUserDailyShiftReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                BatchCreateAttendanceUserDailyShiftReq,
                BatchCreateAttendanceUserDailyShiftResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::batch_create_attendance_user_daily_shift::{
            BatchCreateAttendanceUserDailyShiftReq, BatchCreateAttendanceUserDailyShiftResp,
            BatchCreateAttendanceUserDailyShiftRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_batch_create_attendance_user_daily_shift(|_| {
                Ok((
                    BatchCreateAttendanceUserDailyShiftResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .batch_create_attendance_user_daily_shift(
                BatchCreateAttendanceUserDailyShiftReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .batch_create_attendance_user_daily_shift(
                BatchCreateAttendanceUserDailyShiftReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "user_daily_shifts": [
        {
            "group_id": "6737202939523236110",
            "shift_id": "6753520403404030215",
            "month": 202101,
            "user_id": "abd754f7",
            "day_no": 21
        }
    ],
    "operator_id": "dd31248a"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::BatchCreateAttendanceUserDailyShiftReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "user_daily_shifts": [
            {
                "group_id": "6737202939523236110",
                "shift_id": "6753520403404030215",
                "month": 202101,
                "user_id": "abd754f7",
                "day_no": 21
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchCreateAttendanceUserDailyShiftRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
