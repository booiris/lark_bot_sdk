//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_field/query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-24T07:41:52+00:00**
    ///
    /// ## 查询统计表头
    ///
    /// 查询考勤统计支持的日度统计或月度统计的统计表头。报表的表头信息可以在考勤统计-[报表](https://example.feishu.cn/people/workforce-management/manage/statistics/report)中查询到具体的报表信息，此接口专门用于查询表头数据
    ///
    /// 调用统计开放接口api目前不返回请假统计和加班统计的新增字段类型
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_field/query>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/attendance-v1/user_stats_data/query-2>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_stats_data%2Fquery-2>
    pub async fn get_attendance_user_stats_field(
        &self,
        req: GetAttendanceUserStatsFieldReq,
    ) -> Result<(GetAttendanceUserStatsFieldResp, CommonResponse), Error> {
        self.get_attendance_user_stats_field_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_attendance_user_stats_field](#method.get_attendance_user_stats_field) 函数
    pub async fn get_attendance_user_stats_field_with_opt(
        &self,
        req: GetAttendanceUserStatsFieldReq,
        method_option: MethodOption,
    ) -> Result<(GetAttendanceUserStatsFieldResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_attendance_user_stats_field(&req) {
                tracing::info!("[lark] Attendance#GetAttendanceUserStatsField **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#GetAttendanceUserStatsField call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "GetAttendanceUserStatsField",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_stats_fields/query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAttendanceUserStatsFieldRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAttendanceUserStatsFieldReq {
    /// 响应体中的 user_id 的员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 语言类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh"
    ///
    /// **可选值**:
    ///
    /// `en`: 英语
    ///
    /// `ja`: 日语
    ///
    /// `zh`: 中文
    #[api(kind = "body", name = "locale")]
    pub locale: String,
    /// 统计类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "daily"
    ///
    /// **可选值**:
    ///
    /// `daily`: 日度统计
    ///
    /// `month`: 月度统计
    #[api(kind = "body", name = "stats_type")]
    pub stats_type: String,
    /// 开始时间，格式为yyyyMMdd（无效字段）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20210316"
    #[api(kind = "body", name = "start_date")]
    pub start_date: i64,
    /// 结束时间，格式为yyyyMMdd（时间间隔不超过 40 天）（无效字段）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20210323"
    #[api(kind = "body", name = "end_date")]
    pub end_date: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAttendanceUserStatsFieldRespInner {
    #[serde(flatten)]
    data: Option<GetAttendanceUserStatsFieldResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAttendanceUserStatsFieldResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 统计数据表头
    #[serde(
        rename = "user_stats_field",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_stats_field: UserStatsFieldSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserStatsFieldSubResp {
    /// 统计类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: ""daily""
    ///
    /// **可选值**:
    ///
    /// `daily`: 日度统计
    ///
    /// `month`: 月度统计
    #[serde(
        rename = "stats_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stats_type: String,
    /// 用户 ID，字段已废弃
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: """"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 字段列表
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fields: Vec<FieldSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FieldSubResp {
    /// 分组编号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "50121"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 分组名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "工号"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 字段列表
    #[serde(
        rename = "child_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub child_fields: Vec<ChildFieldSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChildFieldSubResp {
    /// 字段编号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "50121"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 字段名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "工号"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 时间单位(该字段已停止使用)
    ///
    /// **示例值**: ""Minute""
    #[serde(
        rename = "time_unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_unit: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetAttendanceUserStatsFieldReq,
        ) -> Result<(GetAttendanceUserStatsFieldResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetAttendanceUserStatsFieldReq,
                )
                    -> Result<(GetAttendanceUserStatsFieldResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_attendance_user_stats_field<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetAttendanceUserStatsFieldReq,
            GetAttendanceUserStatsFieldResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_attendance_user_stats_field(
            &self,
            req: &GetAttendanceUserStatsFieldReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetAttendanceUserStatsFieldReq,
                GetAttendanceUserStatsFieldResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::get_attendance_user_stats_field::{
            GetAttendanceUserStatsFieldReq, GetAttendanceUserStatsFieldResp,
            GetAttendanceUserStatsFieldRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_get_attendance_user_stats_field(|_| {
                Ok((
                    GetAttendanceUserStatsFieldResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .get_attendance_user_stats_field(GetAttendanceUserStatsFieldReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .get_attendance_user_stats_field(GetAttendanceUserStatsFieldReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "locale": "zh",
    "stats_type": "daily",
    "start_date": 20210316,
    "end_date": 20210323
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetAttendanceUserStatsFieldReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "",
    "data": {
        "user_stats_field": {
            "fields": [
                {
                    "child_fields": [
                        {
                            "code": "50103",
                            "title": "Employee ID"
                        }
                    ],
                    "code": "501",
                    "title": "Basic info"
                },
                {
                    "child_fields": [
                        {
                            "code": "52108",
                            "title": "Attendance group name"
                        },
                        {
                            "code": "52101",
                            "title": "Required attendance days"
                        },
                        {
                            "code": "52102",
                            "title": "Days of attendance"
                        },
                        {
                            "code": "52104",
                            "time_unit": "Minute",
                            "title": "Required attendance duration"
                        },
                        {
                            "code": "52105",
                            "time_unit": "Minute",
                            "title": "Actual attendance duration"
                        },
                        {
                            "code": "52107",
                            "title": "Overtime hours"
                        }
                    ],
                    "code": "521",
                    "title": "Attendance statistics"
                },
                {
                    "child_fields": [
                        {
                            "code": "52201",
                            "title": "Late in times"
                        },
                        {
                            "code": "52203",
                            "title": "Early out times"
                        },
                        {
                            "code": "52207",
                            "title": "No records"
                        }
                    ],
                    "code": "522",
                    "title": "Abnormal statistics"
                },
                {
                    "child_fields": [
                        {
                            "code": "2021-03-16",
                            "title": "2021-03-16 Tue"
                        },
                        {
                            "code": "2021-03-17",
                            "title": "2021-03-17 Wed"
                        },
                        {
                            "code": "2021-03-18",
                            "title": "2021-03-18 Thu"
                        },
                        {
                            "code": "2021-03-19",
                            "title": "2021-03-19 Fri"
                        },
                        {
                            "code": "2021-03-20",
                            "title": "2021-03-20 Sat"
                        },
                        {
                            "code": "2021-03-21",
                            "title": "2021-03-21 Sun"
                        },
                        {
                            "code": "2021-03-22",
                            "title": "2021-03-22 Mon"
                        },
                        {
                            "code": "2021-03-23",
                            "title": "2021-03-23 Tue"
                        }
                    ],
                    "code": "524",
                    "title": "Daily statistics"
                }
            ],
            "stats_type": "month",
            "user_id": ""
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetAttendanceUserStatsFieldRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
