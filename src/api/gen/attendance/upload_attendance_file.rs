//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{
    ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqData, StreamReqParam,
};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-26T07:16:34+00:00**
    ///
    /// ## 上传用户人脸识别照片
    ///
    /// 上传用户人脸照片并获取文件 ID，对应小程序端的人脸录入功能
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/user_setting/upload>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_setting%2Fupload>
    pub async fn upload_attendance_file<Data: StreamReqData>(
        &self,
        req: UploadAttendanceFileReq<Data>,
    ) -> Result<(UploadAttendanceFileResp, CommonResponse), Error> {
        self.upload_attendance_file_with_opt(req, Default::default())
            .await
    }

    /// 参见 [upload_attendance_file](#method.upload_attendance_file) 函数
    pub async fn upload_attendance_file_with_opt<Data: StreamReqData>(
        &self,
        req: UploadAttendanceFileReq<Data>,
        method_option: MethodOption,
    ) -> Result<(UploadAttendanceFileResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_upload_attendance_file(&req) {
                tracing::info!("[lark] Attendance#UploadAttendanceFile **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#UploadAttendanceFile call api");

        let req = ApiRequest::<()> {
            scope: "Attendance",
            api: "UploadAttendanceFile",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/files/upload",
            stream_param_data: req.gen_stream_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UploadAttendanceFileRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, lark_bot_sdk_macros::ApiReqParams)]
pub struct UploadAttendanceFileReq<Data: StreamReqData> {
    /// 带后缀的文件名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "人脸照片.jpg"
    #[api(kind = "query", name = "file_name", v_type = "var", option = "false")]
    pub file_name: String,

    #[api(kind = "stream", name = "#data#", option = "false")]
    pub data: Data,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UploadAttendanceFileRespInner {
    #[serde(flatten)]
    data: Option<UploadAttendanceFileResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UploadAttendanceFileResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 文件
    #[serde(
        rename = "file",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file: FileSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FileSubResp {
    /// 文件 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6b30e7636a38861bbe02869c726a4612"
    #[serde(
        rename = "file_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<D: StreamReqData>:
        Fn(UploadAttendanceFileReq<D>) -> Result<(UploadAttendanceFileResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            D: StreamReqData,
            T: Fn(
                    UploadAttendanceFileReq<D>,
                ) -> Result<(UploadAttendanceFileResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<D> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_upload_attendance_file<T: StreamReqData, F: MockFunc<T>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UploadAttendanceFileReq<T>,
            UploadAttendanceFileResp,
            Arc<dyn MockFunc<T>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_upload_attendance_file<T: StreamReqData>(
            &self,
            req: &UploadAttendanceFileReq<T>,
        ) -> Option<Arc<dyn MockFunc<T>>> {
            do_mock::<
                Mocker,
                UploadAttendanceFileReq<T>,
                UploadAttendanceFileResp,
                Arc<dyn MockFunc<T>>,
            >(self.cli.instance_id, req)
        }
    }
}
