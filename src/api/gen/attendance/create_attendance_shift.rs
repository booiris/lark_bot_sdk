//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-26T04:57:32+00:00**
    ///
    /// ## 创建班次
    ///
    /// 班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。在假勤设置-[班次设置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)中点击班次名称可以进行班次详情查看
    ///
    /// - 创建一个考勤组前，必须先创建一个或者多个班次。
    ///
    /// - 一个公司内的班次是共享的，你可以直接引用他人创建的班次，但是需要注意的是，若他人修改了班次，会影响到你的考勤组及其考勤结果。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/shift/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fshift%2Fcreate>
    pub async fn create_attendance_shift(
        &self,
        req: CreateAttendanceShiftReq,
    ) -> Result<(CreateAttendanceShiftResp, CommonResponse), Error> {
        self.create_attendance_shift_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_attendance_shift](#method.create_attendance_shift) 函数
    pub async fn create_attendance_shift_with_opt(
        &self,
        req: CreateAttendanceShiftReq,
        method_option: MethodOption,
    ) -> Result<(CreateAttendanceShiftResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_attendance_shift(&req) {
                tracing::info!("[lark] Attendance#CreateAttendanceShift **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#CreateAttendanceShift call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "CreateAttendanceShift",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/shifts",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateAttendanceShiftRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateAttendanceShiftReq {
    /// 班次名称，不可重复
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "早班"
    #[api(kind = "body", name = "shift_name")]
    pub shift_name: String,
    /// 打卡次数（历史字段，已无用，以punch_time_rule为准）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "punch_times")]
    pub punch_times: i64,
    /// 无效字段，请勿使用
    #[api(kind = "body", name = "sub_shift_leader_ids")]
    pub sub_shift_leader_ids: Vec<Option<String>>,
    /// 是否弹性打卡，默认为false，不开启
    ///
    /// **示例值**: "false"
    #[api(kind = "body", name = "is_flexible")]
    pub is_flexible: Option<bool>,
    /// 弹性打卡时间，单位：分钟，设置【上班最多可晚到】与【下班最多可早走】时间。仅当未设置 flexible_rule 参数时，该参数生效。如果设置了 flexible_rule 参数，则该参数不生效
    ///
    /// **示例值**: "60"
    #[api(kind = "body", name = "flexible_minutes")]
    pub flexible_minutes: Option<i64>,
    /// 弹性打卡时间设置
    #[api(kind = "body", name = "flexible_rule")]
    pub flexible_rule: Vec<Option<FlexibleRuleSubReq>>,
    /// true为不需要打下班卡。默认为false，需要下班打卡
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "no_need_off")]
    pub no_need_off: Option<bool>,
    /// 打卡规则
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "punch_time_rule")]
    pub punch_time_rule: Vec<Option<PunchTimeRuleSubReq>>,
    /// 晚走晚到规则（仅飞书人事企业版可用）
    #[api(kind = "body", name = "late_off_late_on_rule")]
    pub late_off_late_on_rule: Vec<Option<LateOffLateOnRuleSubReq>>,
    /// 休息规则
    #[api(kind = "body", name = "rest_time_rule")]
    pub rest_time_rule: Vec<Option<RestRuleSubReq>>,
    /// 加班时段（仅飞书人事企业版可用）
    #[api(kind = "body", name = "overtime_rule")]
    pub overtime_rule: Vec<Option<OvertimeRuleSubReq>>,
    /// 日期类型，【是否弹性打卡 = ture】时，不可设置为“休息日”  可选值：1：工作日 2：休息日。默认值：1
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "day_type")]
    pub day_type: Option<i64>,
    /// 班外休息规则
    #[api(kind = "body", name = "overtime_rest_time_rule")]
    pub overtime_rest_time_rule: Vec<Option<RestRuleSubReq>>,
    /// 晚到多久记为严重迟到。单位：分钟（优先级高于data.shift.punch_time_rule.late_minutes_as_serious_late）
    ///
    /// **示例值**: "40"
    #[api(kind = "body", name = "late_minutes_as_serious_late")]
    pub late_minutes_as_serious_late: Option<i64>,
    /// 半天分割规则（仅飞书人事企业版可用）
    #[api(kind = "body", name = "shift_middle_time_rule")]
    pub shift_middle_time_rule: Option<ShiftMiddleTimeRuleSubReq>,
    /// 晚走次日晚到配置规则
    #[api(kind = "body", name = "late_off_late_on_setting")]
    pub late_off_late_on_setting: Option<LateOffLateOnSettingSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShiftMiddleTimeRuleSubReq {
    /// 半天分割类型
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `DefaultWithRest`: 按全天班次时长（含休息）的中点分割
    ///
    /// `DefaultWithoutRest`: 按全天班次时长（不含休息）的中点分割
    ///
    /// `BaseInRest`: 按休息时间分割
    ///
    /// `BaseInFixed`: 按固定时间点分割
    #[serde(
        rename = "middle_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub middle_time_type: Option<i64>,
    /// 固定分割时间点（middle_time_type 为 3 时有效）
    ///
    /// **示例值**: "12:00"
    #[serde(
        rename = "fixed_middle_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fixed_middle_time: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LateOffLateOnSettingSubReq {
    /// 当日晚走时间计算规则
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `FlexibleType`: 弹性规则
    ///
    /// `FixedType`: 固定规则
    #[serde(
        rename = "late_off_base_on_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_base_on_time_type: Option<i64>,
    /// 次日晚到时间计算规则
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `FixedType`: 固定规则
    ///
    /// `FlexibleType`: 弹性规则
    #[serde(
        rename = "late_on_base_on_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_on_base_on_time_type: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FlexibleRuleSubReq {
    /// 下班最多可早走，单位：分钟（上班早到几分钟，下班可早走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_early_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_early_minutes: i64,
    /// 上班最多可晚到，单位：分钟（上班晚到几分钟，下班须晚走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_late_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_late_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PunchTimeRuleSubReq {
    /// 上班时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_time: String,
    /// 下班时间。如果下班时间跨天，则需要在 24 小时的基础上累加时间。例如，第二天凌晨 2 点取值为 26:00
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00"
    #[serde(
        rename = "off_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_time: String,
    /// 晚到多久记为迟到。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_minutes_as_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_late: i64,
    /// 晚到多久记为缺卡。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_lack: i64,
    /// 最早多久可打上班卡。最大值为 720。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "on_advance_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_advance_minutes: i64,
    /// 早退多久记为早退。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "early_minutes_as_early",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_early: i64,
    /// 早退多久记为缺卡。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "early_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_lack: i64,
    /// 最晚多久可打下班卡。最大值为 960。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "off_delay_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_delay_minutes: i64,
    /// 晚到多久记为严重迟到。单位：分钟
    ///
    /// **示例值**: "40"
    #[serde(
        rename = "late_minutes_as_serious_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_serious_late: Option<i64>,
    /// true为不需要打上班卡，这里需要特别注意，第一段打卡规则须为false。后续可按需配置
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_on",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_on: Option<bool>,
    /// true为不需要打下班卡。默认为false，需要下班打卡（优先级高于data.shift.no_need_off）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_off",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_off: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LateOffLateOnRuleSubReq {
    /// 晚走多久。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_off_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_minutes: i64,
    /// 晚到多久。单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_on_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_on_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RestRuleSubReq {
    /// 休息开始
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "13:00"
    #[serde(
        rename = "rest_begin_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_begin_time: String,
    /// 休息结束
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "14:00"
    #[serde(
        rename = "rest_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OvertimeRuleSubReq {
    /// 开始时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_overtime: String,
    /// 结束时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00"
    #[serde(
        rename = "off_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_overtime: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateAttendanceShiftRespInner {
    #[serde(flatten)]
    data: Option<CreateAttendanceShiftResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateAttendanceShiftResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 班次
    #[serde(
        rename = "shift",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift: ShiftSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShiftSubResp {
    /// 班次 ID，调用本接口系统自动生成
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919358778597097404"
    #[serde(
        rename = "shift_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_id: String,
    /// 班次名称，对应入参的班次名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "早班"
    #[serde(
        rename = "shift_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_name: String,
    /// 打卡次数
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "punch_times",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_times: i64,
    /// 无效字段，请勿使用
    #[serde(
        rename = "sub_shift_leader_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sub_shift_leader_ids: Vec<String>,
    /// 是否弹性打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_flexible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_flexible: bool,
    /// 弹性打卡时间，单位：分钟，设置【上班最多可晚到】与【下班最多可早走】时间，如果不设置flexible_rule则生效
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_minutes: i64,
    /// 弹性打卡时间设置
    #[serde(
        rename = "flexible_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_rule: Vec<FlexibleRuleSubResp>,
    /// 不需要打下班卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_off",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_off: bool,
    /// 打卡规则
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "punch_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_time_rule: Vec<PunchTimeRuleSubResp>,
    /// 晚走晚到规则
    #[serde(
        rename = "late_off_late_on_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_late_on_rule: Vec<LateOffLateOnRuleSubResp>,
    /// 休息规则
    #[serde(
        rename = "rest_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_time_rule: Vec<RestRuleSubResp>,
    /// 打卡规则（暂不支持）
    #[serde(
        rename = "overtime_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overtime_rule: Vec<OvertimeRuleSubResp>,
    /// 日期类型，【是否弹性打卡 = ture】时，不可设置为“休息日”  可选值：1：工作日 2：休息日。默认值：1
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "day_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub day_type: i64,
    /// 班外休息规则
    #[serde(
        rename = "overtime_rest_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overtime_rest_time_rule: Vec<RestRuleSubResp>,
    /// 晚到多久记为严重迟到。单位：分钟（优先级高于data.shift.punch_time_rule.late_minutes_as_serious_late）
    ///
    /// **示例值**: "40"
    #[serde(
        rename = "late_minutes_as_serious_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_serious_late: i64,
    /// 半天分割规则
    #[serde(
        rename = "shift_middle_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_middle_time_rule: ShiftMiddleTimeRuleSubResp,
    /// 晚走次日晚到配置规则
    #[serde(
        rename = "late_off_late_on_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_late_on_setting: LateOffLateOnSettingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShiftMiddleTimeRuleSubResp {
    /// 半天分割类型
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `DefaultWithRest`: 按全天班次时长（含休息）的中点分割
    ///
    /// `DefaultWithoutRest`: 按全天班次时长（不含休息）的中点分割
    ///
    /// `BaseInRest`: 按休息时间分割
    ///
    /// `BaseInFixed`: 按固定时间点分割
    #[serde(
        rename = "middle_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub middle_time_type: i64,
    /// 固定分割时间点（middle_time_type 为 3 时有效）
    ///
    /// **示例值**: "12:00"
    #[serde(
        rename = "fixed_middle_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fixed_middle_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LateOffLateOnSettingSubResp {
    /// 当日晚走时间计算规则
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `FlexibleType`: 弹性规则
    ///
    /// `FixedType`: 固定规则
    #[serde(
        rename = "late_off_base_on_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_base_on_time_type: i64,
    /// 次日晚到时间计算规则
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `FixedType`: 固定规则
    ///
    /// `FlexibleType`: 弹性规则
    #[serde(
        rename = "late_on_base_on_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_on_base_on_time_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FlexibleRuleSubResp {
    /// 下班最多可早走，单位：分钟（上班早到几分钟，下班可早走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_early_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_early_minutes: i64,
    /// 上班最多可晚到，单位：分钟（上班晚到几分钟，下班须晚走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_late_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_late_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PunchTimeRuleSubResp {
    /// 上班时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_time: String,
    /// 下班时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00， 第二天凌晨2点， 26:00"
    #[serde(
        rename = "off_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_time: String,
    /// 晚到多久记为迟到，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_minutes_as_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_late: i64,
    /// 晚到多久记为缺卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_lack: i64,
    /// 最早多久可打上班卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "on_advance_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_advance_minutes: i64,
    /// 早退多久记为早退，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "early_minutes_as_early",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_early: i64,
    /// 早退多久记为缺卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "early_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_lack: i64,
    /// 最晚多久可打下班卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "off_delay_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_delay_minutes: i64,
    /// 晚到多久记为严重迟到。单位：分钟
    ///
    /// **示例值**: "40"
    #[serde(
        rename = "late_minutes_as_serious_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_serious_late: i64,
    /// 是否不需要打上班卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_on",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_on: bool,
    /// 是否不需要打下班卡（优先级高于data.shift.no_need_off）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_off",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_off: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LateOffLateOnRuleSubResp {
    /// 晚走多久，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_off_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_minutes: i64,
    /// 晚到多久，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_on_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_on_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RestRuleSubResp {
    /// 休息开始
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "13:00"
    #[serde(
        rename = "rest_begin_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_begin_time: String,
    /// 休息结束
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "14:00"
    #[serde(
        rename = "rest_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OvertimeRuleSubResp {
    /// 上班时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_overtime: String,
    /// 下班时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00"
    #[serde(
        rename = "off_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_overtime: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateAttendanceShiftReq) -> Result<(CreateAttendanceShiftResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateAttendanceShiftReq,
                ) -> Result<(CreateAttendanceShiftResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_attendance_shift<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateAttendanceShiftReq,
            CreateAttendanceShiftResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_attendance_shift(
            &self,
            req: &CreateAttendanceShiftReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateAttendanceShiftReq, CreateAttendanceShiftResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::create_attendance_shift::{
            CreateAttendanceShiftReq, CreateAttendanceShiftResp, CreateAttendanceShiftRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_create_attendance_shift(|_| {
                Ok((
                    CreateAttendanceShiftResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .create_attendance_shift(CreateAttendanceShiftReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .create_attendance_shift(CreateAttendanceShiftReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "shift_name": "早班",
    "punch_times": 1,
    "sub_shift_leader_ids": [
        "456123"
    ],
    "is_flexible": false,
    "flexible_minutes": 60,
    "flexible_rule": [
        {
            "flexible_early_minutes": 60,
            "flexible_late_minutes": 60
        }
    ],
    "no_need_off": true,
    "punch_time_rule": [
        {
            "on_time": "9:00",
            "off_time": "18:00",
            "late_minutes_as_late": 30,
            "late_minutes_as_lack": 60,
            "on_advance_minutes": 60,
            "early_minutes_as_early": 30,
            "early_minutes_as_lack": 60,
            "off_delay_minutes": 60,
            "late_minutes_as_serious_late": 40,
            "no_need_on": true,
            "no_need_off": true
        }
    ],
    "late_off_late_on_rule": [
        {
            "late_off_minutes": 60,
            "late_on_minutes": 30
        }
    ],
    "rest_time_rule": [
        {
            "rest_begin_time": "13:00",
            "rest_end_time": "14:00"
        }
    ],
    "overtime_rule": [
        {
            "on_overtime": "9:00",
            "off_overtime": "18:00"
        }
    ],
    "day_type": 1,
    "overtime_rest_time_rule": [
        {
            "rest_begin_time": "13:00",
            "rest_end_time": "14:00"
        }
    ],
    "late_minutes_as_serious_late": 40,
    "shift_middle_time_rule": {
        "middle_time_type": 0,
        "fixed_middle_time": "12:00"
    },
    "late_off_late_on_setting": {
        "late_off_base_on_time_type": 0,
        "late_on_base_on_time_type": 0
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateAttendanceShiftReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "shift": {
            "shift_id": "6919358778597097404",
            "shift_name": "早班",
            "punch_times": 1,
            "sub_shift_leader_ids": [
                "456123"
            ],
            "is_flexible": false,
            "flexible_minutes": 60,
            "flexible_rule": [
                {
                    "flexible_early_minutes": 60,
                    "flexible_late_minutes": 60
                }
            ],
            "no_need_off": true,
            "punch_time_rule": [
                {
                    "on_time": "9:00",
                    "off_time": "18:00， 第二天凌晨2点， 26:00",
                    "late_minutes_as_late": 30,
                    "late_minutes_as_lack": 60,
                    "on_advance_minutes": 60,
                    "early_minutes_as_early": 30,
                    "early_minutes_as_lack": 60,
                    "off_delay_minutes": 60,
                    "late_minutes_as_serious_late": 40,
                    "no_need_on": true,
                    "no_need_off": true
                }
            ],
            "late_off_late_on_rule": [
                {
                    "late_off_minutes": 60,
                    "late_on_minutes": 30
                }
            ],
            "rest_time_rule": [
                {
                    "rest_begin_time": "13:00",
                    "rest_end_time": "14:00"
                }
            ],
            "overtime_rule": [
                {
                    "on_overtime": "9:00",
                    "off_overtime": "18:00"
                }
            ],
            "day_type": 1,
            "overtime_rest_time_rule": [
                {
                    "rest_begin_time": "13:00",
                    "rest_end_time": "14:00"
                }
            ],
            "late_minutes_as_serious_late": 40,
            "shift_middle_time_rule": {
                "middle_time_type": 0,
                "fixed_middle_time": "12:00"
            },
            "late_off_late_on_setting": {
                "late_off_base_on_time_type": 0,
                "late_on_base_on_time_type": 0
            }
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateAttendanceShiftRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
