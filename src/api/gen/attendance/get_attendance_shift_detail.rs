//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-26T04:57:33+00:00**
    ///
    /// ## 按 ID 查询班次
    ///
    /// 通过班次 ID 获取班次详情。对应功能为假勤设置-[班次设置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)班次列表中的具体班次，班次信息可以点击班次名称查看
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/shift/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fshift%2Fget>
    pub async fn get_attendance_shift_detail(
        &self,
        req: GetAttendanceShiftDetailReq,
    ) -> Result<(GetAttendanceShiftDetailResp, CommonResponse), Error> {
        self.get_attendance_shift_detail_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_attendance_shift_detail](#method.get_attendance_shift_detail) 函数
    pub async fn get_attendance_shift_detail_with_opt(
        &self,
        req: GetAttendanceShiftDetailReq,
        method_option: MethodOption,
    ) -> Result<(GetAttendanceShiftDetailResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_attendance_shift_detail(&req) {
                tracing::info!("[lark] Attendance#GetAttendanceShiftDetail **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#GetAttendanceShiftDetail call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "GetAttendanceShiftDetail",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/shifts/:shift_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAttendanceShiftDetailRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAttendanceShiftDetailReq {
    /// 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919358778597097404"
    #[api(kind = "path", name = "shift_id")]
    pub shift_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAttendanceShiftDetailRespInner {
    #[serde(flatten)]
    data: Option<GetAttendanceShiftDetailResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAttendanceShiftDetailResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: ShiftSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShiftSubResp {
    /// 班次 ID，对应入参中的班次ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919358778597097404"
    #[serde(
        rename = "shift_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_id: String,
    /// 班次名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "早班"
    #[serde(
        rename = "shift_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_name: String,
    /// 打卡次数
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "punch_times",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_times: i64,
    /// 无效字段，请勿使用
    #[serde(
        rename = "sub_shift_leader_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sub_shift_leader_ids: Vec<String>,
    /// 是否弹性打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_flexible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_flexible: bool,
    /// 弹性打卡时间,单位：分钟，设置【上班最多可晚到】与【下班最多可早走】时间，如果不设置flexible_rule则生效
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_minutes: i64,
    /// 弹性打卡时间设置
    #[serde(
        rename = "flexible_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_rule: Vec<FlexibleRuleSubResp>,
    /// 不需要打下班卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_off",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_off: bool,
    /// 打卡规则
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "punch_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_time_rule: Vec<PunchTimeRuleSubResp>,
    /// 晚走晚到规则（仅飞书人事企业版可用）
    #[serde(
        rename = "late_off_late_on_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_late_on_rule: Vec<LateOffLateOnRuleSubResp>,
    /// 休息规则
    #[serde(
        rename = "rest_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_time_rule: Vec<RestRuleSubResp>,
    /// 加班规则（仅飞书人事企业版可用）
    #[serde(
        rename = "overtime_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overtime_rule: Vec<OvertimeRuleSubResp>,
    /// 是否允许在非打卡时段申请打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "allow_punch_approval",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_punch_approval: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FlexibleRuleSubResp {
    /// 下班最多可早走，单位：分钟（上班早到几分钟，下班可早走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_early_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_early_minutes: i64,
    /// 上班最多可晚到，单位：分钟（上班晚到几分钟，下班须晚走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_late_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_late_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PunchTimeRuleSubResp {
    /// 上班时间，格式为hh:mm
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_time: String,
    /// 下班时间，格式为hh:mm。如果是第二天凌晨2点， 则为26:00
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00， 第二天凌晨2点， 26:00"
    #[serde(
        rename = "off_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_time: String,
    /// 晚到多久记为迟到，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_minutes_as_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_late: i64,
    /// 晚到多久记为缺卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_lack: i64,
    /// 最早多久可打上班卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "on_advance_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_advance_minutes: i64,
    /// 早退多久记为早退，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "early_minutes_as_early",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_early: i64,
    /// 早退多久记为缺卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "early_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_lack: i64,
    /// 最晚多久可打下班卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "off_delay_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_delay_minutes: i64,
    /// 晚到多久记为严重迟到，单位：分钟
    ///
    /// **示例值**: "40"
    #[serde(
        rename = "late_minutes_as_serious_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_serious_late: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LateOffLateOnRuleSubResp {
    /// 晚走多久，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_off_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_minutes: i64,
    /// 晚到多久，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_on_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_on_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RestRuleSubResp {
    /// 休息开始，格式为mm:ss
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "13:00"
    #[serde(
        rename = "rest_begin_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_begin_time: String,
    /// 休息结束，格式为mm:ss
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "14:00"
    #[serde(
        rename = "rest_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OvertimeRuleSubResp {
    /// 上班时间，格式为mm:ss
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_overtime: String,
    /// 下班时间，格式为mm:ss
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00"
    #[serde(
        rename = "off_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_overtime: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetAttendanceShiftDetailReq,
        ) -> Result<(GetAttendanceShiftDetailResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetAttendanceShiftDetailReq,
                ) -> Result<(GetAttendanceShiftDetailResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_attendance_shift_detail<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetAttendanceShiftDetailReq,
            GetAttendanceShiftDetailResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_attendance_shift_detail(
            &self,
            req: &GetAttendanceShiftDetailReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetAttendanceShiftDetailReq,
                GetAttendanceShiftDetailResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::get_attendance_shift_detail::{
            GetAttendanceShiftDetailReq, GetAttendanceShiftDetailResp,
            GetAttendanceShiftDetailRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_get_attendance_shift_detail(|_| {
                Ok((
                    GetAttendanceShiftDetailResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .get_attendance_shift_detail(GetAttendanceShiftDetailReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .get_attendance_shift_detail(GetAttendanceShiftDetailReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "shift_id": "6919358778597097404",
        "shift_name": "早班",
        "punch_times": 1,
        "sub_shift_leader_ids": [
            "dd31248a"
        ],
        "is_flexible": false,
        "flexible_minutes": 60,
        "flexible_rule": [
            {
                "flexible_early_minutes": 60,
                "flexible_late_minutes": 60
            }
        ],
        "no_need_off": true,
        "punch_time_rule": [
            {
                "on_time": "9:00",
                "off_time": "18:00， 第二天凌晨2点， 26:00",
                "late_minutes_as_late": 30,
                "late_minutes_as_lack": 60,
                "on_advance_minutes": 60,
                "early_minutes_as_early": 30,
                "early_minutes_as_lack": 60,
                "off_delay_minutes": 60,
                "late_minutes_as_serious_late": 40
            }
        ],
        "late_off_late_on_rule": [
            {
                "late_off_minutes": 60,
                "late_on_minutes": 30
            }
        ],
        "rest_time_rule": [
            {
                "rest_begin_time": "13:00",
                "rest_end_time": "14:00"
            }
        ],
        "overtime_rule": [
            {
                "on_overtime": "9:00",
                "off_overtime": "18:00"
            }
        ],
        "allow_punch_approval": false
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetAttendanceShiftDetailRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
