//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query_user_allowed_remedys>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-08T06:09:56+00:00**
    ///
    /// ## 获取可补卡时间
    ///
    /// 获取用户某天可以补的第几次上 / 下班卡的时间。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query_user_allowed_remedys>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/user_task_remedy/query_user_allowed_remedys>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_task_remedy%2Fquery_user_allowed_remedys>
    pub async fn get_attendance_user_task_remedy_allowed_remedy_list(
        &self,
        req: GetAttendanceUserTaskRemedyAllowedRemedyListReq,
    ) -> Result<
        (
            GetAttendanceUserTaskRemedyAllowedRemedyListResp,
            CommonResponse,
        ),
        Error,
    > {
        self.get_attendance_user_task_remedy_allowed_remedy_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_attendance_user_task_remedy_allowed_remedy_list](#method.get_attendance_user_task_remedy_allowed_remedy_list) 函数
    pub async fn get_attendance_user_task_remedy_allowed_remedy_list_with_opt(
        &self,
        req: GetAttendanceUserTaskRemedyAllowedRemedyListReq,
        method_option: MethodOption,
    ) -> Result<
        (
            GetAttendanceUserTaskRemedyAllowedRemedyListResp,
            CommonResponse,
        ),
        Error,
    > {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_attendance_user_task_remedy_allowed_remedy_list(&req)
            {
                tracing::info!("[lark] Attendance#GetAttendanceUserTaskRemedyAllowedRemedyList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#GetAttendanceUserTaskRemedyAllowedRemedyList call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "GetAttendanceUserTaskRemedyAllowedRemedyList",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAttendanceUserTaskRemedyAllowedRemedyListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAttendanceUserTaskRemedyAllowedRemedyListReq {
    /// 请求体和响应体中的 user_id 的员工工号类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 用户 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[api(kind = "body", name = "user_id")]
    pub user_id: String,
    /// 补卡日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20210104"
    #[api(kind = "body", name = "remedy_date")]
    pub remedy_date: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAttendanceUserTaskRemedyAllowedRemedyListRespInner {
    #[serde(flatten)]
    data: Option<GetAttendanceUserTaskRemedyAllowedRemedyListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAttendanceUserTaskRemedyAllowedRemedyListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 用户可补卡时间
    #[serde(
        rename = "user_allowed_remedys",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_allowed_remedys: Vec<UserAllowedRemedySubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserAllowedRemedySubResp {
    /// 用户 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 补卡日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20210104"
    #[serde(
        rename = "remedy_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_date: i64,
    /// 是否为自由班次，若为自由班次，则不用选择考虑第几次上下班，直接选择补卡时间即可
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_free_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_free_punch: bool,
    /// 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "punch_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_no: i64,
    /// 上班 / 下班，1：上班，2：下班
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "work_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_type: i64,
    /// 打卡状态，Early：早退，Late：迟到，Lack：缺卡
    ///
    /// **示例值**: "Lack"
    #[serde(
        rename = "punch_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_status: String,
    /// 正常的应打卡时间，时间格式为 yyyy-MM-dd HH:mm
    ///
    /// **示例值**: "2021-07-01 09:00"
    #[serde(
        rename = "normal_punch_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub normal_punch_time: String,
    /// 可选的补卡时间的最小值，时间格式为 yyyy-MM-dd HH:mm
    ///
    /// **示例值**: "2021-07-01 08:00"
    #[serde(
        rename = "remedy_start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_start_time: String,
    /// 可选的补卡时间的最大值，时间格式为 yyyy-MM-dd HH:mm
    ///
    /// **示例值**: "2021-07-01 10:00"
    #[serde(
        rename = "remedy_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_end_time: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetAttendanceUserTaskRemedyAllowedRemedyListReq,
        ) -> Result<
            (
                GetAttendanceUserTaskRemedyAllowedRemedyListResp,
                CommonResponse,
            ),
            Error,
        > + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetAttendanceUserTaskRemedyAllowedRemedyListReq,
                ) -> Result<
                    (
                        GetAttendanceUserTaskRemedyAllowedRemedyListResp,
                        CommonResponse,
                    ),
                    Error,
                > + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_attendance_user_task_remedy_allowed_remedy_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetAttendanceUserTaskRemedyAllowedRemedyListReq,
            GetAttendanceUserTaskRemedyAllowedRemedyListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_attendance_user_task_remedy_allowed_remedy_list(
            &self,
            req: &GetAttendanceUserTaskRemedyAllowedRemedyListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetAttendanceUserTaskRemedyAllowedRemedyListReq,
                GetAttendanceUserTaskRemedyAllowedRemedyListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::get_attendance_user_task_remedy_allowed_remedy_list::{
            GetAttendanceUserTaskRemedyAllowedRemedyListReq,
            GetAttendanceUserTaskRemedyAllowedRemedyListResp,
            GetAttendanceUserTaskRemedyAllowedRemedyListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_get_attendance_user_task_remedy_allowed_remedy_list(|_| {
                Ok((
                    GetAttendanceUserTaskRemedyAllowedRemedyListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .get_attendance_user_task_remedy_allowed_remedy_list(
                GetAttendanceUserTaskRemedyAllowedRemedyListReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .get_attendance_user_task_remedy_allowed_remedy_list(
                GetAttendanceUserTaskRemedyAllowedRemedyListReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "user_id": "abd754f7",
    "remedy_date": 20210104
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::GetAttendanceUserTaskRemedyAllowedRemedyListReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "user_allowed_remedys": [
            {
                "user_id": "abd754f7",
                "remedy_date": 20210104,
                "is_free_punch": false,
                "punch_no": 0,
                "work_type": 1,
                "punch_status": "Lack",
                "normal_punch_time": "2021-07-01 09:00",
                "remedy_start_time": "2021-07-01 08:00",
                "remedy_end_time": "2021-07-01 10:00"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res =
            serde_json::from_str::<GetAttendanceUserTaskRemedyAllowedRemedyListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
