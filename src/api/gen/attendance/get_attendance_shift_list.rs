//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-11T09:14:31+00:00**
    ///
    /// ## 查询所有班次
    ///
    /// 飞书人事管理后台中假勤设置-[班次配置](https://example.feishu.cn/people/workforce-management/setting/group/shifts)中的翻页查询所有班次功能，展示班次名称、打卡规则、弹性班次规则、休息规则等
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/attendance-v1/shift/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fshift%2Flist>
    pub async fn get_attendance_shift_list(
        &self,
        req: GetAttendanceShiftListReq,
    ) -> Result<(GetAttendanceShiftListResp, CommonResponse), Error> {
        self.get_attendance_shift_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_attendance_shift_list](#method.get_attendance_shift_list) 函数
    pub async fn get_attendance_shift_list_with_opt(
        &self,
        req: GetAttendanceShiftListReq,
        method_option: MethodOption,
    ) -> Result<(GetAttendanceShiftListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_attendance_shift_list(&req) {
                tracing::info!("[lark] Attendance#GetAttendanceShiftList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#GetAttendanceShiftList call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "GetAttendanceShiftList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/shifts",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAttendanceShiftListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAttendanceShiftListReq {
    /// 分页大小
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "YrkvQ1wGaPVta45tkxuGiQ=="
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAttendanceShiftListRespInner {
    #[serde(flatten)]
    data: Option<GetAttendanceShiftListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAttendanceShiftListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 班次列表
    #[serde(
        rename = "shift_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_list: Vec<ShiftSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "YrkvQ1wGaPVta45tkxuGiQ=="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShiftSubResp {
    /// 班次 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919358778597097404"
    #[serde(
        rename = "shift_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_id: String,
    /// 班次名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "早班"
    #[serde(
        rename = "shift_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_name: String,
    /// 打卡次数
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "punch_times",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_times: i64,
    /// 无效字段，请勿使用
    #[serde(
        rename = "sub_shift_leader_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sub_shift_leader_ids: Vec<String>,
    /// 是否弹性打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_flexible",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_flexible: bool,
    /// 弹性打卡时间，单位：分钟，设置【上班最多可晚到】与【下班最多可早走】时间，如果不设置flexible_rule则生效
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_minutes: i64,
    /// 弹性打卡时间设置
    #[serde(
        rename = "flexible_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_rule: Vec<FlexibleRuleSubResp>,
    /// 不需要打下班卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_off",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_off: bool,
    /// 打卡规则
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "punch_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_time_rule: Vec<PunchTimeRuleSubResp>,
    /// 晚走晚到规则（仅飞书人事企业版可用）
    #[serde(
        rename = "late_off_late_on_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_late_on_rule: Vec<LateOffLateOnRuleSubResp>,
    /// 休息规则
    #[serde(
        rename = "rest_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_time_rule: Vec<RestRuleSubResp>,
    /// 加班时段（仅飞书人事企业版可用）
    #[serde(
        rename = "overtime_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overtime_rule: Vec<OvertimeRuleSubResp>,
    /// 日期类型，【是否弹性打卡 = ture】时，不可设置为“休息日”  可选值：1：工作日 2：休息日     示例值：（默认值）1
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "day_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub day_type: i64,
    /// 班外休息规则
    #[serde(
        rename = "overtime_rest_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub overtime_rest_time_rule: Vec<RestRuleSubResp>,
    /// 晚到多久记为严重迟到，单位：分钟（优先级比原有字段高）
    ///
    /// **示例值**: "40"
    #[serde(
        rename = "late_minutes_as_serious_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_serious_late: i64,
    /// 半天分割规则（仅飞书人事企业版可用）
    #[serde(
        rename = "shift_middle_time_rule",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_middle_time_rule: ShiftMiddleTimeRuleSubResp,
    /// 晚走次日晚到配置规则
    #[serde(
        rename = "late_off_late_on_setting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_late_on_setting: LateOffLateOnSettingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ShiftMiddleTimeRuleSubResp {
    /// 半天分割类型
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `DefaultWithRest`: 按全天班次时长（含休息）的中点分割
    ///
    /// `DefaultWithoutRest`: 按全天班次时长（不含休息）的中点分割
    ///
    /// `BaseInRest`: 按休息时间分割
    ///
    /// `BaseInFixed`: 按固定时间点分割
    #[serde(
        rename = "middle_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub middle_time_type: i64,
    /// 固定分割时间点（middle_time_type 为 3 时有效）
    ///
    /// **示例值**: "12:00"
    #[serde(
        rename = "fixed_middle_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fixed_middle_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LateOffLateOnSettingSubResp {
    /// 当日晚走时间计算规则
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `FlexibleType`: 弹性规则
    ///
    /// `FixedType`: 固定规则
    #[serde(
        rename = "late_off_base_on_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_base_on_time_type: i64,
    /// 次日晚到时间计算规则
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `FixedType`: 固定规则
    ///
    /// `FlexibleType`: 弹性规则
    #[serde(
        rename = "late_on_base_on_time_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_on_base_on_time_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FlexibleRuleSubResp {
    /// 下班最多可早走，单位：分钟（上班早到几分钟，下班可早走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_early_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_early_minutes: i64,
    /// 上班最多可晚到，单位：分钟（上班晚到几分钟，下班须晚走几分钟）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "flexible_late_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flexible_late_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PunchTimeRuleSubResp {
    /// 上班时间，格式为hh:mm
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_time: String,
    /// 下班时间，格式为hh:mm。如果是第二天凌晨2点， 则为26:00
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00"
    #[serde(
        rename = "off_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_time: String,
    /// 晚到多久记为迟到，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_minutes_as_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_late: i64,
    /// 晚到多久记为缺卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_lack: i64,
    /// 最早多久可打上班卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "on_advance_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_advance_minutes: i64,
    /// 早退多久记为早退，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "early_minutes_as_early",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_early: i64,
    /// 早退多久记为缺卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "early_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_lack: i64,
    /// 最晚多久可打下班卡，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "off_delay_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_delay_minutes: i64,
    /// 晚到多久记为严重迟到，单位：分钟
    ///
    /// **示例值**: "40"
    #[serde(
        rename = "late_minutes_as_serious_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_serious_late: i64,
    /// 不需要打上班卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_on",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_on: bool,
    /// 不需要打下班卡（优先级比原有字段高）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "no_need_off",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_off: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LateOffLateOnRuleSubResp {
    /// 晚走多久，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "60"
    #[serde(
        rename = "late_off_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_off_minutes: i64,
    /// 晚到多久，单位：分钟
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "late_on_minutes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_on_minutes: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RestRuleSubResp {
    /// 休息开始
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "13:00"
    #[serde(
        rename = "rest_begin_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_begin_time: String,
    /// 休息结束
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "14:00"
    #[serde(
        rename = "rest_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OvertimeRuleSubResp {
    /// 开始时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "9:00"
    #[serde(
        rename = "on_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub on_overtime: String,
    /// 结束时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00"
    #[serde(
        rename = "off_overtime",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub off_overtime: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetAttendanceShiftListReq) -> Result<(GetAttendanceShiftListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetAttendanceShiftListReq,
                ) -> Result<(GetAttendanceShiftListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_attendance_shift_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetAttendanceShiftListReq,
            GetAttendanceShiftListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_attendance_shift_list(
            &self,
            req: &GetAttendanceShiftListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetAttendanceShiftListReq,
                GetAttendanceShiftListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::get_attendance_shift_list::{
            GetAttendanceShiftListReq, GetAttendanceShiftListResp, GetAttendanceShiftListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_get_attendance_shift_list(|_| {
                Ok((
                    GetAttendanceShiftListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .get_attendance_shift_list(GetAttendanceShiftListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .get_attendance_shift_list(GetAttendanceShiftListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "shift_list": [
            {
                "shift_id": "6919358778597097404",
                "shift_name": "早班",
                "punch_times": 1,
                "sub_shift_leader_ids": [
                    "456123"
                ],
                "is_flexible": false,
                "flexible_minutes": 60,
                "flexible_rule": [
                    {
                        "flexible_early_minutes": 60,
                        "flexible_late_minutes": 60
                    }
                ],
                "no_need_off": true,
                "punch_time_rule": [
                    {
                        "on_time": "9:00",
                        "off_time": "18:00",
                        "late_minutes_as_late": 30,
                        "late_minutes_as_lack": 60,
                        "on_advance_minutes": 60,
                        "early_minutes_as_early": 30,
                        "early_minutes_as_lack": 60,
                        "off_delay_minutes": 60,
                        "late_minutes_as_serious_late": 40,
                        "no_need_on": true,
                        "no_need_off": true
                    }
                ],
                "late_off_late_on_rule": [
                    {
                        "late_off_minutes": 60,
                        "late_on_minutes": 30
                    }
                ],
                "rest_time_rule": [
                    {
                        "rest_begin_time": "13:00",
                        "rest_end_time": "14:00"
                    }
                ],
                "overtime_rule": [
                    {
                        "on_overtime": "9:00",
                        "off_overtime": "18:00"
                    }
                ],
                "day_type": 1,
                "overtime_rest_time_rule": [
                    {
                        "rest_begin_time": "13:00",
                        "rest_end_time": "14:00"
                    }
                ],
                "late_minutes_as_serious_late": 40,
                "shift_middle_time_rule": {
                    "middle_time_type": 0,
                    "fixed_middle_time": "12:00"
                },
                "late_off_late_on_setting": {
                    "late_off_base_on_time_type": 0,
                    "late_on_base_on_time_type": 0
                }
            }
        ],
        "page_token": "YrkvQ1wGaPVta45tkxuGiQ==",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetAttendanceShiftListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
