//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/leave_accrual_record/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2023-09-11T09:28:50+00:00**
    ///
    /// ## 更新发放记录的发放数量和失效日期
    ///
    /// 仅可更新「发放数量」和「失效日期」
    ///
    /// - 仅飞书人事企业版可用
    ///
    /// - 由系统生成的发放记录不可被更新
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/leave_accrual_record/patch>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/attendance-v1/leave_accrual_record/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fleave_accrual_record%2Fpatch>
    pub async fn update_attendance_leave_accrual_record(
        &self,
        req: UpdateAttendanceLeaveAccrualRecordReq,
    ) -> Result<(UpdateAttendanceLeaveAccrualRecordResp, CommonResponse), Error> {
        self.update_attendance_leave_accrual_record_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_attendance_leave_accrual_record](#method.update_attendance_leave_accrual_record) 函数
    pub async fn update_attendance_leave_accrual_record_with_opt(
        &self,
        req: UpdateAttendanceLeaveAccrualRecordReq,
        method_option: MethodOption,
    ) -> Result<(UpdateAttendanceLeaveAccrualRecordResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_update_attendance_leave_accrual_record(&req)
            {
                tracing::info!(
                    "[lark] Attendance#UpdateAttendanceLeaveAccrualRecord **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#UpdateAttendanceLeaveAccrualRecord call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "UpdateAttendanceLeaveAccrualRecord",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/leave_accrual_record/:leave_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateAttendanceLeaveAccrualRecordRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateAttendanceLeaveAccrualRecordReq {
    /// 假期类型ID
    ///
    /// **示例值**: "7111688079785723436"
    #[api(kind = "path", name = "leave_id")]
    pub leave_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `LeaveBalancesLeaveUserIDTypeOpenID`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `LeaveBalancesLeaveUserIDTypeUnionID`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `LeaveBalancesLeaveUserIDTypeUserID`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `LeaveBalancesLeaveUserIDTypePeopleCorehrID`: 以飞书人事的 ID 来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 发放记录的唯一ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6893014062142064135"
    #[api(kind = "body", name = "leave_granting_record_id")]
    pub leave_granting_record_id: String,
    /// 员工ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6982509313466189342"
    #[api(kind = "body", name = "employment_id")]
    pub employment_id: String,
    /// 假期类型ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7111688079785723436"
    #[api(kind = "body", name = "leave_type_id")]
    pub leave_type_id: String,
    /// 修改发放记录原因
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "reason")]
    pub reason: Vec<Option<LangTextSubReq>>,
    /// 时间偏移，东八区：480    8*60
    ///
    /// **示例值**: "480"
    #[api(kind = "body", name = "time_offset")]
    pub time_offset: Option<i64>,
    /// 失效日期，格式"2020-01-01"
    ///
    /// **示例值**: "2020-01-01"
    #[api(kind = "body", name = "expiration_date")]
    pub expiration_date: Option<String>,
    /// 修改source 余额
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "quantity")]
    pub quantity: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LangTextSubReq {
    /// 语言码
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 语言码对应的文本
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "test"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateAttendanceLeaveAccrualRecordRespInner {
    #[serde(flatten)]
    data: Option<UpdateAttendanceLeaveAccrualRecordResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateAttendanceLeaveAccrualRecordResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 员工过期日期的发放记录
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record: LeaveAccrualRecordSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LeaveAccrualRecordSubResp {
    /// 发放记录唯一ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 员工ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6982509313466189342"
    #[serde(
        rename = "employment_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employment_id: String,
    /// 假期类型ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6893014062142064135"
    #[serde(
        rename = "leave_type_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_type_id: String,
    /// 发放数量
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "granting_quantity",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub granting_quantity: String,
    /// 发放单位，1表示天，2表示小时
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "granting_unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub granting_unit: i64,
    /// 生效日期，格式"2020-01-01"
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "effective_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub effective_date: String,
    /// 失效日期，格式"2020-01-01"
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "expiration_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expiration_date: String,
    /// 发放来源，1：系统发放；2：手动发放；3：外部系统发放
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "granted_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub granted_by: i64,
    /// 发放原因
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reason: Vec<LangTextSubResp>,
    /// 发放记录的创建时间，unix时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1687428000"
    #[serde(
        rename = "created_at",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_at: String,
    /// 发放记录的创建人的ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6982509313466189342"
    #[serde(
        rename = "created_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_by: String,
    /// 发放记录的更新时间，unix时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1687428000"
    #[serde(
        rename = "updated_at",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub updated_at: String,
    /// 发放记录的更新人的ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6982509313466189342"
    #[serde(
        rename = "updated_by",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub updated_by: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LangTextSubResp {
    /// 语言码
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh-CN"
    #[serde(
        rename = "lang",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub lang: String,
    /// 语言码对应的文本
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "test"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            UpdateAttendanceLeaveAccrualRecordReq,
        ) -> Result<(UpdateAttendanceLeaveAccrualRecordResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateAttendanceLeaveAccrualRecordReq,
                )
                    -> Result<(UpdateAttendanceLeaveAccrualRecordResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_attendance_leave_accrual_record<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdateAttendanceLeaveAccrualRecordReq,
            UpdateAttendanceLeaveAccrualRecordResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_attendance_leave_accrual_record(
            &self,
            req: &UpdateAttendanceLeaveAccrualRecordReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                UpdateAttendanceLeaveAccrualRecordReq,
                UpdateAttendanceLeaveAccrualRecordResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::update_attendance_leave_accrual_record::{
            UpdateAttendanceLeaveAccrualRecordReq, UpdateAttendanceLeaveAccrualRecordResp,
            UpdateAttendanceLeaveAccrualRecordRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_update_attendance_leave_accrual_record(|_| {
                Ok((
                    UpdateAttendanceLeaveAccrualRecordResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res =
            lark.attendance()
                .update_attendance_leave_accrual_record(
                    UpdateAttendanceLeaveAccrualRecordReq::default(),
                )
                .await;
        assert!(res.is_ok());
        mocker.clear();
        let res =
            lark.attendance()
                .update_attendance_leave_accrual_record(
                    UpdateAttendanceLeaveAccrualRecordReq::default(),
                )
                .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "leave_granting_record_id": "6893014062142064135",
    "employment_id": "6982509313466189342",
    "leave_type_id": "7111688079785723436",
    "reason": [
        {
            "lang": "zh-CN",
            "value": "test"
        }
    ],
    "time_offset": 480,
    "expiration_date": "2020-01-01",
    "quantity": "1"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::UpdateAttendanceLeaveAccrualRecordReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "record": {
            "id": "6893014062142064135",
            "employment_id": "6982509313466189342",
            "leave_type_id": "6893014062142064135",
            "granting_quantity": "1",
            "granting_unit": 1,
            "effective_date": "2020-01-01",
            "expiration_date": "2020-01-01",
            "granted_by": 1,
            "reason": [
                {
                    "lang": "zh-CN",
                    "value": "test"
                }
            ],
            "created_at": "1687428000",
            "created_by": "6982509313466189342",
            "updated_at": "1687428000",
            "updated_by": "6982509313466189342"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateAttendanceLeaveAccrualRecordRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
