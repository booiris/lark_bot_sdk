//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T09:26:22+00:00**
    ///
    /// ## 导入打卡流水
    ///
    /// 导入员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。可在打卡管理-[打卡记录](https://example.feishu.cn/people/workforce-management/manage/statistics/flow)中查询
    ///
    /// 适用于考勤机数据导入等场景。
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/user_task/batch_create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_task%2Fbatch_create>
    pub async fn batch_create_attendance_user_flow(
        &self,
        req: BatchCreateAttendanceUserFlowReq,
    ) -> Result<(BatchCreateAttendanceUserFlowResp, CommonResponse), Error> {
        self.batch_create_attendance_user_flow_with_opt(req, Default::default())
            .await
    }

    /// 参见 [batch_create_attendance_user_flow](#method.batch_create_attendance_user_flow) 函数
    pub async fn batch_create_attendance_user_flow_with_opt(
        &self,
        req: BatchCreateAttendanceUserFlowReq,
        method_option: MethodOption,
    ) -> Result<(BatchCreateAttendanceUserFlowResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_batch_create_attendance_user_flow(&req) {
                tracing::info!("[lark] Attendance#BatchCreateAttendanceUserFlow **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#BatchCreateAttendanceUserFlow call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "BatchCreateAttendanceUserFlow",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_flows/batch_create",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (BatchCreateAttendanceUserFlowRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct BatchCreateAttendanceUserFlowReq {
    /// 请求体和响应体中的 user_id 和 creator_id 的员工id类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 打卡流水记录列表(数量限制50)
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "flow_records")]
    pub flow_records: Vec<Option<UserFlowSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserFlowSubReq {
    /// 用户 ID。与employee_type对应
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 记录创建者 ID。与employee_type对应
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "creator_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub creator_id: String,
    /// 打卡位置名称信息
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "西溪八方城"
    #[serde(
        rename = "location_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_name: String,
    /// 打卡时间，精确到秒的时间戳（只支持导入打卡时间在2022年1月1日之后的数据）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "check_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_time: String,
    /// 打卡备注
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "上班打卡"
    #[serde(
        rename = "comment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub comment: String,
    /// 打卡记录 ID，导入时此参数无效
    ///
    /// **示例值**: "6709359313699356941"
    #[serde(
        rename = "record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_id: Option<String>,
    /// 打卡 Wi-Fi 的 SSID
    ///
    /// **示例值**: "b0:b8:67:5c:1d:72"
    #[serde(
        rename = "ssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ssid: Option<String>,
    /// 打卡 Wi-Fi 的 MAC 地址
    ///
    /// **示例值**: "b0:b8:67:5c:1d:72"
    #[serde(
        rename = "bssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bssid: Option<String>,
    /// 是否为外勤打卡。默认为false，非外勤打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_field",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_field: Option<bool>,
    /// 是否为 Wi-Fi 打卡。默认为false，非Wi-Fi打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_wifi",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_wifi: Option<bool>,
    /// 记录生成方式。在开放平台调用时，此参数无效，内部值始终是7
    ///
    /// **示例值**: "7"
    ///
    /// **可选值**:
    ///
    /// `Self`: 用户打卡
    ///
    /// `ManagerModification`: 管理员修改
    ///
    /// `Remedy`: 用户补卡
    ///
    /// `System`: 系统自动生成
    ///
    /// `Free`: 下班免打卡
    ///
    /// `Machine`: 考勤机
    ///
    /// `Quick`: 极速打卡
    ///
    /// `import`: 考勤开放平台导入
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: Option<i64>,
    /// 打卡照片列表（该字段目前不支持）
    ///
    /// **示例值**: "https://time.clockin.biz/manage/download/6840389754748502021"
    #[serde(
        rename = "photo_urls",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub photo_urls: Vec<Option<String>>,
    /// 打卡设备ID，（只支持小程序打卡，导入时无效）
    ///
    /// **示例值**: "99e0609ee053448596502691a81428654d7ded64c7bd85acd982d26b3636c37d"
    #[serde(
        rename = "device_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub device_id: Option<String>,
    /// 打卡结果，作为入参时无效
    ///
    /// **示例值**: "Invalid"
    ///
    /// **可选值**:
    ///
    /// `NoNeedCheck`: 无需打卡
    ///
    /// `SystemCheck`: 系统打卡
    ///
    /// `Normal`: 正常
    ///
    /// `Early`: 早退
    ///
    /// `Late`: 迟到
    ///
    /// `SeriousLate`: 严重迟到
    ///
    /// `Lack`: 缺卡
    ///
    /// `Invalid`: 无效
    ///
    /// `None`: 无状态
    ///
    /// `Todo`: 尚未打卡
    #[serde(
        rename = "check_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_result: Option<String>,
    /// 用户导入的外部打卡记录ID，用于和外部数据对比，如果不传，在查询的时候不方便区分
    ///
    /// **示例值**: "record_123"
    #[serde(
        rename = "external_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_id: Option<String>,
    /// 唯一幂等键，不传的话无法实现幂等处理
    ///
    /// **示例值**: "****_***"
    #[serde(
        rename = "idempotent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub idempotent_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct BatchCreateAttendanceUserFlowRespInner {
    #[serde(flatten)]
    data: Option<BatchCreateAttendanceUserFlowResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BatchCreateAttendanceUserFlowResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 打卡流水记录列表
    #[serde(
        rename = "flow_records",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub flow_records: Vec<UserFlowSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserFlowSubResp {
    /// 用户 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 记录创建者 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "creator_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub creator_id: String,
    /// 打卡位置名称信息
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "西溪八方城"
    #[serde(
        rename = "location_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_name: String,
    /// 打卡时间，精确到秒的时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "check_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_time: String,
    /// 打卡备注
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "上班打卡"
    #[serde(
        rename = "comment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub comment: String,
    /// 打卡记录 ID
    ///
    /// **示例值**: "6709359313699356941"
    #[serde(
        rename = "record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_id: String,
    /// 打卡 Wi-Fi 的 SSID
    ///
    /// **示例值**: "b0:b8:67:5c:1d:72"
    #[serde(
        rename = "ssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ssid: String,
    /// 打卡 Wi-Fi 的 MAC 地址
    ///
    /// **示例值**: "b0:b8:67:5c:1d:72"
    #[serde(
        rename = "bssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bssid: String,
    /// 是否为外勤打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_field",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_field: bool,
    /// 是否为 Wi-Fi 打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_wifi",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_wifi: bool,
    /// 记录生成方式
    ///
    /// **示例值**: "7"
    ///
    /// **可选值**:
    ///
    /// `Self`: 用户打卡
    ///
    /// `ManagerModification`: 管理员修改
    ///
    /// `Remedy`: 用户补卡
    ///
    /// `System`: 系统自动生成
    ///
    /// `Free`: 下班免打卡
    ///
    /// `Machine`: 考勤机
    ///
    /// `Quick`: 极速打卡
    ///
    /// `import`: 考勤开放平台导入
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 打卡照片列表
    ///
    /// **示例值**: "https://time.clockin.biz/manage/download/6840389754748502021"
    #[serde(
        rename = "photo_urls",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub photo_urls: Vec<String>,
    /// 打卡设备ID（只支持小程序打卡，导入时无效）
    ///
    /// **示例值**: "99e0609ee053448596502691a81428654d7ded64c7bd85acd982d26b3636c37d"
    #[serde(
        rename = "device_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub device_id: String,
    /// 打卡结果
    ///
    /// **示例值**: "Invalid"
    ///
    /// **可选值**:
    ///
    /// `NoNeedCheck`: 无需打卡
    ///
    /// `SystemCheck`: 系统打卡
    ///
    /// `Normal`: 正常
    ///
    /// `Early`: 早退
    ///
    /// `Late`: 迟到
    ///
    /// `SeriousLate`: 严重迟到
    ///
    /// `Lack`: 缺卡
    ///
    /// `Invalid`: 无效
    ///
    /// `None`: 无状态
    ///
    /// `Todo`: 尚未打卡
    #[serde(
        rename = "check_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_result: String,
    /// 用户导入的外部打卡记录ID
    ///
    /// **示例值**: "record_123"
    #[serde(
        rename = "external_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_id: String,
    /// 唯一幂等键
    ///
    /// **示例值**: "****_***"
    #[serde(
        rename = "idempotent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub idempotent_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            BatchCreateAttendanceUserFlowReq,
        ) -> Result<(BatchCreateAttendanceUserFlowResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    BatchCreateAttendanceUserFlowReq,
                )
                    -> Result<(BatchCreateAttendanceUserFlowResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_batch_create_attendance_user_flow<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            BatchCreateAttendanceUserFlowReq,
            BatchCreateAttendanceUserFlowResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_batch_create_attendance_user_flow(
            &self,
            req: &BatchCreateAttendanceUserFlowReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                BatchCreateAttendanceUserFlowReq,
                BatchCreateAttendanceUserFlowResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::batch_create_attendance_user_flow::{
            BatchCreateAttendanceUserFlowReq, BatchCreateAttendanceUserFlowResp,
            BatchCreateAttendanceUserFlowRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_batch_create_attendance_user_flow(|_| {
                Ok((
                    BatchCreateAttendanceUserFlowResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .batch_create_attendance_user_flow(BatchCreateAttendanceUserFlowReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .batch_create_attendance_user_flow(BatchCreateAttendanceUserFlowReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "flow_records": [
        {
            "user_id": "abd754f7",
            "creator_id": "abd754f7",
            "location_name": "西溪八方城",
            "check_time": "1611476284 （只支持导入打卡时间在2022年1月1日之后的数据）",
            "comment": "上班打卡",
            "record_id": "考勤内部的打卡记录ID, 6709359313699356941（导入时此参数无效）",
            "ssid": "b0:b8:67:5c:1d:72",
            "bssid": "b0:b8:67:5c:1d:72",
            "is_field": true,
            "is_wifi": true,
            "type": 7,
            "photo_urls": [
                "https://time.clockin.biz/manage/download/6840389754748502021"
            ],
            "check_result": "Invalid",
            "external_id": "record_123"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::BatchCreateAttendanceUserFlowReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success，当流水导入失败时，msg格式为：[失败流水1userid-失败流水1creatorid, 失败流水2userid-失败流水2creatorid ... ]",
    "data": {
        "flow_records": [
            {
                "user_id": "abd754f7",
                "creator_id": "abd754f7",
                "location_name": "西溪八方城",
                "check_time": "1611476284",
                "comment": "上班打卡",
                "record_id": "考勤内部的打卡记录ID, 6709359313699356941（导入时此参数无效）",
                "ssid": "b0:b8:67:5c:1d:72",
                "bssid": "b0:b8:67:5c:1d:72",
                "is_field": true,
                "is_wifi": true,
                "type": 7,
                "photo_urls": [
                    "https://time.clockin.biz/manage/download/6840389754748502021"
                ],
                "check_result": "Invalid",
                "external_id": "record_123"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<BatchCreateAttendanceUserFlowRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
