//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T09:26:23+00:00**
    ///
    /// ## 查询打卡结果
    ///
    /// 获取企业内员工的实际打卡结果，包括：
    ///
    /// * 打卡任务列表
    ///
    /// * 打卡记录id
    ///
    /// * 用户信息
    ///
    /// * 考勤组id
    ///
    /// * 班次id
    ///
    /// * 考勤记录
    ///
    /// * 上班记录
    ///
    /// * 下班记录
    ///
    /// * 上班打卡结果
    ///
    /// * 下班打卡结果
    ///
    /// * 上班打卡结果补充
    ///
    /// * 下班打卡结果补充
    ///
    /// * 上班打卡时间
    ///
    /// * 下班打卡时间
    ///
    /// * 无效用户id列表
    ///
    /// * 没有权限用户ID列表
    ///
    /// - 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。
    ///
    /// - 如果要获取打卡的详细数据，如打卡位置等信息，可使用[查询打卡流水](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/get)或[批量查询打卡流水](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query)的接口
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/user_task/query>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_task%2Fquery>
    pub async fn get_attendance_user_task(
        &self,
        req: GetAttendanceUserTaskReq,
    ) -> Result<(GetAttendanceUserTaskResp, CommonResponse), Error> {
        self.get_attendance_user_task_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_attendance_user_task](#method.get_attendance_user_task) 函数
    pub async fn get_attendance_user_task_with_opt(
        &self,
        req: GetAttendanceUserTaskReq,
        method_option: MethodOption,
    ) -> Result<(GetAttendanceUserTaskResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_attendance_user_task(&req) {
                tracing::info!("[lark] Attendance#GetAttendanceUserTask **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#GetAttendanceUserTask call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "GetAttendanceUserTask",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_tasks/query",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAttendanceUserTaskRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAttendanceUserTaskReq {
    /// 员工ID类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 是否忽略无效和没有权限的用户，对应employee_type。如果 true，则返回有效用户的信息，并告知无效和没有权限的用户信息；如果 false，且 user_ids 中存在无效或没有权限的用户，则返回错误
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "ignore_invalid_users",
        v_type = "var",
        option = "false"
    )]
    pub ignore_invalid_users: bool,
    /// 由于新入职员工可以复用已离职员工的 employee_no/employee_id，对应employee_type。如果 true，则返回 employee_no/employee_id 对应的所有在职 + 离职员工的数据；如果 false，则只返回 employee_no/employee_id 对应的在职或最近一个离职员工的数据
    ///
    /// **示例值**: "true"
    #[api(
        kind = "query",
        name = "include_terminated_user",
        v_type = "var",
        option = "false"
    )]
    pub include_terminated_user: bool,
    /// employee_no 或 employee_id 列表，对应employee_type，长度不超过 50
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[api(kind = "body", name = "user_ids")]
    pub user_ids: Vec<Option<String>>,
    /// 查询的起始工作日，格式为yyyyMMdd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20190817"
    #[api(kind = "body", name = "check_date_from")]
    pub check_date_from: i64,
    /// 查询的结束工作日，格式为yyyyMMdd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20190820"
    #[api(kind = "body", name = "check_date_to")]
    pub check_date_to: i64,
    /// 是否需要加班班段打卡结果；当need_overtime_result=true时，会返回加班班段，加班班段通过task_shift_type=1标识，加班班段上下班与正常班段相连时会出现共用record_id情况。例如：9-18为正常班次，18-19为加班班次，打卡结果中records 会出现两段，分别为9-18，18-19 且两段上下班record_id相同（check_in_record_id和check_out_record_id相同）。非相连加班班次正常分段返回。当need_overtime_result=false时，仅返回正常班段且task_shift_type=0。
    ///
    /// **示例值**: "true"
    #[api(kind = "body", name = "need_overtime_result")]
    pub need_overtime_result: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAttendanceUserTaskRespInner {
    #[serde(flatten)]
    data: Option<GetAttendanceUserTaskResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAttendanceUserTaskResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 打卡任务列表
    #[serde(
        rename = "user_task_results",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_task_results: Vec<UserTaskSubResp>,
    /// 无效用户 ID 列表，对应employee_type
    #[serde(
        rename = "invalid_user_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub invalid_user_ids: Vec<String>,
    /// 没有权限用户 ID 列表，对应employee_type
    #[serde(
        rename = "unauthorized_user_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub unauthorized_user_ids: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserTaskSubResp {
    /// 打卡记录 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6709359313699356941"
    #[serde(
        rename = "result_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub result_id: String,
    /// 用户 ID，对应employee_type
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 用户姓名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "employee_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_name: String,
    /// 日期，格式为yyyyMMdd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20190819"
    #[serde(
        rename = "day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub day: i64,
    /// 考勤组 ID（特别说明：1代表未加入考勤组），可用于[按 ID 查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6737202939523236110"
    #[serde(
        rename = "group_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_id: String,
    /// 班次 ID（特别说明：9代表默认班次），可用于[按 ID 查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6753520403404030215"
    #[serde(
        rename = "shift_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_id: String,
    /// 用户考勤记录
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "records",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub records: Vec<TaskResultSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TaskResultSubResp {
    /// 上班打卡记录 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6709359313699356941"
    #[serde(
        rename = "check_in_record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_in_record_id: String,
    /// 上班打卡记录
    #[serde(
        rename = "check_in_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_in_record: UserFlowSubResp,
    /// 下班打卡记录 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6709359313699356942"
    #[serde(
        rename = "check_out_record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_out_record_id: String,
    /// 下班打卡记录
    #[serde(
        rename = "check_out_record",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_out_record: UserFlowSubResp,
    /// 上班打卡结果
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "SystemCheck"
    ///
    /// **可选值**:
    ///
    /// `NoNeedCheck`: 无需打卡
    ///
    /// `SystemCheck`: 系统打卡（已弃用）
    ///
    /// `Normal`: 正常
    ///
    /// `Early`: 早退
    ///
    /// `Late`: 迟到
    ///
    /// `Lack`: 缺卡
    #[serde(
        rename = "check_in_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_in_result: String,
    /// 下班打卡结果
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "SystemCheck"
    ///
    /// **可选值**:
    ///
    /// `NoNeedCheck`: 无需打卡
    ///
    /// `SystemCheck`: 系统打卡（已弃用）
    ///
    /// `Normal`: 正常
    ///
    /// `Early`: 早退
    ///
    /// `Late`: 迟到
    ///
    /// `Lack`: 缺卡
    #[serde(
        rename = "check_out_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_out_result: String,
    /// 上班打卡结果补充
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "None"
    ///
    /// **可选值**:
    ///
    /// `None`: 无
    ///
    /// `ManagerModification`: 管理员修改
    ///
    /// `CardReplacement`: 补卡通过
    ///
    /// `ShiftChange`: 换班
    ///
    /// `Travel`: 出差
    ///
    /// `Leave`: 请假
    ///
    /// `GoOut`: 外出
    ///
    /// `CardReplacementApplication`: 补卡申请中
    ///
    /// `FieldPunch`: 外勤打卡
    #[serde(
        rename = "check_in_result_supplement",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_in_result_supplement: String,
    /// 下班打卡结果补充
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "None"
    ///
    /// **可选值**:
    ///
    /// `None`: 无
    ///
    /// `ManagerModification`: 管理员修改
    ///
    /// `CardReplacement`: 补卡通过
    ///
    /// `ShiftChange`: 换班
    ///
    /// `Travel`: 出差
    ///
    /// `Leave`: 请假
    ///
    /// `GoOut`: 外出
    ///
    /// `CardReplacementApplication`: 补卡申请中
    ///
    /// `FieldPunch`: 外勤打卡
    #[serde(
        rename = "check_out_result_supplement",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_out_result_supplement: String,
    /// 上班打卡时间，秒级时间戳
    ///
    /// **示例值**: "1609722000"
    #[serde(
        rename = "check_in_shift_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_in_shift_time: String,
    /// 下班打卡时间，秒级时间戳
    ///
    /// **示例值**: "1609754400"
    #[serde(
        rename = "check_out_shift_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_out_shift_time: String,
    /// 班次类型，0正常，1加班班次
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "task_shift_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_shift_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserFlowSubResp {
    /// 用户 ID，对应employee_type
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 记录创建者 ID，对应employee_type
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "abd754f7"
    #[serde(
        rename = "creator_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub creator_id: String,
    /// 打卡位置名称信息
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "西溪八方城"
    #[serde(
        rename = "location_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_name: String,
    /// 打卡时间，精确到秒的时间戳
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "check_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_time: String,
    /// 打卡备注
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "上班打卡"
    #[serde(
        rename = "comment",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub comment: String,
    /// 考勤内部的打卡记录ID（导入时此参数无效）
    ///
    /// **示例值**: "6709359313699356941"
    #[serde(
        rename = "record_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub record_id: String,
    /// 打卡 Wi-Fi 的 SSID
    ///
    /// **示例值**: "b0:b8:67:5c:1d:72"
    #[serde(
        rename = "ssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ssid: String,
    /// 打卡 Wi-Fi 的 MAC 地址
    ///
    /// **示例值**: "b0:b8:67:5c:1d:72"
    #[serde(
        rename = "bssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bssid: String,
    /// 是否为外勤打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_field",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_field: bool,
    /// 是否为 Wi-Fi 打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_wifi",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_wifi: bool,
    /// 记录生成方式
    ///
    /// **示例值**: "7"
    ///
    /// **可选值**:
    ///
    /// `Self`: 用户打卡
    ///
    /// `ManagerModification`: 管理员修改
    ///
    /// `Remedy`: 用户补卡
    ///
    /// `System`: 系统自动生成
    ///
    /// `Free`: 下班免打卡
    ///
    /// `Machine`: 考勤机
    ///
    /// `Quick`: 极速打卡
    ///
    /// `import`: 考勤开放平台导入
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 打卡照片列表
    #[serde(
        rename = "photo_urls",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub photo_urls: Vec<String>,
    /// 打卡设备ID（只支持小程序打卡，导入时无效）
    ///
    /// **示例值**: "99e0609ee053448596502691a81428654d7ded64c7bd85acd982d26b3636c37d"
    #[serde(
        rename = "device_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub device_id: String,
    /// 打卡结果
    ///
    /// **示例值**: "Invalid"
    ///
    /// **可选值**:
    ///
    /// `NoNeedCheck`: 无需打卡
    ///
    /// `SystemCheck`: 系统打卡（已弃用）
    ///
    /// `Normal`: 正常
    ///
    /// `Early`: 早退
    ///
    /// `Late`: 迟到
    ///
    /// `SeriousLate`: 严重迟到
    ///
    /// `Lack`: 缺卡
    ///
    /// `Invalid`: 无效
    ///
    /// `None`: 无状态
    ///
    /// `Todo`: 尚未打卡
    #[serde(
        rename = "check_result",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_result: String,
    /// 用户导入的外部打卡记录ID
    ///
    /// **示例值**: "record_123"
    #[serde(
        rename = "external_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub external_id: String,
    /// 唯一幂等键
    ///
    /// **示例值**: "****_***"
    #[serde(
        rename = "idempotent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub idempotent_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetAttendanceUserTaskReq) -> Result<(GetAttendanceUserTaskResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetAttendanceUserTaskReq,
                ) -> Result<(GetAttendanceUserTaskResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_attendance_user_task<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetAttendanceUserTaskReq,
            GetAttendanceUserTaskResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_attendance_user_task(
            &self,
            req: &GetAttendanceUserTaskReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetAttendanceUserTaskReq, GetAttendanceUserTaskResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::get_attendance_user_task::{
            GetAttendanceUserTaskReq, GetAttendanceUserTaskResp, GetAttendanceUserTaskRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_get_attendance_user_task(|_| {
                Ok((
                    GetAttendanceUserTaskResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .get_attendance_user_task(GetAttendanceUserTaskReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .get_attendance_user_task(GetAttendanceUserTaskReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "user_ids": [
        "abd754f7"
    ],
    "check_date_from": 20190817,
    "check_date_to": 20190820,
    "need_overtime_result": true
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetAttendanceUserTaskReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "user_task_results": [
            {
                "result_id": "6709359313699356941",
                "user_id": "abd754f7",
                "employee_name": "张三",
                "day": 20190819,
                "group_id": "6737202939523236110",
                "shift_id": "6753520403404030215",
                "records": [
                    {
                        "check_in_record_id": "6709359313699356941",
                        "check_in_record": {
                            "user_id": "abd754f7",
                            "creator_id": "abd754f7",
                            "location_name": "西溪八方城",
                            "check_time": "1611476284",
                            "comment": "上班打卡",
                            "record_id": "6709359313699356941",
                            "ssid": "b0:b8:67:5c:1d:72",
                            "bssid": "b0:b8:67:5c:1d:72",
                            "is_field": true,
                            "is_wifi": true,
                            "type": 7,
                            "photo_urls": [
                                "https://time.clockin.biz/manage/download/6840389754748502021"
                            ],
                            "device_id": "99e0609ee053448596502691a81428654d7ded64c7bd85acd982d26b3636c37d",
                            "check_result": "Invalid",
                            "external_id": "record_123",
                            "idempotent_id": "****_***"
                        },
                        "check_out_record_id": "6709359313699356942",
                        "check_out_record": {
                            "user_id": "abd754f7",
                            "creator_id": "abd754f7",
                            "location_name": "西溪八方城",
                            "check_time": "1611476284",
                            "comment": "上班打卡",
                            "record_id": "6709359313699356941",
                            "ssid": "b0:b8:67:5c:1d:72",
                            "bssid": "b0:b8:67:5c:1d:72",
                            "is_field": true,
                            "is_wifi": true,
                            "type": 7,
                            "photo_urls": [
                                "https://time.clockin.biz/manage/download/6840389754748502021"
                            ],
                            "device_id": "99e0609ee053448596502691a81428654d7ded64c7bd85acd982d26b3636c37d",
                            "check_result": "Invalid",
                            "external_id": "record_123",
                            "idempotent_id": "****_***"
                        },
                        "check_in_result": "SystemCheck",
                        "check_out_result": "SystemCheck",
                        "check_in_result_supplement": "None",
                        "check_out_result_supplement": "None",
                        "check_in_shift_time": "1609722000",
                        "check_out_shift_time": "1609754400",
                        "task_shift_type": 0
                    }
                ]
            }
        ],
        "invalid_user_ids": [
            "abd754f7"
        ],
        "unauthorized_user_ids": [
            "abd754f7"
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetAttendanceUserTaskRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
