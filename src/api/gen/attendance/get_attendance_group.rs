//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-16T09:26:21+00:00**
    ///
    /// ## 按 ID 查询考勤组
    ///
    /// 通过考勤组 ID 获取考勤组详情。包含基本信息、考勤班次、考勤方式、考勤设置信息
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/attendance-v1/group/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fgroup%2Fget>
    pub async fn get_attendance_group(
        &self,
        req: GetAttendanceGroupReq,
    ) -> Result<(GetAttendanceGroupResp, CommonResponse), Error> {
        self.get_attendance_group_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_attendance_group](#method.get_attendance_group) 函数
    pub async fn get_attendance_group_with_opt(
        &self,
        req: GetAttendanceGroupReq,
        method_option: MethodOption,
    ) -> Result<(GetAttendanceGroupResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_attendance_group(&req) {
                tracing::info!("[lark] Attendance#GetAttendanceGroup **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#GetAttendanceGroup call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "GetAttendanceGroup",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/groups/:group_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetAttendanceGroupRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetAttendanceGroupReq {
    /// 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919358128597097404"
    #[api(kind = "path", name = "group_id")]
    pub group_id: String,
    /// 请求体和响应体中的 user_id 和 creator_id 的员工id类型。如果没有后台管理权限，可使用[通过手机号或邮箱获取用户 ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即[飞书管理后台](https://example.feishu.cn/admin/contacts/departmentanduser) > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 部门 ID 的类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 暂时只支持部门的 openid。具体概念请参考[部门资源介绍](https://open.larkoffice.com/document/server-docs/contact-v3/department/field-overview)中的open_department_id
    #[api(kind = "query", name = "dept_type", v_type = "var", option = "false")]
    pub dept_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetAttendanceGroupRespInner {
    #[serde(flatten)]
    data: Option<GetAttendanceGroupResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetAttendanceGroupResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: GroupSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct GroupSubResp {
    /// 考勤组 ID
    ///
    /// **示例值**: "6919358128597097404"
    #[serde(
        rename = "group_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_id: String,
    /// 考勤组名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "开心考勤"
    #[serde(
        rename = "group_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_name: String,
    /// 时区
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "Asia/Shanghai"
    #[serde(
        rename = "time_zone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_zone: String,
    /// 绑定的部门 ID（与「need_punch_members」同时使用时，以当前字段为准）。对应dept_type
    #[serde(
        rename = "bind_dept_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bind_dept_ids: Vec<String>,
    /// 排除的部门 ID（该字段已下线）
    #[serde(
        rename = "except_dept_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub except_dept_ids: Vec<String>,
    /// 绑定的用户 ID（与「need_punch_members」同时使用时，以当前字段为准），对应employee_type
    #[serde(
        rename = "bind_user_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bind_user_ids: Vec<String>,
    /// 排除的用户 ID（该字段已下线），对应employee_type
    #[serde(
        rename = "except_user_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub except_user_ids: Vec<String>,
    /// 考勤主负责人 ID 列表，必选字段（需至少拥有考勤组管理员权限），对应employee_type
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "group_leader_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_leader_ids: Vec<String>,
    /// 考勤子负责人 ID 列表，对应employee_type
    #[serde(
        rename = "sub_group_leader_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sub_group_leader_ids: Vec<String>,
    /// 是否允许外勤打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_out_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_out_punch: bool,
    /// 外勤打卡需审批（需要允许外勤打卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "out_punch_need_approval",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub out_punch_need_approval: bool,
    /// 外勤打卡需填写备注（需要允许外勤打卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "out_punch_need_remark",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub out_punch_need_remark: bool,
    /// 外勤打卡需拍照（需要允许外勤打卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "out_punch_need_photo",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub out_punch_need_photo: bool,
    /// 外勤打卡允许员工隐藏详细地址（需要允许外勤打卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "out_punch_allowed_hide_addr",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub out_punch_allowed_hide_addr: bool,
    /// 是否允许 PC 端打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_pc_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_pc_punch: bool,
    /// 是否限制补卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_remedy",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_remedy: bool,
    /// 是否限制补卡次数
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "remedy_limit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_limit: bool,
    /// 补卡次数
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "remedy_limit_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_limit_count: i64,
    /// 是否限制补卡时间
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "remedy_date_limit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_date_limit: bool,
    /// 补卡时间，几天内补卡
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "remedy_date_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_date_num: i64,
    /// 允许缺卡补卡（需要允许补卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_remedy_type_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_remedy_type_lack: bool,
    /// 允许迟到补卡（需要允许补卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_remedy_type_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_remedy_type_late: bool,
    /// 允许早退补卡（需要允许补卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_remedy_type_early",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_remedy_type_early: bool,
    /// 允许正常补卡（需要允许补卡才能设置生效）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "allow_remedy_type_normal",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub allow_remedy_type_normal: bool,
    /// 是否展示累计时长
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_cumulative_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_cumulative_time: bool,
    /// 是否展示加班时长
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "show_over_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub show_over_time: bool,
    /// 是否隐藏员工打卡详情
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "hide_staff_punch_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hide_staff_punch_time: bool,
    /// 是否开启人脸识别打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "face_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub face_punch: bool,
    /// 人脸识别打卡规则
    ///
    /// **可选值有：**
    ///
    /// * 1：每次打卡均需人脸识别
    ///
    /// * 2：疑似作弊打卡时需要人脸识别
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "face_punch_cfg",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub face_punch_cfg: i64,
    /// 人脸打卡规则。
    ///
    /// **可选值有：**
    ///
    /// * false：开启活体验证
    ///
    /// * true：动作验证，仅在 face_punch_cfg = 1 时有效
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "face_live_need_action",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub face_live_need_action: bool,
    /// 人脸识别失败时是否允许普通拍照打卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "face_downgrade",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub face_downgrade: bool,
    /// 人脸识别失败时是否允许替换基准图片
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "replace_basic_pic",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub replace_basic_pic: bool,
    /// 考勤机列表
    #[serde(
        rename = "machines",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub machines: Vec<MachineSubResp>,
    /// GPS 打卡的有效范围（不建议使用）
    ///
    /// **示例值**: "300"
    #[serde(
        rename = "gps_range",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gps_range: i64,
    /// 地址列表（仅追加，不会覆盖之前的列表）
    #[serde(
        rename = "locations",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub locations: Vec<LocationSubResp>,
    /// 考勤类型，0：固定班制，2：排班制， 3：自由班制
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "group_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_type: i64,
    /// 固定班制必须填
    ///
    /// **是否必填**: 是
    #[serde(
        rename = "punch_day_shift_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_day_shift_ids: Vec<String>,
    /// 配置自由班制
    #[serde(
        rename = "free_punch_cfg",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub free_punch_cfg: FreePunchCfgSubResp,
    /// 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "calendar_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub calendar_id: i64,
    /// 必须打卡的特殊日期
    #[serde(
        rename = "need_punch_special_days",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub need_punch_special_days: Vec<PunchSpecialDateShiftSubResp>,
    /// 无需打卡的特殊日期
    #[serde(
        rename = "no_need_punch_special_days",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_punch_special_days: Vec<PunchSpecialDateShiftSubResp>,
    /// 自由班制下工作日不打卡是否记为缺卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "work_day_no_punch_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_day_no_punch_as_lack: bool,
    /// 补卡周期类型。1为按自然月，2为自定义周期
    ///
    /// * 1：MONTH
    ///
    /// * 2：CUSTOM
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "remedy_period_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_period_type: i64,
    /// 补卡自定义周期起始日期
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "remedy_period_custom_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remedy_period_custom_date: i64,
    /// 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "punch_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_type: i64,
    /// 生效时间，精确到秒的时间戳
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "effect_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub effect_time: String,
    /// 固定班次生效时间，精确到秒的时间戳
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "fixshift_effect_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub fixshift_effect_time: String,
    /// 参加考勤的人员、部门变动生效时间，精确到秒的时间戳
    ///
    /// **示例值**: "1611476284"
    #[serde(
        rename = "member_effect_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_effect_time: String,
    /// 休息日打卡需审批
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "rest_clockIn_need_approval",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rest_clock_in_need_approval: bool,
    /// 每次打卡均需拍照
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "clockIn_need_photo",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub clock_in_need_photo: bool,
    /// 人员异动打卡设置
    #[serde(
        rename = "member_status_change",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_status_change: MemberStatusChangeSubResp,
    /// 请假离岗或返岗是否需打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "leave_need_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_need_punch: bool,
    /// 请假离岗或返岗打卡规则，单位：分钟
    #[serde(
        rename = "leave_need_punch_cfg",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub leave_need_punch_cfg: LeaveNeedPunchCfgSubResp,
    /// 外出期间是否需打卡
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "go_out_need_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub go_out_need_punch: i64,
    /// 外出期间打卡规则，单位：分钟
    #[serde(
        rename = "go_out_need_punch_cfg",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub go_out_need_punch_cfg: LeaveNeedPunchCfgSubResp,
    /// 出差期间是否需打卡
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "travel_need_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub travel_need_punch: i64,
    /// 出差期间打卡规则，单位：分钟
    #[serde(
        rename = "travel_need_punch_cfg",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub travel_need_punch_cfg: LeaveNeedPunchCfgSubResp,
    /// 需要打卡的人员集合（仅当不传「bind_dept_ids」和「bind_user_ids」时，才会使用该字段）
    #[serde(
        rename = "need_punch_members",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub need_punch_members: Vec<PunchMemberSubResp>,
    /// 无需打卡的人员集合（仅当不传「bind_default_dept_ids」和「bind_default_user_ids」时，才会使用该字段）
    #[serde(
        rename = "no_need_punch_members",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub no_need_punch_members: Vec<PunchMemberSubResp>,
    /// 是否允许保存有冲突人员的考勤组。如果 true，则冲突人员将被自动拉入到当前设置的考勤组中，并从原考勤组中移除；如果 false，则需手动调整冲突人员
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "save_auto_changes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub save_auto_changes: bool,
    /// 当有新员工入职或人员异动，符合条件的人员是否自动加入考勤组
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "org_change_auto_adjust",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub org_change_auto_adjust: bool,
    /// 参与无需打卡的部门 ID 列表（与「no_need_punch_members」同时使用时，以当前字段为准）。对应dept_type
    #[serde(
        rename = "bind_default_dept_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bind_default_dept_ids: Vec<String>,
    /// 参与无需打卡的人员 ID 列表（与「no_need_punch_members」同时使用时，以当前字段为准）。对应employee_type
    #[serde(
        rename = "bind_default_user_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bind_default_user_ids: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FreePunchCfgSubResp {
    /// 自由班制打卡开始时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7:00"
    #[serde(
        rename = "free_start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub free_start_time: String,
    /// 自由班制打卡结束时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "18:00"
    #[serde(
        rename = "free_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub free_end_time: String,
    /// 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班。例如示例值1111100，代表从周一到周五上班，周六周日休息
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1111100"
    #[serde(
        rename = "punch_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_day: i64,
    /// 工作日不打卡是否记为缺卡
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "work_day_no_punch_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_day_no_punch_as_lack: bool,
    /// 工作日出勤是否需满足时长要求
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "work_hours_demand",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_hours_demand: bool,
    /// 每日工作时长（分钟),范围[0,1440]
    ///
    /// **示例值**: "480"
    #[serde(
        rename = "work_hours",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_hours: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MemberStatusChangeSubResp {
    /// 是否入职日上班无需打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "onboarding_on_no_need_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboarding_on_no_need_punch: bool,
    /// 是否入职日下班无需打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "onboarding_off_no_need_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub onboarding_off_no_need_punch: bool,
    /// 是否离职日上班无需打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "offboarding_on_no_need_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_on_no_need_punch: bool,
    /// 是否离职日下班无需打卡
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "offboarding_off_no_need_punch",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_off_no_need_punch: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LeaveNeedPunchCfgSubResp {
    /// 晚到超过多久记为迟到，单位：分钟
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "late_minutes_as_late",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_late: i64,
    /// 晚到超过多久记为缺卡，单位：分钟
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "late_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub late_minutes_as_lack: i64,
    /// 早走超过多久记为早退，单位：分钟
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "early_minutes_as_early",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_early: i64,
    /// 早走超过多久记为缺卡，单位：分钟
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "early_minutes_as_lack",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub early_minutes_as_lack: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MachineSubResp {
    /// 考勤机序列号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "FS0701"
    #[serde(
        rename = "machine_sn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub machine_sn: String,
    /// 考勤机名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "创实 9 楼"
    #[serde(
        rename = "machine_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub machine_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct LocationSubResp {
    /// 地址 ID，系统ID只透传，暂时无用
    ///
    /// **示例值**: "6921213751454744578"
    #[serde(
        rename = "location_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_id: String,
    /// 地址名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "浙江省杭州市余杭区五常街道木桥头西溪八方城"
    #[serde(
        rename = "location_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_name: String,
    /// 地址类型
    ///
    /// **可选值有：**
    ///
    /// * 1：GPS
    ///
    /// * 2：Wi-Fi
    ///
    /// * 8：IP
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "location_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub location_type: i64,
    /// 地址纬度
    ///
    /// **示例值**: "30.28994"
    #[serde(
        rename = "latitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latitude: f64,
    /// 地址经度
    ///
    /// **示例值**: "120.04509"
    #[serde(
        rename = "longitude",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub longitude: f64,
    /// Wi-Fi 名称
    ///
    /// **示例值**: "TP-Link-af12ca"
    #[serde(
        rename = "ssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ssid: String,
    /// Wi-Fi 的 MAC 地址
    ///
    /// **示例值**: "08:00:20:0A:8C:6D"
    #[serde(
        rename = "bssid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bssid: String,
    /// 地图类型，1：高德， 2：谷歌
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "map_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub map_type: i64,
    /// 地址名称
    ///
    /// **示例值**: "北京市海淀区中航广场"
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: String,
    /// IP 地址
    ///
    /// **示例值**: "122.224.123.146"
    #[serde(
        rename = "ip",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ip: String,
    /// 额外信息，例如：运营商信息
    ///
    /// **示例值**: "中国电信"
    #[serde(
        rename = "feature",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub feature: String,
    /// GPS 打卡的有效范围
    ///
    /// **示例值**: "300"
    #[serde(
        rename = "gps_range",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gps_range: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PunchSpecialDateShiftSubResp {
    /// 打卡日期
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20190101"
    #[serde(
        rename = "punch_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub punch_day: i64,
    /// 班次 ID，可使用此id查询[班次详情](https://open.larkoffice.com/document/server-docs/attendance-v1/shift/get)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6919668827865513935"
    #[serde(
        rename = "shift_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub shift_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct PunchMemberSubResp {
    /// 圈人方式
    ///
    /// **可选值有：**
    ///
    /// * 0 无
    ///
    /// * 1 全部
    ///
    /// * 2 自定义
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "rule_scope_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rule_scope_type: i64,
    /// 圈人规则列表
    #[serde(
        rename = "scope_group_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scope_group_list: ScopeGroupSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ScopeGroupSubResp {
    /// **类型**：
    ///
    /// * 1: 部门
    ///
    /// * 2:人员
    ///
    /// * 3: 国家地区
    ///
    /// * 4: 员工类型
    ///
    /// * 5: 工作城市
    ///
    /// * 6: 职级
    ///
    /// * 7: 序列
    ///
    /// * 8: 职务（企业版）
    ///
    /// * 9: 工时制度（企业版）
    ///
    /// * 100: 自定义字段（企业版）
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "scope_value_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scope_value_type: i64,
    /// 范围类型（是否包含）
    ///
    /// * 1: 包含
    ///
    /// * 2: 不包含
    ///
    /// * 3: 相等
    ///
    /// * 4: 小于等于
    ///
    /// * 5: 大于等于
    ///
    /// * 6: 大于
    ///
    /// * 7: 小于
    ///
    /// * 8: 不相等
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "operation_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operation_type: i64,
    /// 如果是人员/部门类型 不需要使用该字段
    #[serde(
        rename = "right",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub right: Vec<ScopeValueSubResp>,
    /// 部门/人员id列表（具体类型根据scope_value_type判断）
    #[serde(
        rename = "member_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub member_ids: Vec<String>,
    /// 企业版自定义字段唯一键 ID, 需要从飞书人事获取
    ///
    /// **示例值**: "123213123"
    #[serde(
        rename = "custom_field_ID",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_field_id: String,
    /// 企业版自定义字段对象类型
    ///
    /// * "Employment": 主数据对象，员工雇佣信息
    ///
    /// * "Person": 主数据对象，个人
    ///
    /// **示例值**: "employment"
    #[serde(
        rename = "custom_field_obj_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_field_obj_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ScopeValueSubResp {
    /// 标识Key
    ///
    /// **示例值**: "CH"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 名称
    ///
    /// **示例值**: "中国大陆"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetAttendanceGroupReq) -> Result<(GetAttendanceGroupResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetAttendanceGroupReq) -> Result<(GetAttendanceGroupResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_attendance_group<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetAttendanceGroupReq, GetAttendanceGroupResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_attendance_group(
            &self,
            req: &GetAttendanceGroupReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetAttendanceGroupReq, GetAttendanceGroupResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::get_attendance_group::{
            GetAttendanceGroupReq, GetAttendanceGroupResp, GetAttendanceGroupRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_get_attendance_group(|_| {
                Ok((GetAttendanceGroupResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .attendance()
            .get_attendance_group(GetAttendanceGroupReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .get_attendance_group(GetAttendanceGroupReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "group_id": "6919358128597097404",
        "group_name": "开心考勤",
        "time_zone": "Asia/Shanghai",
        "bind_dept_ids": [
            "od-fcb45c28a45311afd440b7869541fce8"
        ],
        "except_dept_ids": [
            "od-fcb45c28a45311afd440b7869541fce8"
        ],
        "bind_user_ids": [
            "52aa1fa1"
        ],
        "except_user_ids": [
            "4fasdtc2"
        ],
        "group_leader_ids": [
            "52aa1fa1"
        ],
        "sub_group_leader_ids": [
            "4fasdtc2"
        ],
        "allow_out_punch": true,
        "out_punch_need_approval": true,
        "out_punch_need_remark": true,
        "out_punch_need_photo": true,
        "out_punch_allowed_hide_addr": true,
        "allow_pc_punch": true,
        "allow_remedy": true,
        "remedy_limit": true,
        "remedy_limit_count": 3,
        "remedy_date_limit": true,
        "remedy_date_num": 3,
        "allow_remedy_type_lack": true,
        "allow_remedy_type_late": true,
        "allow_remedy_type_early": true,
        "allow_remedy_type_normal": true,
        "show_cumulative_time": true,
        "show_over_time": true,
        "hide_staff_punch_time": true,
        "face_punch": true,
        "face_punch_cfg": 1,
        "face_live_need_action": false,
        "face_downgrade": true,
        "replace_basic_pic": true,
        "machines": [
            {
                "machine_sn": "FS0701",
                "machine_name": "创实 9 楼"
            }
        ],
        "gps_range": 300,
        "locations": [
            {
                "location_id": "6921213751454744578",
                "location_name": "浙江省杭州市余杭区五常街道木桥头西溪八方城",
                "location_type": 1,
                "latitude": 30.28994,
                "longitude": 120.04509,
                "ssid": "TP-Link-af12ca",
                "bssid": "08:00:20:0A:8C:6D",
                "map_type": 1,
                "address": "北京市海淀区中航广场",
                "ip": "122.224.123.146",
                "feature": "中国电信",
                "gps_range": 300
            }
        ],
        "group_type": 0,
        "punch_day_shift_ids": [
            "xxx"
        ],
        "free_punch_cfg": {
            "free_start_time": "7:00",
            "free_end_time": "18:00",
            "punch_day": 1111100,
            "work_day_no_punch_as_lack": true,
            "work_hours_demand": false,
            "work_hours": 480
        },
        "calendar_id": 1,
        "need_punch_special_days": [
            {
                "punch_day": 20190101,
                "shift_id": "6919668827865513935"
            }
        ],
        "no_need_punch_special_days": [
            {
                "punch_day": 20190101,
                "shift_id": "6919668827865513935"
            }
        ],
        "work_day_no_punch_as_lack": true,
        "remedy_period_type": 1,
        "remedy_period_custom_date": 1,
        "punch_type": 1,
        "effect_time": "1611476284",
        "fixshift_effect_time": "1611476284",
        "member_effect_time": "1611476284",
        "rest_clockIn_need_approval": true,
        "clockIn_need_photo": true,
        "member_status_change": {
            "onboarding_on_no_need_punch": false,
            "onboarding_off_no_need_punch": false,
            "offboarding_on_no_need_punch": false,
            "offboarding_off_no_need_punch": false
        },
        "leave_need_punch": false,
        "leave_need_punch_cfg": {
            "late_minutes_as_late": 0,
            "late_minutes_as_lack": 0,
            "early_minutes_as_early": 0,
            "early_minutes_as_lack": 0
        },
        "go_out_need_punch": 0,
        "go_out_need_punch_cfg": {
            "late_minutes_as_late": 0,
            "late_minutes_as_lack": 0,
            "early_minutes_as_early": 0,
            "early_minutes_as_lack": 0
        },
        "travel_need_punch": 0,
        "travel_need_punch_cfg": {
            "late_minutes_as_late": 0,
            "late_minutes_as_lack": 0,
            "early_minutes_as_early": 0,
            "early_minutes_as_lack": 0
        },
        "need_punch_members": [
            {
                "rule_scope_type": 0,
                "scope_group_list": {
                    "scope_value_type": 1,
                    "operation_type": 1,
                    "right": [
                        {
                            "key": "CH",
                            "name": "中国大陆"
                        }
                    ],
                    "member_ids": [
                        "ec8ddg56"
                    ],
                    "custom_field_ID": "123213123",
                    "custom_field_obj_type": "employment"
                }
            }
        ],
        "no_need_punch_members": [
            {
                "rule_scope_type": 0,
                "scope_group_list": {
                    "scope_value_type": 1,
                    "operation_type": 1,
                    "right": [
                        {
                            "key": "CH",
                            "name": "中国大陆"
                        }
                    ],
                    "member_ids": [
                        "ec8ddg56"
                    ],
                    "custom_field_ID": "123213123",
                    "custom_field_obj_type": "employment"
                }
            }
        ],
        "save_auto_changes": false,
        "org_change_auto_adjust": false,
        "bind_default_dept_ids": [
            "od-fcb45c28a45311afd440b7869541fce8"
        ],
        "bind_default_user_ids": [
            "dd31248a"
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetAttendanceGroupRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
