//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/update>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::attendance::AttendanceService;

impl<'c, IStore: Store, IClient: HttpClient> AttendanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-29T06:59:28+00:00**
    ///
    /// ## 更新统计设置
    ///
    /// 更新开发者定制的日度统计或月度统计的统计报表表头设置信息。
    ///
    /// 本接口会对设置进行全量覆盖更新
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/update>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/attendance-v1/user_stats_data/update>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fattendance-v1%2Fuser_stats_data%2Fupdate>
    pub async fn update_attendance_user_stats_view(
        &self,
        req: UpdateAttendanceUserStatsViewReq,
    ) -> Result<(UpdateAttendanceUserStatsViewResp, CommonResponse), Error> {
        self.update_attendance_user_stats_view_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_attendance_user_stats_view](#method.update_attendance_user_stats_view) 函数
    pub async fn update_attendance_user_stats_view_with_opt(
        &self,
        req: UpdateAttendanceUserStatsViewReq,
        method_option: MethodOption,
    ) -> Result<(UpdateAttendanceUserStatsViewResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_attendance_user_stats_view(&req) {
                tracing::info!("[lark] Attendance#UpdateAttendanceUserStatsView **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Attendance#UpdateAttendanceUserStatsView call api");

        let req = ApiRequest {
            scope: "Attendance",
            api: "UpdateAttendanceUserStatsView",
            method: http::Method::PUT,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/attendance/v1/user_stats_views/:user_stats_view_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateAttendanceUserStatsViewRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateAttendanceUserStatsViewReq {
    /// 用户视图 ID，获取方式：1）[查询统计设置](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query)
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
    #[api(kind = "path", name = "user_stats_view_id")]
    pub user_stats_view_id: String,
    /// 员工工号类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "employee_id"
    ///
    /// **可选值**:
    ///
    /// `employee_id`: 员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID
    ///
    /// `employee_no`: 员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
    #[api(
        kind = "query",
        name = "employee_type",
        v_type = "var",
        option = "false"
    )]
    pub employee_type: String,
    /// 统计设置
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "view")]
    pub view: UserStatsViewSubReq,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserStatsViewSubReq {
    /// 视图 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
    #[serde(
        rename = "view_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub view_id: String,
    /// 视图类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "month"
    ///
    /// **可选值**:
    ///
    /// `daily`: 日度统计
    ///
    /// `month`: 月度统计
    #[serde(
        rename = "stats_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stats_type: String,
    /// 操作者的用户id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ec8ddg56"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 用户设置字段
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<Option<ItemSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ItemSubReq {
    /// 标题编号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "522"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 子标题
    #[serde(
        rename = "child_items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub child_items: Vec<Option<ChildItemSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChildItemSubReq {
    /// 子标题编号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "50101"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateAttendanceUserStatsViewRespInner {
    #[serde(flatten)]
    data: Option<UpdateAttendanceUserStatsViewResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateAttendanceUserStatsViewResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 视图
    #[serde(
        rename = "view",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub view: UserStatsViewSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserStatsViewSubResp {
    /// 视图 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
    #[serde(
        rename = "view_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub view_id: String,
    /// 视图类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "month"
    ///
    /// **可选值**:
    ///
    /// `daily`: 日度统计
    ///
    /// `month`: 月度统计
    #[serde(
        rename = "stats_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stats_type: String,
    /// 操作者的用户id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ec8ddg56"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 用户设置字段
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<ItemSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ItemSubResp {
    /// 标题编号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "522"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 标题名称
    ///
    /// **示例值**: "基本信息"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 子标题
    #[serde(
        rename = "child_items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub child_items: Vec<ChildItemSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ChildItemSubResp {
    /// 子标题编号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "50101"
    #[serde(
        rename = "code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub code: String,
    /// 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
    /// 子标题名称
    ///
    /// **示例值**: "工号"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 列类型
    ///
    /// **示例值**: "0"
    #[serde(
        rename = "column_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub column_type: i64,
    /// 是否只读
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "read_only",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub read_only: bool,
    /// 最小值
    ///
    /// **示例值**: """"
    #[serde(
        rename = "min_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub min_value: String,
    /// 最大值
    ///
    /// **示例值**: """"
    #[serde(
        rename = "max_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub max_value: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::attendance::AttendanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            UpdateAttendanceUserStatsViewReq,
        ) -> Result<(UpdateAttendanceUserStatsViewResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateAttendanceUserStatsViewReq,
                )
                    -> Result<(UpdateAttendanceUserStatsViewResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AttendanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_attendance_user_stats_view<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdateAttendanceUserStatsViewReq,
            UpdateAttendanceUserStatsViewResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_attendance_user_stats_view(
            &self,
            req: &UpdateAttendanceUserStatsViewReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                UpdateAttendanceUserStatsViewReq,
                UpdateAttendanceUserStatsViewResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::attendance::update_attendance_user_stats_view::{
            UpdateAttendanceUserStatsViewReq, UpdateAttendanceUserStatsViewResp,
            UpdateAttendanceUserStatsViewRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .attendance()
            .mock()
            .mock_update_attendance_user_stats_view(|_| {
                Ok((
                    UpdateAttendanceUserStatsViewResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .attendance()
            .update_attendance_user_stats_view(UpdateAttendanceUserStatsViewReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .attendance()
            .update_attendance_user_stats_view(UpdateAttendanceUserStatsViewReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "view": {
        "items": [
            {
                "child_items": [
                    {
                        "code": "50102",
                        "value": "0"
                    },
                    {
                        "code": "50111",
                        "value": "0"
                    },
                    {
                        "code": "50104",
                        "value": "0"
                    }
                ],
                "code": "501"
            }
        ],
        "stats_type": "month",
        "user_id": "ec8ddg56",
        "view_id": "TmpnNU5EQXpPVGN3TmpVMU16Y3lPVEEwTXl0dGIyNTBhQT09"
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateAttendanceUserStatsViewReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "",
    "data": {
        "view": {
            "items": [
                {
                    "child_items": [
                        {
                            "code": "50102",
                            "value": "0"
                        },
                        {
                            "code": "50111",
                            "value": "0"
                        },
                        {
                            "code": "50104",
                            "value": "0"
                        }
                    ],
                    "code": "501"
                }
            ],
            "stats_type": "month",
            "user_id": "ec8ddg56",
            "view_id": "TmpnNU5EQXpPVGN3TmpVMU16Y3lPVEEwTXl0dGIyNTBhQT09"
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateAttendanceUserStatsViewRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
