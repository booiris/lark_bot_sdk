//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/contract/field_extraction>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{
    ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqData, StreamReqParam,
};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::ai::AiService;

impl<'c, IStore: Store, IClient: HttpClient> AiService<'c, IStore, IClient> {
    /// **api 版本: 2023-10-31T16:08:07+00:00**
    ///
    /// ## 提取文件中的合同字段
    ///
    /// 支持从doc、docx和pdf文件类型中提取合同字段
    ///
    /// 单租户限流：10QPS，同租户下的应用没有限流，共享本租户的 10QPS 限流
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/contract/field_extraction>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/ai/document_ai-v1/contract/field_extraction>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fai%2Fdocument_ai-v1%2Fcontract%2Ffield_extraction>
    pub async fn extract_ai_contract_field<Data: StreamReqData>(
        &self,
        req: ExtractAiContractFieldReq<Data>,
    ) -> Result<(ExtractAiContractFieldResp, CommonResponse), Error> {
        self.extract_ai_contract_field_with_opt(req, Default::default())
            .await
    }

    /// 参见 [extract_ai_contract_field](#method.extract_ai_contract_field) 函数
    pub async fn extract_ai_contract_field_with_opt<Data: StreamReqData>(
        &self,
        req: ExtractAiContractFieldReq<Data>,
        method_option: MethodOption,
    ) -> Result<(ExtractAiContractFieldResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_extract_ai_contract_field(&req) {
                tracing::info!("[lark] Ai#ExtractAiContractField **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Ai#ExtractAiContractField call api");

        let req = ApiRequest::<()> {
            scope: "Ai",
            api: "ExtractAiContractField",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/document_ai/v1/contract/field_extraction",
            stream_param_data: req.gen_stream_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (ExtractAiContractFieldRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, lark_bot_sdk_macros::ApiReqParams)]
pub struct ExtractAiContractFieldReq<Data: StreamReqData> {
    /// pdf页数限制，太长会导致latency增加，最大允许100页
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "15"
    #[api(kind = "stream", name = "pdf_page_limit", option = "false")]
    pub pdf_page_limit: i64,
    /// ocr 参数，当前支持force, pdf, unused三种格式
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "auto"
    ///
    /// **可选值**:
    ///
    /// `Force`: pdf类型文件直接走OCR解析
    ///
    /// `Auto`: pdf类型文件先走本地解析，无法解析（扫描/图片版）再走OCR
    ///
    /// `Unused`: 不调用OCR，扫描/图片PDF返回不可解析信息
    #[api(kind = "stream", name = "ocr_mode", option = "false")]
    pub ocr_mode: String,
    #[api(kind = "stream", name = "#data#", option = "false")]
    pub data: Data,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct ExtractAiContractFieldRespInner {
    #[serde(flatten)]
    data: Option<ExtractAiContractFieldResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct ExtractAiContractFieldResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 文件的唯一id
    ///
    /// **示例值**: "121345678"
    #[serde(
        rename = "file_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_id: String,
    /// 总交易金额
    #[serde(
        rename = "price",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub price: ExtractPriceSubResp,
    /// 期限相关信息，包括开始日期、结束日期、有效时长
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: ExtractTimeSubResp,
    /// 盖章份数
    #[serde(
        rename = "copy",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub copy: ExtractCopySubResp,
    /// 币种
    #[serde(
        rename = "currency",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency: ExtractCurrencySubResp,
    /// 合同标题
    ///
    /// **示例值**: "项目活动框架协议"
    #[serde(
        rename = "header",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub header: String,
    /// 主体信息
    #[serde(
        rename = "body_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_info: Vec<BodyInfoSubResp>,
    /// 银行信息
    #[serde(
        rename = "bank_info",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_info: Vec<BankInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExtractPriceSubResp {
    /// 交易金额
    ///
    /// **示例值**: "200000"
    #[serde(
        rename = "contract_price",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_price: f64,
    /// 从原文中抽取的交易金额
    ///
    /// **示例值**: ""200000""
    #[serde(
        rename = "contract_price_original",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_price_original: String,
    /// 原文中描述交易金额的文字
    ///
    /// **示例值**: "本合同项下总金额共计￥200000（贰拾万元整）"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExtractTimeSubResp {
    /// 开始时间
    ///
    /// **示例值**: "2020-07-01"
    #[serde(
        rename = "time_start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_start: String,
    /// 结束时间
    ///
    /// **示例值**: "2022-06-30"
    #[serde(
        rename = "time_end",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time_end: String,
    /// 原文中抽取出的开始时间
    ///
    /// **示例值**: "2020年07月1日"
    #[serde(
        rename = "original_time_start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub original_time_start: String,
    /// 原文中抽取出的结束时间
    ///
    /// **示例值**: "2022年6月30日"
    #[serde(
        rename = "original_time_end",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub original_time_end: String,
    /// 原文中关于开始时间的描述
    ///
    /// **示例值**: "本协议自有效期自【2020】年【07】月【1】日至【2022】年【6】月【30】日，有效期2年。"
    #[serde(
        rename = "text_start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_start: String,
    /// 原文中关于结束时间的描述
    ///
    /// **示例值**: "本协议自有效期自【2020】年【07】月【1】日至【2022】年【6】月【30】日，有效期2年。"
    #[serde(
        rename = "text_end",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_end: String,
    /// 合同持续时长
    #[serde(
        rename = "initial_term",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub initial_term: ExtractTermSubResp,
    /// 原文中关于持续时间的描述
    ///
    /// **示例值**: "2年"
    #[serde(
        rename = "text_initial_term",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text_initial_term: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExtractCopySubResp {
    /// 盖章份数
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "copy_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub copy_num: i64,
    /// 从原文中抽取的盖章份数
    ///
    /// **示例值**: "一式贰份"
    #[serde(
        rename = "original_copy",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub original_copy: String,
    /// 盖章文件类型
    ///
    /// **示例值**: "协议"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 原文有关盖章份数的描述
    ///
    /// **示例值**: "此协议一式贰份，双方各执壹份，具有同等法律效力。"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExtractCurrencySubResp {
    /// 币种名称
    ///
    /// **示例值**: "CNY"
    #[serde(
        rename = "currency_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_name: String,
    /// 币种符号
    ///
    /// **示例值**: "¥"
    #[serde(
        rename = "currency_text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub currency_text: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ExtractTermSubResp {
    /// 合同持续时长
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "initial_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub initial_time: String,
    /// 持续时长单位
    ///
    /// **示例值**: "年"
    #[serde(
        rename = "initial_unit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub initial_unit: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BodyInfoSubResp {
    /// 主体类型
    ///
    /// **示例值**: "buy"
    ///
    /// **可选值**:
    ///
    /// `Buy`: 甲方主体
    ///
    /// `Sell`: 乙方主体
    ///
    /// `Third`: 第三方、其他方主体
    #[serde(
        rename = "body_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 值
    ///
    /// **示例值**: "value"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: BodyEntitySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BankInfoSubResp {
    /// 甲乙方信息类型
    ///
    /// **示例值**: "buy"
    ///
    /// **可选值**:
    ///
    /// `BuyBank`: 甲方银行
    ///
    /// `SellBank`: 乙方银行
    ///
    /// `ThirdBank`: 第三方银行
    ///
    /// `UncertainBank`: 其他方银行
    #[serde(
        rename = "bank_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_type: String,
    /// 值
    ///
    /// **示例值**: "value"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: BankEntitySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BodyEntitySubResp {
    /// 地址
    ///
    /// **示例值**: "北京市A区B园4号楼"
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: String,
    /// 联系人
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "contacts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contacts: String,
    /// 邮箱
    ///
    /// **示例值**: "zhangsan.1111@bytedance.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 电话
    ///
    /// **示例值**: "13600000000"
    #[serde(
        rename = "phone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone: String,
    /// ID
    ///
    /// **示例值**: "310XXXXXXXXXXXXXXX"
    #[serde(
        rename = "id_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_number: String,
    /// 法人代表
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "legal_representative",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub legal_representative: String,
    /// 当事人
    ///
    /// **示例值**: "北京字节跳动网络技术有限公司"
    #[serde(
        rename = "party",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub party: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct BankEntitySubResp {
    /// 账户名
    ///
    /// **示例值**: "北京字节跳动网络技术有限公司"
    #[serde(
        rename = "account_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub account_name: String,
    /// 银行名称
    ///
    /// **示例值**: "中国A银行B支行"
    #[serde(
        rename = "bank_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_name: String,
    /// 账户ID
    ///
    /// **示例值**: "11230xxxxx004701"
    #[serde(
        rename = "account_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub account_number: String,
    /// 电话
    ///
    /// **示例值**: "010-8xxxx688"
    #[serde(
        rename = "phone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone: String,
    /// 联系人
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "contacts",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contacts: String,
    /// 传真号码
    ///
    /// **示例值**: "911101xxxxx684235"
    #[serde(
        rename = "tax_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tax_number: String,
    /// 联系地址
    ///
    /// **示例值**: "A市B区C园D楼3-8"
    #[serde(
        rename = "address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub address: String,
    /// id号
    ///
    /// **示例值**: "11230xxxxx004701"
    #[serde(
        rename = "id_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_number: String,
    /// 邮箱
    ///
    /// **示例值**: "zhangsan.1111@bytedance.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::ai::AiServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<D: StreamReqData>:
        Fn(
            ExtractAiContractFieldReq<D>,
        ) -> Result<(ExtractAiContractFieldResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            D: StreamReqData,
            T: Fn(
                    ExtractAiContractFieldReq<D>,
                ) -> Result<(ExtractAiContractFieldResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<D> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AiServiceMocker<'c, IStore, IClient> {
        pub fn mock_extract_ai_contract_field<T: StreamReqData, F: MockFunc<T>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            ExtractAiContractFieldReq<T>,
            ExtractAiContractFieldResp,
            Arc<dyn MockFunc<T>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_extract_ai_contract_field<T: StreamReqData>(
            &self,
            req: &ExtractAiContractFieldReq<T>,
        ) -> Option<Arc<dyn MockFunc<T>>> {
            do_mock::<
                Mocker,
                ExtractAiContractFieldReq<T>,
                ExtractAiContractFieldResp,
                Arc<dyn MockFunc<T>>,
            >(self.cli.instance_id, req)
        }
    }
}
