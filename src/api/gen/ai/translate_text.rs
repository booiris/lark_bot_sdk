//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/translate>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::ai::AiService;

impl<'c, IStore: Store, IClient: HttpClient> AiService<'c, IStore, IClient> {
    /// **api 版本: 2024-01-03T03:20:41+00:00**
    ///
    /// ## 翻译文本
    ///
    /// 机器翻译 (MT)，支持以下语种互译：
    ///
    /// "zh": 汉语；
    ///
    /// "zh-Hant": 繁体汉语；
    ///
    /// "en": 英语；
    ///
    /// "ja": 日语；
    ///
    /// "ru": 俄语；
    ///
    /// "de": 德语；
    ///
    /// "fr": 法语；
    ///
    /// "it": 意大利语；
    ///
    /// "pl": 波兰语；
    ///
    /// "th": 泰语；
    ///
    /// "hi": 印地语；
    ///
    /// "id": 印尼语；
    ///
    /// "es": 西班牙语；
    ///
    /// "pt": 葡萄牙语；
    ///
    /// "ko": 朝鲜语；
    ///
    /// "vi": 越南语；
    ///
    /// 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流。免费版不支持调用。
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/translate>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/ai/translation-v1/translate>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fai%2Ftranslation-v1%2Ftranslate>
    pub async fn translate_text(
        &self,
        req: TranslateTextReq,
    ) -> Result<(TranslateTextResp, CommonResponse), Error> {
        self.translate_text_with_opt(req, Default::default()).await
    }

    /// 参见 [translate_text](#method.translate_text) 函数
    pub async fn translate_text_with_opt(
        &self,
        req: TranslateTextReq,
        method_option: MethodOption,
    ) -> Result<(TranslateTextResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_translate_text(&req) {
                tracing::info!("[lark] Ai#TranslateText **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Ai#TranslateText call api");

        let req = ApiRequest {
            scope: "Ai",
            api: "TranslateText",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/translation/v1/text/translate",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (TranslateTextRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct TranslateTextReq {
    /// 源语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "zh"
    #[api(kind = "body", name = "source_language")]
    pub source_language: String,
    /// 源文本
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "尝试使用一下飞书吧"
    #[api(kind = "body", name = "text")]
    pub text: String,
    /// 目标语言
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "en"
    #[api(kind = "body", name = "target_language")]
    pub target_language: String,
    /// 请求级术语表，携带术语，仅在本次翻译中生效（最多能携带 128个术语词）
    #[api(kind = "body", name = "glossary")]
    pub glossary: Vec<Option<TermSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TermSubReq {
    /// 原文
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "飞书"
    #[serde(
        rename = "from",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub from: String,
    /// 译文
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "Lark"
    #[serde(
        rename = "to",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub to: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct TranslateTextRespInner {
    #[serde(flatten)]
    data: Option<TranslateTextResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct TranslateTextResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 翻译后的文本
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "Try to use Lark"
    #[serde(
        rename = "text",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub text: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::ai::AiServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(TranslateTextReq) -> Result<(TranslateTextResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(TranslateTextReq) -> Result<(TranslateTextResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AiServiceMocker<'c, IStore, IClient> {
        pub fn mock_translate_text<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, TranslateTextReq, TranslateTextResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_translate_text(
            &self,
            req: &TranslateTextReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, TranslateTextReq, TranslateTextResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::ai::translate_text::{
            TranslateTextReq, TranslateTextResp, TranslateTextRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .ai()
            .mock()
            .mock_translate_text(|_| Ok((TranslateTextResp::default(), CommonResponse::default())))
            .build();
        let res = lark.ai().translate_text(TranslateTextReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.ai().translate_text(TranslateTextReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "source_language": "zh",
    "text": "尝试使用一下飞书吧",
    "target_language": "en",
    "glossary": [
        {
            "from": "飞书",
            "to": "Lark"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::TranslateTextReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "text": "Try to use Lark"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<TranslateTextRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
