//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/resume/parse>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{
    ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqData, StreamReqParam,
};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::ai::AiService;

impl<'c, IStore: Store, IClient: HttpClient> AiService<'c, IStore, IClient> {
    /// **api 版本: 2024-03-07T07:54:30+00:00**
    ///
    /// ## 识别文件中的简历信息
    ///
    /// 简历信息解析接口，支持PDF/DOCX/PNG/JPG四种文件类型的一次性的识别。
    ///
    /// 单租户限流：10QPS，同租户下的应用没有限流，共享本租户的 10QPS 限流
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/resume/parse>
    ///
    /// new doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/document_ai-v1/resume/parse>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Freference%2Fai%2Fdocument_ai-v1%2Fresume%2Fparse>
    pub async fn parse_ai_resume<Data: StreamReqData>(
        &self,
        req: ParseAiResumeReq<Data>,
    ) -> Result<(ParseAiResumeResp, CommonResponse), Error> {
        self.parse_ai_resume_with_opt(req, Default::default()).await
    }

    /// 参见 [parse_ai_resume](#method.parse_ai_resume) 函数
    pub async fn parse_ai_resume_with_opt<Data: StreamReqData>(
        &self,
        req: ParseAiResumeReq<Data>,
        method_option: MethodOption,
    ) -> Result<(ParseAiResumeResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_parse_ai_resume(&req) {
                tracing::info!("[lark] Ai#ParseAiResume **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Ai#ParseAiResume call api");

        let req = ApiRequest::<()> {
            scope: "Ai",
            api: "ParseAiResume",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/document_ai/v1/resume/parse",
            stream_param_data: req.gen_stream_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (ParseAiResumeRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, lark_bot_sdk_macros::ApiReqParams)]
pub struct ParseAiResumeReq<Data: StreamReqData> {
    #[api(kind = "stream", name = "#data#", option = "false")]
    pub data: Data,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct ParseAiResumeRespInner {
    #[serde(flatten)]
    data: Option<ParseAiResumeResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct ParseAiResumeResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 简历信息
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "resumes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resumes: Vec<ResumeSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeSubResp {
    /// 文件标识ID，依据文件内容自动生成
    ///
    /// **示例值**: "825c59042dxxxxx3ff90b45xxxxx88"
    #[serde(
        rename = "file_md5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_md5: String,
    /// 文本内容，当接口返回成功时，该字段才存在
    ///
    /// **示例值**: "XX负责行政人事管理和日常事务..."
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 经过排序后的文本内容，当接口返回成功时，该字段才存在
    ///
    /// **示例值**: "XX负责行政人事管理和日常事务..."
    #[serde(
        rename = "new_content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub new_content: String,
    /// 名称
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 邮箱
    ///
    /// **示例值**: "zhangsan.1111@company.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 手机号码
    ///
    /// **示例值**: "13600000000"
    #[serde(
        rename = "mobile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile: String,
    /// 手机号码是否虚拟号码
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "mobile_is_virtual",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile_is_virtual: bool,
    /// 手机号码国家编码
    ///
    /// **示例值**: "86"
    #[serde(
        rename = "country_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country_code: String,
    /// 教育经历
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "educations",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub educations: Vec<ResumeEducationSubResp>,
    /// 职业经历
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "careers",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub careers: Vec<ResumeCareerSubResp>,
    /// 项目经历
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "projects",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub projects: Vec<ResumeProjectSubResp>,
    /// 工作年限，为空表示工作年限未知，数字单位为年，整数
    ///
    /// **示例值**: "5"
    #[serde(
        rename = "work_year",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_year: i64,
    /// 生日，格式YYYY-MM-DD
    ///
    /// **示例值**: "1995-01-01"
    #[serde(
        rename = "date_of_birth",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date_of_birth: String,
    /// 性别
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Unknown`: 未知
    ///
    /// `Male`: 男性
    ///
    /// `Female`: 女性
    #[serde(
        rename = "gender",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gender: i64,
    /// 希望获得的职位列表
    ///
    /// **示例值**: "xxx岗位"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "willing_positions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub willing_positions: Vec<String>,
    /// 当前工作地点(城市)
    ///
    /// **示例值**: "上海"
    #[serde(
        rename = "current_location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub current_location: String,
    /// 希望工作地点列表
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "willing_locations",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub willing_locations: Vec<String>,
    /// 家乡(城市)
    ///
    /// **示例值**: "上海"
    #[serde(
        rename = "home_location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub home_location: String,
    /// 语言
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "languages",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub languages: Vec<ResumeLanguageSubResp>,
    /// 获奖
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "awards",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub awards: Vec<ResumeAwardSubResp>,
    /// 证书
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "certificates",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub certificates: Vec<ResumeCertificateSubResp>,
    /// 竞赛
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "competitions",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub competitions: Vec<ResumeCompetitionSubResp>,
    /// 自我评价
    ///
    /// **示例值**: "我是一个..."
    #[serde(
        rename = "self_evaluation",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub self_evaluation: String,
    /// 链接列表
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "urls",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub urls: Vec<String>,
    /// 社交链接
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `99` 字符
    #[serde(
        rename = "social_links",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub social_links: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeEducationSubResp {
    /// 学校名称
    ///
    /// **示例值**: "A大学"
    #[serde(
        rename = "school",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub school: String,
    /// 开始时间,格式：YYYY-MM-DD
    ///
    /// **示例值**: "2020-01-03"
    #[serde(
        rename = "start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_date: String,
    /// 开始时间,格式：YYYY-MM-DD,跟start_date值一样
    ///
    /// **示例值**: "2020-01-03"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间,格式：YYYY-MM-DD
    ///
    /// **示例值**: "2021-01-03"
    #[serde(
        rename = "end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_date: String,
    /// 结束时间,格式：YYYY-MM-DD 或 “至今”，当值为“至今”时，end_date=="",值为其他时，end_date==end_time
    ///
    /// **示例值**: "至今"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 专业
    ///
    /// **示例值**: "XX工程"
    #[serde(
        rename = "major",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub major: String,
    /// 学历——小学、初中、中职、高中、专科、本科、硕士、博士、其他
    ///
    /// **示例值**: "本科"
    #[serde(
        rename = "degree",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub degree: String,
    /// 学历对应ID
    ///
    /// **示例值**: "6"
    ///
    /// **可选值**:
    ///
    /// `PrimarySchool`: 小学
    ///
    /// `JuniorHighSchool`: 初中
    ///
    /// `SpecializedSecondarySchool`: 中职
    ///
    /// `SeniorHighSchool`: 高中
    ///
    /// `JuniorCollege`: 专科
    ///
    /// `Bachelor`: 本科
    ///
    /// `Master`: 硕士
    ///
    /// `Doctor`: 博士
    ///
    /// `Other`: 其他
    #[serde(
        rename = "qualification",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub qualification: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeCareerSubResp {
    /// 公司名称
    ///
    /// **示例值**: "XX公司"
    #[serde(
        rename = "company",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub company: String,
    /// 开始时间,格式：YYYY-MM-DD
    ///
    /// **示例值**: "2022-01-03"
    #[serde(
        rename = "start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_date: String,
    /// 始时间,格式：YYYY-MM-DD,跟start_date值一样
    ///
    /// **示例值**: "2022-01-03"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间,格式：YYYY-MM-DD
    ///
    /// **示例值**: "2023-01-03"
    #[serde(
        rename = "end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_date: String,
    /// 结束时间,格式：YYYY-MM-DD 或 “至今”，当值为“至今”时，end_date=="",值为其他时，end_date==end_time
    ///
    /// **示例值**: "2023-01-03"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 职位
    ///
    /// **示例值**: "XXX工程师"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 工作类型
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `Internship`: 实习
    ///
    /// `FullTime`: 全职
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
    /// 工作类型——'实习'、'全职'
    ///
    /// **示例值**: "全职"
    #[serde(
        rename = "type_str",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub type_str: String,
    /// 工作描述
    ///
    /// **示例值**: "负责XXX开发..."
    #[serde(
        rename = "job_description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_description: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeProjectSubResp {
    /// 项目名称
    ///
    /// **示例值**: "XX项目"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 项目岗位
    ///
    /// **示例值**: "客户端研发"
    #[serde(
        rename = "title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub title: String,
    /// 开始时间,格式：YYYY-MM-DD
    ///
    /// **示例值**: "2023-01-03"
    #[serde(
        rename = "start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_date: String,
    /// 开始时间,格式：YYYY-MM-DD,跟start_date值一样
    ///
    /// **示例值**: "2023-01-03"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 结束时间,格式：YYYY-MM-DD
    ///
    /// **示例值**: "2023-01-04"
    #[serde(
        rename = "end_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_date: String,
    /// 结束时间,格式：YYYY-MM-DD 或 “至今”，当值为“至今”时，end_date=="",值
    ///
    /// **示例值**: "2023-01-04"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 项目描述
    ///
    /// **示例值**: "XXX项目是一个..."
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeLanguageSubResp {
    /// 语言等级
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub level: i64,
    /// 语言描述
    ///
    /// **示例值**: "英语四级:600"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeAwardSubResp {
    /// 奖项
    ///
    /// **示例值**: "XXX大赛奖项"
    #[serde(
        rename = "award",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub award: String,
    /// 获奖时间，格式：YYYY
    ///
    /// **示例值**: "2015"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: String,
    /// 描述
    ///
    /// **示例值**: "曾获XXX大赛奖项..."
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeCertificateSubResp {
    /// 证书名称
    ///
    /// **示例值**: "XXX证书"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 描述
    ///
    /// **示例值**: "曾获得XXX证书..."
    #[serde(
        rename = "desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub desc: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ResumeCompetitionSubResp {
    /// 竞赛名称
    ///
    /// **示例值**: "XXX竞赛"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 描述
    ///
    /// **示例值**: "曾参加XXX竞赛..."
    #[serde(
        rename = "desc",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub desc: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::ai::AiServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<D: StreamReqData>:
        Fn(ParseAiResumeReq<D>) -> Result<(ParseAiResumeResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            D: StreamReqData,
            T: Fn(ParseAiResumeReq<D>) -> Result<(ParseAiResumeResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<D> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AiServiceMocker<'c, IStore, IClient> {
        pub fn mock_parse_ai_resume<T: StreamReqData, F: MockFunc<T>>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, ParseAiResumeReq<T>, ParseAiResumeResp, Arc<dyn MockFunc<T>>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_parse_ai_resume<T: StreamReqData>(
            &self,
            req: &ParseAiResumeReq<T>,
        ) -> Option<Arc<dyn MockFunc<T>>> {
            do_mock::<Mocker, ParseAiResumeReq<T>, ParseAiResumeResp, Arc<dyn MockFunc<T>>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}
