//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/match>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::baike::BaikeService;

impl<'c, IStore: Store, IClient: HttpClient> BaikeService<'c, IStore, IClient> {
    /// **api 版本: 2023-10-13T02:23:09+00:00**
    ///
    /// ## 精准搜索词条
    ///
    /// 将关键词与词条名、别名精准匹配，并返回对应的 词条 ID。
    ///
    /// 为了更好地提升接口文档的的易理解性，我们对文档进行了升级，请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/lingo-v1/entity/match)
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/match>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/baike-v1/entity/match>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fbaike-v1%2Fentity%2Fmatch>
    pub async fn match_baike_entity(
        &self,
        req: MatchBaikeEntityReq,
    ) -> Result<(MatchBaikeEntityResp, CommonResponse), Error> {
        self.match_baike_entity_with_opt(req, Default::default())
            .await
    }

    /// 参见 [match_baike_entity](#method.match_baike_entity) 函数
    pub async fn match_baike_entity_with_opt(
        &self,
        req: MatchBaikeEntityReq,
        method_option: MethodOption,
    ) -> Result<(MatchBaikeEntityResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_match_baike_entity(&req) {
                tracing::info!("[lark] Baike#MatchBaikeEntity **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Baike#MatchBaikeEntity call api");

        let req = ApiRequest {
            scope: "Baike",
            api: "MatchBaikeEntity",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/baike/v1/entities/match",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (MatchBaikeEntityRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct MatchBaikeEntityReq {
    /// 搜索关键词，将与词条名、别名进行精准匹配
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "飞书词典"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `100` 字符
    #[api(kind = "body", name = "word")]
    pub word: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct MatchBaikeEntityRespInner {
    #[serde(flatten)]
    data: Option<MatchBaikeEntityResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct MatchBaikeEntityResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 搜索结果
    #[serde(
        rename = "results",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub results: Vec<MatchInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MatchInfoSubResp {
    /// 词条 ID
    ///
    /// **示例值**: "enterprise_34***584"
    #[serde(
        rename = "entity_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub entity_id: String,
    /// 命中的字段
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `MainKey`: 词条名
    ///
    /// `FullName`: 全称
    ///
    /// `Alias`: 别名
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::baike::BaikeServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(MatchBaikeEntityReq) -> Result<(MatchBaikeEntityResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(MatchBaikeEntityReq) -> Result<(MatchBaikeEntityResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> BaikeServiceMocker<'c, IStore, IClient> {
        pub fn mock_match_baike_entity<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, MatchBaikeEntityReq, MatchBaikeEntityResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_match_baike_entity(
            &self,
            req: &MatchBaikeEntityReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, MatchBaikeEntityReq, MatchBaikeEntityResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::baike::match_baike_entity::{
            MatchBaikeEntityReq, MatchBaikeEntityResp, MatchBaikeEntityRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .baike()
            .mock()
            .mock_match_baike_entity(|_| {
                Ok((MatchBaikeEntityResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .baike()
            .match_baike_entity(MatchBaikeEntityReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .baike()
            .match_baike_entity(MatchBaikeEntityReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "word": "飞书词典"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::MatchBaikeEntityReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "results": [
            {
                "entity_id": "enterprise_34***584",
                "type": 0
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<MatchBaikeEntityRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
