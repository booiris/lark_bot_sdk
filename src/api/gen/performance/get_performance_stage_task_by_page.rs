//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/performance-v1/stage_task/find_by_page>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::performance::PerformanceService;

impl<'c, IStore: Store, IClient: HttpClient> PerformanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-08-02T09:53:55+00:00**
    ///
    /// ## 获取周期任务（全部用户）
    ///
    /// 批量获取周期下所有用户的任务信息。支持传入任务分类、任务截止时间参数删选周期内任务数据。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/performance-v1/stage_task/find_by_page>
    ///
    /// new doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/performance-v1/stage_task/find_by_page>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Fperformance-v1%2Fstage_task%2Ffind_by_page>
    pub async fn get_performance_stage_task_by_page(
        &self,
        req: GetPerformanceStageTaskByPageReq,
    ) -> Result<(GetPerformanceStageTaskByPageResp, CommonResponse), Error> {
        self.get_performance_stage_task_by_page_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_performance_stage_task_by_page](#method.get_performance_stage_task_by_page) 函数
    pub async fn get_performance_stage_task_by_page_with_opt(
        &self,
        req: GetPerformanceStageTaskByPageReq,
        method_option: MethodOption,
    ) -> Result<(GetPerformanceStageTaskByPageResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_performance_stage_task_by_page(&req)
            {
                tracing::info!("[lark] Performance#GetPerformanceStageTaskByPage **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Performance#GetPerformanceStageTaskByPage call api");

        let req = ApiRequest {
            scope: "Performance",
            api: "GetPerformanceStageTaskByPage",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/performance/v1/stage_tasks/find_by_page",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetPerformanceStageTaskByPageRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetPerformanceStageTaskByPageReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// `people_admin_id`: 以people_admin_id来识别用户
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 周期 ID，可通过[获取周期](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/performance-v1/semester/list)接口获取
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7033710017401751071"
    #[api(kind = "body", name = "semester_id")]
    pub semester_id: String,
    /// 任务分类，填写则获取指定分类的任务
    ///
    /// <br>
    ///
    /// **可选项有**：
    ///
    /// - `1`：待完成
    ///
    /// - `2`：已完成
    ///
    /// - `3`：已逾期（仅当租户设置不允许逾期提交时才有此分类）
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `3` 字符
    #[api(kind = "body", name = "task_option_lists")]
    pub task_option_lists: Vec<Option<i64>>,
    /// 任务截止时间最小值，毫秒时间戳，填写则查询在此时间之后截止的任务
    ///
    /// **示例值**: "1630425599999"
    #[api(kind = "body", name = "after_time")]
    pub after_time: Option<String>,
    /// 任务截止时间最大值，毫秒时间戳，填写则查询在此时间之前截止的任务
    ///
    /// **示例值**: "1630425599999"
    #[api(kind = "body", name = "before_time")]
    pub before_time: Option<String>,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
    #[api(kind = "body", name = "page_token")]
    pub page_token: Option<String>,
    /// 分页大小
    ///
    /// **示例值**: "30"
    #[api(kind = "body", name = "page_size")]
    pub page_size: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetPerformanceStageTaskByPageRespInner {
    #[serde(flatten)]
    data: Option<GetPerformanceStageTaskByPageResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetPerformanceStageTaskByPageResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 周期基本信息
    #[serde(
        rename = "base",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub base: SemesterBaseInfoSubResp,
    /// 周期任务
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<StageTaskSubResp>,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SemesterBaseInfoSubResp {
    /// 周期 ID，详情可查看[获取周期](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/performance-v1/semester/list)
    ///
    /// **示例值**: "7263150499637264385"
    #[serde(
        rename = "semester_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub semester_id: String,
    /// 周期名称
    #[serde(
        rename = "semester_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub semester_name: I18nSubResp,
    /// 周期开始时间，毫秒时间戳
    ///
    /// **示例值**: "1625068800000"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 周期结束时间，毫秒时间戳
    ///
    /// **示例值**: "1625068800000"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 周期中文名称
    ///
    /// **示例值**: "示例周期"
    #[serde(
        rename = "zh-CN",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 周期英文名称
    ///
    /// **示例值**: "Demo Semester"
    #[serde(
        rename = "en-US",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct StageTaskSubResp {
    /// 用户 ID，与入参 `user_id_type` 类型一致
    ///
    /// **示例值**: "6765375796711327240"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 各分类的任务数
    #[serde(
        rename = "stage_num_lists",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage_num_lists: Vec<StageTaskStatusNumSubResp>,
    /// 环节任务信息
    #[serde(
        rename = "stage_task_info_lists",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage_task_info_lists: Vec<StageTaskInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct StageTaskStatusNumSubResp {
    /// 任务分类
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `1`: 待完成
    ///
    /// `2`: 已完成
    ///
    /// `3`: 已逾期（此分类仅在租户系统设置为不允许逾期提交时存在）
    #[serde(
        rename = "task_option_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_option_id: i64,
    /// 环节任务数量
    ///
    /// **示例值**: "4"
    #[serde(
        rename = "stage_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage_num: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct StageTaskInfoSubResp {
    /// 环节 ID
    ///
    /// **示例值**: "7263150499637379073"
    #[serde(
        rename = "stage_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage_id: String,
    /// 环节名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
    /// 环节截止时间，毫秒时间戳
    ///
    /// **示例值**: "1625068800000"
    #[serde(
        rename = "deadline",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub deadline: String,
    /// 未完成的任务数量
    ///
    /// **示例值**: "99"
    #[serde(
        rename = "need_todo_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub need_todo_count: i64,
    /// 处理任务的系统页面链接
    ///
    /// **示例值**: "https://performance.feishu-pre.cn/perf/kpi/7235911950407352321/fill"
    #[serde(
        rename = "jump_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub jump_url: String,
    /// 环节任务状态
    ///
    /// **示例值**: "all_done"
    ///
    /// **可选值**:
    ///
    /// `need_todo`: 还有待完成的任务
    ///
    /// `overdue`: 剩余未完成的任务均已逾期
    ///
    /// `all_done`: 全部任务均已完成
    ///
    /// `stage_pause`: 环节被暂停
    #[serde(
        rename = "stage_task_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stage_task_status: String,
    /// 任务分类
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `1`: 待完成
    ///
    /// `2`: 已完成
    ///
    /// `3`: 已逾期（此分类仅在租户系统设置为不允许逾期提交时存在）
    #[serde(
        rename = "task_option_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_option_id: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::performance::PerformanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetPerformanceStageTaskByPageReq,
        ) -> Result<(GetPerformanceStageTaskByPageResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetPerformanceStageTaskByPageReq,
                )
                    -> Result<(GetPerformanceStageTaskByPageResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> PerformanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_performance_stage_task_by_page<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetPerformanceStageTaskByPageReq,
            GetPerformanceStageTaskByPageResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_performance_stage_task_by_page(
            &self,
            req: &GetPerformanceStageTaskByPageReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetPerformanceStageTaskByPageReq,
                GetPerformanceStageTaskByPageResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::performance::get_performance_stage_task_by_page::{
            GetPerformanceStageTaskByPageReq, GetPerformanceStageTaskByPageResp,
            GetPerformanceStageTaskByPageRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .performance()
            .mock()
            .mock_get_performance_stage_task_by_page(|_| {
                Ok((
                    GetPerformanceStageTaskByPageResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .performance()
            .get_performance_stage_task_by_page(GetPerformanceStageTaskByPageReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .performance()
            .get_performance_stage_task_by_page(GetPerformanceStageTaskByPageReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
  "semester_id": "7235911950407352321",
  "task_option_lists": [1, 2, 3],
  "after_time": "1717142243000",
  "before_time": "1717142245000",
  "page_size": 30,
  "page_token": "84I9nKzkGJjwv1FrJ1sIveEE2ij7xnes6nhcmxNOXLaLLe52sFVu8S0NPxRFkMhLFCMutL9a6Eod7kzOqWQeu47R7NWiZEmBKJ93Asg5VZv1oJkrG318reCJlrljfaeR"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::GetPerformanceStageTaskByPageReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "base": {
            "end_time": "1748707140000",
            "semester_id": "7235911950407352321",
            "semester_name": {
                "en-US": "Demo Semester",
                "zh-CN": "示例周期"
            },
            "start_time": "1684684800000"
        },
        "items": [
            {
                "stage_num_lists": [
                    {
                        "task_option_id": 1,
                        "stage_num": 1
                    },
                    {
                        "task_option_id": 2,
                        "stage_num": 1
                    },
                    {
                        "task_option_id": 3,
                        "stage_num": 0
                    }
                ],
                "stage_task_info_lists": [
                    {
                        "deadline": "1717142244000",
                        "jump_url": "https://performance.feishu-pre.cn/perf/review/7235911950407352321/7235906557915987996/members",
                        "name": {
                            "en-US": "confirm_invitation",
                            "zh-CN": "360° 确认"
                        },
                        "need_todo_count": 10,
                        "stage_id": "7270346432875692033",
                        "stage_task_status": "need_todo",
                        "task_option_id": 1
                    },
                    {
                        "deadline": "1717142244000",
                        "jump_url": "https://performance.feishu-pre.cn/perf/review/7235911950407352321/7235906557916086300",
                        "name": {
                            "en-US": "pdt_manager_review",
                            "zh-CN": "pdt项目经理上级评估"
                        },
                        "need_todo_count": 2,
                        "stage_id": "7270346432875741185",
                        "stage_task_status": "all_done",
                        "task_option_id": 2
                    }
                ],
                "user_id": "bega29ca"
            }
        ]
    },
    "has_more": true,
    "page_token": "84I9nKzkGJjwv1FrJ1sIveEE2ij7xnes6nhcmxNOXLaLLe52sFVu8S0NPxRFkMhLFCMutL9a6Eod7kzOqWQeu47R7NWiZEmBKJ93Asg5VZv1oJkrG318reCJlrljfaeR",
    "msg": ""
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetPerformanceStageTaskByPageRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
