//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/performance-v1/semester/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::performance::PerformanceService;

impl<'c, IStore: Store, IClient: HttpClient> PerformanceService<'c, IStore, IClient> {
    /// **api 版本: 2024-08-02T09:50:51+00:00**
    ///
    /// ## 获取周期列表
    ///
    /// 批量获取周期的基本信息，如周期的名称、类型等信息。支持设置时间段、周期年分、周期类型等过滤条件进行筛选。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/performance-v1/semester/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/performance-v1/semester/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Fperformance-v1%2Fsemester%2Flist>
    pub async fn get_performance_semester_list(
        &self,
        req: GetPerformanceSemesterListReq,
    ) -> Result<(GetPerformanceSemesterListResp, CommonResponse), Error> {
        self.get_performance_semester_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_performance_semester_list](#method.get_performance_semester_list) 函数
    pub async fn get_performance_semester_list_with_opt(
        &self,
        req: GetPerformanceSemesterListReq,
        method_option: MethodOption,
    ) -> Result<(GetPerformanceSemesterListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_performance_semester_list(&req) {
                tracing::info!("[lark] Performance#GetPerformanceSemesterList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Performance#GetPerformanceSemesterList call api");

        let req = ApiRequest {
            scope: "Performance",
            api: "GetPerformanceSemesterList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/performance/v1/semesters",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetPerformanceSemesterListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetPerformanceSemesterListReq {
    /// 周期开始时间最小值，毫秒时间戳，小于该时间开始的周期会被过滤掉
    ///
    /// **示例值**: "1630425599999"
    #[api(kind = "query", name = "start_time", v_type = "var", option = "false")]
    pub start_time: String,
    /// 周期结束时间最大值，毫秒时间戳，大于该时间结束的周期会被过滤掉
    ///
    /// **示例值**: "1640425000000"
    #[api(kind = "query", name = "end_time", v_type = "var", option = "false")]
    pub end_time: String,
    /// 周期年份，填写时按照周期年份筛选
    ///
    /// **示例值**: "2024"
    #[api(kind = "query", name = "year", v_type = "var", option = "false")]
    pub year: i64,
    /// 周期类型分组，填写时按照周期类型分组
    ///
    /// **示例值**: "Annual"
    ///
    /// **可选值**:
    ///
    /// `Annual`: 年
    ///
    /// `SemiAnnual`: 半年
    ///
    /// `Quarter`: 季度
    ///
    /// `Bimonth`: 双月
    ///
    /// `Month`: 月
    ///
    /// `NonStandard`: 非标准周期
    #[api(kind = "query", name = "type_group", v_type = "var", option = "false")]
    pub type_group: String,
    /// 周期类型，填写时按照周期类型筛选
    ///
    /// **示例值**: "April"
    ///
    /// **可选值**:
    ///
    /// `Annual`: 全年
    ///
    /// `H1`: 上半年
    ///
    /// `H2`: 下半年
    ///
    /// `Q1`: 第一季度
    ///
    /// `Q2`: 第二季度
    ///
    /// `Q3`: 第三季度
    ///
    /// `Q4`: 第四季度
    ///
    /// `January2February`: 1-2 双月
    ///
    /// `March2April`: 3-4 双月
    ///
    /// `May2June`: 5-6 双月
    ///
    /// `July2August`: 7-8 双月
    ///
    /// `September2October`: 9-10 双月
    ///
    /// `November2December`: 11-12 双月
    ///
    /// `January`: 1月份
    ///
    /// `February`: 2月份
    ///
    /// `March`: 3月份
    ///
    /// `April`: 4月份
    ///
    /// `May`: 5月份
    ///
    /// `June`: 6月份
    ///
    /// `July`: 7月份
    ///
    /// `August`: 8月份
    ///
    /// `September`: 9月份
    ///
    /// `October`: 10月份
    ///
    /// `November`: 11月份
    ///
    /// `December`: 12月份
    ///
    /// `Custom`: 自定义
    #[api(kind = "query", name = "type", v_type = "var", option = "false")]
    pub query_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetPerformanceSemesterListRespInner {
    #[serde(flatten)]
    data: Option<GetPerformanceSemesterListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetPerformanceSemesterListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 周期列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<SemesterSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SemesterSubResp {
    /// 周期 ID
    ///
    /// **示例值**: "6992035450862224940"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 周期年份
    ///
    /// **示例值**: "2024"
    #[serde(
        rename = "year",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub year: i64,
    /// 周期类型分组
    ///
    /// **示例值**: "Quarter"
    #[serde(
        rename = "type_group",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub type_group: String,
    /// 周期类型
    ///
    /// **示例值**: "Q1"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 周期名称
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: I18nSubResp,
    /// 周期开始时间，毫秒时间戳
    ///
    /// **示例值**: "1625068800000"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 周期结束时间，毫秒时间戳
    ///
    /// **示例值**: "1640966399999"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 周期创建时间，毫秒时间戳
    ///
    /// **示例值**: "1625068800000"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nSubResp {
    /// 周期中文名称
    ///
    /// **示例值**: "2024 全年绩效周期"
    #[serde(
        rename = "zh-CN",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub zh_cn: String,
    /// 周期英文名称
    ///
    /// **示例值**: "2024 full year semester"
    #[serde(
        rename = "en-US",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_us: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::performance::PerformanceServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetPerformanceSemesterListReq,
        ) -> Result<(GetPerformanceSemesterListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetPerformanceSemesterListReq,
                )
                    -> Result<(GetPerformanceSemesterListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> PerformanceServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_performance_semester_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetPerformanceSemesterListReq,
            GetPerformanceSemesterListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_performance_semester_list(
            &self,
            req: &GetPerformanceSemesterListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetPerformanceSemesterListReq,
                GetPerformanceSemesterListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::performance::get_performance_semester_list::{
            GetPerformanceSemesterListReq, GetPerformanceSemesterListResp,
            GetPerformanceSemesterListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .performance()
            .mock()
            .mock_get_performance_semester_list(|_| {
                Ok((
                    GetPerformanceSemesterListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .performance()
            .get_performance_semester_list(GetPerformanceSemesterListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .performance()
            .get_performance_semester_list(GetPerformanceSemesterListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "id": "6992035450862224940",
                "year": 2024,
                "type_group": "Quarter",
                "type": "Q1",
                "name": {
                    "zh-CN": "2024 全年绩效周期",
                    "en-US": "2024 full year semester"
                },
                "start_time": "1625068800000",
                "end_time": "1640966399999",
                "create_time": "1625068800000"
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetPerformanceSemesterListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
