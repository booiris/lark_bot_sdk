//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/workplace-v1/custom_workplace_access_data/search>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::application::ApplicationService;

impl<'c, IStore: Store, IClient: HttpClient> ApplicationService<'c, IStore, IClient> {
    /// **api 版本: 2023-06-29T03:40:34+00:00**
    ///
    /// ## 获取定制工作台访问数据
    ///
    /// 获取定制工作台访问数据
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/workplace-v1/custom_workplace_access_data/search>
    ///
    /// new doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/workplace-v1/custom_workplace_access_data/search>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Fworkplace-v1%2Fcustom_workplace_access_data%2Fsearch>
    pub async fn search_application_custom_workplace_access_data(
        &self,
        req: SearchApplicationCustomWorkplaceAccessDataReq,
    ) -> Result<
        (
            SearchApplicationCustomWorkplaceAccessDataResp,
            CommonResponse,
        ),
        Error,
    > {
        self.search_application_custom_workplace_access_data_with_opt(req, Default::default())
            .await
    }

    /// 参见 [search_application_custom_workplace_access_data](#method.search_application_custom_workplace_access_data) 函数
    pub async fn search_application_custom_workplace_access_data_with_opt(
        &self,
        req: SearchApplicationCustomWorkplaceAccessDataReq,
        method_option: MethodOption,
    ) -> Result<
        (
            SearchApplicationCustomWorkplaceAccessDataResp,
            CommonResponse,
        ),
        Error,
    > {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_search_application_custom_workplace_access_data(&req)
            {
                tracing::info!(
                    "[lark] Application#SearchApplicationCustomWorkplaceAccessData **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] Application#SearchApplicationCustomWorkplaceAccessData call api");

        let req = ApiRequest {
            scope: "Application",
            api: "SearchApplicationCustomWorkplaceAccessData",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/workplace/v1/custom_workplace_access_data/search",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SearchApplicationCustomWorkplaceAccessDataRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SearchApplicationCustomWorkplaceAccessDataReq {
    /// 数据检索开始时间，精确到日。格式yyyy-MM-dd
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2023-03-01"
    #[api(kind = "query", name = "from_date", v_type = "var", option = "false")]
    pub from_date: String,
    /// 数据检索结束时间，精确到日。格式yyyy-MM-dd。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2023-03-22"
    #[api(kind = "query", name = "to_date", v_type = "var", option = "false")]
    pub to_date: String,
    /// 分页大小，最小为 1，最大为 200，默认为 20。
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "ddowkdkl9w2d"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 定制工作台id，非必填。不填时，返回所有定制工作台数据。
    ///
    /// 如何获取定制工作台ID：可前往 飞书管理后台 > 工作台 > 定制工作台，点击指定工作台的 设置 进入设置页面；鼠标连续点击三次顶部的 设置 字样即可出现 ID，复制 ID 即可
    ///
    /// **示例值**: "tpl_647184b585400013254c4ea6"
    #[api(
        kind = "query",
        name = "custom_workplace_id",
        v_type = "var",
        option = "true"
    )]
    pub custom_workplace_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SearchApplicationCustomWorkplaceAccessDataRespInner {
    #[serde(flatten)]
    data: Option<SearchApplicationCustomWorkplaceAccessDataResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SearchApplicationCustomWorkplaceAccessDataResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 定制工作台访问数据
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<CustomWorkplaceAccessDataSubResp>,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "ddowkdkl9w2d"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomWorkplaceAccessDataSubResp {
    /// 定制工作台ID
    ///
    /// **示例值**: "tpl_645b003aaa40001435b2ddw"
    #[serde(
        rename = "custom_workplace_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_workplace_id: String,
    /// 访问数据
    #[serde(
        rename = "access_data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub access_data: AccessDataSubResp,
    /// 时间,精确到天,格式yyyy-MM-dd
    ///
    /// **示例值**: "2023-03-12"
    #[serde(
        rename = "date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub date: String,
    /// 定制工作台多语言名字。
    #[serde(
        rename = "custom_workplace_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_workplace_name: Vec<I18nNameSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AccessDataSubResp {
    /// 访问次数
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "pv",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub pv: i64,
    /// 访问用户数(去重)
    ///
    /// **示例值**: "30"
    #[serde(
        rename = "uv",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub uv: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct I18nNameSubResp {
    /// ISO 639-1的语言代码。比如zh表示中文。
    ///
    /// **示例值**: "zh"
    #[serde(
        rename = "language",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub language: String,
    /// 名字
    ///
    /// **示例值**: "名字"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::application::ApplicationServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            SearchApplicationCustomWorkplaceAccessDataReq,
        ) -> Result<
            (
                SearchApplicationCustomWorkplaceAccessDataResp,
                CommonResponse,
            ),
            Error,
        > + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    SearchApplicationCustomWorkplaceAccessDataReq,
                ) -> Result<
                    (
                        SearchApplicationCustomWorkplaceAccessDataResp,
                        CommonResponse,
                    ),
                    Error,
                > + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ApplicationServiceMocker<'c, IStore, IClient> {
        pub fn mock_search_application_custom_workplace_access_data<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            SearchApplicationCustomWorkplaceAccessDataReq,
            SearchApplicationCustomWorkplaceAccessDataResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_search_application_custom_workplace_access_data(
            &self,
            req: &SearchApplicationCustomWorkplaceAccessDataReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                SearchApplicationCustomWorkplaceAccessDataReq,
                SearchApplicationCustomWorkplaceAccessDataResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::application::search_application_custom_workplace_access_data::{
            SearchApplicationCustomWorkplaceAccessDataReq,
            SearchApplicationCustomWorkplaceAccessDataResp,
            SearchApplicationCustomWorkplaceAccessDataRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .application()
            .mock()
            .mock_search_application_custom_workplace_access_data(|_| {
                Ok((
                    SearchApplicationCustomWorkplaceAccessDataResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .application()
            .search_application_custom_workplace_access_data(
                SearchApplicationCustomWorkplaceAccessDataReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .application()
            .search_application_custom_workplace_access_data(
                SearchApplicationCustomWorkplaceAccessDataReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "custom_workplace_id": "tpl_645b003aaa40001435b2ddw",
                "access_data": {
                    "pv": 100,
                    "uv": 30
                },
                "date": "2023-03-12",
                "custom_workplace_name": [
                    {
                        "language": "zh",
                        "name": "名字"
                    }
                ]
            }
        ],
        "has_more": true,
        "page_token": "ddowkdkl9w2d"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SearchApplicationCustomWorkplaceAccessDataRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
