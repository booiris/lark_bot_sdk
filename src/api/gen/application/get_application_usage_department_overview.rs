//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_usage/department_overview>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::application::ApplicationService;

impl<'c, IStore: Store, IClient: HttpClient> ApplicationService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:42+00:00**
    ///
    /// ## 获取多部门应用使用概览
    ///
    /// 查看应用在某一天/某一周/某一个月的使用数据，可以根据部门做多层子部门的筛选
    ///
    /// 1. 仅支持企业版/旗舰版租户使用
    ///
    /// 2. 一般每天早上10点产出前一天的数据
    ///
    /// 3. 已经支持的指标包括：应用的活跃用户数、累计用户数、新增用户数、访问页面数、打开次数
    ///
    /// 4. 按照部门查看数据时，可以分别展示当前部门以及其子部门的使用情况
    ///
    /// 5. 如果查询的部门在查询日期没有使用过应用，只返回指标：应用的活跃用户数指标
    ///
    /// 6. 数据从飞书4.10版本开始统计，使用飞书版本4.10及以下版本的用户数据不会被统计到
    ///
    /// 7. 调用频控为100次/分
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_usage/department_overview>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/application-v6/app-usage/department_overview>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fapplication-v6%2Fapp-usage%2Fdepartment_overview>
    pub async fn get_application_usage_department_overview(
        &self,
        req: GetApplicationUsageDepartmentOverviewReq,
    ) -> Result<(GetApplicationUsageDepartmentOverviewResp, CommonResponse), Error> {
        self.get_application_usage_department_overview_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_application_usage_department_overview](#method.get_application_usage_department_overview) 函数
    pub async fn get_application_usage_department_overview_with_opt(
        &self,
        req: GetApplicationUsageDepartmentOverviewReq,
        method_option: MethodOption,
    ) -> Result<(GetApplicationUsageDepartmentOverviewResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_get_application_usage_department_overview(&req)
            {
                tracing::info!(
                    "[lark] Application#GetApplicationUsageDepartmentOverview **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] Application#GetApplicationUsageDepartmentOverview call api");

        let req = ApiRequest {
            scope: "Application",
            api: "GetApplicationUsageDepartmentOverview",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/application/v6/applications/:app_id/app_usage/department_overview",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetApplicationUsageDepartmentOverviewRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetApplicationUsageDepartmentOverviewReq {
    /// 目标应用 ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "cli_9f115af860f7901b"
    #[api(kind = "path", name = "app_id")]
    pub app_id: String,
    /// 调用中使用的部门ID的类型
    ///
    /// **示例值**: "open_department_id"
    ///
    /// **可选值**:
    ///
    /// `DepartmentId`: 以自定义department_id来标识部门
    ///
    /// `OpenDepartmentId`: 以open_department_id来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 查询日期，格式为yyyy-mm-dd，若cycle_type为1，date可以为任何自然日；若cycle_type为2，则输入的date必须为周一； 若cycle_type为3，则输入的date必须为每月1号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "2021-07-08"
    #[api(kind = "body", name = "date")]
    pub date: String,
    /// 活跃周期的统计类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Day`: 日活，指自然日，返回当前日期所在日的数据
    ///
    /// `Week`: 周活，指自然周，返回当前日期所在周的数据。若到查询时当周还没结束，则返回周一到当前日期的数值。例如在2021/7/15 查询2021/7/5 这一周的数据，则代表的是2021/7/5 ~ 2021/7/11。但若是在2021/7/8 查询2021/7/5 这一周的数据，则返回的是2021/7/5 ~ 2021/7/7 的数据
    ///
    /// `Month`: 月活，指自然月，返回当前日期所在月的数据。若不满一个月则返回当月1日到截止日期前的数据。例如在2021/8/15 查询 7月的数据，则代表2021/7/1~2021/7/31。 若在2021/8/15 查询8月的数据，则代表2021/8/1~2021/8/14的数据
    #[api(kind = "body", name = "cycle_type")]
    pub cycle_type: i64,
    /// 查询的部门id，获取方法可参考[部门ID概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
    ///
    /// -  若部门id为空，则返回当前租户的使用数据；若填写部门id，则返回当前部门的使用数据（包含子部门的用户） 以及多级子部门的使用数据。
    ///
    /// -  若路径参数中department_id_type为空或者为open_department_id，则此处应该填写部门的 open_department_id；若路径参数中department_id_type为department_id，则此处应该填写部门的 department_id。
    ///
    /// - 若不填写则返回整个租户的数据
    ///
    /// **示例值**: "od-4e6ac4d14bcd5071a37a39de902c7141"
    #[api(kind = "body", name = "department_id")]
    pub department_id: Option<String>,
    /// 是否需要查询部门下多层子部门的数据。未设置或为0时，仅查询department_id对应的部门。设置为n时，查询department_id及其n级子部门的数据。仅在department_id参数传递时有效，最大值为4。
    ///
    /// **示例值**: "0"
    #[api(kind = "body", name = "recursion")]
    pub recursion: Option<i64>,
    /// 分页大小，取值范围 1~20
    ///
    /// **示例值**: "10"
    #[api(kind = "body", name = "page_size")]
    pub page_size: Option<i64>,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "new-1a8f509162ca3c95405838d05ccded09"
    #[api(kind = "body", name = "page_token")]
    pub page_token: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetApplicationUsageDepartmentOverviewRespInner {
    #[serde(flatten)]
    data: Option<GetApplicationUsageDepartmentOverviewResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetApplicationUsageDepartmentOverviewResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 部门内员工使用应用的概览数据
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<ApplicationDepartmentAppUsageSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationDepartmentAppUsageSubResp {
    /// 租户内部门的唯一标识，ID值与查询参数中的department_id_type 对应。
    ///
    /// **示例值**: "7a59bc779b7c1f19"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 应用整体使用情况，指标值包括：uv：活跃用户数，total_users：累计用户数，new_users：新增用户数，pv：在应用（小程序或网页）中访问的页面数，lifecycle：打开应用（小程序或网页）的次数
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `10` 字符
    #[serde(
        rename = "app",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub app: Vec<ApplicationAppUsageSubResp>,
    /// 小程序使用情况，没有小程序形态时为null，指标值包括：uv（小程序活跃用户数）、pv（用户在小程序中的访问页面数）、lifecycle（小程序的打开次数）
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `10` 字符
    #[serde(
        rename = "gadget",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gadget: Vec<ApplicationAppUsageSubResp>,
    /// 网页应用使用情况，没有网页应用形态时为null，指标值包括：uv（网页应用活跃用户数）、pv（用户在网页应用中的访问页面数）、lifecycle（网页应用的打开次数）
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `10` 字符
    #[serde(
        rename = "webapp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub webapp: Vec<ApplicationAppUsageSubResp>,
    /// 机器人使用情况，没有机器人形态时为null，
    ///
    /// 指标值包括：uv（机器人的活跃用户数）
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `10` 字符
    #[serde(
        rename = "bot",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bot: Vec<ApplicationAppUsageSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationAppUsageSubResp {
    /// 指标名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "pv"
    #[serde(
        rename = "metric_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub metric_name: String,
    /// 指标值
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "metric_value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub metric_value: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::application::ApplicationServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetApplicationUsageDepartmentOverviewReq,
        ) -> Result<(GetApplicationUsageDepartmentOverviewResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetApplicationUsageDepartmentOverviewReq,
                )
                    -> Result<(GetApplicationUsageDepartmentOverviewResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ApplicationServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_application_usage_department_overview<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetApplicationUsageDepartmentOverviewReq,
            GetApplicationUsageDepartmentOverviewResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_application_usage_department_overview(
            &self,
            req: &GetApplicationUsageDepartmentOverviewReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetApplicationUsageDepartmentOverviewReq,
                GetApplicationUsageDepartmentOverviewResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::application::get_application_usage_department_overview::{
            GetApplicationUsageDepartmentOverviewReq, GetApplicationUsageDepartmentOverviewResp,
            GetApplicationUsageDepartmentOverviewRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .application()
            .mock()
            .mock_get_application_usage_department_overview(|_| {
                Ok((
                    GetApplicationUsageDepartmentOverviewResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .application()
            .get_application_usage_department_overview(
                GetApplicationUsageDepartmentOverviewReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .application()
            .get_application_usage_department_overview(
                GetApplicationUsageDepartmentOverviewReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "date": "2021-10-11",
    "cycle_type": 1,
    "department_id": "dfd2f9g16dd75ggd",
    "recursion": 2,
    "page_size": 10,
    "page_token": "new-f556d0f964cf4baab7092b5b0093317c"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::GetApplicationUsageDepartmentOverviewReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "data": {
        "has_more": false,
        "items": [
            {
                "department_id": "7a59bc779b7c1f19",
                "app": [
                    {
                        "metric_name": "uv",
                        "metric_value": 141121
                    },
                    {
                        "metric_name": "total_users",
                        "metric_value": 141123
                    },
                    {
                        "metric_name": "new_users",
                        "metric_value": 141122
                    },
                    {
                        "metric_name": "pv",
                        "metric_value": 141122
                    },
                    {
                        "metric_name": "lifecycle",
                        "metric_value": 141122
                    }
                ],
                "gadget": [
                    {
                        "metric_name": "uv",
                        "metric_value": 141124
                    },
                    {
                        "metric_name": "pv",
                        "metric_value": 141122
                    },
                    {
                        "metric_name": "lifecycle",
                        "metric_value": 141122
                    }
                ],
                "webapp": [
                    {
                        "metric_name": "uv",
                        "metric_value": 141127
                    },
                    {
                        "metric_name": "pv",
                        "metric_value": 141122
                    },
                    {
                        "metric_name": "lifecycle",
                        "metric_value": 141122
                    }
                ]
            },
            {
                "app": [
                    {
                        "metric_name": "uv",
                        "metric_value": 0
                    }
                ],
                "department_id": "33a1ec888371b1f8"
            }
        ],
        "page_token": ""
    },
    "msg": "success"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetApplicationUsageDepartmentOverviewRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
