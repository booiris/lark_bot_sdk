//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-visibility/check_white_black_list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::application::ApplicationService;

impl<'c, IStore: Store, IClient: HttpClient> ApplicationService<'c, IStore, IClient> {
    /// **api 版本: 2023-07-21T07:21:40+00:00**
    ///
    /// ## 查询用户或部门是否在应用的可用或禁用名单
    ///
    /// 该接口用于查询用户、部门、用户组是否在应用的可用或禁用名单中
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-visibility/check_white_black_list>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/application-v6/admin/check_white_black_list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fapplication-v6%2Fadmin%2Fcheck_white_black_list>
    pub async fn check_application_visible_white_black_list(
        &self,
        req: CheckApplicationVisibleWhiteBlackListReq,
    ) -> Result<(CheckApplicationVisibleWhiteBlackListResp, CommonResponse), Error> {
        self.check_application_visible_white_black_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [check_application_visible_white_black_list](#method.check_application_visible_white_black_list) 函数
    pub async fn check_application_visible_white_black_list_with_opt(
        &self,
        req: CheckApplicationVisibleWhiteBlackListReq,
        method_option: MethodOption,
    ) -> Result<(CheckApplicationVisibleWhiteBlackListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_check_application_visible_white_black_list(&req)
            {
                tracing::info!(
                    "[lark] Application#CheckApplicationVisibleWhiteBlackList **mocking** api"
                );
                return f(req);
            }
        }

        tracing::info!("[lark] Application#CheckApplicationVisibleWhiteBlackList call api");

        let req = ApiRequest {
            scope: "Application",
            api: "CheckApplicationVisibleWhiteBlackList",
            method: http::Method::POST,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/application/v6/applications/:app_id/visibility/check_white_black_list",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CheckApplicationVisibleWhiteBlackListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CheckApplicationVisibleWhiteBlackListReq {
    /// 应用的 AppID，可以在[开发者后台](https://open.feishu.cn/app) > **凭证与基础信息**页查看。<br>
    ///
    /// * 仅查询本应用信息时，可填应用自身AppID。
    ///
    /// <br>
    ///
    /// * 当值为其他应用的App ID时，必须申请以下权限：<md-perm name="admin:app.info:readonly" desc="获取应用信息" support_app_types="custom" tags="">获取应用信息</md-perm>
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "cli_a3axxx01b"
    #[api(kind = "path", name = "app_id")]
    pub app_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "user_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 部门ID类型
    ///
    /// **示例值**: "department_id"
    ///
    /// **可选值**:
    ///
    /// `department_id`: 以自定义department_id来标识部门
    ///
    /// `open_department_id`: 以open_department_id来标识部门
    #[api(
        kind = "query",
        name = "department_id_type",
        v_type = "var",
        option = "false"
    )]
    pub department_id_type: String,
    /// 想要查询的用户id列表，按照user_id_type录入，最多录入100个。
    ///
    /// 可以调用[获取部门直属用户列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/find_by_department)接口获取。
    ///
    /// **示例值**: "ou_a2c7c74ff52b1644220e319aeabd9c63"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "user_ids")]
    pub user_ids: Vec<Option<String>>,
    /// 想要查询的部门的 id 列表，最多录入100个。
    ///
    /// 可以[调用获取子部门列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children)接口获取。
    ///
    /// **示例值**: "od-b329544b2737a0c42ea01fdde3546673"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "department_ids")]
    pub department_ids: Vec<Option<String>>,
    /// 想要查询的用户组id列表，最多录入100个。
    ///
    /// 可以调用[查询用户组列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist)接口获取。
    ///
    /// **示例值**: "e62d2977e8328eb4"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "body", name = "group_ids")]
    pub group_ids: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CheckApplicationVisibleWhiteBlackListRespInner {
    #[serde(flatten)]
    data: Option<CheckApplicationVisibleWhiteBlackListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CheckApplicationVisibleWhiteBlackListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 查询的用户可见性结果列表，如果用户在白名单或付费白名单，且不在黑名单中，则可见该应用
    #[serde(
        rename = "user_visibility_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_visibility_list: Vec<ApplicationVisibilityUserWhiteBlackInfoSubResp>,
    /// 查询的部门可见性结果列表，如果部门在白名单，且不在黑名单，则该部门下的用户可见该应用
    #[serde(
        rename = "department_visibility_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_visibility_list: Vec<ApplicationVisibilityDepartmentWhiteBlackInfoSubResp>,
    /// 查询的用户组可见性结果列表，如果用户组在白名单，且不在黑名单，则该用户组下的用户可见该应用
    #[serde(
        rename = "group_visibility_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_visibility_list: Vec<ApplicationVisibilityGroupWhiteBlackInfoSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationVisibilityUserWhiteBlackInfoSubResp {
    /// 查询的用户ID，ID类型和user_id_type传参类型一致
    ///
    /// **示例值**: "ou_d317f090b7258ad0372aa53963cda70d"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 是否在白名单。
    ///
    /// **可选值**：
    ///
    /// - **true**：在白名单
    ///
    /// - **false**：不在白名单
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "in_white_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_white_list: bool,
    /// 是否在黑名单。
    ///
    /// **可选值**：
    ///
    /// - **true**：在黑名单
    ///
    /// - **false**：不在黑名单
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "in_black_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_black_list: bool,
    /// 是否在付费名单。
    ///
    /// **可选值**：
    ///
    /// - **true**：在付费名单
    ///
    /// - **false**：不在付费名单
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "in_paid_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_paid_list: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationVisibilityDepartmentWhiteBlackInfoSubResp {
    /// 查询的部门ID
    ///
    /// **示例值**: "od-aa2c50a04769feefededb7a05b7525a8"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 是否在白名单。
    ///
    /// **可选值**：
    ///
    /// - **true**：在白名单
    ///
    /// - **false**：不在白名单
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "in_white_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_white_list: bool,
    /// 是否在黑名单。
    ///
    /// **可选值**：
    ///
    /// - **true**：在黑名单
    ///
    /// - **false**：不在黑名单
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "in_black_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_black_list: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ApplicationVisibilityGroupWhiteBlackInfoSubResp {
    /// 查询的用户组ID
    ///
    /// **示例值**: "96815a9cd9beg8g4"
    #[serde(
        rename = "group_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub group_id: String,
    /// 是否在白名单。
    ///
    /// **可选值**：
    ///
    /// - **true**：在白名单
    ///
    /// - **false**：不在白名单
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "in_white_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_white_list: bool,
    /// 是否在黑名单。
    ///
    /// **可选值**：
    ///
    /// - **true**：在黑名单
    ///
    /// - **false**：不在黑名单
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "in_black_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_black_list: bool,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::application::ApplicationServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            CheckApplicationVisibleWhiteBlackListReq,
        ) -> Result<(CheckApplicationVisibleWhiteBlackListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CheckApplicationVisibleWhiteBlackListReq,
                )
                    -> Result<(CheckApplicationVisibleWhiteBlackListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ApplicationServiceMocker<'c, IStore, IClient> {
        pub fn mock_check_application_visible_white_black_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CheckApplicationVisibleWhiteBlackListReq,
            CheckApplicationVisibleWhiteBlackListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_check_application_visible_white_black_list(
            &self,
            req: &CheckApplicationVisibleWhiteBlackListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                CheckApplicationVisibleWhiteBlackListReq,
                CheckApplicationVisibleWhiteBlackListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::application::check_application_visible_white_black_list::{
            CheckApplicationVisibleWhiteBlackListReq, CheckApplicationVisibleWhiteBlackListResp,
            CheckApplicationVisibleWhiteBlackListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .application()
            .mock()
            .mock_check_application_visible_white_black_list(|_| {
                Ok((
                    CheckApplicationVisibleWhiteBlackListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .application()
            .check_application_visible_white_black_list(
                CheckApplicationVisibleWhiteBlackListReq::default(),
            )
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .application()
            .check_application_visible_white_black_list(
                CheckApplicationVisibleWhiteBlackListReq::default(),
            )
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "user_ids": [
        "ou_d317f090b7258ad0372aa53963cda70d"
    ],
    "department_ids": [
        "od-aa2c50a04769feefededb7a05b7525a8"
    ],
    "group_ids": [
        "96815a9cd9beg8g4"
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) =
            serde_json::from_str::<super::CheckApplicationVisibleWhiteBlackListReqBody>(REQ)
        {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "user_visibility_list": [
            {
                "user_id": "ou_d317f090b7258ad0372aa53963cda70d",
                "in_white_list": false,
                "in_black_list": false,
                "in_paid_list": false
            }
        ],
        "department_visibility_list": [
            {
                "department_id": "od-aa2c50a04769feefededb7a05b7525a8",
                "in_white_list": false,
                "in_black_list": false
            }
        ],
        "group_visibility_list": [
            {
                "group_id": "96815a9cd9beg8g4",
                "in_white_list": false,
                "in_black_list": false
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CheckApplicationVisibleWhiteBlackListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
