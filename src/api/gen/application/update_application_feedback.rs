//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::application::ApplicationService;

impl<'c, IStore: Store, IClient: HttpClient> ApplicationService<'c, IStore, IClient> {
    /// **api 版本: 2023-07-21T07:21:42+00:00**
    ///
    /// ## 更新应用反馈
    ///
    /// 更新应用的反馈数据
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/patch>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/application-v6/application-feedback/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fapplication-v6%2Fapplication-feedback%2Fpatch>
    pub async fn update_application_feedback(
        &self,
        req: UpdateApplicationFeedbackReq,
    ) -> Result<(UpdateApplicationFeedbackResp, CommonResponse), Error> {
        self.update_application_feedback_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_application_feedback](#method.update_application_feedback) 函数
    pub async fn update_application_feedback_with_opt(
        &self,
        req: UpdateApplicationFeedbackReq,
        method_option: MethodOption,
    ) -> Result<(UpdateApplicationFeedbackResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_application_feedback(&req) {
                tracing::info!("[lark] Application#UpdateApplicationFeedback **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Application#UpdateApplicationFeedback call api");

        let req = ApiRequest {
            scope: "Application",
            api: "UpdateApplicationFeedback",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateApplicationFeedbackRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateApplicationFeedbackReq {
    /// 目标应用 ID（本租户创建的所有应用）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "cli_9f115af860f7901b"
    #[api(kind = "path", name = "app_id")]
    pub app_id: String,
    /// 应用反馈记录id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7057888018203574291"
    #[api(kind = "path", name = "feedback_id")]
    pub feedback_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `OpenId`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `UnionId`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `UserId`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 反馈处理状态
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `Unmarked`: 反馈未处理
    ///
    /// `Marked`: 反馈已处理
    ///
    /// `Processing`: 反馈处理中
    ///
    /// `Closed`: 反馈已关闭
    #[api(kind = "query", name = "status", v_type = "var", option = "false")]
    pub status: i64,
    /// 反馈处理人员id，租户内用户的唯一标识， ID值与查询参数中的user_id_type 对应
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "ou_9565b69967831233761cc2f11b4c089f"
    #[api(kind = "query", name = "operator_id", v_type = "var", option = "false")]
    pub operator_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateApplicationFeedbackRespInner {
    #[serde(flatten)]
    data: Option<UpdateApplicationFeedbackResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateApplicationFeedbackResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::application::ApplicationServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            UpdateApplicationFeedbackReq,
        ) -> Result<(UpdateApplicationFeedbackResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateApplicationFeedbackReq,
                )
                    -> Result<(UpdateApplicationFeedbackResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> ApplicationServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_application_feedback<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdateApplicationFeedbackReq,
            UpdateApplicationFeedbackResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_application_feedback(
            &self,
            req: &UpdateApplicationFeedbackReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                UpdateApplicationFeedbackReq,
                UpdateApplicationFeedbackResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::application::update_application_feedback::{
            UpdateApplicationFeedbackReq, UpdateApplicationFeedbackResp,
            UpdateApplicationFeedbackRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .application()
            .mock()
            .mock_update_application_feedback(|_| {
                Ok((
                    UpdateApplicationFeedbackResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .application()
            .update_application_feedback(UpdateApplicationFeedbackReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .application()
            .update_application_feedback(UpdateApplicationFeedbackReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateApplicationFeedbackRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
