//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::helpdesk::HelpdeskService;

impl<'c, IStore: Store, IClient: HttpClient> HelpdeskService<'c, IStore, IClient> {
    /// **api 版本: 2023-08-15T07:34:20+00:00**
    ///
    /// ## 查询指定客服技能
    ///
    /// 该接口用于获取客服技能。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/helpdesk-v1/agent-function/agent_skill/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhelpdesk-v1%2Fagent-function%2Fagent_skill%2Fget>
    pub async fn get_helpdesk_agent_skill(
        &self,
        req: GetHelpdeskAgentSkillReq,
    ) -> Result<(GetHelpdeskAgentSkillResp, CommonResponse), Error> {
        self.get_helpdesk_agent_skill_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_helpdesk_agent_skill](#method.get_helpdesk_agent_skill) 函数
    pub async fn get_helpdesk_agent_skill_with_opt(
        &self,
        req: GetHelpdeskAgentSkillReq,
        method_option: MethodOption,
    ) -> Result<(GetHelpdeskAgentSkillResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_helpdesk_agent_skill(&req) {
                tracing::info!("[lark] Helpdesk#GetHelpdeskAgentSkill **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Helpdesk#GetHelpdeskAgentSkill call api");

        let req = ApiRequest {
            scope: "Helpdesk",
            api: "GetHelpdeskAgentSkill",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHelpdeskAgentSkillRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHelpdeskAgentSkillReq {
    /// agent skill id
    ///
    /// **示例值**: "6941215891786825756"
    #[api(kind = "path", name = "agent_skill_id")]
    pub agent_skill_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHelpdeskAgentSkillRespInner {
    #[serde(flatten)]
    data: Option<GetHelpdeskAgentSkillResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHelpdeskAgentSkillResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 技能
    #[serde(
        rename = "agent_skill",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub agent_skill: AgentSkillSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AgentSkillSubResp {
    /// 技能id
    ///
    /// **示例值**: "test-skill-id"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 技能名
    ///
    /// **示例值**: "skill-name"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 技能rules
    #[serde(
        rename = "rules",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rules: Vec<AgentSkillRuleSubResp>,
    /// 具有此技能的客服ids
    #[serde(
        rename = "agent_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub agent_ids: Vec<String>,
    /// 默认技能
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_default",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_default: bool,
    /// 客服 info
    #[serde(
        rename = "agents",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub agents: Vec<AgentSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AgentSkillRuleSubResp {
    /// rule id, 参考[获取客服技能rules](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list) 用于获取rules options
    ///
    /// **示例值**: "test-skill-id"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 运算符比较, 参考[客服技能运算符选项](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
    ///
    /// **示例值**: "8"
    #[serde(
        rename = "selected_operator",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub selected_operator: i64,
    /// rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
    #[serde(
        rename = "operator_options",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operator_options: Vec<i64>,
    /// rule 操作数的值
    ///
    /// **示例值**: "{\"selected_departments\":[{\"id\":\"部门ID\",\"name\":\"IT\"}]}"
    #[serde(
        rename = "operand",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub operand: String,
    /// rule 类型，1-知识库，2-工单信息，3-用户飞书信息
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "category",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub category: i64,
    /// rule 名
    ///
    /// **示例值**: "中文知识库分类"
    #[serde(
        rename = "display_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AgentSubResp {
    /// user id
    ///
    /// **示例值**: "ou_ea651a5c09e2d01af8acd34059f5359b"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// user avatar url
    ///
    /// **示例值**: "https://avatar-url.com/test.png"
    #[serde(
        rename = "avatar_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_url: String,
    /// user name
    ///
    /// **示例值**: "test-user"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::helpdesk::HelpdeskServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetHelpdeskAgentSkillReq) -> Result<(GetHelpdeskAgentSkillResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetHelpdeskAgentSkillReq,
                ) -> Result<(GetHelpdeskAgentSkillResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HelpdeskServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_helpdesk_agent_skill<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetHelpdeskAgentSkillReq,
            GetHelpdeskAgentSkillResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_helpdesk_agent_skill(
            &self,
            req: &GetHelpdeskAgentSkillReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetHelpdeskAgentSkillReq, GetHelpdeskAgentSkillResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::helpdesk::get_helpdesk_agent_skill::{
            GetHelpdeskAgentSkillReq, GetHelpdeskAgentSkillResp, GetHelpdeskAgentSkillRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .helpdesk()
            .mock()
            .mock_get_helpdesk_agent_skill(|_| {
                Ok((
                    GetHelpdeskAgentSkillResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .helpdesk()
            .get_helpdesk_agent_skill(GetHelpdeskAgentSkillReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .helpdesk()
            .get_helpdesk_agent_skill(GetHelpdeskAgentSkillReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "agent_skill": {
            "id": "test-skill-id",
            "name": "skill-name",
            "rules": [
                {
                    "id": "test-skill-id",
                    "selected_operator": 8,
                    "operator_options": [
                        7,
                        8
                    ],
                    "operand": "{\n\"selected_departments\":[\n{\n\"id\":\"部门ID\",\n\"name\":\"IT\"\n}\n]\n}",
                    "category": 3,
                    "display_name": "Chinese FAQs category"
                }
            ],
            "agent_ids": [
                "ou_ea651a5c09e2d01af8acd34059f5359b"
            ],
            "is_default": false,
            "agents": [
                {
                    "id": "ou_ea651a5c09e2d01af8acd34059f5359b",
                    "avatar_url": "https://avatar-url.com/test.png",
                    "name": "test-user"
                }
            ]
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHelpdeskAgentSkillRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
