//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::helpdesk::HelpdeskService;

impl<'c, IStore: Store, IClient: HttpClient> HelpdeskService<'c, IStore, IClient> {
    /// **api 版本: 2023-08-15T07:34:21+00:00**
    ///
    /// ## 获取工单消息详情
    ///
    /// 该接口用于获取服务台工单消息详情。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/helpdesk-v1/ticket-management/ticket-message/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhelpdesk-v1%2Fticket-management%2Fticket-message%2Flist>
    pub async fn get_helpdesk_ticket_message_list(
        &self,
        req: GetHelpdeskTicketMessageListReq,
    ) -> Result<(GetHelpdeskTicketMessageListResp, CommonResponse), Error> {
        self.get_helpdesk_ticket_message_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_helpdesk_ticket_message_list](#method.get_helpdesk_ticket_message_list) 函数
    pub async fn get_helpdesk_ticket_message_list_with_opt(
        &self,
        req: GetHelpdeskTicketMessageListReq,
        method_option: MethodOption,
    ) -> Result<(GetHelpdeskTicketMessageListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_helpdesk_ticket_message_list(&req) {
                tracing::info!("[lark] Helpdesk#GetHelpdeskTicketMessageList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Helpdesk#GetHelpdeskTicketMessageList call api");

        let req = ApiRequest {
            scope: "Helpdesk",
            api: "GetHelpdeskTicketMessageList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetHelpdeskTicketMessageListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetHelpdeskTicketMessageListReq {
    /// 工单ID
    ///
    /// **示例值**: "6948728206392295444"
    #[api(kind = "path", name = "ticket_id")]
    pub ticket_id: String,
    /// 起始时间
    ///
    /// **示例值**: "1617960686"
    #[api(kind = "query", name = "time_start", v_type = "var", option = "false")]
    pub time_start: i64,
    /// 结束时间
    ///
    /// **示例值**: "1617960687"
    #[api(kind = "query", name = "time_end", v_type = "var", option = "false")]
    pub time_end: i64,
    /// 页数ID
    ///
    /// **示例值**: "1"
    #[api(kind = "query", name = "page", v_type = "var", option = "false")]
    pub page: i64,
    /// 消息数量，最大200，默认20
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetHelpdeskTicketMessageListRespInner {
    #[serde(flatten)]
    data: Option<GetHelpdeskTicketMessageListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetHelpdeskTicketMessageListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 工单消息列表
    #[serde(
        rename = "messages",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub messages: Vec<TicketMessageSubResp>,
    /// 消息总数
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "total",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub total: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TicketMessageSubResp {
    /// 工单消息ID
    ///
    /// **示例值**: "6948728206392295444"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// chat消息ID
    ///
    /// **示例值**: "6949088236610273307"
    #[serde(
        rename = "message_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub message_id: String,
    /// 消息类型；text：纯文本；post：富文本；image：图像；file：文件；media：视频
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "text"
    #[serde(
        rename = "message_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub message_type: String,
    /// 创建时间
    ///
    /// **示例值**: "1617960686000"
    #[serde(
        rename = "created_at",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub created_at: i64,
    /// 内容
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "{\"content\":\"进入人工服务。 @李宁  为你提供服务，开始聊起来吧~\",\"msg_type\":\"text\"}"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 用户名
    ///
    /// **示例值**: "李宁"
    #[serde(
        rename = "user_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_name: String,
    /// 用户图片url
    ///
    /// **示例值**: "https://internal-api-lark-file.feishu-boe.cn/static-resource/v1/3e73cdce-54b0-4c6a-8226-b131fb2825dj~?image_size=72x72&cut_type=&quality=&format=image&sticker_format=.webp"
    #[serde(
        rename = "avatar_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_url: String,
    /// 用户open ID
    ///
    /// **示例值**: "ou_37019b7c830210acd88fdce886e25c71"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::helpdesk::HelpdeskServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetHelpdeskTicketMessageListReq,
        ) -> Result<(GetHelpdeskTicketMessageListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetHelpdeskTicketMessageListReq,
                )
                    -> Result<(GetHelpdeskTicketMessageListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HelpdeskServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_helpdesk_ticket_message_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetHelpdeskTicketMessageListReq,
            GetHelpdeskTicketMessageListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_helpdesk_ticket_message_list(
            &self,
            req: &GetHelpdeskTicketMessageListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetHelpdeskTicketMessageListReq,
                GetHelpdeskTicketMessageListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::helpdesk::get_helpdesk_ticket_message_list::{
            GetHelpdeskTicketMessageListReq, GetHelpdeskTicketMessageListResp,
            GetHelpdeskTicketMessageListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .helpdesk()
            .mock()
            .mock_get_helpdesk_ticket_message_list(|_| {
                Ok((
                    GetHelpdeskTicketMessageListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .helpdesk()
            .get_helpdesk_ticket_message_list(GetHelpdeskTicketMessageListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .helpdesk()
            .get_helpdesk_ticket_message_list(GetHelpdeskTicketMessageListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "messages": [
            {
                "id": "6948728206392295444",
                "message_id": "6949088236610273307",
                "message_type": "text",
                "created_at": 1617960686000,
                "content": "{\"content\":\"进入人工服务。 @李宁  为你提供服务，开始聊起来吧~\",\"msg_type\":\"text\"}",
                "user_name": "李宁",
                "avatar_url": "https://internal-api-lark-file.feishu-boe.cn/static-resource/v1/3e73cdce-54b0-4c6a-8226-b131fb2825dj~?image_size=72x72&cut_type=&quality=&format=image&sticker_format=.webp",
                "user_id": "ou_37019b7c830210acd88fdce886e25c71"
            }
        ],
        "total": 100
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetHelpdeskTicketMessageListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
