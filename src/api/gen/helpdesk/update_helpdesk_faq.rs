//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::helpdesk::HelpdeskService;

impl<'c, IStore: Store, IClient: HttpClient> HelpdeskService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-27T02:57:28+00:00**
    ///
    /// ## 修改知识库
    ///
    /// 该接口用于修改知识库。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/patch>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/faq/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhelpdesk-v1%2Ffaq-management%2Ffaq%2Fpatch>
    pub async fn update_helpdesk_faq(
        &self,
        req: UpdateHelpdeskFaqReq,
    ) -> Result<(UpdateHelpdeskFaqResp, CommonResponse), Error> {
        self.update_helpdesk_faq_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_helpdesk_faq](#method.update_helpdesk_faq) 函数
    pub async fn update_helpdesk_faq_with_opt(
        &self,
        req: UpdateHelpdeskFaqReq,
        method_option: MethodOption,
    ) -> Result<(UpdateHelpdeskFaqResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_helpdesk_faq(&req) {
                tracing::info!("[lark] Helpdesk#UpdateHelpdeskFaq **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Helpdesk#UpdateHelpdeskFaq call api");

        let req = ApiRequest {
            scope: "Helpdesk",
            api: "UpdateHelpdeskFaq",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/helpdesk/v1/faqs/:id",
            param_data: req.gen_param(),
            method_option,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateHelpdeskFaqRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateHelpdeskFaqReq {
    /// 知识库ID
    ///
    /// **示例值**: "6856395634652479491"
    #[api(kind = "path", name = "id")]
    pub id: String,

    /// 修改的知识库内容
    #[api(kind = "body", name = "faq")]
    pub faq: Option<FaqUpdateInfoSubReq>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FaqUpdateInfoSubReq {
    /// 知识库分类ID
    ///
    /// **示例值**: "6836004780707807251"
    #[serde(
        rename = "category_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub category_id: Option<String>,
    /// 问题
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "问题"
    #[serde(
        rename = "question",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question: String,
    /// 答案
    ///
    /// **示例值**: "答案"
    #[serde(
        rename = "answer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub answer: Option<String>,
    /// 富文本答案和答案必须有一个必填。Json Array格式，富文本结构请见[了解更多: 富文本](https://open.feishu.cn/document/ukTMukTMukTM/uITM0YjLyEDN24iMxQjN)
    ///
    /// **示例值**: "[{"content":"答案","type":"text"},{"content":"\n","type":"text"}]"
    #[serde(
        rename = "answer_richtext",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub answer_richtext: Vec<Option<RichtextSubReq>>,
    /// 相似问题
    ///
    /// **示例值**: "["tag1","tag2","tag3"]"
    #[serde(
        rename = "tags",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tags: Vec<Option<String>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RichtextSubReq {
    /// 内容
    ///
    /// **示例值**: "这是一个答案"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: Option<String>,
    /// 内容类型。可选值：text、hyperlink、img、line break
    ///
    /// **示例值**: "text"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateHelpdeskFaqRespInner {
    #[serde(flatten)]
    data: Option<UpdateHelpdeskFaqResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateHelpdeskFaqResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::helpdesk::HelpdeskServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateHelpdeskFaqReq) -> Result<(UpdateHelpdeskFaqResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(UpdateHelpdeskFaqReq) -> Result<(UpdateHelpdeskFaqResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HelpdeskServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_helpdesk_faq<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateHelpdeskFaqReq, UpdateHelpdeskFaqResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_helpdesk_faq(
            &self,
            req: &UpdateHelpdeskFaqReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateHelpdeskFaqReq, UpdateHelpdeskFaqResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::helpdesk::update_helpdesk_faq::{
            UpdateHelpdeskFaqReq, UpdateHelpdeskFaqResp, UpdateHelpdeskFaqRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .helpdesk()
            .mock()
            .mock_update_helpdesk_faq(|_| {
                Ok((UpdateHelpdeskFaqResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .helpdesk()
            .update_helpdesk_faq(UpdateHelpdeskFaqReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .helpdesk()
            .update_helpdesk_faq(UpdateHelpdeskFaqReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "faq": {
        "category_id": "6836004780707807251",
        "question": "问题",
        "answer": "答案",
        "answer_richtext": [
            {
                "content": "这是一个答案",
                "type": "text"
            }
        ],
        "tags": [
            "测试",
            "问题"
        ]
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateHelpdeskFaqReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateHelpdeskFaqRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
