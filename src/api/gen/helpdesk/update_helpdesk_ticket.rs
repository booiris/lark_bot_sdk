//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/update>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::helpdesk::HelpdeskService;

impl<'c, IStore: Store, IClient: HttpClient> HelpdeskService<'c, IStore, IClient> {
    /// **api 版本: 2024-03-06T11:33:59+00:00**
    ///
    /// ## 更新工单详情
    ///
    /// 该接口用于更新服务台工单详情。只会更新数据，不会触发相关操作。如修改工单状态到关单，不会关闭聊天页面。仅支持自建应用。要更新的工单字段必须至少输入一项。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/update>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/helpdesk-v1/ticket-management/ticket/update>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhelpdesk-v1%2Fticket-management%2Fticket%2Fupdate>
    pub async fn update_helpdesk_ticket(
        &self,
        req: UpdateHelpdeskTicketReq,
    ) -> Result<(UpdateHelpdeskTicketResp, CommonResponse), Error> {
        self.update_helpdesk_ticket_with_opt(req, Default::default())
            .await
    }

    /// 参见 [update_helpdesk_ticket](#method.update_helpdesk_ticket) 函数
    pub async fn update_helpdesk_ticket_with_opt(
        &self,
        req: UpdateHelpdeskTicketReq,
        method_option: MethodOption,
    ) -> Result<(UpdateHelpdeskTicketResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_helpdesk_ticket(&req) {
                tracing::info!("[lark] Helpdesk#UpdateHelpdeskTicket **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Helpdesk#UpdateHelpdeskTicket call api");

        let req = ApiRequest {
            scope: "Helpdesk",
            api: "UpdateHelpdeskTicket",
            method: http::Method::PUT,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/helpdesk/v1/tickets/:ticket_id",
            param_data: req.gen_param(),
            method_option,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateHelpdeskTicketRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateHelpdeskTicketReq {
    /// 工单ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6945345902185807891"
    #[api(kind = "path", name = "ticket_id")]
    pub ticket_id: String,

    /// 工单新status，status对应具体的含义如下：1: 待响应, 2: 处理中, 3: 排队中, 4: 待定, 5: 待用户响应, 50: 机器人关闭工单, 51: 人工关闭工单
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "status")]
    pub status: Option<i64>,
    /// 新标签名
    ///
    /// **示例值**: "abc"
    #[api(kind = "body", name = "tag_names")]
    pub tag_names: Vec<Option<String>>,
    /// 新评论
    ///
    /// **示例值**: "good"
    #[api(kind = "body", name = "comment")]
    pub comment: Option<String>,
    /// 自定义字段
    #[api(kind = "body", name = "customized_fields")]
    pub customized_fields: Vec<Option<CustomizedFieldDisplayItemSubReq>>,
    /// ticket stage
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "ticket_type")]
    pub ticket_type: Option<i64>,
    /// 工单是否解决，1: 未解决, 2: 已解决
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "solved")]
    pub solved: Option<i64>,
    /// 工单来源渠道ID
    ///
    /// **示例值**: "1"
    #[api(kind = "body", name = "channel")]
    pub channel: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomizedFieldDisplayItemSubReq {
    /// 自定义字段ID
    ///
    /// **示例值**: "123"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: Option<String>,
    /// 自定义字段值
    ///
    /// **示例值**: "value"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: Option<String>,
    /// 键名
    ///
    /// **示例值**: "key"
    #[serde(
        rename = "key_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key_name: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateHelpdeskTicketRespInner {
    #[serde(flatten)]
    data: Option<UpdateHelpdeskTicketResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateHelpdeskTicketResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::helpdesk::HelpdeskServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateHelpdeskTicketReq) -> Result<(UpdateHelpdeskTicketResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    UpdateHelpdeskTicketReq,
                ) -> Result<(UpdateHelpdeskTicketResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HelpdeskServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_helpdesk_ticket<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            UpdateHelpdeskTicketReq,
            UpdateHelpdeskTicketResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_helpdesk_ticket(
            &self,
            req: &UpdateHelpdeskTicketReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateHelpdeskTicketReq, UpdateHelpdeskTicketResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::helpdesk::update_helpdesk_ticket::{
            UpdateHelpdeskTicketReq, UpdateHelpdeskTicketResp, UpdateHelpdeskTicketRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .helpdesk()
            .mock()
            .mock_update_helpdesk_ticket(|_| {
                Ok((
                    UpdateHelpdeskTicketResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .helpdesk()
            .update_helpdesk_ticket(UpdateHelpdeskTicketReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .helpdesk()
            .update_helpdesk_ticket(UpdateHelpdeskTicketReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "status": 1,
    "tag_names": [
        "abc"
    ],
    "comment": "good",
    "customized_fields": [
        {
            "id": "123",
            "value": "value",
            "key_name": "key"
        }
    ],
    "ticket_type": 1,
    "solved": 1,
    "channel": 1
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateHelpdeskTicketReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateHelpdeskTicketRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
