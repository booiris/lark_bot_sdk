//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/search>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::helpdesk::HelpdeskService;

impl<'c, IStore: Store, IClient: HttpClient> HelpdeskService<'c, IStore, IClient> {
    /// **api 版本: 2023-08-15T07:34:23+00:00**
    ///
    /// ## 搜索知识库
    ///
    /// 该接口用于搜索服务台知识库。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/search>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/helpdesk-v1/faq-management/faq/search>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fhelpdesk-v1%2Ffaq-management%2Ffaq%2Fsearch>
    pub async fn search_helpdesk_faq(
        &self,
        req: SearchHelpdeskFaqReq,
    ) -> Result<(SearchHelpdeskFaqResp, CommonResponse), Error> {
        self.search_helpdesk_faq_with_opt(req, Default::default())
            .await
    }

    /// 参见 [search_helpdesk_faq](#method.search_helpdesk_faq) 函数
    pub async fn search_helpdesk_faq_with_opt(
        &self,
        req: SearchHelpdeskFaqReq,
        method_option: MethodOption,
    ) -> Result<(SearchHelpdeskFaqResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_search_helpdesk_faq(&req) {
                tracing::info!("[lark] Helpdesk#SearchHelpdeskFaq **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Helpdesk#SearchHelpdeskFaq call api");

        let req = ApiRequest {
            scope: "Helpdesk",
            api: "SearchHelpdeskFaq",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/helpdesk/v1/faqs/search",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (SearchHelpdeskFaqRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct SearchHelpdeskFaqReq {
    /// 搜索query
    ///
    /// ，query内容如果不是英文，包含中文空格等有两种编码策略：1. url编码 2. base64编码，同时加上base64=true参数
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "wifi"
    #[api(kind = "query", name = "query", v_type = "var", option = "false")]
    pub query: String,
    /// 是否转换为base64,输入true表示是，不填写表示否
    ///
    /// **示例值**: "true"
    #[api(kind = "query", name = "base64", v_type = "var", option = "false")]
    pub base64: String,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "6936004780707807251"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct SearchHelpdeskFaqRespInner {
    #[serde(flatten)]
    data: Option<SearchHelpdeskFaqResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct SearchHelpdeskFaqResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 知识库列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<FaqSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct FaqSubResp {
    /// 知识库ID
    ///
    /// **示例值**: "6986214054851346434"
    #[serde(
        rename = "faq_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub faq_id: String,
    /// 知识库旧版ID，请使用faq_id
    ///
    /// **示例值**: "6986214054851346434"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 服务台ID
    ///
    /// **示例值**: "6946124090457505820"
    #[serde(
        rename = "helpdesk_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub helpdesk_id: String,
    /// 问题
    ///
    /// **示例值**: "盒餐发放位置查询"
    #[serde(
        rename = "question",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub question: String,
    /// 答案
    ///
    /// **示例值**: "建议根据公司实际情况编写，以文档形式答疑"
    #[serde(
        rename = "answer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub answer: String,
    /// 富文本答案
    #[serde(
        rename = "answer_richtext",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub answer_richtext: Vec<RichtextSubResp>,
    /// 创建时间
    ///
    /// **示例值**: "1626604715"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: i64,
    /// 修改时间
    ///
    /// **示例值**: "1631242057"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: i64,
    /// 分类
    #[serde(
        rename = "categories",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub categories: Vec<CategorySubResp>,
    /// 相似问题列表
    #[serde(
        rename = "tags",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub tags: Vec<String>,
    /// 失效时间
    ///
    /// **示例值**: "1631243057"
    #[serde(
        rename = "expire_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub expire_time: i64,
    /// 更新用户
    #[serde(
        rename = "update_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_user: TicketUserSubResp,
    /// 创建用户
    #[serde(
        rename = "create_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_user: TicketUserSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct TicketUserSubResp {
    /// 用户ID
    ///
    /// **示例值**: "ou_eb208c4799a1f3a86c12e0b03e5a54b1"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户头像url
    ///
    /// **示例值**: "xxxxxxxxxx"
    #[serde(
        rename = "avatar_url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub avatar_url: String,
    /// 用户名
    ///
    /// **示例值**: "xx"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 所在部门名称
    ///
    /// **示例值**: "行政"
    #[serde(
        rename = "department",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department: String,
    /// 城市
    ///
    /// **示例值**: "xx"
    #[serde(
        rename = "city",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub city: String,
    /// 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
    ///
    /// **示例值**: "xx"
    #[serde(
        rename = "country",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub country: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RichtextSubResp {
    /// 内容
    ///
    /// **示例值**: "建议根据公司实际情况编写，以文档形式答疑"
    #[serde(
        rename = "content",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub content: String,
    /// 类型
    ///
    /// **示例值**: "text"
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CategorySubResp {
    /// 知识库分类ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6975057629039083524"
    #[serde(
        rename = "category_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub category_id: String,
    /// 知识库分类ID，（旧版，请使用category_id）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6975057629039083524"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "行政"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 父知识库分类ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6946124050457505820"
    #[serde(
        rename = "parent_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub parent_id: String,
    /// 服务台ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6946124090457505820"
    #[serde(
        rename = "helpdesk_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub helpdesk_id: String,
    /// 语言
    ///
    /// **示例值**: "zh_cn"
    #[serde(
        rename = "language",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub language: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::helpdesk::HelpdeskServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(SearchHelpdeskFaqReq) -> Result<(SearchHelpdeskFaqResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(SearchHelpdeskFaqReq) -> Result<(SearchHelpdeskFaqResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> HelpdeskServiceMocker<'c, IStore, IClient> {
        pub fn mock_search_helpdesk_faq<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, SearchHelpdeskFaqReq, SearchHelpdeskFaqResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_search_helpdesk_faq(
            &self,
            req: &SearchHelpdeskFaqReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, SearchHelpdeskFaqReq, SearchHelpdeskFaqResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::helpdesk::search_helpdesk_faq::{
            SearchHelpdeskFaqReq, SearchHelpdeskFaqResp, SearchHelpdeskFaqRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .helpdesk()
            .mock()
            .mock_search_helpdesk_faq(|_| {
                Ok((SearchHelpdeskFaqResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .helpdesk()
            .search_helpdesk_faq(SearchHelpdeskFaqReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .helpdesk()
            .search_helpdesk_faq(SearchHelpdeskFaqReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
  "code": 0,
  "data": {
    "has_more": false,
    "items": [
      {
        "answer": "建议根据公司实际情况编写，以文档形式答疑",
        "answer_richtext": [
          {
            "content": "建议根据公司实际情况编写，以文档形式答疑",
            "type": "text"
          }
        ],
        "categories": [
          {
            "category_id": "6975057629039083524",
            "id": "6975057629039083524",
            "name": "行政"
          },
          {
            "category_id": "6986214055581122561",
            "id": "6986214055581122561",
            "name": "名片申请"
          }
        ],
        "create_time": 1626604715,
        "create_user": {
          "avatar_url": "https://xxxxx",
          "id": "ou_f7dab73dda407c7cbc947bbf4fd49c45",
          "name": "陈xxx"
        },
        "faq_id": "6986214054851346434",
        "helpdesk_id": "6946124090457505820",
        "id": "6986214054851346434",
        "question": "盒餐发放位置查询",
        "tags": [
          "盒饭",
          "盒餐"
        ],
        "update_time": 1631242057,
        "update_user": {
          "avatar_url": "xxxxxxxxxx",
          "id": "ou_43771a6f8dfa0815600a949779xxx",
          "name": "戴xx"
        }
      },
      {
        "answer": "建议根据公司实际情况编写，以文档形式答疑",
        "answer_richtext": [
          {
            "content": "我的答案",
            "type": "text"
          }
        ],
        "categories": [
          {
            "category_id": "6975057629039083524",
            "id": "6975057629039083524",
            "name": "行政"
          },
          {
            "category_id": "6986214054805159937",
            "id": "6986214054805159937",
            "name": "餐饮服务"
          }
        ],
        "create_time": 1626604715,
        "create_user": {
          "avatar_url": "xxxxxxxxxx",
          "id": "xxxx",
          "name": "陈xx"
        },
        "faq_id": "6986214054826147841",
        "helpdesk_id": "6946124090457505820",
        "id": "6986214054826147841",
        "question": "下午茶推送和选品推荐",
        "tags": [
          "供餐",
          "下午茶"
        ],
        "update_time": 1630063323,
        "update_user": {
          "avatar_url": "xxxxxxxxxx",
          "id": "ou_eb208c4799a1f3a86c12e0b03e5a54b1",
          "name": "蔡xx"
        }
      }
    ],
    "page_size": 2,
    "page_token": "6986214054876479490",
    "total": 2
  },
  "msg": "ok"
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<SearchHelpdeskFaqRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
