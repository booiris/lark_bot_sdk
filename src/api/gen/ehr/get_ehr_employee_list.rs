//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/employee/list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::ehr::EhrService;

impl<'c, IStore: Store, IClient: HttpClient> EhrService<'c, IStore, IClient> {
    /// **api 版本: 2024-05-28T06:13:11+00:00**
    ///
    /// ## 批量获取员工花名册信息
    ///
    /// 根据员工飞书用户 ID / 员工状态 / 雇员类型等搜索条件 ，批量获取员工花名册字段信息。字段包括「系统标准字段 / system_fields」和「自定义字段 / custom_fields」。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/employee/list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/ehr-v1/list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fehr-v1%2Flist>
    pub async fn get_ehr_employee_list(
        &self,
        req: GetEhrEmployeeListReq,
    ) -> Result<(GetEhrEmployeeListResp, CommonResponse), Error> {
        self.get_ehr_employee_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_ehr_employee_list](#method.get_ehr_employee_list) 函数
    pub async fn get_ehr_employee_list_with_opt(
        &self,
        req: GetEhrEmployeeListReq,
        method_option: MethodOption,
    ) -> Result<(GetEhrEmployeeListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_ehr_employee_list(&req) {
                tracing::info!("[lark] Ehr#GetEhrEmployeeList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Ehr#GetEhrEmployeeList call api");

        let req = ApiRequest {
            scope: "Ehr",
            api: "GetEhrEmployeeList",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/ehr/v1/employees",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetEhrEmployeeListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetEhrEmployeeListReq {
    /// 返回数据类型，不传值默认为 basic。
    ///
    /// **示例值**: "basic"
    ///
    /// **可选值**:
    ///
    /// `basic`: 概览，只返回 id、name 等基本信息
    ///
    /// `full`: 明细，返回系统标准字段和自定义字段集合
    #[api(kind = "query", name = "view", v_type = "var", option = "false")]
    pub view: String,
    /// 员工状态，不传代表查询所有员工状态
    ///
    /// 实际在职 = 2&4
    ///
    /// 可同时查询多个状态的记录，如 status=2&status=4
    ///
    /// **示例值**: "2"
    #[api(kind = "query", name = "status", v_type = "list", option = "false")]
    pub status: Vec<i64>,
    /// 人员类型，不传代表查询所有人员类型
    ///
    /// 同时可使用自定义员工类型的 int 值进行查询，可通过下方接口获取到该租户的自定义员工类型的名称，参见 [获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)
    ///
    /// **示例值**: "1"
    #[api(kind = "query", name = "type", v_type = "list", option = "false")]
    pub query_type: Vec<i64>,
    /// 查询开始时间（创建时间 &gt;= 此时间）
    ///
    /// **示例值**: "1608690517811"
    #[api(kind = "query", name = "start_time", v_type = "var", option = "false")]
    pub start_time: String,
    /// 查询结束时间（创建时间 &lt;= 此时间）
    ///
    /// **示例值**: "1608690517811"
    #[api(kind = "query", name = "end_time", v_type = "var", option = "false")]
    pub end_time: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// user_id、open_id 或 union_id，默认为 open_id。
    ///
    /// 如果传入的值不是 open_id，需要一并传入 user_id_type 参数。
    ///
    /// 可一次查询多个 id 的用户，例如：user_ids=ou_8ebd4f35d7101ffdeb4771d7c8ec517e&user_ids=ou_7abc4f35d7101ffdeb4771dabcde
    ///
    /// [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
    ///
    /// **示例值**: "ou_8ebd4f35d7101ffdeb4771d7c8ec517e"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `100` 字符
    #[api(kind = "query", name = "user_ids", v_type = "list", option = "false")]
    pub user_ids: Vec<String>,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 分页大小，取值范围 1~100，默认 10
    ///
    /// **示例值**: "10"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetEhrEmployeeListRespInner {
    #[serde(flatten)]
    data: Option<GetEhrEmployeeListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetEhrEmployeeListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 员工列表
    #[serde(
        rename = "items",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub items: Vec<EmployeeSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "eVQrYzJBNDNONlk4VFZBZVlSdzlKdFJ4bVVHVExENDNKVHoxaVdiVnViQT0="
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmployeeSubResp {
    /// 员工的用户 ID
    ///
    /// user_id_type 为 user_id 时返回 user_id；
    ///
    /// user_id_type 为 open_id 时返回 open_id；
    ///
    /// user_id_type 为 union_id 时返回 union_id；
    ///
    /// 「待入职」和「已取消入职」的员工，此字段值为 null
    ///
    /// **示例值**: "ou_8ebd4f35d7101ffdeb4771d7c8ec517e"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 系统字段
    #[serde(
        rename = "system_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub system_fields: SystemFieldsSubResp,
    /// 自定义字段
    #[serde(
        rename = "custom_fields",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub custom_fields: Vec<CustomFieldsSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct SystemFieldsSubResp {
    /// 中文姓名
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 英文姓名
    ///
    /// **示例值**: "Tony Zhang"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
    /// 邮箱
    ///
    /// **示例值**: "a@b.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 手机号码
    ///
    /// **示例值**: "(+86) 13812345678"
    #[serde(
        rename = "mobile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile: String,
    /// 部门的飞书 open_department_id
    ///
    /// **示例值**: "od-4d551617a5da3cec26666d33175dc8ca"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: String,
    /// 上级
    #[serde(
        rename = "manager",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub manager: ManagerSubResp,
    /// 职位
    #[serde(
        rename = "job",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job: JobSubResp,
    /// 职级
    #[serde(
        rename = "job_level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job_level: JobLevelSubResp,
    /// 工作地点
    #[serde(
        rename = "work_location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_location: WorkLocationSubResp,
    /// 性别
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `male`: 男
    ///
    /// `female`: 女
    #[serde(
        rename = "gender",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub gender: i64,
    /// 出生日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "birthday",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub birthday: String,
    /// 籍贯
    #[serde(
        rename = "native_region",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub native_region: NativeRegionSubResp,
    /// 民族
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `han`: 汉族
    ///
    /// `mongol`: 蒙古族
    ///
    /// `hui`: 回族
    ///
    /// `zang`: 藏族
    ///
    /// `uygur`: 维吾尔族
    ///
    /// `miao`: 苗族
    ///
    /// `yi`: 彝族
    ///
    /// `zhuang`: 壮族
    ///
    /// `buyei`: 布依族
    ///
    /// `chosen`: 朝鲜族
    ///
    /// `man`: 满族
    ///
    /// `dong`: 侗族
    ///
    /// `yao`: 瑶族
    ///
    /// `bai`: 白族
    ///
    /// `tujia`: 土家族
    ///
    /// `hani`: 哈尼族
    ///
    /// `kazak`: 哈萨克族
    ///
    /// `dai`: 傣族
    ///
    /// `li`: 黎族
    ///
    /// `lisu`: 傈僳族
    ///
    /// `va`: 佤族
    ///
    /// `she`: 畲族
    ///
    /// `gaoshan`: 高山族
    ///
    /// `lahu`: 拉祜族
    ///
    /// `sui`: 水族
    ///
    /// `dongxiang`: 东乡族
    ///
    /// `naxi`: 纳西族
    ///
    /// `jingpo`: 景颇族
    ///
    /// `achang`: 阿昌族
    ///
    /// `kirgiz`: 柯尔克孜族
    ///
    /// `tu`: 土族
    ///
    /// `daur`: 达斡尔族
    ///
    /// `mulao`: 仫佬族
    ///
    /// `qiang`: 羌族
    ///
    /// `blang`: 布朗族
    ///
    /// `salar`: 撒拉族
    ///
    /// `maonan`: 毛南族
    ///
    /// `gelao`: 仡佬族
    ///
    /// `xib3`: 锡伯族
    ///
    /// `pumi`: 普米族
    ///
    /// `tajik`: 塔吉克族
    ///
    /// `nu`: 怒族
    ///
    /// `uzbek`: 乌孜别克族
    ///
    /// `russ`: 俄罗斯族
    ///
    /// `ewenki`: 鄂温克族
    ///
    /// `deang`: 德昂族
    ///
    /// `bonan`: 保安族
    ///
    /// `yugur`: 裕固族
    ///
    /// `gin`: 京族
    ///
    /// `tatar`: 塔塔尔族
    ///
    /// `derung`: 独龙族
    ///
    /// `oroqen`: 鄂伦春族
    ///
    /// `hezhen`: 赫哲族
    ///
    /// `monba`: 门巴族
    ///
    /// `lhoba`: 珞巴族
    ///
    /// `jino`: 基诺族
    ///
    /// `other`: 其他
    #[serde(
        rename = "ethnicity",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ethnicity: i64,
    /// 婚姻状况
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `single`: 未婚
    ///
    /// `married`: 已婚
    ///
    /// `divorced`: 离异
    ///
    /// `other`: 其他
    #[serde(
        rename = "marital_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub marital_status: i64,
    /// 政治面貌
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `CPC`: 中共党员
    ///
    /// `CPWDP`: 中国农工民主党
    ///
    /// `RCCK`: 中国国民党革命委员会
    ///
    /// `CAPD`: 中国民主促进会会员
    ///
    /// `CDL`: 中国民主同盟成员
    ///
    /// `CDNCA`: 中国民主建国会
    ///
    /// `CZGD`: 中国致公党党员
    ///
    /// `JSS`: 九三学社社员
    ///
    /// `CYL`: 共青团员
    ///
    /// `member_of_other_party`: 其它党派成员
    ///
    /// `DP`: 民主人士
    ///
    /// `masses`: 群众
    ///
    /// `TDSGL`: 台湾民主自治同盟盟员
    #[serde(
        rename = "political_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub political_status: i64,
    /// 参加工作日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "entered_workforce_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub entered_workforce_date: String,
    /// 证件类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `id_number`: 居民身份证
    ///
    /// `mainland_travel_permit_hkmacao`: 港澳居民来往内地通行证
    ///
    /// `mainland_travel_permit_tw`: 台湾居民来往大陆通行证
    ///
    /// `passport`: 护照
    ///
    /// `other`: 其他
    #[serde(
        rename = "id_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_type: i64,
    /// 证件号
    ///
    /// **示例值**: "110122XXXXXX"
    #[serde(
        rename = "id_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_number: String,
    /// 户口类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `local_urban_residence`: 本市城镇
    ///
    /// `non_local_urban_residence`: 外埠城镇
    ///
    /// `local_rural_residence`: 本市农村
    ///
    /// `non_local_rural_residence`: 外埠农村
    #[serde(
        rename = "hukou_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hukou_type: i64,
    /// 户口所在地
    ///
    /// **示例值**: "北京市海淀区XXXX"
    #[serde(
        rename = "hukou_location",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hukou_location: String,
    /// 银行卡号
    ///
    /// **示例值**: "1243253453"
    #[serde(
        rename = "bank_account_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_account_number: String,
    /// 开户行
    ///
    /// **示例值**: "招商银行"
    #[serde(
        rename = "bank_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bank_name: String,
    /// 社保账号
    ///
    /// **示例值**: "123124124"
    #[serde(
        rename = "social_security_account",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub social_security_account: String,
    /// 公积金账号
    ///
    /// **示例值**: "123124235"
    #[serde(
        rename = "provident_fund_account",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub provident_fund_account: String,
    /// 工号
    ///
    /// **示例值**: "TM-00001"
    #[serde(
        rename = "employee_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_no: String,
    /// 人员类型
    ///
    /// 同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称，参见 [获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list)
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `regular`: 正式
    ///
    /// `intern`: 实习
    ///
    /// `consultant`: 顾问
    ///
    /// `outsourcing`: 外包
    ///
    /// `contractor`: 劳务
    #[serde(
        rename = "employee_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_type: i64,
    /// 员工状态
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `to_be_onboarded`: 待入职
    ///
    /// `active`: 在职
    ///
    /// `onboarding_cancelled`: 已取消入职
    ///
    /// `offboarding`: 待离职
    ///
    /// `offboarded`: 已离职
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: i64,
    /// 入职日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "hire_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub hire_date: String,
    /// 试用期（月）
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "probation_months",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub probation_months: f64,
    /// 转正日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "conversion_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub conversion_date: String,
    /// 转正申请
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `not_applied`: 未申请
    ///
    /// `pending`: 审批中
    ///
    /// `rejected`: 被驳回
    ///
    /// `approved`: 已通过
    #[serde(
        rename = "application",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application: i64,
    /// 转正状态
    ///
    /// **示例值**: "3"
    ///
    /// **可选值**:
    ///
    /// `no_conversion_required`: 无需转正
    ///
    /// `pending_conversion`: 待转正
    ///
    /// `regular`: 已转正
    #[serde(
        rename = "application_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub application_status: i64,
    /// 离职日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "last_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub last_day: String,
    /// 离职类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `voluntary`: 主动
    ///
    /// `involuntary`: 被动
    ///
    /// `other`: 其他
    #[serde(
        rename = "departure_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub departure_type: i64,
    /// 离职原因
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `health_or_family_issues`: 身体、家庭原因
    ///
    /// `lack_of_career_development`: 职业发展
    ///
    /// `unsatisfactory_compensation_and_benefits`: 薪资福利不满意
    ///
    /// `excessive_workload`: 工作压力大
    ///
    /// `non_renewal_of_employment_contract`: 合同到期不续签
    ///
    /// `other`: 其他
    ///
    /// `unsatisfactory_performance`: 无法胜任工作
    ///
    /// `corporate_restructuring_and_position_optimization`: 组织业务调整和岗位优化
    ///
    /// `violation_of_company_regulations`: 违反公司条例
    ///
    /// `violation_of_laws_and_discipline`: 试用期未通过
    ///
    /// `other_of_involuntary`: 其他
    ///
    /// `not_satisfied_with_work_content`: 不满意工作内容
    ///
    /// `lack_of_recognition_of_leader`: 不认可上级或管理层
    ///
    /// `lack_of_recognition_of_company_culture`: 对公司文化缺乏认同
    ///
    /// `active_organize_business_adjustment`: 组织架构调整（主动离职）
    ///
    /// `job_hopping`: 跳槽
    ///
    /// `change_career`: 转行
    ///
    /// `family`: 家庭原因
    ///
    /// `poor_health`: 健康状况不佳
    ///
    /// `work_place`: 工作地点原因
    ///
    /// `accident`: 意外
    ///
    /// `death`: 身故
    ///
    /// `fired`: 解雇
    ///
    /// `low_work_output`: 工作产出低
    ///
    /// `break_the_law`: 违法
    ///
    /// `other_other`: 其他（其他）
    #[serde(
        rename = "departure_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub departure_reason: i64,
    /// 离职备注
    ///
    /// **示例值**: "世界那么大"
    #[serde(
        rename = "departure_notes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub departure_notes: String,
    /// 合同公司
    #[serde(
        rename = "contract_company",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_company: ContractCompanySubResp,
    /// 合同类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `fixed_term_labor_contract`: 固定期限劳动合同
    ///
    /// `open_ended_labor_contract`: 无固定期限劳动合同
    ///
    /// `internship_agreement`: 实习协议
    ///
    /// `outsourcing_agreement`: 外包协议
    ///
    /// `dispatched_contract`: 劳务派遣合同
    ///
    /// `re_engagement_agreement`: 返聘协议
    ///
    /// `other`: 其他
    #[serde(
        rename = "contract_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_type: i64,
    /// 合同开始日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "contract_start_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_start_date: String,
    /// 合同到期日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "contract_expiration_date",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_expiration_date: String,
    /// 劳动合同签订次数
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "contract_sign_times",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contract_sign_times: i64,
    /// 个人邮箱
    ///
    /// **示例值**: "personal@email.com"
    #[serde(
        rename = "personal_email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub personal_email: String,
    /// 家庭地址
    ///
    /// **示例值**: "北京市海淀区XXXXX"
    #[serde(
        rename = "family_address",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub family_address: String,
    /// 主要紧急联系人
    #[serde(
        rename = "primary_emergency_contact",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub primary_emergency_contact: EmergencyContactSubResp,
    /// 紧急联系人
    #[serde(
        rename = "emergency_contact",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub emergency_contact: Vec<EmergencyContactSubResp>,
    /// 最高学历
    #[serde(
        rename = "highest_level_of_edu",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub highest_level_of_edu: EducationSubResp,
    /// 教育经历
    #[serde(
        rename = "education",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub education: Vec<EducationSubResp>,
    /// 前工作经历
    #[serde(
        rename = "former_work_exp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub former_work_exp: WorkExperienceSubResp,
    /// 工作经历
    #[serde(
        rename = "work_exp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub work_exp: Vec<WorkExperienceSubResp>,
    /// 身份证照片（人像面）
    #[serde(
        rename = "id_photo_po_side",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_photo_po_side: Vec<AttachmentSubResp>,
    /// 身份证照片（国徽面）
    #[serde(
        rename = "id_photo_em_side",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_photo_em_side: Vec<AttachmentSubResp>,
    /// 证件照
    #[serde(
        rename = "id_photo",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id_photo: Vec<AttachmentSubResp>,
    /// 学位证书
    #[serde(
        rename = "diploma_photo",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub diploma_photo: Vec<AttachmentSubResp>,
    /// 毕业证书
    #[serde(
        rename = "graduation_cert",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub graduation_cert: Vec<AttachmentSubResp>,
    /// 奖励证明
    #[serde(
        rename = "cert_of_merit",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cert_of_merit: Vec<AttachmentSubResp>,
    /// 离职证明
    #[serde(
        rename = "offboarding_file",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub offboarding_file: Vec<AttachmentSubResp>,
    /// 取消入职原因
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `personal_reason`: 个人原因
    ///
    /// `stay`: 原单位留任
    ///
    /// `other_offer`: 接受其他 Offer
    ///
    /// `other`: 其他
    #[serde(
        rename = "cancel_onboarding_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cancel_onboarding_reason: i64,
    /// 取消入职备注
    ///
    /// **示例值**: "个人原因"
    #[serde(
        rename = "cancel_onboarding_notes",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cancel_onboarding_notes: String,
    /// 入职登记表状态
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `not_sent`: 未发送
    ///
    /// `to_be_submitted`: 待提交
    ///
    /// `submitted`: 已提交
    #[serde(
        rename = "employee_form_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_form_status: i64,
    /// 创建时间
    ///
    /// **示例值**: "1608690517811"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: i64,
    /// 更新时间
    ///
    /// **示例值**: "1608690517811"
    #[serde(
        rename = "update_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub update_time: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ManagerSubResp {
    /// 上级的用户 ID（user_id）
    ///
    /// **示例值**: "ou_8ebd4f35d7101ffdeb4771d7c8ec517e"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 中文名
    ///
    /// **示例值**: "李四"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 英文名
    ///
    /// **示例值**: "Tom Li"
    #[serde(
        rename = "en_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub en_name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobSubResp {
    /// 职位 ID
    ///
    /// **示例值**: "1695838220091399"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: i64,
    /// 职位名称
    ///
    /// **示例值**: "测试工程师"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct JobLevelSubResp {
    /// 职级 ID
    ///
    /// **示例值**: "1695838220091399"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: i64,
    /// 职级名称
    ///
    /// **示例值**: "CEO"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct WorkLocationSubResp {
    /// 工作地点 ID
    ///
    /// **示例值**: "1695838220091399"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: i64,
    /// 工作地点名称
    ///
    /// **示例值**: "武汉"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct NativeRegionSubResp {
    /// ISO 编码
    ///
    /// **示例值**: "CHN-11"
    #[serde(
        rename = "iso_code",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub iso_code: String,
    /// 名称
    ///
    /// **示例值**: "北京"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ContractCompanySubResp {
    /// 公司 ID
    ///
    /// **示例值**: "1695838220091399"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: i64,
    /// 公司名称
    ///
    /// **示例值**: "油条一号"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EmergencyContactSubResp {
    /// 紧急联系人姓名
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 与紧急联系人的关系
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `parent`: 父母
    ///
    /// `spouse`: 配偶
    ///
    /// `child`: 子女
    ///
    /// `sibling`: 兄弟姐妹
    ///
    /// `friend`: 朋友
    ///
    /// `other`: 其他
    #[serde(
        rename = "relationship",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub relationship: i64,
    /// 手机号
    ///
    /// **示例值**: "(+86) 13812345678"
    #[serde(
        rename = "mobile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct EducationSubResp {
    /// 学历
    ///
    /// **示例值**: "7"
    ///
    /// **可选值**:
    ///
    /// `elementary_school`: 小学
    ///
    /// `middle_school`: 初中
    ///
    /// `high_school`: 高中
    ///
    /// `vocational_school`: 职业高级中学
    ///
    /// `secondary_specialized_school`: 中等专业学校
    ///
    /// `associate_degree`: 大专
    ///
    /// `bachelor`: 本科
    ///
    /// `master`: 硕士
    ///
    /// `doctor`: 博士
    #[serde(
        rename = "level",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub level: i64,
    /// 毕业学校
    ///
    /// **示例值**: "XXXX大学"
    #[serde(
        rename = "school",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub school: String,
    /// 专业
    ///
    /// **示例值**: "XXX专业"
    #[serde(
        rename = "major",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub major: String,
    /// 学位
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `bachelor`: 学士
    ///
    /// `master`: 硕士
    ///
    /// `doctor`: 博士
    #[serde(
        rename = "degree",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub degree: i64,
    /// 开始日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start: String,
    /// 结束日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "end",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct WorkExperienceSubResp {
    /// 公司
    ///
    /// **示例值**: "XXXX公司"
    #[serde(
        rename = "company",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub company: String,
    /// 部门
    ///
    /// **示例值**: "部门1"
    #[serde(
        rename = "department",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department: String,
    /// 职位
    ///
    /// **示例值**: "职位"
    #[serde(
        rename = "job",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub job: String,
    /// 开始日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "start",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start: String,
    /// 截止日期
    ///
    /// **示例值**: "2020-01-01"
    #[serde(
        rename = "end",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end: String,
    /// 工作描述
    ///
    /// **示例值**: "工作描述"
    #[serde(
        rename = "description",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub description: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct CustomFieldsSubResp {
    /// 自定义字段key
    ///
    /// **示例值**: "field_xxxxxxxx"
    #[serde(
        rename = "key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub key: String,
    /// 自定义字段名称
    ///
    /// **示例值**: "自定义字段 1"
    #[serde(
        rename = "label",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub label: String,
    /// 自定义字段类型
    ///
    /// **示例值**: "text"
    ///
    /// **可选值**:
    ///
    /// `text`: 文本类型
    ///
    /// `date`: 日期类型，如 2020-01-01
    ///
    /// `option`: 枚举类型
    ///
    /// `file`: 附件类型
    #[serde(
        rename = "type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub body_type: String,
    /// 根据 type 不同，结构不同，不同 type 对应的数据结构在 type 的枚举值中有描述
    ///
    /// **示例值**: "文本"
    #[serde(
        rename = "value",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub value: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct AttachmentSubResp {
    /// 下载文件所需要的 Token
    ///
    /// **示例值**: "c7273e07ed9e40a394f88c7dccb49212"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 文件类型
    ///
    /// **示例值**: "png"
    #[serde(
        rename = "mime_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mime_type: String,
    /// 名称
    ///
    /// **示例值**: "Custom Code.png"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 大小
    ///
    /// **示例值**: "57380"
    #[serde(
        rename = "size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub size: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::ehr::EhrServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetEhrEmployeeListReq) -> Result<(GetEhrEmployeeListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetEhrEmployeeListReq) -> Result<(GetEhrEmployeeListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> EhrServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_ehr_employee_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetEhrEmployeeListReq, GetEhrEmployeeListResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_ehr_employee_list(
            &self,
            req: &GetEhrEmployeeListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetEhrEmployeeListReq, GetEhrEmployeeListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::ehr::get_ehr_employee_list::{
            GetEhrEmployeeListReq, GetEhrEmployeeListResp, GetEhrEmployeeListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .ehr()
            .mock()
            .mock_get_ehr_employee_list(|_| {
                Ok((GetEhrEmployeeListResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .ehr()
            .get_ehr_employee_list(GetEhrEmployeeListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .ehr()
            .get_ehr_employee_list(GetEhrEmployeeListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "items": [
            {
                "user_id": "ou_db362c0e79f5a26db1ca8e94698ee417",
                "system_fields": {
                    "name": "张三",
                    "en_name": "Tony Zhang",
                    "email": "a@b.com",
                    "mobile": "(+86) 13812345678",
                    "department_id": "od-4d551617a5da3cec26666d33175dc8ca",
                    "manager": {
                        "user_id": "ou_db362c0e79f5a26db1ca8e94698ee417",
                        "name": "李四",
                        "en_name": "Tom Li"
                    },
                    "job": {
                        "id": 1695838220091399,
                        "name": "测试工程师"
                    },
                    "job_level": {
                        "id": 1695838220091399,
                        "name": "CEO"
                    },
                    "work_location": {
                        "id": 1695838220091399,
                        "name": "武汉"
                    },
                    "gender": 1,
                    "birthday": "2020-01-01",
                    "native_region": {
                        "iso_code": "CHN-11",
                        "name": "北京"
                    },
                    "ethnicity": 2,
                    "marital_status": 2,
                    "political_status": 2,
                    "entered_workforce_date": "2020-01-01",
                    "id_type": 1,
                    "id_number": "110122XXXXXX",
                    "hukou_type": 1,
                    "hukou_location": "北京市海淀区XXXX",
                    "bank_account_number": "1243253453",
                    "bank_name": "招商银行",
                    "social_security_account": "123124124",
                    "provident_fund_account": "123124235",
                    "employee_no": "TM-00001",
                    "employee_type": 1,
                    "status": 2,
                    "hire_date": "2020-01-01",
                    "probation_months": 2,
                    "conversion_date": "2020-01-01",
                    "application": 1,
                    "application_status": 2,
                    "last_day": "2020-01-01",
                    "departure_type": 1,
                    "departure_reason": 4,
                    "departure_notes": "世界那么大",
                    "contract_company": {
                        "id": 1695838220091399,
                        "name": "油条一号"
                    },
                    "contract_type": 1,
                    "contract_start_date": "2020-01-01",
                    "contract_expiration_date": "2020-01-01",
                    "contract_sign_times": 2,
                    "personal_email": "personal@email.com",
                    "family_address": "北京市海淀区XXXXX",
                    "primary_emergency_contact": {
                        "name": "张三",
                        "relationship": 1,
                        "mobile": "(+86) 13812345678"
                    },
                    "emergency_contact": [
                        {
                            "name": "张三",
                            "relationship": 1,
                            "mobile": "(+86) 13812345678"
                        }
                    ],
                    "highest_level_of_edu": {
                        "level": 8,
                        "school": "XXXX大学",
                        "major": "XXX专业",
                        "degree": 2,
                        "start": "2020-01-01",
                        "end": "2020-01-01"
                    },
                    "education": [
                        {
                            "level": 8,
                            "school": "XXXX大学",
                            "major": "XXX专业",
                            "degree": 2,
                            "start": "2020-01-01",
                            "end": "2020-01-01"
                        }
                    ],
                    "former_work_exp": {
                        "company": "XXXX公司",
                        "department": "部门1",
                        "job": "职位",
                        "start": "2020-01-01",
                        "end": "2020-01-01",
                        "description": "工作描述"
                    },
                    "work_exp": [
                        {
                            "company": "XXXX公司",
                            "department": "部门1",
                            "job": "职位",
                            "start": "2020-01-01",
                            "end": "2020-01-01",
                            "description": "工作描述"
                        }
                    ],
                    "id_photo_po_side": [
                        {
                            "id": "c7273e07ed9e40a394f88c7dccb49212",
                            "mime_type": "png",
                            "name": "Custom Code.png",
                            "size": 57380
                        }
                    ],
                    "id_photo_em_side": [
                        {
                            "id": "c7273e07ed9e40a394f88c7dccb49212",
                            "mime_type": "png",
                            "name": "Custom Code.png",
                            "size": 57380
                        }
                    ],
                    "id_photo": [
                        {
                            "id": "c7273e07ed9e40a394f88c7dccb49212",
                            "mime_type": "png",
                            "name": "Custom Code.png",
                            "size": 57380
                        }
                    ],
                    "diploma_photo": [
                        {
                            "id": "c7273e07ed9e40a394f88c7dccb49212",
                            "mime_type": "png",
                            "name": "Custom Code.png",
                            "size": 57380
                        }
                    ],
                    "graduation_cert": [
                        {
                            "id": "c7273e07ed9e40a394f88c7dccb49212",
                            "mime_type": "png",
                            "name": "Custom Code.png",
                            "size": 57380
                        }
                    ],
                    "cert_of_merit": [
                        {
                            "id": "c7273e07ed9e40a394f88c7dccb49212",
                            "mime_type": "png",
                            "name": "Custom Code.png",
                            "size": 57380
                        }
                    ],
                    "offboarding_file": [
                        {
                            "id": "c7273e07ed9e40a394f88c7dccb49212",
                            "mime_type": "png",
                            "name": "Custom Code.png",
                            "size": 57380
                        }
                    ],
                    "cancel_onboarding_reason": 2,
                    "cancel_onboarding_notes": "个人原因",
                    "employee_form_status": 1,
                    "create_time": 1608690517811,
                    "update_time": 1608690517811
                },
                "custom_fields": [
                    {
                        "key": "field_xxxxxxxx",
                        "label": "自定义字段 1",
                        "type": "date",
                        "value": "2021-01-13"
                    }
                ]
            }
        ],
        "page_token": "10",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetEhrEmployeeListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
