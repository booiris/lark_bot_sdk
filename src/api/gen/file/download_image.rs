//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/get>
// Code generated by gen_api. DO NOT EDIT.

use crate::api::DownloadResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};
use serde::{Deserialize, Serialize};

use crate::api::gen::file::FileService;

impl<'c, IStore: Store, IClient: HttpClient> FileService<'c, IStore, IClient> {
    /// **api 版本: 2024-06-06T08:42:08+00:00**
    ///
    /// ## 下载图片
    ///
    /// 下载图片资源，只能下载当前应用所上传且图片类型为message的图片。
    ///
    /// 注意事项:
    ///
    /// - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 只能下载机器人自己上传且图片类型为message的图片，avatar类型暂不支持下载
    ///
    /// - 下载用户发送的资源，请使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/im-v1/image/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fim-v1%2Fimage%2Fget>
    pub async fn download_image(
        &self,
        req: DownloadImageReq,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        self.download_image_with_opt(req, Default::default()).await
    }

    /// 参见 [download_image](#method.download_image) 函数
    pub async fn download_image_with_opt(
        &self,
        req: DownloadImageReq,
        method_option: MethodOption,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_download_image(&req) {
                tracing::info!("[lark] File#DownloadImage **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] File#DownloadImage call api");

        let req = ApiRequest {
            scope: "File",
            api: "DownloadImage",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/im/v1/images/:image_key",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (bin_data, bin_name, common_resp) = self.cli.do_download_req(req).await?;
        let resp = DownloadResp {
            data: bin_data,
            name: bin_name,
        };

        Ok((resp, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DownloadImageReq {
    /// 图片的key，通过[上传图片](	https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)接口上传图片后获得
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "img_8d5181ca-0aed-40f0-b0d1-b1452132afbg"
    #[api(kind = "path", name = "image_key")]
    pub image_key: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::file::FileServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<IClient: HttpClient>:
        Fn(DownloadImageReq) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            IClient: HttpClient,
            T: Fn(DownloadImageReq) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<IClient> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> FileServiceMocker<'c, IStore, IClient> {
        pub fn mock_download_image<F: MockFunc<IClient>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DownloadImageReq,
            DownloadResp<IClient>,
            Arc<dyn MockFunc<IClient>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_download_image(
            &self,
            req: &DownloadImageReq,
        ) -> Option<Arc<dyn MockFunc<IClient>>> {
            do_mock::<Mocker, DownloadImageReq, DownloadResp<IClient>, Arc<dyn MockFunc<IClient>>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}
