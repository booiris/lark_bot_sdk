//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{
    ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqData, StreamReqParam,
};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::file::FileService;

impl<'c, IStore: Store, IClient: HttpClient> FileService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-25T02:12:35+00:00**
    ///
    /// ## 上传文件
    ///
    /// 上传文件，可以上传视频，音频和常见的文件类型。
    ///
    /// 注意事项:
    ///
    /// - 需要开启[机器人能力](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-enable-bot-ability)
    ///
    /// - 文件大小不得超过30M，且不允许上传空文件
    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/im-v1/file/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fim-v1%2Ffile%2Fcreate>
    pub async fn upload_file<Data: StreamReqData>(
        &self,
        req: UploadFileReq<Data>,
    ) -> Result<(UploadFileResp, CommonResponse), Error> {
        self.upload_file_with_opt(req, Default::default()).await
    }

    /// 参见 [upload_file](#method.upload_file) 函数
    pub async fn upload_file_with_opt<Data: StreamReqData>(
        &self,
        req: UploadFileReq<Data>,
        method_option: MethodOption,
    ) -> Result<(UploadFileResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_upload_file(&req) {
                tracing::info!("[lark] File#UploadFile **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] File#UploadFile call api");

        let req = ApiRequest::<()> {
            scope: "File",
            api: "UploadFile",
            method: http::Method::POST,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/im/v1/files",
            stream_param_data: req.gen_stream_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UploadFileRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, lark_bot_sdk_macros::ApiReqParams)]
pub struct UploadFileReq<Data: StreamReqData> {
    /// 文件类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "mp4"
    ///
    /// **可选值**:
    ///
    /// `opus`: 上传opus音频文件；
    ///
    /// 其他格式的音频文件，请转为opus格式后上传，转换方式可参考：`ffmpeg -i  SourceFile.mp3 -acodec libopus -ac 1 -ar 16000 TargetFile.opus`
    ///
    /// `mp4`: 上传mp4视频文件
    ///
    /// `pdf`: 上传pdf格式文件
    ///
    /// `doc`: 上传doc格式文件
    ///
    /// `xls`: 上传xls格式文件
    ///
    /// `ppt`: 上传ppt格式文件
    ///
    /// `stream`: 上传stream格式文件。若上传文件不属于以上类型，可以使用stream格式
    #[api(kind = "stream", name = "file_type", option = "false")]
    pub file_type: String,
    /// 带后缀的文件名
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "测试视频.mp4"
    #[api(kind = "stream", name = "file_name", option = "false")]
    pub file_name: String,
    /// 文件的时长（视频、音频），单位:毫秒。不填充时无法显示具体时长。
    ///
    /// **示例值**: "3000"
    #[api(kind = "stream", name = "duration", option = "true")]
    pub duration: Option<i64>,
    #[api(kind = "stream", name = "#data#", option = "false")]
    pub data: Data,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UploadFileRespInner {
    #[serde(flatten)]
    data: Option<UploadFileResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UploadFileResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 文件的key
    ///
    /// **示例值**: "file_456a92d6-c6ea-4de4-ac3f-7afcf44ac78g"
    #[serde(
        rename = "file_key",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub file_key: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::file::FileServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<D: StreamReqData>:
        Fn(UploadFileReq<D>) -> Result<(UploadFileResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            D: StreamReqData,
            T: Fn(UploadFileReq<D>) -> Result<(UploadFileResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<D> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> FileServiceMocker<'c, IStore, IClient> {
        pub fn mock_upload_file<T: StreamReqData, F: MockFunc<T>>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UploadFileReq<T>, UploadFileResp, Arc<dyn MockFunc<T>>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_upload_file<T: StreamReqData>(
            &self,
            req: &UploadFileReq<T>,
        ) -> Option<Arc<dyn MockFunc<T>>> {
            do_mock::<Mocker, UploadFileReq<T>, UploadFileResp, Arc<dyn MockFunc<T>>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}
