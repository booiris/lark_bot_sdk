//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/acs-v1/rule_external/create>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::acs::AcsService;

impl<'c, IStore: Store, IClient: HttpClient> AcsService<'c, IStore, IClient> {
    /// **api 版本: 2024-01-09T09:10:58+00:00**
    ///
    /// ## 创建或更新权限组
    ///
    /// 创建或更新权限组
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/acs-v1/rule_external/create>
    ///
    /// new doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/acs-v1/rule_external/create>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2FuAjLw4CM%2FukTMukTMukTM%2Facs-v1%2Frule_external%2Fcreate>
    pub async fn create_acs_rule_external(
        &self,
        req: CreateAcsRuleExternalReq,
    ) -> Result<(CreateAcsRuleExternalResp, CommonResponse), Error> {
        self.create_acs_rule_external_with_opt(req, Default::default())
            .await
    }

    /// 参见 [create_acs_rule_external](#method.create_acs_rule_external) 函数
    pub async fn create_acs_rule_external_with_opt(
        &self,
        req: CreateAcsRuleExternalReq,
        method_option: MethodOption,
    ) -> Result<(CreateAcsRuleExternalResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_create_acs_rule_external(&req) {
                tracing::info!("[lark] Acs#CreateAcsRuleExternal **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Acs#CreateAcsRuleExternal call api");

        let req = ApiRequest {
            scope: "Acs",
            api: "CreateAcsRuleExternal",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/acs/v1/rule_external",
            param_data: req.gen_param(),
            method_option,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (CreateAcsRuleExternalRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct CreateAcsRuleExternalReq {
    /// 权限组id-为空创建,不为空则更新
    ///
    /// **示例值**: "7298933941867135276"
    #[api(kind = "query", name = "rule_id", v_type = "var", option = "false")]
    pub rule_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 权限组信息
    ///
    /// **是否必填**: 是
    #[api(kind = "body", name = "rule")]
    pub rule: RuleSubReq,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RuleSubReq {
    /// 权限组id
    ///
    /// **示例值**: "34252345234523"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: Option<String>,
    /// 权限组名称
    ///
    /// **示例值**: "南门"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Option<String>,
    /// 权限组包含的设备
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `5000` 字符
    #[serde(
        rename = "devices",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub devices: Vec<Option<DeviceExternalSubReq>>,
    /// 权限组包含的员工个数
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "user_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_count: Option<String>,
    /// 权限组包含的员工列表
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `10000` 字符
    #[serde(
        rename = "users",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub users: Vec<Option<UserExternalSubReq>>,
    /// 权限组包含的访客个数
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "visitor_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visitor_count: Option<String>,
    /// 权限组包含的访客列表
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `10000` 字符
    #[serde(
        rename = "visitors",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub visitors: Vec<Option<UserExternalSubReq>>,
    /// 是否通知人员录入
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "remind_face",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub remind_face: Option<bool>,
    /// 开门时间段
    #[serde(
        rename = "opening_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub opening_time: Option<OpeningTimeExternalSubReq>,
    /// 是否为临时权限组
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_temp",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_temp: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OpeningTimeExternalSubReq {
    /// 有效日期
    #[serde(
        rename = "valid_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub valid_day: Option<OpeningTimeValidDayExternalSubReq>,
    /// 有效星期
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `7` 字符
    #[serde(
        rename = "weekdays",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub weekdays: Vec<Option<i64>>,
    /// 有效时间
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `1` 字符
    #[serde(
        rename = "day_times",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub day_times: Vec<Option<OpeningTimePeriodExternalSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DeviceExternalSubReq {
    /// 设备id
    ///
    /// **示例值**: "534545234523452345"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: Option<String>,
    /// 设备名称
    ///
    /// **示例值**: "北门"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct UserExternalSubReq {
    /// 用户类型
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `user`: 员工
    ///
    /// `department`: 部门
    ///
    /// `tenant`: 全体员工
    ///
    /// `guest`: 访客
    #[serde(
        rename = "user_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_type: i64,
    /// 用户id
    ///
    /// **示例值**: "ou_7dab8a3d3cdcc9da365777c7ad535d62"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: Option<String>,
    /// 用户名称
    ///
    /// **示例值**: "张三"
    #[serde(
        rename = "user_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_name: Option<String>,
    /// 电话号码
    ///
    /// **示例值**: "1357890001"
    #[serde(
        rename = "phone_num",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub phone_num: Option<String>,
    /// 部门id
    ///
    /// **示例值**: "od-f7d44ab733f7602f5cc5194735fd9aaf"
    #[serde(
        rename = "department_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OpeningTimeValidDayExternalSubReq {
    /// 权限开始时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1699031483"
    #[serde(
        rename = "start_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_day: i64,
    /// 权限结束时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1699931483"
    #[serde(
        rename = "end_day",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_day: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct OpeningTimePeriodExternalSubReq {
    /// 起始时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1200"
    #[serde(
        rename = "start_hhmm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_hhmm: i64,
    /// 结束时间
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1400"
    #[serde(
        rename = "end_hhmm",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_hhmm: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct CreateAcsRuleExternalRespInner {
    #[serde(flatten)]
    data: Option<CreateAcsRuleExternalResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct CreateAcsRuleExternalResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 权限组id
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "7298933941867135276"
    ///
    /// **数据校验规则**：
    ///
    /// - **最大长度**: `128` 字符
    #[serde(
        rename = "rule_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub rule_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::acs::AcsServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(CreateAcsRuleExternalReq) -> Result<(CreateAcsRuleExternalResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    CreateAcsRuleExternalReq,
                ) -> Result<(CreateAcsRuleExternalResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> AcsServiceMocker<'c, IStore, IClient> {
        pub fn mock_create_acs_rule_external<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            CreateAcsRuleExternalReq,
            CreateAcsRuleExternalResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_create_acs_rule_external(
            &self,
            req: &CreateAcsRuleExternalReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, CreateAcsRuleExternalReq, CreateAcsRuleExternalResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::acs::create_acs_rule_external::{
            CreateAcsRuleExternalReq, CreateAcsRuleExternalResp, CreateAcsRuleExternalRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .acs()
            .mock()
            .mock_create_acs_rule_external(|_| {
                Ok((
                    CreateAcsRuleExternalResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .acs()
            .create_acs_rule_external(CreateAcsRuleExternalReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .acs()
            .create_acs_rule_external(CreateAcsRuleExternalReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "rule": {
        "id": "34252345234523",
        "name": "南门",
        "devices": [
            {
                "id": "534545234523452345",
                "name": "北门"
            }
        ],
        "user_count": "3",
        "users": [
            {
                "user_type": 1,
                "user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
                "user_name": "张三",
                "phone_num": "1357890001",
                "department_id": "od-f7d44ab733f7602f5cc5194735fd9aaf"
            }
        ],
        "visitor_count": "3",
        "visitors": [
            {
                "user_type": 1,
                "user_id": "ou_7dab8a3d3cdcc9da365777c7ad535d62",
                "user_name": "张三",
                "phone_num": "1357890001",
                "department_id": "od-f7d44ab733f7602f5cc5194735fd9aaf"
            }
        ],
        "remind_face": false,
        "opening_time": {
            "valid_day": {
                "start_day": 1699031483,
                "end_day": 1699931483
            },
            "weekdays": [
                1,
                2,
                3
            ],
            "day_times": [
                {
                    "start_hhmm": 1200,
                    "end_hhmm": 1400
                }
            ]
        },
        "is_temp": false
    }
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::CreateAcsRuleExternalReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "rule_id": "7298933941867135276"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<CreateAcsRuleExternalRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
