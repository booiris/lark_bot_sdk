//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting_list/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:33:01+00:00**
    ///
    /// ## 查询会议明细
    ///
    /// 查询会议明细，具体权限要求请参考[资源介绍](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-room-data/resource-introduction)
    ///
    /// **说明**
    ///
    /// 本接口适用于查询 **进行中** 或者 **已结束** 的会议明细。
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting_list/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/vc-v1/meeting-room-data/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Fmeeting-room-data%2Fget>
    pub async fn get_vc_meeting_list(
        &self,
        req: GetVcMeetingListReq,
    ) -> Result<(GetVcMeetingListResp, CommonResponse), Error> {
        self.get_vc_meeting_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_vc_meeting_list](#method.get_vc_meeting_list) 函数
    pub async fn get_vc_meeting_list_with_opt(
        &self,
        req: GetVcMeetingListReq,
        method_option: MethodOption,
    ) -> Result<(GetVcMeetingListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_vc_meeting_list(&req) {
                tracing::info!("[lark] Vc#GetVcMeetingList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#GetVcMeetingList call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "GetVcMeetingList",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/vc/v1/meeting_list",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetVcMeetingListRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetVcMeetingListReq {
    /// 查询开始时间（unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "query", name = "start_time", v_type = "var", option = "false")]
    pub start_time: String,
    /// 查询结束时间（unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "query", name = "end_time", v_type = "var", option = "false")]
    pub end_time: String,
    /// 会议状态（不传默认为已结束会议）
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `ongoing`: 进行中
    ///
    /// `past`: 已结束
    ///
    /// `future`: 待召开。该枚举值只读，请求时不支持选择。
    #[api(
        kind = "query",
        name = "meeting_status",
        v_type = "var",
        option = "false"
    )]
    pub meeting_status: i64,
    /// 按9位会议号筛选（最多一个筛选条件）
    ///
    /// **示例值**: "123456789"
    #[api(kind = "query", name = "meeting_no", v_type = "var", option = "false")]
    pub meeting_no: String,
    /// 按参会Lark用户筛选（最多一个筛选条件）
    ///
    /// **示例值**: "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
    #[api(kind = "query", name = "user_id", v_type = "var", option = "false")]
    pub user_id: String,
    /// 按参会Rooms筛选（最多一个筛选条件）
    ///
    /// **示例值**: "omm_eada1d61a550955240c28757e7dec3af"
    #[api(kind = "query", name = "room_id", v_type = "var", option = "false")]
    pub room_id: String,
    /// 按会议类型筛选（最多一个筛选条件）
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `all`: 全部类型（默认）
    ///
    /// `meeting`: 视频会议
    ///
    /// `share_screen`: 本地投屏
    #[api(
        kind = "query",
        name = "meeting_type",
        v_type = "var",
        option = "false"
    )]
    pub meeting_type: i64,
    /// 分页尺寸大小
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetVcMeetingListRespInner {
    #[serde(flatten)]
    data: Option<GetVcMeetingListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetVcMeetingListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 会议列表
    #[serde(
        rename = "meeting_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_list: Vec<MeetingInfoSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "20"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MeetingInfoSubResp {
    /// 9位会议号
    ///
    /// **示例值**: "705605196"
    #[serde(
        rename = "meeting_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_id: String,
    /// 会议主题
    ///
    /// **示例值**: "讨论会"
    #[serde(
        rename = "meeting_topic",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_topic: String,
    /// 会议类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `all`: 全部类型（默认）
    ///
    /// `meeting`: 视频会议
    ///
    /// `share_screen`: 本地投屏
    #[serde(
        rename = "meeting_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_type: i64,
    /// 组织者
    ///
    /// **示例值**: "kehan"
    #[serde(
        rename = "organizer",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub organizer: String,
    /// 部门
    ///
    /// **示例值**: "development"
    #[serde(
        rename = "department",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department: String,
    /// 用户ID
    ///
    /// **示例值**: "92f879"
    #[serde(
        rename = "user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_id: String,
    /// 工号
    ///
    /// **示例值**: "202105149765"
    #[serde(
        rename = "employee_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub employee_id: String,
    /// 邮箱
    ///
    /// **示例值**: "xxxx@163.com"
    #[serde(
        rename = "email",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub email: String,
    /// 手机
    ///
    /// **示例值**: "021-673288"
    #[serde(
        rename = "mobile",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mobile: String,
    /// 会议开始时间
    ///
    /// **示例值**: "2022.12.23 11:16:59 (GMT+08:00)"
    #[serde(
        rename = "meeting_start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_start_time: String,
    /// 会议结束时间
    ///
    /// **示例值**: "2022.12.23 11:18:51 (GMT+08:00)"
    #[serde(
        rename = "meeting_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_end_time: String,
    /// 会议持续时间
    ///
    /// **示例值**: "00:01:52"
    #[serde(
        rename = "meeting_duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_duration: String,
    /// 参会人数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "number_of_participants",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number_of_participants: String,
    /// 累计入会设备数
    ///
    /// **示例值**: "1"
    #[serde(
        rename = "number_of_devices",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub number_of_devices: String,
    /// 音频
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "audio",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub audio: bool,
    /// 视频
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "video",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub video: bool,
    /// 共享
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "sharing",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub sharing: bool,
    /// 录制
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "recording",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub recording: bool,
    /// 电话
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "telephone",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub telephone: bool,
    /// 关联会议室列表
    #[serde(
        rename = "reserved_rooms",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reserved_rooms: Vec<ReservedRoomSubResp>,
    /// 是否有关联文档和纪要
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "has_related_document",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_related_document: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ReservedRoomSubResp {
    /// 会议室ID
    ///
    /// **示例值**: "omm_12381298739"
    #[serde(
        rename = "room_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_id: String,
    /// 会议室名称
    ///
    /// **示例值**: "room123"
    #[serde(
        rename = "room_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_name: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetVcMeetingListReq) -> Result<(GetVcMeetingListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetVcMeetingListReq) -> Result<(GetVcMeetingListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_vc_meeting_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetVcMeetingListReq, GetVcMeetingListResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_vc_meeting_list(
            &self,
            req: &GetVcMeetingListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetVcMeetingListReq, GetVcMeetingListResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::vc::get_vc_meeting_list::{
            GetVcMeetingListReq, GetVcMeetingListResp, GetVcMeetingListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .vc()
            .mock()
            .mock_get_vc_meeting_list(|_| {
                Ok((GetVcMeetingListResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .vc()
            .get_vc_meeting_list(GetVcMeetingListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .vc()
            .get_vc_meeting_list(GetVcMeetingListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "meeting_list": [
            {
                "meeting_id": "705605196",
                "meeting_topic": "讨论会",
                "meeting_type": 1,
                "organizer": "kehan",
                "department": "development",
                "user_id": "92f879",
                "employee_id": "202105149765",
                "email": "xxxx@163.com",
                "mobile": "021-673288",
                "meeting_start_time": "2022.12.23 11:16:59 (GMT+08:00)",
                "meeting_end_time": "2022.12.23 11:18:51 (GMT+08:00)",
                "meeting_duration": "00:01:52",
                "number_of_participants": "1",
                "number_of_devices": "1",
                "audio": true,
                "video": true,
                "sharing": false,
                "recording": false,
                "telephone": false,
                "reserved_rooms": [
                    {
                        "room_id": "omm_12381298739",
                        "room_name": "room123"
                    }
                ],
                "has_related_document": false
            }
        ],
        "page_token": "20",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetVcMeetingListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
