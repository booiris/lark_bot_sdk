//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/download>
// Code generated by gen_api. DO NOT EDIT.

use crate::api::DownloadResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};
use serde::{Deserialize, Serialize};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:57+00:00**
    ///
    /// ## 下载导出文件
    ///
    /// 下载导出文件。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/download>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/vc-v1/export/download>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Fexport%2Fdownload>
    pub async fn download_vc_export_file(
        &self,
        req: DownloadVcExportFileReq,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        self.download_vc_export_file_with_opt(req, Default::default())
            .await
    }

    /// 参见 [download_vc_export_file](#method.download_vc_export_file) 函数
    pub async fn download_vc_export_file_with_opt(
        &self,
        req: DownloadVcExportFileReq,
        method_option: MethodOption,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_download_vc_export_file(&req) {
                tracing::info!("[lark] Vc#DownloadVcExportFile **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#DownloadVcExportFile call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "DownloadVcExportFile",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/vc/v1/exports/download",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (bin_data, bin_name, common_resp) = self.cli.do_download_req(req).await?;
        let resp = DownloadResp {
            data: bin_data,
            name: bin_name,
        };

        Ok((resp, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct DownloadVcExportFileReq {
    /// 文档token
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "6yHu7Igp7Igy62Ez6fLr6IJz7j9i5WMe6fHq5yZeY2Jz6yLqYAMAY46fZfEz64Lr5fYyYQ=="
    #[api(kind = "query", name = "file_token", v_type = "var", option = "false")]
    pub file_token: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc<IClient: HttpClient>:
        Fn(DownloadVcExportFileReq) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            IClient: HttpClient,
            T: Fn(
                    DownloadVcExportFileReq,
                ) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<IClient> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_download_vc_export_file<F: MockFunc<IClient>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            DownloadVcExportFileReq,
            DownloadResp<IClient>,
            Arc<dyn MockFunc<IClient>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_download_vc_export_file(
            &self,
            req: &DownloadVcExportFileReq,
        ) -> Option<Arc<dyn MockFunc<IClient>>> {
            do_mock::<
                Mocker,
                DownloadVcExportFileReq,
                DownloadResp<IClient>,
                Arc<dyn MockFunc<IClient>>,
            >(self.cli.instance_id, req)
        }
    }
}
