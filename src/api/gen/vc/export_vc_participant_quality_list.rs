//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/participant_quality_list>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:56+00:00**
    ///
    /// ## 导出参会人会议质量数据
    ///
    /// 导出某场会议某个参会人的音视频&共享质量数据
    ///
    /// （仅支持已结束会议），具体权限要求请参考「资源介绍」。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/export/participant_quality_list>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/vc-v1/export/participant_quality_list>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Fexport%2Fparticipant_quality_list>
    pub async fn export_vc_participant_quality_list(
        &self,
        req: ExportVcParticipantQualityListReq,
    ) -> Result<(ExportVcParticipantQualityListResp, CommonResponse), Error> {
        self.export_vc_participant_quality_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [export_vc_participant_quality_list](#method.export_vc_participant_quality_list) 函数
    pub async fn export_vc_participant_quality_list_with_opt(
        &self,
        req: ExportVcParticipantQualityListReq,
        method_option: MethodOption,
    ) -> Result<(ExportVcParticipantQualityListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self
                .mock()
                .get_mock_export_vc_participant_quality_list(&req)
            {
                tracing::info!("[lark] Vc#ExportVcParticipantQualityList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#ExportVcParticipantQualityList call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "ExportVcParticipantQualityList",
            method: http::Method::POST,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/vc/v1/exports/participant_quality_list",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (ExportVcParticipantQualityListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct ExportVcParticipantQualityListReq {
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 会议开始时间（需要精确到一分钟，unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "body", name = "meeting_start_time")]
    pub meeting_start_time: String,
    /// 会议结束时间（unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "body", name = "meeting_end_time")]
    pub meeting_end_time: String,
    /// 9位会议号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "123456789"
    #[api(kind = "body", name = "meeting_no")]
    pub meeting_no: String,
    /// 参会人入会时间（unix时间，单位sec），可从「查询参会人明细」返回结果获取
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "body", name = "join_time")]
    pub join_time: String,
    /// 参会人为Lark用户时填入，room_id和user_id必须只填一个
    ///
    /// **示例值**: "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
    #[api(kind = "body", name = "user_id")]
    pub user_id: Option<String>,
    /// 参会人为Rooms时填入，room_id和user_id必须只填一个
    ///
    /// **示例值**: "omm_eada1d61a550955240c28757e7dec3af"
    #[api(kind = "body", name = "room_id")]
    pub room_id: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct ExportVcParticipantQualityListRespInner {
    #[serde(flatten)]
    data: Option<ExportVcParticipantQualityListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct ExportVcParticipantQualityListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 任务id
    ///
    /// **示例值**: "7111325589855797267"
    #[serde(
        rename = "task_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub task_id: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            ExportVcParticipantQualityListReq,
        ) -> Result<(ExportVcParticipantQualityListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    ExportVcParticipantQualityListReq,
                )
                    -> Result<(ExportVcParticipantQualityListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_export_vc_participant_quality_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            ExportVcParticipantQualityListReq,
            ExportVcParticipantQualityListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_export_vc_participant_quality_list(
            &self,
            req: &ExportVcParticipantQualityListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                ExportVcParticipantQualityListReq,
                ExportVcParticipantQualityListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::vc::export_vc_participant_quality_list::{
            ExportVcParticipantQualityListReq, ExportVcParticipantQualityListResp,
            ExportVcParticipantQualityListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .vc()
            .mock()
            .mock_export_vc_participant_quality_list(|_| {
                Ok((
                    ExportVcParticipantQualityListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .vc()
            .export_vc_participant_quality_list(ExportVcParticipantQualityListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .vc()
            .export_vc_participant_quality_list(ExportVcParticipantQualityListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "meeting_start_time": "1655276858",
    "meeting_end_time": "1655276858",
    "meeting_no": "123456789",
    "join_time": "1655276858",
    "user_id": "ou_3ec3f6a28a0d08c45d895276e8e5e19b",
    "room_id": "omm_eada1d61a550955240c28757e7dec3af"
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::ExportVcParticipantQualityListReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "task_id": "7111325589855797267"
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<ExportVcParticipantQualityListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
