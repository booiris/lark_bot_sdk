//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/participant_quality_list/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:33:02+00:00**
    ///
    /// ## 查询参会人会议质量数据
    ///
    /// 查询参会人会议质量数据（仅支持已结束会议），具体权限要求请参考「资源介绍」。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/participant_quality_list/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/vc-v1/meeting-room-data/get-3>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Fmeeting-room-data%2Fget-3>
    pub async fn get_vc_participant_quality_list(
        &self,
        req: GetVcParticipantQualityListReq,
    ) -> Result<(GetVcParticipantQualityListResp, CommonResponse), Error> {
        self.get_vc_participant_quality_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_vc_participant_quality_list](#method.get_vc_participant_quality_list) 函数
    pub async fn get_vc_participant_quality_list_with_opt(
        &self,
        req: GetVcParticipantQualityListReq,
        method_option: MethodOption,
    ) -> Result<(GetVcParticipantQualityListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_vc_participant_quality_list(&req) {
                tracing::info!("[lark] Vc#GetVcParticipantQualityList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#GetVcParticipantQualityList call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "GetVcParticipantQualityList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/vc/v1/participant_quality_list",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetVcParticipantQualityListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetVcParticipantQualityListReq {
    /// 会议开始时间（需要精确到一分钟，unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(
        kind = "query",
        name = "meeting_start_time",
        v_type = "var",
        option = "false"
    )]
    pub meeting_start_time: String,
    /// 会议结束时间（unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(
        kind = "query",
        name = "meeting_end_time",
        v_type = "var",
        option = "false"
    )]
    pub meeting_end_time: String,
    /// 9位会议号
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "123456789"
    #[api(kind = "query", name = "meeting_no", v_type = "var", option = "false")]
    pub meeting_no: String,
    /// 参会人入会时间（unix时间，单位sec），可从「查询参会人明细」返回结果获取
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "query", name = "join_time", v_type = "var", option = "false")]
    pub join_time: String,
    /// 参会人为Lark用户时填入，room_id和user_id必须只填一个
    ///
    /// **示例值**: "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
    #[api(kind = "query", name = "user_id", v_type = "var", option = "false")]
    pub user_id: String,
    /// 参会人为Rooms时填入，room_id和user_id必须只填一个
    ///
    /// **示例值**: "omm_eada1d61a550955240c28757e7dec3af"
    #[api(kind = "query", name = "room_id", v_type = "var", option = "false")]
    pub room_id: String,
    /// 分页尺寸大小
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetVcParticipantQualityListRespInner {
    #[serde(flatten)]
    data: Option<GetVcParticipantQualityListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetVcParticipantQualityListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 参会人参会质量列表
    #[serde(
        rename = "participant_quality_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub participant_quality_list: Vec<ParticipantQualitySubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "20"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ParticipantQualitySubResp {
    /// 网络
    #[serde(
        rename = "network",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub network: QualityNetworkSubResp,
    /// 音频
    #[serde(
        rename = "audio",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub audio: QualityAudioSubResp,
    /// 视频
    #[serde(
        rename = "video",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub video: QualityVideoSharingSubResp,
    /// 共享屏幕
    #[serde(
        rename = "screen_sharing",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub screen_sharing: QualityVideoSharingSubResp,
    /// Cpu使用量
    #[serde(
        rename = "cpu_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cpu_usage: QualityCpuUsageSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct QualityNetworkSubResp {
    /// 时间
    ///
    /// **示例值**: "2022.12.23 11:16:00 (GMT+08:00)"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 网络延迟
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "network_delay",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub network_delay: String,
    /// 码率（接收）
    ///
    /// **示例值**: "8kbps"
    #[serde(
        rename = "bitrate_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bitrate_received: String,
    /// 丢包 - 平均（接收）
    ///
    /// **示例值**: "8%"
    #[serde(
        rename = "packet_loss_avg_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub packet_loss_avg_received: String,
    /// 丢包 - 最大（接收）
    ///
    /// **示例值**: "9%"
    #[serde(
        rename = "packet_loss_max_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub packet_loss_max_received: String,
    /// 码率（发送）
    ///
    /// **示例值**: "9kbps"
    #[serde(
        rename = "bitrate_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bitrate_sent: String,
    /// 丢包 - 平均（发送）
    ///
    /// **示例值**: "8%"
    #[serde(
        rename = "packet_loss_avg_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub packet_loss_avg_sent: String,
    /// 丢包 - 最大（发送）
    ///
    /// **示例值**: "10%"
    #[serde(
        rename = "packet_loss_max_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub packet_loss_max_sent: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct QualityAudioSubResp {
    /// 时间
    ///
    /// **示例值**: "2022.12.23 11:16:00 (GMT+08:00)"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 麦克风采集音量
    ///
    /// **示例值**: "6dB"
    #[serde(
        rename = "mic_input_volume",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mic_input_volume: String,
    /// 扬声器播放音量
    ///
    /// **示例值**: "8dB"
    #[serde(
        rename = "speaker_volume",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub speaker_volume: String,
    /// 码率（接收）
    ///
    /// **示例值**: "3kbps"
    #[serde(
        rename = "bitrate_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bitrate_received: String,
    /// 延迟（接收）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "latency_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latency_received: String,
    /// 抖动（接收）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "jitter_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub jitter_received: String,
    /// 码率（发送）
    ///
    /// **示例值**: "9kbps"
    #[serde(
        rename = "bitrate_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bitrate_sent: String,
    /// 延迟（发送）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "latency_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latency_sent: String,
    /// 抖动（发送）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "jitter_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub jitter_sent: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct QualityVideoSharingSubResp {
    /// 时间
    ///
    /// **示例值**: "2022.12.23 11:16:00 (GMT+08:00)"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 码率（接收）
    ///
    /// **示例值**: "8kbps"
    #[serde(
        rename = "bitrate_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bitrate_received: String,
    /// 延迟（接收）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "latency_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latency_received: String,
    /// 抖动（接收）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "jitter_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub jitter_received: String,
    /// 最大分辨率（接收）
    ///
    /// **示例值**: "1080P"
    #[serde(
        rename = "maximum_resolution_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub maximum_resolution_received: String,
    /// 帧率（接收）
    ///
    /// **示例值**: "100fps"
    #[serde(
        rename = "framerate_received",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub framerate_received: String,
    /// 码率（发送）
    ///
    /// **示例值**: "9kbps"
    #[serde(
        rename = "bitrate_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub bitrate_sent: String,
    /// 延迟（发送）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "latency_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub latency_sent: String,
    /// 抖动（发送）
    ///
    /// **示例值**: "100ms"
    #[serde(
        rename = "jitter_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub jitter_sent: String,
    /// 最大分辨率（发送）
    ///
    /// **示例值**: "4K"
    #[serde(
        rename = "maximum_resolution_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub maximum_resolution_sent: String,
    /// 帧率（发送）
    ///
    /// **示例值**: "90fps"
    #[serde(
        rename = "framerate_sent",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub framerate_sent: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct QualityCpuUsageSubResp {
    /// 时间
    ///
    /// **示例值**: "2022.12.23 11:17:00"
    #[serde(
        rename = "time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub time: String,
    /// 客户端平均 CPU 占用
    ///
    /// **示例值**: "0.8%"
    #[serde(
        rename = "client_avg_cpu_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub client_avg_cpu_usage: String,
    /// 客户端最大 CPU 占用
    ///
    /// **示例值**: "2.3%"
    #[serde(
        rename = "client_max_cpu_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub client_max_cpu_usage: String,
    /// 系统平均 CPU 占用
    ///
    /// **示例值**: "8.3%"
    #[serde(
        rename = "system_avg_cpu_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub system_avg_cpu_usage: String,
    /// 系统最大 CPU 占用
    ///
    /// **示例值**: "30%"
    #[serde(
        rename = "system_max_cpu_usage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub system_max_cpu_usage: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetVcParticipantQualityListReq,
        ) -> Result<(GetVcParticipantQualityListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetVcParticipantQualityListReq,
                )
                    -> Result<(GetVcParticipantQualityListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_vc_participant_quality_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetVcParticipantQualityListReq,
            GetVcParticipantQualityListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_vc_participant_quality_list(
            &self,
            req: &GetVcParticipantQualityListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetVcParticipantQualityListReq,
                GetVcParticipantQualityListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::vc::get_vc_participant_quality_list::{
            GetVcParticipantQualityListReq, GetVcParticipantQualityListResp,
            GetVcParticipantQualityListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .vc()
            .mock()
            .mock_get_vc_participant_quality_list(|_| {
                Ok((
                    GetVcParticipantQualityListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .vc()
            .get_vc_participant_quality_list(GetVcParticipantQualityListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .vc()
            .get_vc_participant_quality_list(GetVcParticipantQualityListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "participant_quality_list": [
            {
                "network": {
                    "time": "2022.12.23 11:16:00 (GMT+08:00)",
                    "network_delay": "100ms",
                    "bitrate_received": "8kbps",
                    "packet_loss_avg_received": "8%",
                    "packet_loss_max_received": "9%",
                    "bitrate_sent": "9kbps",
                    "packet_loss_avg_sent": "8%",
                    "packet_loss_max_sent": "10%"
                },
                "audio": {
                    "time": "2022.12.23 11:16:00 (GMT+08:00)",
                    "mic_input_volume": "6dB",
                    "speaker_volume": "8dB",
                    "bitrate_received": "3kbps",
                    "latency_received": "100ms",
                    "jitter_received": "100ms",
                    "bitrate_sent": "9kbps",
                    "latency_sent": "100ms",
                    "jitter_sent": "100ms"
                },
                "video": {
                    "time": "2022.12.23 11:16:00 (GMT+08:00)",
                    "bitrate_received": "8kbps",
                    "latency_received": "100ms",
                    "jitter_received": "100ms",
                    "maximum_resolution_received": "1080P",
                    "framerate_received": "100fps",
                    "bitrate_sent": "9kbps",
                    "latency_sent": "100ms",
                    "jitter_sent": "100ms",
                    "maximum_resolution_sent": "4K",
                    "framerate_sent": "90fps"
                },
                "screen_sharing": {
                    "time": "2022.12.23 11:16:00 (GMT+08:00)",
                    "bitrate_received": "8kbps",
                    "latency_received": "100ms",
                    "jitter_received": "100ms",
                    "maximum_resolution_received": "1080P",
                    "framerate_received": "100fps",
                    "bitrate_sent": "9kbps",
                    "latency_sent": "100ms",
                    "jitter_sent": "100ms",
                    "maximum_resolution_sent": "4K",
                    "framerate_sent": "90fps"
                },
                "cpu_usage": {
                    "time": "2022.12.23 11:17:00",
                    "client_avg_cpu_usage": "0.8%",
                    "client_max_cpu_usage": "2.3%",
                    "system_avg_cpu_usage": "8.3%",
                    "system_max_cpu_usage": "30%"
                }
            }
        ],
        "page_token": "20",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetVcParticipantQualityListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
