//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/patch>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:59+00:00**
    ///
    /// ## 更新会议室
    ///
    /// 该接口可以用来更新某个会议室的信息。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room/patch>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/vc-v1/room/patch>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Froom%2Fpatch>
    pub async fn update_vc_room(
        &self,
        req: UpdateVcRoomReq,
    ) -> Result<(UpdateVcRoomResp, CommonResponse), Error> {
        self.update_vc_room_with_opt(req, Default::default()).await
    }

    /// 参见 [update_vc_room](#method.update_vc_room) 函数
    pub async fn update_vc_room_with_opt(
        &self,
        req: UpdateVcRoomReq,
        method_option: MethodOption,
    ) -> Result<(UpdateVcRoomResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_update_vc_room(&req) {
                tracing::info!("[lark] Vc#UpdateVcRoom **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#UpdateVcRoom call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "UpdateVcRoom",
            method: http::Method::PATCH,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/vc/v1/rooms/:room_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (UpdateVcRoomRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct UpdateVcRoomReq {
    /// 会议室ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "omm_4de32cf10a4358788ff4e09e37ebbf9b"
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `1` 字符- `100` 字符
    #[api(kind = "path", name = "room_id")]
    pub room_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    ///
    /// **数据校验规则**：
    ///
    /// - **长度范围**: `0` 字符- `10` 字符
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
    /// 会议室名称
    ///
    /// **示例值**: "测试会议室"
    #[api(kind = "body", name = "name")]
    pub name: Option<String>,
    /// 会议室能容纳的人数
    ///
    /// **示例值**: "10"
    #[api(kind = "body", name = "capacity")]
    pub capacity: Option<i64>,
    /// 会议室的相关描述
    ///
    /// **示例值**: "测试会议室描述"
    #[api(kind = "body", name = "description")]
    pub description: Option<String>,
    /// 自定义的会议室ID
    ///
    /// **示例值**: "1234"
    #[api(kind = "body", name = "custom_room_id")]
    pub custom_room_id: Option<String>,
    /// 层级ID
    ///
    /// **示例值**: "omb_4ad1a2c7a2fbc5fc9570f38456931293"
    #[api(kind = "body", name = "room_level_id")]
    pub room_level_id: Option<String>,
    /// 会议室状态
    #[api(kind = "body", name = "room_status")]
    pub room_status: Option<RoomStatusSubReq>,
    /// 设施信息列表
    #[api(kind = "body", name = "device")]
    pub device: Vec<Option<DeviceSubReq>>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoomStatusSubReq {
    /// 是否启用会议室
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: bool,
    /// 会议室未来状态为启用或禁用（请忽略，该字段用于查询接口的返回值）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "schedule_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub schedule_status: Option<bool>,
    /// 禁用开始时间（unix时间，单位sec）
    ///
    /// **示例值**: "1652356050"
    #[serde(
        rename = "disable_start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_start_time: Option<String>,
    /// 禁用结束时间（unix时间，单位sec，数值0表示永久禁用）
    ///
    /// **示例值**: "1652442450"
    #[serde(
        rename = "disable_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_end_time: Option<String>,
    /// 禁用原因
    ///
    /// **示例值**: "测试占用"
    #[serde(
        rename = "disable_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_reason: Option<String>,
    /// 联系人列表，id类型由user_id_type参数决定
    ///
    /// **示例值**: "["ou_3ec3f6a28a0d08c45d895276e8e5e19b"]"
    #[serde(
        rename = "contact_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contact_ids: Vec<Option<String>>,
    /// 是否在禁用时发送通知给预定了该会议室的员工
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "disable_notice",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_notice: Option<bool>,
    /// 是否在恢复启用时发送通知给联系人
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "resume_notice",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resume_notice: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DeviceSubReq {
    /// 设施名称
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "电话"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct UpdateVcRoomRespInner {
    #[serde(flatten)]
    data: Option<UpdateVcRoomResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct UpdateVcRoomResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: (),
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(UpdateVcRoomReq) -> Result<(UpdateVcRoomResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(UpdateVcRoomReq) -> Result<(UpdateVcRoomResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_update_vc_room<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, UpdateVcRoomReq, UpdateVcRoomResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_update_vc_room(
            &self,
            req: &UpdateVcRoomReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, UpdateVcRoomReq, UpdateVcRoomResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::vc::update_vc_room::{UpdateVcRoomReq, UpdateVcRoomResp, UpdateVcRoomRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .vc()
            .mock()
            .mock_update_vc_room(|_| Ok((UpdateVcRoomResp::default(), CommonResponse::default())))
            .build();
        let res = lark.vc().update_vc_room(UpdateVcRoomReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.vc().update_vc_room(UpdateVcRoomReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = r#"{
    "name": "测试会议室",
    "capacity": 10,
    "description": "测试会议室描述",
    "custom_room_id": "1234",
    "room_level_id": "omb_4ad1a2c7a2fbc5fc9570f38456931293",
    "room_status": {
        "status": true,
        "schedule_status": true,
        "disable_start_time": "1652356050",
        "disable_end_time": "1652442450",
        "disable_reason": "测试占用",
        "contact_ids": [
            "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
        ],
        "disable_notice": true,
        "resume_notice": true
    },
    "device": [
        {
            "name": "电话"
        }
    ]
}"#;

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<super::UpdateVcRoomReqBody>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {}
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<UpdateVcRoomRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
