//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:56+00:00**
    ///
    /// ## 获取会议详情
    ///
    /// 获取一个会议的详细数据。
    ///
    /// 只能获取归属于自己的会议，支持查询最近90天内的会议
    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/vc-v1/meeting/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Fmeeting%2Fget>
    pub async fn get_vc_meeting(
        &self,
        req: GetVcMeetingReq,
    ) -> Result<(GetVcMeetingResp, CommonResponse), Error> {
        self.get_vc_meeting_with_opt(req, Default::default()).await
    }

    /// 参见 [get_vc_meeting](#method.get_vc_meeting) 函数
    pub async fn get_vc_meeting_with_opt(
        &self,
        req: GetVcMeetingReq,
        method_option: MethodOption,
    ) -> Result<(GetVcMeetingResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_vc_meeting(&req) {
                tracing::info!("[lark] Vc#GetVcMeeting **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#GetVcMeeting call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "GetVcMeeting",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/vc/v1/meetings/:meeting_id",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetVcMeetingRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetVcMeetingReq {
    /// 会议ID（视频会议的唯一标识，视频会议开始后才会产生）
    ///
    /// **示例值**: "6911188411932033028"
    #[api(kind = "path", name = "meeting_id")]
    pub meeting_id: String,
    /// 是否需要参会人列表
    ///
    /// **示例值**: "false"
    #[api(
        kind = "query",
        name = "with_participants",
        v_type = "var",
        option = "false"
    )]
    pub with_participants: bool,
    /// 是否需要会中使用能力统计（仅限tenant_access_token）
    ///
    /// **示例值**: "false"
    #[api(
        kind = "query",
        name = "with_meeting_ability",
        v_type = "var",
        option = "false"
    )]
    pub with_meeting_ability: bool,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetVcMeetingRespInner {
    #[serde(flatten)]
    data: Option<GetVcMeetingResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetVcMeetingResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 会议数据
    #[serde(
        rename = "meeting",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting: MeetingSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MeetingSubResp {
    /// 会议ID（视频会议的唯一标识，视频会议开始后才会产生）
    ///
    /// **示例值**: "6911188411934433028"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 会议主题
    ///
    /// **示例值**: "my meeting"
    #[serde(
        rename = "topic",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub topic: String,
    /// 会议链接（飞书用户可通过点击会议链接快捷入会）
    ///
    /// **示例值**: "https://vc.feishu.cn/j/337736498"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 会议号
    ///
    /// **示例值**: "123456789"
    #[serde(
        rename = "meeting_no",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub meeting_no: String,
    /// 会议密码
    ///
    /// **示例值**: "971024"
    #[serde(
        rename = "password",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub password: String,
    /// 会议创建时间（unix时间，单位sec）
    ///
    /// **示例值**: "1608885566"
    #[serde(
        rename = "create_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub create_time: String,
    /// 会议开始时间（unix时间，单位sec）
    ///
    /// **示例值**: "1608883322"
    #[serde(
        rename = "start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_time: String,
    /// 会议结束时间（unix时间，单位sec）
    ///
    /// **示例值**: "1608888867"
    #[serde(
        rename = "end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub end_time: String,
    /// 主持人
    #[serde(
        rename = "host_user",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub host_user: MeetingUserSubResp,
    /// 会议状态
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `calling`: 会议呼叫中
    ///
    /// `on_the_call`: 会议进行中
    ///
    /// `end`: 会议已结束
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: i64,
    /// 参会峰值人数
    ///
    /// **示例值**: "999"
    #[serde(
        rename = "participant_count",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub participant_count: String,
    /// 累计参会人数
    ///
    /// **示例值**: "10"
    #[serde(
        rename = "participant_count_accumulated",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub participant_count_accumulated: String,
    /// 参会人列表
    #[serde(
        rename = "participants",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub participants: Vec<MeetingParticipantSubResp>,
    /// 会中使用的能力
    ///
    /// **注意**：仅当使用应用身份（tenant_access_token）调用该接口，且查询参数 with_meeting_ability 取值为 true 时，该参数会有返回值。
    #[serde(
        rename = "ability",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub ability: MeetingAbilitySubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MeetingUserSubResp {
    /// 用户ID
    ///
    /// **示例值**: "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 用户类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `lark_user`: 飞书用户
    ///
    /// `room_user`: rooms用户
    ///
    /// `doc_user`: 文档用户
    ///
    /// `neo_user`: neo单品用户
    ///
    /// `neo_guest_user`: neo单品游客用户
    ///
    /// `pstn_user`: pstn用户
    ///
    /// `sip_user`: sip用户
    #[serde(
        rename = "user_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_type: i64,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MeetingAbilitySubResp {
    /// 是否使用视频
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "use_video",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub use_video: bool,
    /// 是否使用音频
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "use_audio",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub use_audio: bool,
    /// 是否使用共享屏幕
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "use_share_screen",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub use_share_screen: bool,
    /// 是否使用妙享（magic share）
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "use_follow_screen",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub use_follow_screen: bool,
    /// 是否使用录制
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "use_recording",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub use_recording: bool,
    /// 是否使用PSTN
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "use_pstn",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub use_pstn: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct MeetingParticipantSubResp {
    /// 用户ID
    ///
    /// **示例值**: "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 首次入会时间，秒级Unix时间戳
    ///
    /// **示例值**: "1624438144"
    #[serde(
        rename = "first_join_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub first_join_time: String,
    /// 最终离会时间，秒级Unix时间戳
    ///
    /// **示例值**: "1624438144"
    #[serde(
        rename = "final_leave_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub final_leave_time: String,
    /// 累计在会中时间，时间单位：秒
    ///
    /// **示例值**: "123"
    #[serde(
        rename = "in_meeting_duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub in_meeting_duration: String,
    /// 用户类型
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `lark_user`: 飞书用户
    ///
    /// `room_user`: rooms用户
    ///
    /// `doc_user`: 文档用户
    ///
    /// `neo_user`: neo单品用户
    ///
    /// `neo_guest_user`: neo单品游客用户
    ///
    /// `pstn_user`: pstn用户
    ///
    /// `sip_user`: sip用户
    #[serde(
        rename = "user_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub user_type: i64,
    /// 是否为主持人
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "is_host",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_host: bool,
    /// 是否为联席主持人
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_cohost",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_cohost: bool,
    /// 是否为外部参会人
    ///
    /// **示例值**: "false"
    #[serde(
        rename = "is_external",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_external: bool,
    /// 参会人状态
    ///
    /// **示例值**: "2"
    ///
    /// **可选值**:
    ///
    /// `calling`: 呼叫中
    ///
    /// `on_the_call`: 在会中
    ///
    /// `ringing`: 正在响铃
    ///
    /// `idle`: 不在会中或已经离开会议
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: i64,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetVcMeetingReq) -> Result<(GetVcMeetingResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetVcMeetingReq) -> Result<(GetVcMeetingResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_vc_meeting<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetVcMeetingReq, GetVcMeetingResp, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_vc_meeting(
            &self,
            req: &GetVcMeetingReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetVcMeetingReq, GetVcMeetingResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::vc::get_vc_meeting::{GetVcMeetingReq, GetVcMeetingResp, GetVcMeetingRespInner},
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .vc()
            .mock()
            .mock_get_vc_meeting(|_| Ok((GetVcMeetingResp::default(), CommonResponse::default())))
            .build();
        let res = lark.vc().get_vc_meeting(GetVcMeetingReq::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.vc().get_vc_meeting(GetVcMeetingReq::default()).await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "meeting": {
            "id": "6911188411934433028",
            "topic": "my meeting",
            "url": "https://vc.feishu.cn/j/337736498",
            "meeting_no": "123456789",
            "password": "971024",
            "create_time": "1608885566",
            "start_time": "1608883322",
            "end_time": "1608888867",
            "host_user": {
                "id": "ou_3ec3f6a28a0d08c45d895276e8e5e19b",
                "user_type": 1
            },
            "status": 2,
            "participant_count": "10",
            "participant_count_accumulated": "10",
            "participants": [
                {
                    "id": "ou_3ec3f6a28a0d08c45d895276e8e5e19b",
                    "first_join_time": "1624438144",
                    "final_leave_time": "1624438144",
                    "in_meeting_duration": "123",
                    "user_type": 1,
                    "is_host": true,
                    "is_cohost": false,
                    "is_external": false,
                    "status": 2
                }
            ],
            "ability": {
                "use_video": true,
                "use_audio": true,
                "use_share_screen": true,
                "use_follow_screen": true,
                "use_recording": true,
                "use_pstn": true
            }
        }
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetVcMeetingRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
