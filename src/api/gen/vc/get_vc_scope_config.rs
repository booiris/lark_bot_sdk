//! doc url: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/scope_config/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:32:59+00:00**
    ///
    /// ## 查询会议室配置
    ///
    /// 该接口可以用来查询某个会议层级范围下或者某个会议室的配置。
    ///

    ///
    /// doc: <https://open.larkoffice.com/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/scope_config/get>
    ///
    /// new doc: <https://open.larkoffice.com/document/server-docs/vc-v1/scope_config/get>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Fscope_config%2Fget>
    pub async fn get_vc_scope_config(
        &self,
        req: GetVcScopeConfigReq,
    ) -> Result<(GetVcScopeConfigResp, CommonResponse), Error> {
        self.get_vc_scope_config_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_vc_scope_config](#method.get_vc_scope_config) 函数
    pub async fn get_vc_scope_config_with_opt(
        &self,
        req: GetVcScopeConfigReq,
        method_option: MethodOption,
    ) -> Result<(GetVcScopeConfigResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_vc_scope_config(&req) {
                tracing::info!("[lark] Vc#GetVcScopeConfig **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#GetVcScopeConfig call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "GetVcScopeConfig",
            method: http::Method::GET,
            url: String::new() + self.cli.open_base_url.as_ref() + "/open-apis/vc/v1/scope_config",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetVcScopeConfigRespInner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetVcScopeConfigReq {
    /// 查询节点范围
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `RoomLevel`: 会议室层级
    ///
    /// `Room`: 会议室
    #[api(kind = "query", name = "scope_type", v_type = "var", option = "false")]
    pub scope_type: i64,
    /// 查询节点ID：如果scope_type为1，则为层级ID，如果scope_type为2，则为会议室ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "omm_608d34d82d531b27fa993902d350a307"
    #[api(kind = "query", name = "scope_id", v_type = "var", option = "false")]
    pub scope_id: String,
    /// 用户 ID 类型
    ///
    /// **示例值**: "open_id"
    ///
    /// **可选值**:
    ///
    /// `open_id`: 标识一个用户在某个应用中的身份。同一个用户在不同应用中的 Open ID 不同。[了解更多：如何获取 Open ID](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-openid)
    ///
    /// `union_id`: 标识一个用户在某个应用开发商下的身份。同一用户在同一开发商下的应用中的 Union ID 是相同的，在不同开发商下的应用中的 Union ID 是不同的。通过 Union ID，应用开发商可以把同个用户在多个应用中的身份关联起来。[了解更多：如何获取 Union ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-union-id)
    ///
    /// `user_id`: 标识一个用户在某个租户内的身份。同一个用户在租户 A 和租户 B 内的 User ID 是不同的。在同一个租户内，一个用户的 User ID 在所有应用（包括商店应用）中都保持一致。User ID 主要用于在不同的应用间打通用户数据。[了解更多：如何获取 User ID？](https://open.feishu.cn/document/uAjLw4CM/ugTN1YjL4UTN24CO1UjN/trouble-shooting/how-to-obtain-user-id)
    #[api(
        kind = "query",
        name = "user_id_type",
        v_type = "var",
        option = "false"
    )]
    pub user_id_type: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetVcScopeConfigRespInner {
    #[serde(flatten)]
    data: Option<GetVcScopeConfigResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetVcScopeConfigResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 当前节点的配置，根据层级顺序从底向上进行合并计算后的结果；如果当前节点某个值已配置，则取该节点的值，否则会从该节点的父层级节点获取，如果父节点依然未配置，则继续向上递归获取；若所有节点均未配置，则该值返回为空
    #[serde(
        rename = "current_config",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub current_config: ScopeConfigSubResp,
    /// 所有节点的原始配置，按照层级顺序从底向上返回；如果某节点某个值未配置，则该值返回为空
    #[serde(
        rename = "origin_configs",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub origin_configs: Vec<ScopeConfigSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct ScopeConfigSubResp {
    /// 查询节点范围
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1"
    ///
    /// **可选值**:
    ///
    /// `RoomLevel`: 会议室层级
    ///
    /// `Room`: 会议室
    #[serde(
        rename = "scope_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scope_type: i64,
    /// 查询节点ID：如果scope_type为1，则为层级ID，如果scope_type为2，则为会议室ID
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "omm_608d34d82d531b27fa993902d350a307"
    #[serde(
        rename = "scope_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scope_id: String,
    /// 节点配置
    #[serde(
        rename = "scope_config",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub scope_config: RoomConfigSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoomConfigSubResp {
    /// 飞书会议室背景图
    ///
    /// **示例值**: "https://lf1-ttcdn-tos.pstatp.com/obj/xxx"
    #[serde(
        rename = "room_background",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_background: String,
    /// 飞书签到板背景图
    ///
    /// **示例值**: "https://lf1-ttcdn-tos.pstatp.com/obj/xxx"
    #[serde(
        rename = "display_background",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub display_background: String,
    /// 飞书会议室数字标牌
    #[serde(
        rename = "digital_signage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub digital_signage: RoomDigitalSignageSubResp,
    /// 飞书投屏盒子数字标牌
    #[serde(
        rename = "room_box_digital_signage",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_box_digital_signage: RoomDigitalSignageSubResp,
    /// 会议室状态
    #[serde(
        rename = "room_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_status: RoomStatusSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoomDigitalSignageSubResp {
    /// 是否覆盖子层级及会议室
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "if_cover_child_scope",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub if_cover_child_scope: bool,
    /// 是否开启数字标牌功能
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "enable",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub enable: bool,
    /// 是否静音播放
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "mute",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub mute: bool,
    /// 在会议结束n分钟后开始播放，取值1~720（仅对飞书会议室数字标牌生效）
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "start_display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub start_display: i64,
    /// 在日程会议开始前n分钟停止播放，取值1~720（仅对飞书会议室数字标牌生效）
    ///
    /// **示例值**: "3"
    #[serde(
        rename = "stop_display",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub stop_display: i64,
    /// 素材列表
    #[serde(
        rename = "materials",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub materials: Vec<RoomDigitalSignageMaterialSubResp>,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoomStatusSubResp {
    /// 是否启用会议室
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub status: bool,
    /// 会议室未来状态为启用或禁用
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "schedule_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub schedule_status: bool,
    /// 禁用开始时间（unix时间，单位sec）
    ///
    /// **示例值**: "1652356050"
    #[serde(
        rename = "disable_start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_start_time: String,
    /// 禁用结束时间（unix时间，单位sec，数值0表示永久禁用）
    ///
    /// **示例值**: "1652442450"
    #[serde(
        rename = "disable_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_end_time: String,
    /// 禁用原因
    ///
    /// **示例值**: "测试占用"
    #[serde(
        rename = "disable_reason",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_reason: String,
    /// 联系人列表，id类型由user_id_type参数决定
    #[serde(
        rename = "contact_ids",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub contact_ids: Vec<String>,
    /// 是否在禁用时发送通知给预定了该会议室的员工
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "disable_notice",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub disable_notice: bool,
    /// 是否在恢复启用时发送通知给联系人
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "resume_notice",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub resume_notice: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoomDigitalSignageMaterialSubResp {
    /// 素材ID，当设置新素材时，无需传递该字段
    ///
    /// **示例值**: "7847784676276"
    #[serde(
        rename = "id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub id: String,
    /// 素材名称
    ///
    /// **示例值**: "name"
    #[serde(
        rename = "name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub name: String,
    /// 素材类型
    ///
    /// **示例值**: "0"
    ///
    /// **可选值**:
    ///
    /// `pic`: 图片
    ///
    /// `video`: 视频
    ///
    /// `gif`: GIF
    #[serde(
        rename = "material_type",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub material_type: i64,
    /// 素材url
    ///
    /// **示例值**: "url"
    #[serde(
        rename = "url",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub url: String,
    /// 播放时长（单位sec），取值1~43200
    ///
    /// **示例值**: "15"
    #[serde(
        rename = "duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub duration: i64,
    /// 素材封面url
    ///
    /// **示例值**: "url"
    #[serde(
        rename = "cover",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub cover: String,
    /// 素材文件md5
    ///
    /// **示例值**: "md5"
    #[serde(
        rename = "md5",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub md5: String,
    /// 素材文件vid
    ///
    /// **示例值**: "vid"
    #[serde(
        rename = "vid",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub vid: String,
    /// 素材文件大小（单位byte）
    ///
    /// **示例值**: "100"
    #[serde(
        rename = "size",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub size: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(GetVcScopeConfigReq) -> Result<(GetVcScopeConfigResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(GetVcScopeConfigReq) -> Result<(GetVcScopeConfigResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_vc_scope_config<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, GetVcScopeConfigReq, GetVcScopeConfigResp, Arc<dyn MockFunc>>
        {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_vc_scope_config(
            &self,
            req: &GetVcScopeConfigReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, GetVcScopeConfigReq, GetVcScopeConfigResp, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::vc::get_vc_scope_config::{
            GetVcScopeConfigReq, GetVcScopeConfigResp, GetVcScopeConfigRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .vc()
            .mock()
            .mock_get_vc_scope_config(|_| {
                Ok((GetVcScopeConfigResp::default(), CommonResponse::default()))
            })
            .build();
        let res = lark
            .vc()
            .get_vc_scope_config(GetVcScopeConfigReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .vc()
            .get_vc_scope_config(GetVcScopeConfigReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "current_config": {
            "scope_type": 1,
            "scope_id": "omm_608d34d82d531b27fa993902d350a307",
            "scope_config": {
                "room_background": "https://lf1-ttcdn-tos.pstatp.com/obj/xxx",
                "display_background": "https://lf1-ttcdn-tos.pstatp.com/obj/xxx",
                "digital_signage": {
                    "if_cover_child_scope": true,
                    "enable": true,
                    "mute": true,
                    "start_display": 3,
                    "stop_display": 3,
                    "materials": [
                        {
                            "id": "7847784676276",
                            "name": "name",
                            "material_type": 0,
                            "url": "url",
                            "duration": 15,
                            "cover": "url",
                            "md5": "md5",
                            "vid": "vid",
                            "size": "100"
                        }
                    ]
                },
                "room_box_digital_signage": {
                    "if_cover_child_scope": true,
                    "enable": true,
                    "mute": true,
                    "start_display": 3,
                    "stop_display": 3,
                    "materials": [
                        {
                            "id": "7847784676276",
                            "name": "name",
                            "material_type": 0,
                            "url": "url",
                            "duration": 15,
                            "cover": "url",
                            "md5": "md5",
                            "vid": "v039b2g10000ca89uj3c77u5pfdkfvpg",
                            "size": "100"
                        }
                    ]
                },
                "room_status": {
                    "status": true,
                    "schedule_status": true,
                    "disable_start_time": "1652356050",
                    "disable_end_time": "1652442450",
                    "disable_reason": "测试占用",
                    "contact_ids": [
                        "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
                    ],
                    "disable_notice": true,
                    "resume_notice": true
                }
            }
        },
        "origin_configs": [
            {
                "scope_type": 1,
                "scope_id": "omm_608d34d82d531b27fa993902d350a307",
                "scope_config": {
                    "room_background": "https://lf1-ttcdn-tos.pstatp.com/obj/xxx",
                    "display_background": "https://lf1-ttcdn-tos.pstatp.com/obj/xxx",
                    "digital_signage": {
                        "if_cover_child_scope": true,
                        "enable": true,
                        "mute": true,
                        "start_display": 3,
                        "stop_display": 3,
                        "materials": [
                            {
                                "id": "7847784676276",
                                "name": "name",
                                "material_type": 0,
                                "url": "url",
                                "duration": 15,
                                "cover": "url",
                                "md5": "md5",
                                "vid": "vid",
                                "size": "100"
                            }
                        ]
                    },
                    "room_box_digital_signage": {
                        "if_cover_child_scope": true,
                        "enable": true,
                        "mute": true,
                        "start_display": 3,
                        "stop_display": 3,
                        "materials": [
                            {
                                "id": "7847784676276",
                                "name": "name",
                                "material_type": 0,
                                "url": "url",
                                "duration": 15,
                                "cover": "url",
                                "md5": "md5",
                                "vid": "v039b2g10000ca89uj3c77u5pfdkfvpg",
                                "size": "100"
                            }
                        ]
                    },
                    "room_status": {
                        "status": true,
                        "schedule_status": true,
                        "disable_start_time": "1652356050",
                        "disable_end_time": "1652442450",
                        "disable_reason": "测试占用",
                        "contact_ids": [
                            "ou_3ec3f6a28a0d08c45d895276e8e5e19b"
                        ],
                        "disable_notice": true,
                        "resume_notice": true
                    }
                }
            }
        ]
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetVcScopeConfigRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
