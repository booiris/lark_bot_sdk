//! doc url: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/resource_reservation_list/get>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::BaseResp;
use crate::api::HasBaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::vc::VcService;

impl<'c, IStore: Store, IClient: HttpClient> VcService<'c, IStore, IClient> {
    /// **api 版本: 2024-07-23T07:33:02+00:00**
    ///
    /// ## 查询会议室预定数据
    ///
    /// 查询会议室预定数据，具体权限要求请参考「资源介绍」。
    ///

    ///
    /// doc: <https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/resource_reservation_list/get>
    ///
    /// new doc: <https://open.feishu.cn/document/server-docs/vc-v1/meeting-room-data/get-4>
    ///
    /// api url: <https://open.feishu.cn/document_portal/v1/document/get_detail?fullPath=%2Fserver-docs%2Fvc-v1%2Fmeeting-room-data%2Fget-4>
    pub async fn get_vc_resource_reservation_list(
        &self,
        req: GetVcResourceReservationListReq,
    ) -> Result<(GetVcResourceReservationListResp, CommonResponse), Error> {
        self.get_vc_resource_reservation_list_with_opt(req, Default::default())
            .await
    }

    /// 参见 [get_vc_resource_reservation_list](#method.get_vc_resource_reservation_list) 函数
    pub async fn get_vc_resource_reservation_list_with_opt(
        &self,
        req: GetVcResourceReservationListReq,
        method_option: MethodOption,
    ) -> Result<(GetVcResourceReservationListResp, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_get_vc_resource_reservation_list(&req) {
                tracing::info!("[lark] Vc#GetVcResourceReservationList **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] Vc#GetVcResourceReservationList call api");

        let req = ApiRequest {
            scope: "Vc",
            api: "GetVcResourceReservationList",
            method: http::Method::GET,
            url: String::new()
                + self.cli.open_base_url.as_ref()
                + "/open-apis/vc/v1/resource_reservation_list",
            param_data: req.gen_param(),
            method_option,
            need_tenant_access_token: true,
            need_user_access_token: true,
            ..Default::default()
        };

        let (resp, common_resp): (GetVcResourceReservationListRespInner, _) =
            self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(
                    anyhow::anyhow!("missing response data"),
                    common_resp,
                ));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct GetVcResourceReservationListReq {
    /// 层级ID，如传递非omb前缀的异常ID时，会默认使用租户层级进行兜底
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "omb_57c9cc7d9a81e27e54c8fabfd02759e7"
    #[api(
        kind = "query",
        name = "room_level_id",
        v_type = "var",
        option = "false"
    )]
    pub room_level_id: String,
    /// 是否展示会议主题
    ///
    /// **示例值**: "true"
    #[api(kind = "query", name = "need_topic", v_type = "var", option = "false")]
    pub need_topic: bool,
    /// 查询开始时间（unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "query", name = "start_time", v_type = "var", option = "false")]
    pub start_time: String,
    /// 查询结束时间（unix时间，单位sec）
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "1655276858"
    #[api(kind = "query", name = "end_time", v_type = "var", option = "false")]
    pub end_time: String,
    /// 待筛选的会议室ID列表；如需要传递多个会议室ID，需要通过room_ids=aaaa&room_ids=bbbb&room_ids=cccc的形式传递
    ///
    /// **是否必填**: 是
    ///
    /// **示例值**: "["omm_12443435556"]"
    #[api(kind = "query", name = "room_ids", v_type = "list", option = "false")]
    pub room_ids: Vec<String>,
    /// 默认为false；若为false，则获取room_ids字段传入的会议室列表预定数据；若为true，则根据room_level_id字段获取层级下的会议室列表，并过滤掉room_ids范围的会议室，获取剩余会议室的预定数据
    ///
    /// **示例值**: "false"
    #[api(kind = "query", name = "is_exclude", v_type = "var", option = "false")]
    pub is_exclude: bool,
    /// 分页尺寸大小
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_size", v_type = "var", option = "false")]
    pub page_size: i64,
    /// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
    ///
    /// **示例值**: "20"
    #[api(kind = "query", name = "page_token", v_type = "var", option = "false")]
    pub page_token: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct GetVcResourceReservationListRespInner {
    #[serde(flatten)]
    data: Option<GetVcResourceReservationListResp>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct GetVcResourceReservationListResp {
    /// \-
    #[serde(
        rename = "data",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub data: DataSubResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct DataSubResp {
    /// 会议室预定列表
    #[serde(
        rename = "room_reservation_list",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_reservation_list: Vec<RoomMeetingReservationSubResp>,
    /// 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    ///
    /// **示例值**: "20"
    #[serde(
        rename = "page_token",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub page_token: String,
    /// 是否还有更多项
    ///
    /// **示例值**: "true"
    #[serde(
        rename = "has_more",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub has_more: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
#[serde(default)]
pub struct RoomMeetingReservationSubResp {
    /// 会议室ID
    ///
    /// **示例值**: "omm_4de32cf10a4358788ff4e09e37ebbf9b"
    #[serde(
        rename = "room_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_id: String,
    /// 会议室名称
    ///
    /// **示例值**: "VIP Meeting Room"
    #[serde(
        rename = "room_name",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_name: String,
    /// 会议标题
    ///
    /// **示例值**: "飞书邀请的日程"
    #[serde(
        rename = "event_title",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_title: String,
    /// 预定人
    ///
    /// **示例值**: "kehan"
    #[serde(
        rename = "reserver",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reserver: String,
    /// 预定人ID
    ///
    /// **示例值**: "ou_1234567(UserID);cli_123123(BotID)"
    #[serde(
        rename = "reserver_user_id",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reserver_user_id: String,
    /// 预定人所属部门
    ///
    /// **示例值**: "development"
    #[serde(
        rename = "department_of_reserver",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub department_of_reserver: String,
    /// 邀约人数
    ///
    /// **示例值**: "5"
    #[serde(
        rename = "guests_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub guests_number: String,
    /// 接受人数
    ///
    /// **示例值**: "2"
    #[serde(
        rename = "accepted_number",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub accepted_number: String,
    /// 会议开始时间
    ///
    /// **示例值**: "2022.12.17 21:00:00 (GMT+08:00)"
    #[serde(
        rename = "event_start_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_start_time: String,
    /// 会议结束时间
    ///
    /// **示例值**: "2022.12.17 22:00:00 (GMT+08:00)"
    #[serde(
        rename = "event_end_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_end_time: String,
    /// 会议时长
    ///
    /// **示例值**: "1:00:00"
    #[serde(
        rename = "event_duration",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub event_duration: String,
    /// 会议室预定状态
    ///
    /// **示例值**: "预定成功"
    #[serde(
        rename = "reservation_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub reservation_status: String,
    /// 签到设备
    ///
    /// **示例值**: "签到板"
    #[serde(
        rename = "check_in_device",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_in_device: String,
    /// 会议室签到状态
    ///
    /// **示例值**: "已签到"
    #[serde(
        rename = "room_check_in_status",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub room_check_in_status: String,
    /// 会议室签到时间
    ///
    /// **示例值**: "2022.12.09 13:35:30 (GMT+08:00)"
    #[serde(
        rename = "check_in_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub check_in_time: String,
    /// 是否提前释放
    ///
    /// **示例值**: "已释放（手动释放）"
    #[serde(
        rename = "is_release_early",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub is_release_early: String,
    /// 释放人
    ///
    /// **示例值**: "kehan"
    #[serde(
        rename = "releasing_person",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub releasing_person: String,
    /// 释放时间
    ///
    /// **示例值**: "2022.12.20 11:25:15 (GMT+08:00)"
    #[serde(
        rename = "releasing_time",
        deserialize_with = "crate::utils::serde_helper::null_to_default"
    )]
    pub releasing_time: String,
}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::vc::VcServiceMocker;
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn(
            GetVcResourceReservationListReq,
        ) -> Result<(GetVcResourceReservationListResp, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn(
                    GetVcResourceReservationListReq,
                )
                    -> Result<(GetVcResourceReservationListResp, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient> VcServiceMocker<'c, IStore, IClient> {
        pub fn mock_get_vc_resource_reservation_list<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            GetVcResourceReservationListReq,
            GetVcResourceReservationListResp,
            Arc<dyn MockFunc>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_get_vc_resource_reservation_list(
            &self,
            req: &GetVcResourceReservationListReq,
        ) -> Option<Arc<dyn MockFunc>> {
            do_mock::<
                Mocker,
                GetVcResourceReservationListReq,
                GetVcResourceReservationListResp,
                Arc<dyn MockFunc>,
            >(self.cli.instance_id, req)
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::vc::get_vc_resource_reservation_list::{
            GetVcResourceReservationListReq, GetVcResourceReservationListResp,
            GetVcResourceReservationListRespInner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .vc()
            .mock()
            .mock_get_vc_resource_reservation_list(|_| {
                Ok((
                    GetVcResourceReservationListResp::default(),
                    CommonResponse::default(),
                ))
            })
            .build();
        let res = lark
            .vc()
            .get_vc_resource_reservation_list(GetVcResourceReservationListReq::default())
            .await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark
            .vc()
            .get_vc_resource_reservation_list(GetVcResourceReservationListReq::default())
            .await;
        assert!(res.is_err());
    }

    const REQ: &str = "{}";

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<()>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = r#"{
    "code": 0,
    "msg": "success",
    "data": {
        "room_reservation_list": [
            {
                "room_id": "omm_4de32cf10a4358788ff4e09e37ebbf9b",
                "room_name": "VIP Meeting Room",
                "event_title": "飞书邀请的日程",
                "reserver": "kehan",
                "reserver_user_id": "ou_1234567(UserID);cli_123123(BotID)",
                "department_of_reserver": "development",
                "guests_number": "5",
                "accepted_number": "2",
                "event_start_time": "2022.12.17 21:00:00 (GMT+08:00)",
                "event_end_time": "2022.12.17 22:00:00 (GMT+08:00)",
                "event_duration": "1:00:00",
                "reservation_status": "预定成功",
                "check_in_device": "签到板",
                "room_check_in_status": "已签到",
                "check_in_time": "2022.12.09 13:35:30 (GMT+08:00)",
                "is_release_early": "已释放（手动释放）",
                "releasing_person": "kehan",
                "releasing_time": "2022.12.20 11:25:15 (GMT+08:00)"
            }
        ],
        "page_token": "20",
        "has_more": true
    }
}"#;
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<GetVcResourceReservationListRespInner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
