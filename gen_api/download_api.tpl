//! doc url: <https://open.feishu.cn/document{{ fullPath }}>
// Code generated by gen_api. DO NOT EDIT.

use crate::api::DownloadResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};
use serde::{Deserialize, Serialize};

use crate::api::gen::{{ service_snake_case }}::{{ serviceUpperCamelCase  }}Service;

impl<'c, IStore: Store, IClient: HttpClient>
    {{ serviceUpperCamelCase  }}Service<'c, IStore, IClient>
{
    /// **api 版本: {{ update_time }}**
    ///
    {{ description }}
    ///
    {{ tips }}
    ///
    /// doc: <https://open.feishu.cn/document{{ fullPath }}>
    ///
    /// new doc: <https://open.feishu.cn{{ doc_path }}>
    /// 
    /// api url: <{{ api_url }}>
    pub async fn {{ func_name }}(
        &self,
        req: {{ req_type }},
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        self.{{ func_name }}_with_opt(req, Default::default()).await
    }

    /// 参见 [{{ func_name }}](#method.{{ func_name }}) 函数
    pub async fn {{ func_name }}_with_opt(
        &self,
        req: {{ req_type }},
        method_option: MethodOption,
    ) -> Result<(DownloadResp<IClient>, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_{{ func_name }}(&req) {
                tracing::info!("[lark] {{ serviceUpperCamelCase  }}#{{ UpperCamelFunc }} **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] {{ serviceUpperCamelCase }}#{{ UpperCamelFunc }} call api");

        let req = ApiRequest {
            scope: "{{ serviceUpperCamelCase  }}",
            api: "{{ UpperCamelFunc }}",
            method: {{ method }},
            url: String::new() + self.cli.open_base_url.as_ref() + "{{ path }}",
            param_data: req.gen_param(),
            method_option,
            {{ auth }}
            ..Default::default()
        };

        let (bin_data, bin_name, common_resp) = self.cli.do_download_req(req).await?;
        let resp = DownloadResp {
            data: bin_data,
            name: bin_name,
        };

        Ok((resp, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct {{ req_type }} {
    {{ req_fields_path }}
    {{ req_fields_query }}
    {{ req_fields_body }}
}

{{ req_fields_body_sub_type }}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::{ {{ service_snake_case }}::{{ serviceUpperCamelCase  }}ServiceMocker};
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;
    
    pub trait MockFunc<IClient: HttpClient>:
        Fn({{ req_type }}) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            IClient: HttpClient,
            T: Fn({{ req_type }}) -> Result<(DownloadResp<IClient>, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc<IClient> for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient>
         {{ serviceUpperCamelCase  }}ServiceMocker<'c, IStore, IClient>
    {
        pub fn mock_{{ func_name }}<F: MockFunc<IClient>>(
            &self,
            f: F,
        ) -> MockerBuilder<
            Mocker,
            {{ req_type }},
            DownloadResp<IClient>,
            Arc<dyn MockFunc<IClient>>,
        > {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_{{ func_name }}(
            &self,
            req: &{{ req_type }},
        ) -> Option<Arc<dyn MockFunc<IClient>>> {
            do_mock::<Mocker, {{ req_type }}, DownloadResp<IClient>, Arc<dyn MockFunc<IClient>>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}