//! doc url: <https://open.larkoffice.com/document{{ fullPath }}>
// Code generated by gen_api. DO NOT EDIT.

use serde::{Deserialize, Serialize};

use crate::api::HasBaseResp;
use crate::api::BaseResp;
use crate::core::model::{ApiRequest, CommonResponse, MethodOption, ReqParam, StreamReqParam};
use crate::{
    core::{http_client::HttpClient, store::Store},
    error::Error,
};

use crate::api::gen::{{ service_snake_case }}::{{ serviceUpperCamelCase  }}Service;

impl<'c, IStore: Store, IClient: HttpClient>
    {{ serviceUpperCamelCase  }}Service<'c, IStore, IClient>
{
    /// **api 版本: {{ update_time }}**
    ///
    {{ description }}
    ///
    {{ tips }}
    ///
    /// doc: <https://open.larkoffice.com/document{{ fullPath }}>
    ///
    /// new doc: <https://open.larkoffice.com{{ doc_path }}>
    /// 
    /// api url: <{{ api_url }}>
    pub async fn {{ func_name }}(&self, req: {{ req_type }} ) -> Result<( {{ resp_type }}, CommonResponse), Error> {
        self.{{ func_name }}_with_opt(req, Default::default())
            .await
    }

    /// 参见 [{{ func_name }}](#method.{{ func_name }}) 函数
    pub async fn {{ func_name }}_with_opt(&self, req: {{ req_type }}, method_option: MethodOption ) -> Result<( {{ resp_type }}, CommonResponse), Error> {
        #[cfg(feature = "test-util")]
        {
            if let Some(f) = self.mock().get_mock_{{ func_name }}(&req) {
                tracing::info!("[lark] {{ serviceUpperCamelCase  }}#{{ UpperCamelFunc }} **mocking** api");
                return f(req);
            }
        }

        tracing::info!("[lark] {{ serviceUpperCamelCase }}#{{ UpperCamelFunc }} call api");

        let req = ApiRequest {
            scope: "{{ serviceUpperCamelCase  }}",
            api: "{{ UpperCamelFunc }}",
            method: {{ method }},
            url: String::new() + self.cli.open_base_url.as_ref() + "{{ path }}",
            param_data: req.gen_param(),
            method_option,
            {{ auth }}
            ..Default::default()
        };

        let (resp, common_resp): ({{ resp_type }}Inner, _) = self.cli.do_req(req).await?;
        let data = match resp.data {
            Some(data) => data,
            None => {
                return Err(Error::ErrResponse(anyhow::anyhow!("missing response data"), common_resp));
            }
        };
        Ok((data, common_resp))
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Default, lark_bot_sdk_macros::ApiReqParams)]
pub struct {{ req_type }} {
    {{ req_fields_path }}
    {{ req_fields_query }}
    {{ req_fields_body }}
}

{{ req_fields_body_sub_type }}

#[derive(Debug, Serialize, Deserialize, Clone, lark_bot_sdk_macros::ApiBaseResp)]
struct {{ resp_type }}Inner {
    #[serde(flatten)]
    data: Option<{{ resp_type }}>,
    #[serde(flatten)]
    base: BaseResp,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct {{ resp_type }} {
    {{ resp_fields }}
}

{{ resp_fields_sub_type }}

#[cfg(feature = "test-util")]
mod test_utils {
    use std::sync::Arc;

    use self::gen::{ {{ service_snake_case }}::{{ serviceUpperCamelCase  }}ServiceMocker};
    use crate::core::mocker::*;

    use super::*;
    use crate::api::*;
    use crate::core::model::*;

    pub struct Mocker;

    pub trait MockFunc:
        Fn({{ req_type }}) -> Result<({{ resp_type }}, CommonResponse), Error>
        + Send
        + Sync
        + 'static
    {
    }
    impl<
            T: Fn({{ req_type }}) -> Result<({{ resp_type }}, CommonResponse), Error>
                + Send
                + Sync
                + 'static,
        > MockFunc for T
    {
    }

    impl<'c, IStore: Store, IClient: HttpClient>
        {{ serviceUpperCamelCase  }}ServiceMocker<'c, IStore, IClient>
    {
        pub fn mock_{{ func_name }}<F: MockFunc>(
            &self,
            f: F,
        ) -> MockerBuilder<Mocker, {{ req_type }}, {{ resp_type }}, Arc<dyn MockFunc>> {
            MockerBuilder::new(self.cli.instance_id, Arc::new(f))
        }

        pub(super) fn get_mock_{{ func_name }}(&self, req: &{{ req_type }}) -> Option<Arc<dyn MockFunc>> {
            do_mock::<Mocker, {{ req_type }}, {{ resp_type }}, Arc<dyn MockFunc>>(
                self.cli.instance_id,
                req,
            )
        }
    }
}

#[cfg(feature = "test-util")]
#[cfg(test)]
mod test {
    use crate::{
        api::gen::{{ service_snake_case }}::{{ func_name }}::{
            {{ req_type }}, {{ resp_type }}, {{ resp_type }}Inner,
        },
        core::{model::CommonResponse, Lark},
    };

    #[tokio::test]
    async fn test_mock() {
        let lark = Lark::new("".to_owned(), "".into());
        let mocker = lark
            .{{ service_snake_case }}()
            .mock()
            .mock_{{ func_name }}(|_| Ok(({{ resp_type }}::default(), CommonResponse::default())))
            .build();
        let res = lark.{{ service_snake_case }}().{{ func_name }}({{ req_type }}::default()).await;
        assert!(res.is_ok());
        mocker.clear();
        let res = lark.{{ service_snake_case }}().{{ func_name }}({{ req_type }}::default()).await;
        assert!(res.is_err());
    }
    
    const REQ: &str = {{ req_test_data }};

    #[test]
    fn test_req() {
        if REQ == "{}" {
            return;
        }
        if let Err(e) = serde_json::from_str::<{{ req_test_type_body }}>(REQ) {
            panic!("{}", e);
        }
    }

    const RESP: &str = {{ resp_test_data }};
    #[test]
    fn test_resp() {
        let res = serde_json::from_str::<{{ resp_type }}Inner>(RESP);
        if let Err(e) = res {
            panic!("{}", e);
        }
        if let Ok(v) = serde_json::from_str::<serde_json::Value>(RESP) {
            if v.get("data").is_some() {
                assert!(res.unwrap().data.is_some());
            }
        }
    }
}
